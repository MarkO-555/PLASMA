include "inc/cmdsys.plh"
include "inc/dcgrlib.plh"
include "inc/dcgrutils.plh"
include "inc/args.plh"
include "inc/fileio.plh"
include "inc/matchfiles.plh"
include "inc/lz4.plh"

sysflags resxtxt1|reshgr1|resxhgr1|reshgr2

const page1m = $C054
const page1x = $C055

byte dolz4, quit
char[64] wildfile
var arg, srcfilelist, srcfileptr, srccnt
var entrylist, entrycnt

//
// Copy string with upper case conversion
//
def struprcpy(dst, src)#0
    byte i

    if ^src
        for i = 1 to ^src
            dst->[i] = toupper(src->[i])
        next
    fin
    ^dst = ^src
end

def lz4ReadBlock(ref, flags, dstbuf)#1
    word size[2], block, data, len

    len = fileio:read(ref, @size, 4)
    if len <> 4 or size[0] == 0 or size[1] & $7FFF
        return 0
    fin
    block = heapalloc(size[0])
    if block
        len = fileio:read(ref, block, size[0])
        if len == size[0]
            if size[1] & $8000
                //
                // Uncompressed block
                //
                memcpy(dstbuf, block, len)
            else
                //
                // Decompress block
                //
                len = lz4Unpack(block, block + size[0], dstbuf, $6000)
            fin
            if flags & $10 // Block Checksum
                fileio:read(ref, @size, 4)
            fin
        fin
        heaprelease(block)
    fin
    return len
end
def lz4ReadFrame(filestr)#0
    word dstbuf, len
    byte ref, header[t_lz4header], opt

    ref = fileio:open(filestr)
    if not ref; return; fin
    fileio:read(ref, @header, t_lz4header)
    if header:lz4magic[1] <> $184D or header:lz4magic[0] <> $2204
        puts("Not LZ4 file.\n")
        return
    fin
    if header.lz4FLG & $C0 <> $40
        puts("Wrong LZ4 version.\n")
        return
    fin
    if header.lz4BD & $70 <> $40
        puts("Not 64K block size.\n")
        return
    fin
    opt = 1
    if header.lz4FLG & $08 // Content Size
        opt = opt + 8
    fin
    if header.lz4FLG & $01 // Dictionary ID
        opt = opt + 4
    fin
    fileio:read(ref, heapmark, opt) // Read rest of header and throw away
    dstbuf = $2000
    repeat
        len = lz4ReadBlock(ref, header.lz4FLG, dstbuf)
        dstbuf = dstbuf + len
    until len == 0
    //if header.lz4FLG & $04 // Content Checksun
    //    fileio:read(ref, heapmark, 4)
    //fin
    fileio:close(ref)
end

def screenShow(filestr)#0
    if dolz4
        ^page1x // Decompress AUX+MAIN bytes
        lz4ReadFrame(filestr)
        ^page1m // Copy MAIN half to screen memory
        memcpy($2000, $4000, $2000)
    else
        screenRead(filestr)
    fin
end

def delay_getkey#1
    var busywait

    for busywait = 0 to 30000
        if ^$C000 > 127
            return (^$C010 & $7F) == $03
        fin
    next
    return FALSE
end

arg = argNext(argFirst)
while ^arg and ^(arg + 1) == '-'
    //
    // Process flags
    //
    when toupper(^(arg + 2))
        is 'Z' // decompress screens
            dolz4 = TRUE
            break
    wend
    arg = argNext(arg)
loop
while ^arg
    //
    // Add to source list
    //
    struprcpy(@wildfile, arg)
    entrylist, entrycnt = matchList(NULL, @wildfile)
    if not entrylist
        puts(@wildfile); puts(" ???\n")
    else
        if not srcfilelist
            srcfilelist = entrylist
        fin
        srccnt = srccnt + entrycnt
    fin
    arg = argNext(arg)
loop
if srccnt
    dcgrMode(0)
    if srccnt == 1
        screenShow(srcfilelist)
        getc
    else
        repeat
            entrylist = srcfilelist
            entrycnt  = srccnt
            while entrycnt
                screenShow(entrylist)
                entrylist = entrylist + t_fileentry
                entrycnt--
                quit = delay_getkey
                if quit; break; fin
            loop
        until quit
    fin
    dcgrMode(-1)
    return 0
fin
puts("Usage: DCGRSHOW [-Z] <FILES>+\n")
done
