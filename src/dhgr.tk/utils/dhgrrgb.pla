include "inc/cmdsys.plh"
include "inc/args.plh"
include "inc/fileio.plh"
include "inc/int32.plh"
include "dhgr.tk/inc/dhgrlib.plh"
include "dhgr.tk/inc/dhgrutils.plh"

sysflags resxtxt1|reshgr1|resxhgr1

const RED = 0
const GRN = 1
const BLU = 2
const MAX_RGB = 512
const MIN_RGB = -256

byte[] ntscChroma
// Imperical 0-255     R    G    B
byte[]              =  64,  51, 125 // BLUE
byte[]              =   0, 108,  64 // GREEN
byte[]              =  64,  77,   3 // BROWN
byte[]              = 128,  20,  64 // RED
// Calculated 0-255     R    G    B
byte[]              =  32,  46, 120 // BLUE
byte[]              =   8, 126,  32 // GREEN
byte[]              =  96,  82,   8 // BROWN
byte[]              = 120,   2,  96 // RED
// Idealized 0-255     R    G    B
byte[]              =  64,  48, 128 // BLUE
byte[]              =  16, 112,  64 // GREEN
byte[]              =  64,  80,   0 // BROWN
byte[]              = 112,  16,  64 // RED
byte[12] ntscCycle
byte[256+3] gamma
var rgbErr // Running color error array
byte errDiv = 3
byte lookAhead = 2 // How many pixels to look ahead
var arg

def dist(x1, y1, z1, x2, y2, z2)#2
  res[t_i32] xx, yy

  x2 = x2 - x1
  y2 = y2 - y1
  z2 = z2 - z1
  loadi16(x2)
  muli16(x2)
  store32(@xx)
  loadi16(y2)
  muli16(y2)
  store32(@yy)
  loadi16(z2)
  muli16(z2)
  add32(@yy)
  add32(@xx)
  store32(@xx)
  return xx:[0], xx:[1]
end

def rgbPix(rgbptr, errptr, cx)#1
  var r0, g0, b0
  var r1, g1, b1
  var r2, g2, b2
  var pr1, pg1, pb1
  var pr2, pg2, pb2
  var pr3, pg3, pb3
  var lr0, lg0, lb0
  var lr1, lg1, lb1
  var lr2, lg2, lb2
  var er, eg, eb
  var cr, cg, cb
  byte i
  res[t_i32] pd, d0, d1, d2

  // Previous 3/4 chroma cycle
  i = ((cx - 1) & 3) * 3
  pr1 = ntscCycle[i+RED]
  pg1 = ntscCycle[i+GRN]
  pb1 = ntscCycle[i+BLU]
  i = ((cx - 2) & 3) * 3
  pr2 = pr1 + ntscCycle[i+RED]
  pg2 = pg1 + ntscCycle[i+GRN]
  pb2 = pb1 + ntscCycle[i+BLU]
  i = ((cx - 3) & 3) * 3
  pr3 = pr2 + ntscCycle[i+RED]
  pg3 = pg2 + ntscCycle[i+GRN]
  pb3 = pb2 + ntscCycle[i+BLU]
  // Current chroma cycle
  i = cx * 3
  cr = pr3 + ntscChroma[i+RED]
  cg = pg3 + ntscChroma[i+GRN]
  cb = pb3 + ntscChroma[i+BLU]
  r0 = gamma[rgbptr->RED]]
  g0 = gamma[rgbptr->GRN]]
  b0 = gamma[rgbptr->BLU]]
  if errDiv
    r0 = r0 + errptr=>[RED] / errDiv
    g0 = g0 + errptr=>[GRN] / errDiv
    b0 = b0 + errptr=>[BLU] / errDiv
  fin
  // Calc match if current pixel is zero
  pd:[0], pd:[1] = dist(r0, g0, b0, pr3, pg3, pb3)
  if lookahead > 0 
    // Look ahead in chroma cycle for possible better match for next RGB pixel
    i  = ((cx + 1) & 3) * 3
    lr1 = pr2 + ntscChroma[i+RED]
    lg1 = pg2 + ntscChroma[i+GRN]
    lb1 = pb2 + ntscChroma[i+BLU]
    r1 = gamma[rgbptr->[3+RED]]]
    g1 = gamma[rgbptr->[3+GRN]]]
    b1 = gamma[rgbptr->[3+BLU]]]
    if errDiv
      r1 = r1 + (errptr=>[3+RED] + r0 - lr1) / errDiv
      g1 = g1 + (errptr=>[3+GRN] + g0 - lg1) / errDiv
      b1 = b1 + (errptr=>[3+BLU] + b0 - lb1) / errDiv
    fin
    // Calc match if after next pixel is one
    d1:[0], d1:[1] = dist(r1, g1, b1, lr1, lg1, lb1)
    if lookahead > 1
      // Look ahead in chroma cycle for possible better match for after next RGB pixel
      i  = ((cx + 2) & 3) * 3
      lr2 = pr1 + ntscChroma[i+RED]
      lg2 = pg1 + ntscChroma[i+GRN]
      lb2 = pb1 + ntscChroma[i+BLU]
      r2 = gamma[rgbptr->[6+RED]]]
      g2 = gamma[rgbptr->[6+GRN]]]
      b2 = gamma[rgbptr->[6+BLU]]]
      if errDiv
        r2 = r2 + (errptr=>[6+RED] + r1 - lr2) / errDiv
        g2 = g2 + (errptr=>[6+GRN] + g1 - lg2) / errDiv
        b2 = b2 + (errptr=>[6+BLU] + b1 - lb2) / errDiv
      fin
      // Calc match if next pixel is one
      d2:[0], d2:[1] = dist(r2, g2, b2, lr2, lg2, lb2)
    else
      d2:[0], d2:[1] = pd:[0], pd:[1]
    fin
  else
    d1:[0], d1:[1] = pd:[0], pd:[1]
    d2:[0], d2:[1] = pd:[0], pd:[1]
  fin
  // Calc match if current pixel is one
  d0:[0], d0:[1] = dist(r0, g0, b0, cr, cg, cb)
  i = cx * 3
  load32(@d0)
  if islt32(@pd) and islt32(@d1) and islt32(@d2)
    // RGB better matched with current 1/4 chroma color
    er = r0 - cr
    eg = g0 - cg
    eb = b0 - cb
    ntscCycle[i+RED] = ntscChroma[i+RED]
    ntscCycle[i+GRN] = ntscChroma[i+GRN]
    ntscCycle[i+BLU] = ntscChroma[i+BLU]
    i = 1
  else
    // RGB closer to black
    er = r0 - pr3
    eg = g0 - pg3
    eb = b0 - pb3
    ntscCycle[i+RED] = 0
    ntscCycle[i+GRN] = 0
    ntscCycle[i+BLU] = 0
    i = 0
  fin
  // Propogate error down and forward
  errptr=>[RED] = er
  errptr=>[GRN] = eg
  errptr=>[BLU] = eb
  errptr = errptr + 6
  errptr=>[RED] = er + errptr=>[RED]
  errptr=>[GRN] = eg + errptr=>[GRN]
  errptr=>[BLU] = eb + errptr=>[BLU]
  return i
end

def rgbInit#0
  var i

  if not gamma[1]
    for i = 0 to 255
      loadi16(i)
      muli16(i)
      addi16(127)
      divi16(255)
      store32(@gamma + i)
    next
  else
    for i = 0 to 255
      gamma[i] = i
    next
  fin
  dhgrMode(DHGR_COLOR_MODE)
  // Init error propogation array
  rgbErr = heapalloc(563 * 3 * 2)
  memset(rgberr, 0, 563 * 3 * 2)
  rgberr=>[RED] = -1
  rgberr=>[GRN] = -1
  rgberr=>[BLU] = -1
end

def rgbExit#0
  heaprelease(rgbErr)
  dhgrMode(DHGR_TEXT_MODE)
end

def rgbImportExport(rgbfile, dhgrfile)#0
  byte refnum
  var i, j
  var rgbScanline, rgbptr, errptr

  refnum = fileio:open(rgbfile)
  if refnum
    rgbScanline = heapalloc(563 * 3)
    memset(rgbScanline, 0, 563 * 3)
    if rgbScanline
      rgbInit
      for j = 0 to 191
        fileio:read(refnum, rgbScanline,  560 * 3)
        rgbptr = rgbScanline
        errptr = rgbErr
        for i = 0 to 559
          if rgbPix(rgbptr, errptr, i & 3)
            dhgrSet(i, j)
          fin
          rgbptr = rgbptr + 3
          errptr = errptr + 3 * 2
         // Map dark grey to light grey
          if (i & 3) == 3 and dcgrGetPixel(i >> 2, j) == 5
             dhgrOp(OP_SRC)
             dcgrColor(10)
             dcgrPixel(i >> 2, j)
          fin
        next
        if ^$C000 == $83
          break
        fin
      next
      fileio:close(refnum)
      if ^dhgrfile
        screenWrite(dhgrfile)
      fin
      getc
      rgbExit
    fin
  else
    puts("Unable to read: "); puts(arg); putln
  fin
end

arg = argNext(argFirst)
if ^arg
  while ^(arg + 1) == '-'
    when toupper(^(arg + 2))
      is 'L' // Use linear RGB transfer instead of gama
        gamma[1] = 1
        break
      is 'A' // Set pixel lookahead amount
        if ^arg > 2
          lookahead = ^(arg + 3) - '0'
        fin
        break
      is 'E' // Set error strength
        if ^arg > 2
          errDiv = ^(arg + 3) - '0'
          if ^arg > 3
            errDiv = errDiv * 10 + ^(arg + 4) - '0'
          fin
        fin
        break
      is 'C' // Use calculated chroma values
        for gamma = 0 to 11
          ntscChroma[gamma] = ntscChroma[gamma + 12]
        next
        break
      is 'I' // Use idealized chroma values
        for gamma = 0 to 11
          ntscChroma[gamma] = ntscChroma[gamma + 24]
        next
        break
    wend
    arg = argNext(arg)
  loop
  if ^arg
    rgbImportExport(arg, argNext(arg))
  fin
  return 0
fin
puts("Usage: DHGRRGB [-T] [-L] [-E##] RGBFILE [DHGRFILE]\n")
done
