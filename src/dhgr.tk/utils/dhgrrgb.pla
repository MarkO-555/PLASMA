include "inc/cmdsys.plh"
include "inc/args.plh"
include "inc/fileio.plh"
include "inc/int32.plh"
include "dhgr.tk/inc/dhgrlib.plh"
include "dhgr.tk/inc/dhgrutils.plh"

sysflags resxtxt1|reshgr1|resxhgr1

const RED = 0
const GRN = 1
const BLU = 2
const MAX_RGB = 512
const MIN_RGB = -256
const CHROMA_RESET = $1010 // Magic value for neutral chroma

byte[] ntscChroma
// Emperical 0-255     R    G    B
byte[]              =  64,  51, 125 // BLUE
byte[]              =   0, 108,  64 // GREEN
byte[]              =  64,  77,   3 // BROWN
byte[]              = 128,  20,  64 // RED
// Calculated 0-255     R    G    B
byte[]              =  32,  46, 120 // BLUE
byte[]              =   8, 126,  32 // GREEN
byte[]              =  96,  82,   8 // BROWN
byte[]              = 120,   2,  96 // RED
// Averaged 0-255     R    G    B
byte[]              =  64,  48, 128 // BLUE
byte[]              =  16, 112,  64 // GREEN
byte[]              =  64,  80,   0 // BROWN
byte[]              = 112,  16,  64 // RED
// Idealized 0-255     R    G    B
byte[]              =  64,  64, 128 // BLUE
byte[]              =   0, 128,  64 // GREEN
byte[]              =  64,  64,   0 // BROWN
byte[]              = 128,   0,  64 // RED
byte[] grey2Chroma
//                     R    G    B
//byte[]              =   0,   0,   0 // BLUE
//byte[]              =   0, 108,  64 // GREEN
//byte[]              =   0,   0,   0 // BROWN
//byte[]              = 128,  20,  64 // RED
byte[]              =  64,  51, 125 // BLUE
byte[]              =   0,   0,   0 // GREEN
byte[]              =  64,  77,   3 // BROWN
byte[]              =   0,   0,   0 // RED
byte[12] ntscCycle
byte[256] gamma = 0, 2 // Gamma correction
var brightness
var rgbErr // Running color error array
byte errDiv = 3
var arg

def min(a, b)
  return a < b ?? a :: b
end

def max(a, b)
  return a > b ?? a :: b
end

def dist(x1, y1, z1, x2, y2, z2)#2
  res[t_i32] xx, yy

  x2 = x2 - x1
  y2 = y2 - y1
  z2 = z2 - z1
  loadi16(x2)
  muli16(x2)
  store32(@xx)
  loadi16(y2)
  muli16(y2)
  store32(@yy)
  loadi16(z2)
  muli16(z2)
  add32(@yy)
  add32(@xx)
  store32(@xx)
  return xx:[0], xx:[1]
end

def rgbPix(rgbptr, errptr, cx)#1
  var r, g, b
  var pr1, pg1, pb1
  var pr2, pg2, pb2
  var pr3, pg3, pb3
  var pr, pg, pb
  var cr, cg, cb
  var er, eg, eb
  byte i
  res[t_i32] pd, d0

  // Previous 1/4 chroma cycle
  i = ((cx - 1) & 3) * 3
  pr1 = ntscCycle[i+RED]
  pg1 = ntscCycle[i+GRN]
  pb1 = ntscCycle[i+BLU]
  // Previous 2/4 chroma cycle
  i = ((cx - 2) & 3) * 3
  pr2 = pr1 + ntscCycle[i+RED]
  pg2 = pg1 + ntscCycle[i+GRN]
  pb2 = pb1 + ntscCycle[i+BLU]
  // Previous 3/4 chroma cycle
  i = ((cx - 3) & 3) * 3
  pr3 = pr2 + ntscCycle[i+RED]
  pg3 = pg2 + ntscCycle[i+GRN]
  pb3 = pb2 + ntscCycle[i+BLU]
  // Previous chroma cycle
  i = cx * 3 // ((cx - 4) & 3) * 3
  pr = (pr1 + pr2 + pr3 + ntscCycle[i+RED] / 2) / 4
  pg = (pg1 + pg2 + pg3 + ntscCycle[i+GRN] / 2) / 4
  pb = (pb1 + pb2 + pb3 + ntscCycle[i+BLU] / 2) / 4
  // Current potential chroma cycle
  //i = cx * 3
  cr = pr + ntscChroma[i+RED]
  cg = pg + ntscChroma[i+GRN]
  cb = pb + ntscChroma[i+BLU]
  r = rgbptr->[RED]
  g = rgbptr->[GRN]
  b = rgbptr->[BLU]
  if errDiv
    r = r + errptr=>[RED] / errDiv
    g = g + errptr=>[GRN] / errDiv
    b = b + errptr=>[BLU] / errDiv
  fin
  // Calc match if current potential pixel is zero
  pd:[0], pd:[1] = dist(r, g, b, pr, pg, pb)
  // Calc match if current pixel is one
  //i = cx * 3
  //d0:[0], d0:[1] = dist(r, g, b, cr, cg, cb)
  //load32(@d0)
  dist(r, g, b, cr, cg, cb)
  if islt32(@pd)
    // RGB better matched with potential 1/4 chroma color
    er = r - cr
    eg = g - cg
    eb = b - cb
    ntscCycle[i+RED] = ntscChroma[i+RED]
    ntscCycle[i+GRN] = ntscChroma[i+GRN]
    ntscCycle[i+BLU] = ntscChroma[i+BLU]
    i = 1
  else
    // RGB closer to previous 3/4 chroma color
    er = r - pr
    eg = g - pg
    eb = b - pb
    ntscCycle[i+RED] = 0
    ntscCycle[i+GRN] = 0
    ntscCycle[i+BLU] = 0
    i = 0
  fin
  // Propogate error down and forward
  errptr=>[RED] = er
  errptr=>[GRN] = eg
  errptr=>[BLU] = eb
  errptr = errptr + 6
  errptr=>[RED] = er + errptr=>[RED]
  errptr=>[GRN] = eg + errptr=>[GRN]
  errptr=>[BLU] = eb + errptr=>[BLU]
  return i
end

def rgbInit#0
  var i
  res[t_i32] g32

  when gamma[1]
    is 255 // (i + 1 / i^2) / 2
      for i = 0 to 255
        loadi16(i)
        muli16(i)
        addi16(127)
        divi16(255)
        neg32
        addi16(255)
        addi16(255 - i)
        divi16(2)
        store32(@g32)
        gamma[255 - i] = g32
      next
      break
    is 254 // 1 / i^2
      for i = 0 to 255
        loadi16(i)
        muli16(i)
        addi16(127)
        divi16(255)
        neg32
        addi16(255)
        store32(@g32)
        gamma[255 - i] = g32
      next
      break
    is 2 // i^2
      for i = 0 to 255
        loadi16(i)
        muli16(i)
        addi16(127)
        divi16(255)
        store32(@g32)
        gamma[i] = g32
      next
      break
    is 1 // (i + i^2) / 2
      for i = 0 to 255
        loadi16(i)
        muli16(i)
        addi16(127)
        divi16(255)
        addi16(i)
        divi16(2)
        store32(@g32)
        gamma[i] = g32
      next
      break
    otherwise // i
      for i = 0 to 255
        gamma[i] = i
      next
  wend
  gamma[0]   = 0
  gamma[255] = 255
  if brightness
    for i = 0 to 255
      gamma[i] = max(0, min(255, gamma[i] + brightness))
    next
  fin
  // Make up for additional 1/4 chroma cycle
  for i = 0 to 11
    ntscChroma[i] = (ntscChroma[i] * 4) / 3
  next
  dhgrMode(DHGR_COLOR_MODE)
  // Init error propogation array
  rgbErr = heapalloc(563 * 3 * 2)
  memset(rgberr, 0, 563 * 3 * 2)
  rgberr=>[RED] = -1
  rgberr=>[GRN] = -1
  rgberr=>[BLU] = -1
end

def rgbExit#0
  heaprelease(rgbErr)
  dhgrMode(DHGR_TEXT_MODE)
end

def rgbImportExport(rgbfile, dhgrfile)#0
  byte refnum
  var i, j
  var rgbScanline, rgbptr, errptr

  refnum = fileio:open(rgbfile)
  if refnum
    rgbScanline = heapalloc(563 * 3)
    memset(rgbScanline, 0, 563 * 3)
    if rgbScanline
      rgbInit
      for j = 0 to 191
        fileio:read(refnum, rgbScanline,  560 * 3)
        for i = 0 to 559*3 step 3
          rgbScanline->[i+RED] = gamma[rgbScanline->[i+RED]]
          rgbScanline->[i+GRN] = gamma[rgbScanline->[i+GRN]]
          rgbScanline->[i+BLU] = gamma[rgbScanline->[i+BLU]]
        next
        memset(@ntscCycle, CHROMA_RESET, 12) // Reset chroma cycle
        rgbptr = rgbScanline
        errptr = rgbErr
        for i = 0 to 559
          // Calc best match
          if rgbPix(rgbptr, errptr, i & 3)
            dhgrSet(i, j)
          fin
          // Map GREY1 -> GREY2
          if (i & 3) == 3 and dcgrGetPixel(i >> 2, j) == 5
            dhgrOp(OP_SRC)
            dcgrColor(10)
            dcgrPixel(i >> 2, j)
            memcpy(@ntscCycle, @grey2Chroma, 12) // GREY2 chroma cycle
          fin
          rgbptr = rgbptr + 3
          errptr = errptr + 3 * 2
        next
        if ^$C000 == $83
          break
        fin
      next
      fileio:close(refnum)
      if ^dhgrfile
        screenWrite(dhgrfile)
      fin
      getc
      rgbExit
    fin
  else
    puts("Unable to read: "); puts(arg); putln
  fin
end

def atoi(strptr)
  var num, len, sign

  sign = 1
  num = 0
  len = ^strptr
  strptr++
  if ^strptr == '-'
    sign = -1
    strptr++
    len--
  fin
  while len and ^strptr >= '0' and ^strptr <= '9'
    num = num * 10 + ^strptr - '0'
    strptr++
    len--
  loop
  return num * sign
end

arg = argNext(argFirst)
if ^arg
  while ^(arg + 1) == '-'
    when toupper(^(arg + 2))
      is 'B' // Set brightness amount
        if ^arg > 2
          ^(arg + 2) = ^arg - 2
          brightness = atoi(arg + 2)
        fin
        break
      is 'C' // Set chroma values - Empirical is default
        when toupper(^(arg + 3))
          is 'C' // Calculated chroma cycle
            for gamma = 0 to 11
              ntscChroma[gamma] = ntscChroma[gamma + 12]
           next
            break
          is 'A' // Averageded chroma values
            for gamma = 0 to 11
              ntscChroma[gamma] = ntscChroma[gamma + 24]
            next
            break
          is 'I' // Idealized chroma values
            for gamma = 0 to 11
              ntscChroma[gamma] = ntscChroma[gamma + 36]
            next
            break
        wend
        break
      is 'E' // Set error strength
        if ^arg > 2
          errDiv = ^(arg + 3) - '0'
          if ^arg > 3
            errDiv = errDiv * 10 + ^(arg + 4) - '0'
          fin
        fin
        break
      is 'G' // Set gamma amount
        if ^arg > 2
          ^(arg + 2) = ^arg - 2
          gamma[1] = atoi(arg + 2)
        fin
        break
    wend
    arg = argNext(arg)
  loop
  if ^arg
    rgbImportExport(arg, argNext(arg))
  fin
  return 0
fin
puts("Usage: DHGRRGB [-G#] [-B#] [-A#] [-T#] [-E#] [-C<C,I>] RGBFILE [DHGRFILE]\n")
done
