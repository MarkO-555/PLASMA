; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/conio.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/conio.pla: 0001: 
; libsrc/apple/conio.pla: 0002: include "inc/conio.plh"
; inc/conio.plh: 0001: import conio
; inc/conio.plh: 0002:     const NORMAL   = $FF
					; NORMAL = 255
; inc/conio.plh: 0003:     const INVERSE  = $3F
					; INVERSE = 63
; inc/conio.plh: 0004:     const FLASH    = $7F
					; FLASH = 127
; inc/conio.plh: 0005:     const ECHO_ON  = $80
					; ECHO_ON = 128
; inc/conio.plh: 0006:     const ECHO_OFF = $00
					; ECHO_OFF = 0
; inc/conio.plh: 0007:     struc t_conio
; inc/conio.plh: 0008:         word keypressed
					; keypressed = 0
; inc/conio.plh: 0009:         word getkey
					; getkey = 2
; inc/conio.plh: 0010:         word echo
					; echo = 4
; inc/conio.plh: 0011:         word home
					; home = 6
; inc/conio.plh: 0012:         word gotoxy
					; gotoxy = 8
; inc/conio.plh: 0013:         word viewport
					; viewport = 10
; inc/conio.plh: 0014:         word texttype
					; texttype = 12
; inc/conio.plh: 0015:         word textmode
					; textmode = 14
; inc/conio.plh: 0016:         word grmode
					; grmode = 16
; inc/conio.plh: 0017:         word grcolor
					; grcolor = 18
; inc/conio.plh: 0018:         word grplot
					; grplot = 20
; inc/conio.plh: 0019:         word tone
					; tone = 22
; inc/conio.plh: 0020:         word rnd
					; rnd = 24
; inc/conio.plh: 0021:     end
					; t_conio = 26
; inc/conio.plh: 0022: end
; libsrc/apple/conio.pla: 0002: 
; libsrc/apple/conio.pla: 0003: sysflags nojitc // Keep tone() from compiling and sounding different
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_SYSFLAGS	=	$0100		; SYSTEM FLAGS
; libsrc/apple/conio.pla: 0004: //
; libsrc/apple/conio.pla: 0005: // Handy constants.
; libsrc/apple/conio.pla: 0006: //
; libsrc/apple/conio.pla: 0007: const FULLMODE     = 0
					; FULLMODE = 0
; libsrc/apple/conio.pla: 0008: const MIXMODE      = 1
					; MIXMODE = 1
; libsrc/apple/conio.pla: 0009: //
; libsrc/apple/conio.pla: 0010: // Apple II ZP locations.
; libsrc/apple/conio.pla: 0011: //
; libsrc/apple/conio.pla: 0012: const a2rndnum = $4E // ZP location of RND
					; a2rndnum = 78
; libsrc/apple/conio.pla: 0013: const a2rndl   = $4E
					; a2rndl = 78
; libsrc/apple/conio.pla: 0014: const a2rndh   = $4F
					; a2rndh = 79
; libsrc/apple/conio.pla: 0015: //
; libsrc/apple/conio.pla: 0016: // Apple II hardware constants.
; libsrc/apple/conio.pla: 0017: //
; libsrc/apple/conio.pla: 0018: const speaker      = $C030
					; speaker = 49200
; libsrc/apple/conio.pla: 0019: const showgraphics = $C050
					; showgraphics = 49232
; libsrc/apple/conio.pla: 0020: const showtext     = $C051
					; showtext = 49233
; libsrc/apple/conio.pla: 0021: const showfull     = $C052
					; showfull = 49234
; libsrc/apple/conio.pla: 0022: const showmix      = $C053
					; showmix = 49235
; libsrc/apple/conio.pla: 0023: const showpage1    = $C054
					; showpage1 = 49236
; libsrc/apple/conio.pla: 0024: const showpage2    = $C055
					; showpage2 = 49237
; libsrc/apple/conio.pla: 0025: const showlores    = $C056
					; showlores = 49238
; libsrc/apple/conio.pla: 0026: const showhires    = $C057
					; showhires = 49239
; libsrc/apple/conio.pla: 0027: const keyboard     = $C000
					; keyboard = 49152
; libsrc/apple/conio.pla: 0028: const keystrobe    = $C010
					; keystrobe = 49168
; libsrc/apple/conio.pla: 0029: const hgr1         = $2000
					; hgr1 = 8192
; libsrc/apple/conio.pla: 0030: const hgr2         = $4000
					; hgr2 = 16384
; libsrc/apple/conio.pla: 0031: const page1        = 0
					; page1 = 0
; libsrc/apple/conio.pla: 0032: const page2        = 1
					; page2 = 1
; libsrc/apple/conio.pla: 0033: //
; libsrc/apple/conio.pla: 0034: // Apple III hardware constants.
; libsrc/apple/conio.pla: 0035: //
; libsrc/apple/conio.pla: 0036: const ENV_REG      = $FFDF
					; ENV_REG = 65503
; libsrc/apple/conio.pla: 0037: //
; libsrc/apple/conio.pla: 0038: // Predefined functions.
; libsrc/apple/conio.pla: 0039: //
; libsrc/apple/conio.pla: 0040: predef a2keypressed,a2home,a12echo(state),a2gotoxy(x,y),a2viewport(left, top, width, height),a2texttype(type)
; libsrc/apple/conio.pla: 0041: predef a2textmode(cols),a2grmode(mix),a2grcolor(color),a2grplot(x,y),a2tone(duration, delay),a2rnd
; libsrc/apple/conio.pla: 0042: //
; libsrc/apple/conio.pla: 0043: // Exported function table.
; libsrc/apple/conio.pla: 0044: //
; libsrc/apple/conio.pla: 0045: word conio[]
_D040 					; conio[]
; libsrc/apple/conio.pla: 0046: //
; libsrc/apple/conio.pla: 0047: // Function pointers.
; libsrc/apple/conio.pla: 0048: //
; libsrc/apple/conio.pla: 0049: word = @a2keypressed
_F000 	!WORD	_P000
; libsrc/apple/conio.pla: 0050: word = @getc
_F001 	!WORD	0			; _X006
; libsrc/apple/conio.pla: 0051: word = @a12echo
_F002 	!WORD	_P002
; libsrc/apple/conio.pla: 0052: word = @a2home
_F003 	!WORD	_P001
; libsrc/apple/conio.pla: 0053: word = @a2gotoxy
_F004 	!WORD	_P003
; libsrc/apple/conio.pla: 0054: word = @a2viewport
_F005 	!WORD	_P004
; libsrc/apple/conio.pla: 0055: word = @a2texttype
_F006 	!WORD	_P005
; libsrc/apple/conio.pla: 0056: word = @a2textmode
_F007 	!WORD	_P006
; libsrc/apple/conio.pla: 0057: word = @a2grmode
_F008 	!WORD	_P007
; libsrc/apple/conio.pla: 0058: word = @a2grcolor
_F009 	!WORD	_P008
; libsrc/apple/conio.pla: 0059: word = @a2grplot
_F010 	!WORD	_P009
; libsrc/apple/conio.pla: 0060: word = @a2tone
_F011 	!WORD	_P010
; libsrc/apple/conio.pla: 0061: word = @a2rnd
_F012 	!WORD	_P011
; libsrc/apple/conio.pla: 0062: //
; libsrc/apple/conio.pla: 0063: // Screen row address arrays.
; libsrc/apple/conio.pla: 0064: //
; libsrc/apple/conio.pla: 0065: word txt1scrn[]     = $0400,$0480,$0500,$0580,$0600,$0680,$0700,$0780
_D041 					; txt1scrn[]     = $0400,$0480,$0500,$0580,$0600,$0680,$0700,$0780
	!WORD	$0400
	!WORD	$0480
	!WORD	$0500
	!WORD	$0580
	!WORD	$0600
	!WORD	$0680
	!WORD	$0700
	!WORD	$0780
; libsrc/apple/conio.pla: 0066: word                = $0428,$04A8,$0528,$05A8,$0628,$06A8,$0728,$07A8
	!WORD	$0428
	!WORD	$04A8
	!WORD	$0528
	!WORD	$05A8
	!WORD	$0628
	!WORD	$06A8
	!WORD	$0728
	!WORD	$07A8
; libsrc/apple/conio.pla: 0067: word                = $0450,$04D0,$0550,$05D0,$0650,$06D0,$0750,$07D0
	!WORD	$0450
	!WORD	$04D0
	!WORD	$0550
	!WORD	$05D0
	!WORD	$0650
	!WORD	$06D0
	!WORD	$0750
	!WORD	$07D0
; libsrc/apple/conio.pla: 0068: word txt2scrn[]     = $0800,$0880,$0900,$0980,$0A00,$0A80,$0B00,$0B80
_D042 					; txt2scrn[]     = $0800,$0880,$0900,$0980,$0A00,$0A80,$0B00,$0B80
	!WORD	$0800
	!WORD	$0880
	!WORD	$0900
	!WORD	$0980
	!WORD	$0A00
	!WORD	$0A80
	!WORD	$0B00
	!WORD	$0B80
; libsrc/apple/conio.pla: 0069: word                = $0828,$08A8,$0928,$09A8,$0A28,$0AA8,$0B28,$0BA8
	!WORD	$0828
	!WORD	$08A8
	!WORD	$0928
	!WORD	$09A8
	!WORD	$0A28
	!WORD	$0AA8
	!WORD	$0B28
	!WORD	$0BA8
; libsrc/apple/conio.pla: 0070: word                = $0850,$08D0,$0950,$09D0,$0A50,$0AD0,$0B50,$0BD0
	!WORD	$0850
	!WORD	$08D0
	!WORD	$0950
	!WORD	$09D0
	!WORD	$0A50
	!WORD	$0AD0
	!WORD	$0B50
	!WORD	$0BD0
; libsrc/apple/conio.pla: 0071: //
; libsrc/apple/conio.pla: 0072: // Text screen parameters.
; libsrc/apple/conio.pla: 0073: //
; libsrc/apple/conio.pla: 0074: //byte textcols = 40
; libsrc/apple/conio.pla: 0075: //byte curshpos = 0
; libsrc/apple/conio.pla: 0076: //byte cursvpos = 0
; libsrc/apple/conio.pla: 0077: //
; libsrc/apple/conio.pla: 0078: // Apple 3 console codes.
; libsrc/apple/conio.pla: 0079: //
; libsrc/apple/conio.pla: 0080: byte textbwmode[]   = 2, 16, 0
_D043 					; textbwmode[]   = 2, 16, 0
	!BYTE	$02
	!BYTE	$10
	!BYTE	$00
; libsrc/apple/conio.pla: 0081: byte textclrmode[]  = 2, 16, 1
_D044 					; textclrmode[]  = 2, 16, 1
	!BYTE	$02
	!BYTE	$10
	!BYTE	$01
; libsrc/apple/conio.pla: 0082: byte grcharset[]    = 1, 0, $7F, $7F, $7F, $7F, $00, $00, $00, $00
_D045 					; grcharset[]    = 1, 0, $7F, $7F, $7F, $7F, $00, $00, $00, $00
	!BYTE	$01
	!BYTE	$00
	!BYTE	$7F
	!BYTE	$7F
	!BYTE	$7F
	!BYTE	$7F
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
; libsrc/apple/conio.pla: 0083: //
; libsrc/apple/conio.pla: 0084: // Random number for Apple 1 and III.
; libsrc/apple/conio.pla: 0085: //
; libsrc/apple/conio.pla: 0086: word randnum = 12345
_D046 					; randnum = 12345
	!WORD	$3039
; libsrc/apple/conio.pla: 0087: //
; libsrc/apple/conio.pla: 0088: // Native  routines.
; libsrc/apple/conio.pla: 0089: //
; libsrc/apple/conio.pla: 0090: asm equates
_A000 					; equates()
; libsrc/apple/conio.pla: 0091:     !SOURCE "vmsrc/plvmzp.inc"
    !SOURCE "vmsrc/plvmzp.inc"
; libsrc/apple/conio.pla: 0092: end
; libsrc/apple/conio.pla: 0093: //
; libsrc/apple/conio.pla: 0094: // def grscrn(rowaddrs)
; libsrc/apple/conio.pla: 0095: //
; libsrc/apple/conio.pla: 0096: asm a2grscrn(rowaddrs)
_A001 					; a2grscrn()
; libsrc/apple/conio.pla: 0097: GRSCRN  =   $26
GRSCRN  =   $26
; libsrc/apple/conio.pla: 0098: GRSCRNL =   GRSCRN
GRSCRNL =   GRSCRN
; libsrc/apple/conio.pla: 0099: GRSCRNH =   GRSCRNL+1
GRSCRNH =   GRSCRNL+1
; libsrc/apple/conio.pla: 0100:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/apple/conio.pla: 0101:     STA GRSCRNL
    STA GRSCRNL
; libsrc/apple/conio.pla: 0102:     LDA ESTKH,X
    LDA ESTKH,X
; libsrc/apple/conio.pla: 0103:     STA GRSCRNH
    STA GRSCRNH
; libsrc/apple/conio.pla: 0104:     RTS
    RTS
; libsrc/apple/conio.pla: 0105: end
; libsrc/apple/conio.pla: 0106: //
; libsrc/apple/conio.pla: 0107: // def grcolor(color)
; libsrc/apple/conio.pla: 0108: //
; libsrc/apple/conio.pla: 0109: asm a2grcolor(color)
_P008 					; a2grcolor(color)()
_A002 					; a2grcolor()
; libsrc/apple/conio.pla: 0110: GRCLR   =   $30
GRCLR   =   $30
; libsrc/apple/conio.pla: 0111:     LDA #$0F
    LDA #$0F
; libsrc/apple/conio.pla: 0112:     AND ESTKL,X
    AND ESTKL,X
; libsrc/apple/conio.pla: 0113:     STA GRCLR
    STA GRCLR
; libsrc/apple/conio.pla: 0114:     ASL
    ASL
; libsrc/apple/conio.pla: 0115:     ASL
    ASL
; libsrc/apple/conio.pla: 0116:     ASL
    ASL
; libsrc/apple/conio.pla: 0117:     ASL
    ASL
; libsrc/apple/conio.pla: 0118:     ORA GRCLR
    ORA GRCLR
; libsrc/apple/conio.pla: 0119:     STA GRCLR
    STA GRCLR
; libsrc/apple/conio.pla: 0120:     RTS
    RTS
; libsrc/apple/conio.pla: 0121: end
; libsrc/apple/conio.pla: 0122: //
; libsrc/apple/conio.pla: 0123: // def grplot(x, y)
; libsrc/apple/conio.pla: 0124: //
; libsrc/apple/conio.pla: 0125: asm a2grplot(x, y)
_P009 					; a2grplot(x, y)()
_A003 					; a2grplot()
; libsrc/apple/conio.pla: 0126:     STY IPY
    STY IPY
; libsrc/apple/conio.pla: 0127:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/apple/conio.pla: 0128:     AND #$FE
    AND #$FE
; libsrc/apple/conio.pla: 0129:     CMP ESTKL,X
    CMP ESTKL,X
; libsrc/apple/conio.pla: 0130:     TAY
    TAY
; libsrc/apple/conio.pla: 0131:     LDA (GRSCRN),Y
    LDA (GRSCRN),Y
; libsrc/apple/conio.pla: 0132:     STA DSTL
    STA DSTL
; libsrc/apple/conio.pla: 0133:     INY
    INY
; libsrc/apple/conio.pla: 0134:     LDA (GRSCRN),Y
    LDA (GRSCRN),Y
; libsrc/apple/conio.pla: 0135:     STA DSTH
    STA DSTH
; libsrc/apple/conio.pla: 0136:     LDY ESTKL+1,X
    LDY ESTKL+1,X
; libsrc/apple/conio.pla: 0137:     LDA (DST),Y
    LDA (DST),Y
; libsrc/apple/conio.pla: 0138:     EOR GRCLR
    EOR GRCLR
; libsrc/apple/conio.pla: 0139:     STA TMPL
    STA TMPL
; libsrc/apple/conio.pla: 0140:     LDA #$FF
    LDA #$FF
; libsrc/apple/conio.pla: 0141:     ADC #$00
    ADC #$00
; libsrc/apple/conio.pla: 0142:     EOR #$F0
    EOR #$F0
; libsrc/apple/conio.pla: 0143:     AND TMPL
    AND TMPL
; libsrc/apple/conio.pla: 0144:     EOR GRCLR
    EOR GRCLR
; libsrc/apple/conio.pla: 0145:     STA (DST),Y
    STA (DST),Y
; libsrc/apple/conio.pla: 0146:     LDY IPY
    LDY IPY
; libsrc/apple/conio.pla: 0147:     INX
    INX
; libsrc/apple/conio.pla: 0148:     RTS
    RTS
; libsrc/apple/conio.pla: 0149: end
; libsrc/apple/conio.pla: 0150: //
; libsrc/apple/conio.pla: 0151: // Apple 1 routines.
; libsrc/apple/conio.pla: 0152: //
; libsrc/apple/conio.pla: 0153: def a1keypressed
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_C000 					; a1keypressed()
; libsrc/apple/conio.pla: 0154:     return ^$D011 >= 128
	!BYTE	$68,$11,$D0		; LAB	53265
	!BYTE	$2A,$80			; CB	128
	!BYTE	$48			; ISGE
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0155: end
; libsrc/apple/conio.pla: 0156: def a12echo(state)
					; state -> [0]
_P002 					; a12echo(state)()
_C001 					; a12echo()
; libsrc/apple/conio.pla: 0157:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0158: end
; libsrc/apple/conio.pla: 0159: def a1home
_C002 					; a1home()
; libsrc/apple/conio.pla: 0160:     byte l
					; l -> [0]
; libsrc/apple/conio.pla: 0161:     for l = 0 to 23
	!BYTE	$58,$01,$00		; ENTER	1,0
	!BYTE	$2A,$17			; CB	23
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/apple/conio.pla: 0162:         putln
; libsrc/apple/conio.pla: 0163:     next
	!BYTE	$54			; CALL	_X003
_F013 	!WORD	0		
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/apple/conio.pla: 0164:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$01			; LEAVE	1
; libsrc/apple/conio.pla: 0165: end
; libsrc/apple/conio.pla: 0166: def a1gotoxy(x, y)
					; x -> [0]
					; y -> [2]
_C003 					; a1gotoxy()
; libsrc/apple/conio.pla: 0167:     //curshpos = x
; libsrc/apple/conio.pla: 0168:     //cursvpos = y
; libsrc/apple/conio.pla: 0169:     putln
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/conio.pla: 0170:     while x
	!BYTE	$54			; CALL	_X003
_F014 	!WORD	0		
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B004 
; libsrc/apple/conio.pla: 0171:         putc(' ')
; libsrc/apple/conio.pla: 0172:         x = x - 1
; libsrc/apple/conio.pla: 0173:     loop
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F015 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
	!BYTE	$76,$00			; SLW	[0]
_B006 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B004
	!WORD	_B004-*
_B005 
; libsrc/apple/conio.pla: 0174:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/conio.pla: 0175: end
; libsrc/apple/conio.pla: 0176: def a1viewport(left, top, width, height)
					; left -> [0]
					; top -> [2]
					; width -> [4]
					; height -> [6]
_C004 					; a1viewport()
; libsrc/apple/conio.pla: 0177:     return 0
	!BYTE	$58,$08,$04		; ENTER	8,4
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/conio.pla: 0178: end
; libsrc/apple/conio.pla: 0179: def a1texttype(type)
					; type -> [0]
_C005 					; a1texttype()
; libsrc/apple/conio.pla: 0180:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0181: end
; libsrc/apple/conio.pla: 0182: def a1textmode(columns)
					; columns -> [0]
_C006 					; a1textmode()
; libsrc/apple/conio.pla: 0183:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0184: end
; libsrc/apple/conio.pla: 0185: def a1grmode(mix)
					; mix -> [0]
_C007 					; a1grmode()
; libsrc/apple/conio.pla: 0186:     return 0 // not supported
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0187: end
; libsrc/apple/conio.pla: 0188: def a1tone(duration, delay)
					; duration -> [0]
					; delay -> [2]
_C008 					; a1tone()
; libsrc/apple/conio.pla: 0189:     byte i
					; i -> [4]
; libsrc/apple/conio.pla: 0190: 
; libsrc/apple/conio.pla: 0191:     while duration
	!BYTE	$58,$05,$02		; ENTER	5,2
	!BYTE	$50			; BRNCH	_B009
	!WORD	_B009-*
_B007 
; libsrc/apple/conio.pla: 0192:         for i = delay downto 0; next
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$A2			; BRLT	_B010
	!WORD	_B010-*
_B011 
	!BYTE	$6C,$04			; DLB	[4]
_B012 
	!BYTE	$A8			; DECBRGE	_B011
	!WORD	_B011-*
_B010 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/apple/conio.pla: 0193:         duration--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
; libsrc/apple/conio.pla: 0194:     loop
	!BYTE	$76,$00			; SLW	[0]
_B009 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B007
	!WORD	_B007-*
_B008 
; libsrc/apple/conio.pla: 0195:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/conio.pla: 0196: end
; libsrc/apple/conio.pla: 0197: //
; libsrc/apple/conio.pla: 0198: // Apple II routines.
; libsrc/apple/conio.pla: 0199: //
; libsrc/apple/conio.pla: 0200: def a2keypressed
_P000 					; a2keypressed()
_C009 					; a2keypressed()
; libsrc/apple/conio.pla: 0201:     return ^keyboard >= 128
	!BYTE	$68,$00,$C0		; LAB	49152
	!BYTE	$2A,$80			; CB	128
	!BYTE	$48			; ISGE
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0202: end
; libsrc/apple/conio.pla: 0203: def a2home
_P001 					; a2home()
_C010 					; a2home()
; libsrc/apple/conio.pla: 0204:     //curshpos = 0
; libsrc/apple/conio.pla: 0205:     //cursvpos = 0
; libsrc/apple/conio.pla: 0206:     return call($FC58, 0, 0, 0, 0) // home()
	!BYTE	$2C,$58,$FC		; CW	64600
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F016 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0207: end
; libsrc/apple/conio.pla: 0208: def a2gotoxy(x, y)
					; x -> [0]
					; y -> [2]
_P003 					; a2gotoxy(x, y)()
_C011 					; a2gotoxy()
; libsrc/apple/conio.pla: 0209:     //curshpos = x
; libsrc/apple/conio.pla: 0210:     //cursvpos = y
; libsrc/apple/conio.pla: 0211:     ^$24 = x + ^$20
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/conio.pla: 0212:     return call($FB5B, y + ^$22, 0, 0, 0)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B4,$20,$00		; ADDAB	32
	!BYTE	$78,$24,$00		; SAB	36
	!BYTE	$2C,$5B,$FB		; CW	64347
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B4,$22,$00		; ADDAB	34
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F017 	!WORD	0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/conio.pla: 0213: end
; libsrc/apple/conio.pla: 0214: def a2viewport(left, top, width, height)
					; left -> [0]
					; top -> [2]
					; width -> [4]
					; height -> [6]
_P004 					; a2viewport(left, top, width, height)()
_C012 					; a2viewport()
; libsrc/apple/conio.pla: 0215:     if !width or !height
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/conio.pla: 0216:         left   = 0
; libsrc/apple/conio.pla: 0217:         top    = 0
; libsrc/apple/conio.pla: 0218:         width  = 40
; libsrc/apple/conio.pla: 0219:         height = 24
; libsrc/apple/conio.pla: 0220:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B013
	!WORD	_B013-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$80			; NOT
_B013 
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$00			; CN	0
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2A,$28			; CB	40
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$2A,$18			; CB	24
	!BYTE	$76,$06			; SLW	[6]
_B014 
_B015 
; libsrc/apple/conio.pla: 0221:     ^$20 = left
; libsrc/apple/conio.pla: 0222:     ^$21 = width
; libsrc/apple/conio.pla: 0223:     ^$22 = top
; libsrc/apple/conio.pla: 0224:     ^$23 = height + top - 1
; libsrc/apple/conio.pla: 0225:     return a2gotoxy(0, 0)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78,$20,$00		; SAB	32
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$78,$21,$00		; SAB	33
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$78,$22,$00		; SAB	34
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$8E			; DECR
	!BYTE	$78,$23,$00		; SAB	35
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C011
_F018 	!WORD	_C011		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/conio.pla: 0226: end
; libsrc/apple/conio.pla: 0227: def a2texttype(type)
					; type -> [0]
_P005 					; a2texttype(type)()
_C013 					; a2texttype()
; libsrc/apple/conio.pla: 0228:     ^$32 = type
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/conio.pla: 0229:     return 0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78,$32,$00		; SAB	50
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0230: end
; libsrc/apple/conio.pla: 0231: def a2textmode(columns)
					; columns -> [0]
_P006 					; a2textmode(columns)()
_C014 					; a2textmode()
; libsrc/apple/conio.pla: 0232:     call($FB39, 0, 0, 0, 0) // textmode()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/conio.pla: 0233:     return a2home
	!BYTE	$2C,$39,$FB		; CW	64313
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F019 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_C010
_F020 	!WORD	_C010		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0234: end
; libsrc/apple/conio.pla: 0235: def a2grmode(mix)
					; mix -> [0]
_P007 					; a2grmode(mix)()
_C015 					; a2grmode()
; libsrc/apple/conio.pla: 0236:     call($FB2F, 0, 0, 0, 0) // initmode()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/conio.pla: 0237:     call($FB40, 0, 0, 0, 0) // grmode()
; libsrc/apple/conio.pla: 0238:     if !mix
; libsrc/apple/conio.pla: 0239:         ^showfull
; libsrc/apple/conio.pla: 0240:     fin
	!BYTE	$2C,$2F,$FB		; CW	64303
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F021 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2C,$40,$FB		; CW	64320
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F022 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B016
	!WORD	_B016-*
	!BYTE	$68,$52,$C0		; LAB	49234
	!BYTE	$30			; DROP 
_B016 
_B017 
; libsrc/apple/conio.pla: 0241:     a2home
; libsrc/apple/conio.pla: 0242:     return a2grscrn(@txt1scrn) // point to lo-res screen
	!BYTE	$54			; CALL	_C010
_F023 	!WORD	_C010		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D041+0
_F024 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_A001
_F025 	!WORD	_A001		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0243: end
; libsrc/apple/conio.pla: 0244: def a2tone(duration, delay)
					; duration -> [0]
					; delay -> [2]
_P010 					; a2tone(duration, delay)()
_C016 					; a2tone()
; libsrc/apple/conio.pla: 0245:     byte i
					; i -> [4]
; libsrc/apple/conio.pla: 0246: 
; libsrc/apple/conio.pla: 0247:     while duration
	!BYTE	$58,$05,$02		; ENTER	5,2
	!BYTE	$50			; BRNCH	_B020
	!WORD	_B020-*
_B018 
; libsrc/apple/conio.pla: 0248:         ^speaker // toggle speaker
; libsrc/apple/conio.pla: 0249:         for i = delay downto 0; next
	!BYTE	$68,$30,$C0		; LAB	49200
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$A2			; BRLT	_B021
	!WORD	_B021-*
_B022 
	!BYTE	$6C,$04			; DLB	[4]
_B023 
	!BYTE	$A8			; DECBRGE	_B022
	!WORD	_B022-*
_B021 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/apple/conio.pla: 0250:         duration--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
; libsrc/apple/conio.pla: 0251:     loop
	!BYTE	$76,$00			; SLW	[0]
_B020 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B018
	!WORD	_B018-*
_B019 
; libsrc/apple/conio.pla: 0252:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/conio.pla: 0253: end
; libsrc/apple/conio.pla: 0254: def a2rnd
_P011 					; a2rnd()
_C017 					; a2rnd()
; libsrc/apple/conio.pla: 0255:     *a2rndnum = (*a2rndnum << 1) + *a2rndnum + 123
; libsrc/apple/conio.pla: 0256:     return *a2rndnum & $7FFF
	!BYTE	$6A,$4E,$00		; LAW	78
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$B6,$4E,$00		; ADDAW	78
	!BYTE	$38,$7B			; ADDI	123
	!BYTE	$7E,$4E,$00		; DAW	78
	!BYTE	$2C,$FF,$7F		; CW	32767
	!BYTE	$94			; AND 
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0257: end
; libsrc/apple/conio.pla: 0258: //
; libsrc/apple/conio.pla: 0259: // Apple III routines.
; libsrc/apple/conio.pla: 0260: //
; libsrc/apple/conio.pla: 0261: def dev_control(devnum, code, list)
					; devnum -> [0]
					; code -> [2]
					; list -> [4]
_C018 					; dev_control()
; libsrc/apple/conio.pla: 0262:     byte params[5]
					; params -> [6]
; libsrc/apple/conio.pla: 0263: 
; libsrc/apple/conio.pla: 0264:     params.0 = 3
	!BYTE	$58,$0B,$03		; ENTER	11,3
; libsrc/apple/conio.pla: 0265:     params.1 = devnum
; libsrc/apple/conio.pla: 0266:     params.2 = code
; libsrc/apple/conio.pla: 0267:     params:3 = list
; libsrc/apple/conio.pla: 0268:     return syscall($83, @params)
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$2A,$83			; CB	131
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F026 	!WORD	0		
	!BYTE	$5A,$0B			; LEAVE	11
; libsrc/apple/conio.pla: 0269: end
; libsrc/apple/conio.pla: 0270: def dev_status(devnum, code, list)
					; devnum -> [0]
					; code -> [2]
					; list -> [4]
_C019 					; dev_status()
; libsrc/apple/conio.pla: 0271:     byte params[5]
					; params -> [6]
; libsrc/apple/conio.pla: 0272: 
; libsrc/apple/conio.pla: 0273:     params.0 = 3
	!BYTE	$58,$0B,$03		; ENTER	11,3
; libsrc/apple/conio.pla: 0274:     params.1 = devnum
; libsrc/apple/conio.pla: 0275:     params.2 = code
; libsrc/apple/conio.pla: 0276:     params:3 = list
; libsrc/apple/conio.pla: 0277:     return syscall($82, @params)
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$2A,$82			; CB	130
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F027 	!WORD	0		
	!BYTE	$5A,$0B			; LEAVE	11
; libsrc/apple/conio.pla: 0278: end
; libsrc/apple/conio.pla: 0279: def a3keypressed
_C020 					; a3keypressed()
; libsrc/apple/conio.pla: 0280:     byte count
					; count -> [0]
; libsrc/apple/conio.pla: 0281:     dev_status(cmdsys.devcons, 5, @count)
	!BYTE	$58,$01,$00		; ENTER	1,0
; libsrc/apple/conio.pla: 0282:     return count
	!BYTE	$68			; LAB	_X000+20
_F028 	!WORD	0+20		
	!BYTE	$0A			; CN	5
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$54			; CALL	_C019
_F029 	!WORD	_C019		
	!BYTE	$30			; DROP 
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$5A,$01			; LEAVE	1
; libsrc/apple/conio.pla: 0283: end
; libsrc/apple/conio.pla: 0284: def a3echo(state)
					; state -> [0]
_C021 					; a3echo()
; libsrc/apple/conio.pla: 0285:     return dev_control(cmdsys.devcons, 11, @state)
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$68			; LAB	_X000+20
_F030 	!WORD	0+20		
	!BYTE	$16			; CN	11
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$54			; CALL	_C018
_F031 	!WORD	_C018		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0286: end
; libsrc/apple/conio.pla: 0287: def a3home
_C022 					; a3home()
; libsrc/apple/conio.pla: 0288:     //curshpos = 0
; libsrc/apple/conio.pla: 0289:     //cursvpos = 0
; libsrc/apple/conio.pla: 0290:     putc(28)
; libsrc/apple/conio.pla: 0291:     return 0
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$54			; CALL	_X002
_F032 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0292: end
; libsrc/apple/conio.pla: 0293: def a3gotoxy(x, y)
					; x -> [0]
					; y -> [2]
_C023 					; a3gotoxy()
; libsrc/apple/conio.pla: 0294:     //curshpos = x
; libsrc/apple/conio.pla: 0295:     //cursvpos = y
; libsrc/apple/conio.pla: 0296:     putc(24)
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/conio.pla: 0297:     putc(x)
; libsrc/apple/conio.pla: 0298:     putc(25)
; libsrc/apple/conio.pla: 0299:     putc(y)
; libsrc/apple/conio.pla: 0300:     return 0
	!BYTE	$2A,$18			; CB	24
	!BYTE	$54			; CALL	_X002
_F033 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X002
_F034 	!WORD	0		
	!BYTE	$2A,$19			; CB	25
	!BYTE	$54			; CALL	_X002
_F035 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X002
_F036 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/conio.pla: 0301: end
; libsrc/apple/conio.pla: 0302: def a3viewport(left, top, width, height)
					; left -> [0]
					; top -> [2]
					; width -> [4]
					; height -> [6]
_C024 					; a3viewport()
; libsrc/apple/conio.pla: 0303:     if !width or !height
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/conio.pla: 0304:         //
; libsrc/apple/conio.pla: 0305:         // Reset the full-screen viewport
; libsrc/apple/conio.pla: 0306:         //
; libsrc/apple/conio.pla: 0307:         left   = 0
; libsrc/apple/conio.pla: 0308:         top    = 0
; libsrc/apple/conio.pla: 0309:         width  = 40//textcols
; libsrc/apple/conio.pla: 0310:         height = 24
; libsrc/apple/conio.pla: 0311:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B024
	!WORD	_B024-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$80			; NOT
_B024 
	!BYTE	$4C			; BRFLS	_B025
	!WORD	_B025-*
	!BYTE	$00			; CN	0
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2A,$28			; CB	40
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$2A,$18			; CB	24
	!BYTE	$76,$06			; SLW	[6]
_B025 
_B026 
; libsrc/apple/conio.pla: 0312:     putc(1) // Reset viewport
; libsrc/apple/conio.pla: 0313:     putc(26)
; libsrc/apple/conio.pla: 0314:     putc(left)
; libsrc/apple/conio.pla: 0315:     putc(top)
; libsrc/apple/conio.pla: 0316:     putc(2)
; libsrc/apple/conio.pla: 0317:     putc(26)
; libsrc/apple/conio.pla: 0318:     putc(left + width  - 1)
; libsrc/apple/conio.pla: 0319:     putc(top  + height - 1)
; libsrc/apple/conio.pla: 0320:     putc(3)
; libsrc/apple/conio.pla: 0321:     return a3gotoxy(0, 0)
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X002
_F037 	!WORD	0		
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$54			; CALL	_X002
_F038 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X002
_F039 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X002
_F040 	!WORD	0		
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X002
_F041 	!WORD	0		
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$54			; CALL	_X002
_F042 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$04			; ADDLW	[4]
	!BYTE	$8E			; DECR
	!BYTE	$54			; CALL	_X002
_F043 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$8E			; DECR
	!BYTE	$54			; CALL	_X002
_F044 	!WORD	0		
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X002
_F045 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C023
_F046 	!WORD	_C023		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/conio.pla: 0322: end
; libsrc/apple/conio.pla: 0323: def a3texttype(type)
					; type -> [0]
_C025 					; a3texttype()
; libsrc/apple/conio.pla: 0324:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0325: end
; libsrc/apple/conio.pla: 0326: def a3textmode(columns)
					; columns -> [0]
_C026 					; a3textmode()
; libsrc/apple/conio.pla: 0327:     puts(@textbwmode)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/conio.pla: 0328:     if columns > 40
; libsrc/apple/conio.pla: 0329:         a3viewport(0, 0, 80, 24)
; libsrc/apple/conio.pla: 0330:     else
	!BYTE	$26			; LA	_D043+0
_F047 	!WORD	_D043+0		
	!BYTE	$54			; CALL	_X004
_F048 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2A,$28			; CB	40
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B027
	!WORD	_B027-*
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$2A,$50			; CB	80
	!BYTE	$2A,$18			; CB	24
	!BYTE	$54			; CALL	_C024
_F049 	!WORD	_C024		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B028
	!WORD	_B028-*
_B027 
; libsrc/apple/conio.pla: 0331:         a3viewport(0, 0, 40, 24)
; libsrc/apple/conio.pla: 0332:     fin
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$2A,$28			; CB	40
	!BYTE	$2A,$18			; CB	24
	!BYTE	$54			; CALL	_C024
_F050 	!WORD	_C024		
	!BYTE	$30			; DROP 
_B028 
; libsrc/apple/conio.pla: 0333:     putc(28)
; libsrc/apple/conio.pla: 0334:     return 0
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$54			; CALL	_X002
_F051 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/conio.pla: 0335: end
; libsrc/apple/conio.pla: 0336: def a3grmode(mix)
					; mix -> [0]
_C027 					; a3grmode()
; libsrc/apple/conio.pla: 0337:     byte i
					; i -> [2]
; libsrc/apple/conio.pla: 0338:     if mix
	!BYTE	$58,$03,$01		; ENTER	3,1
; libsrc/apple/conio.pla: 0339:         mix = 19
; libsrc/apple/conio.pla: 0340:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4C			; BRFLS	_B029
	!WORD	_B029-*
	!BYTE	$2A,$13			; CB	19
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
_B029 
; libsrc/apple/conio.pla: 0341:         mix = 23
; libsrc/apple/conio.pla: 0342:     fin
	!BYTE	$2A,$17			; CB	23
	!BYTE	$76,$00			; SLW	[0]
_B030 
; libsrc/apple/conio.pla: 0343:     puts(@textclrmode)
; libsrc/apple/conio.pla: 0344:     dev_control(cmdsys.devcons, 17, @grcharset)
; libsrc/apple/conio.pla: 0345:     a3viewport(0, 20, 40, 4)
; libsrc/apple/conio.pla: 0346:     putc(28)
; libsrc/apple/conio.pla: 0347:     for i = 0 to mix
	!BYTE	$26			; LA	_D044+0
_F052 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_X004
_F053 	!WORD	0		
	!BYTE	$68			; LAB	_X000+20
_F054 	!WORD	0+20		
	!BYTE	$2A,$11			; CB	17
	!BYTE	$26			; LA	_D045+0
_F055 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_C018
_F056 	!WORD	_C018		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$2A,$14			; CB	20
	!BYTE	$2A,$28			; CB	40
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_C024
_F057 	!WORD	_C024		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$54			; CALL	_X002
_F058 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B031
	!WORD	_B031-*
_B032 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/conio.pla: 0348:         memset(txt1scrn[i], $0000, 40) // text  screen
; libsrc/apple/conio.pla: 0349:         memset(txt2scrn[i], $0000, 40) // color screen
; libsrc/apple/conio.pla: 0350:     next
	!BYTE	$26			; LA	_D041+0
_F059 	!WORD	_D041+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$00			; CN	0
	!BYTE	$2A,$28			; CB	40
	!BYTE	$54			; CALL	_X017
_F060 	!WORD	0		
	!BYTE	$26			; LA	_D042+0
_F061 	!WORD	_D042+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$00			; CN	0
	!BYTE	$2A,$28			; CB	40
	!BYTE	$54			; CALL	_X017
_F062 	!WORD	0		
_B033 
	!BYTE	$A4			; INCBRLE	_B032
	!WORD	_B032-*
_B031 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/conio.pla: 0351:     return a2grscrn(@txt2scrn) // point to color screen
	!BYTE	$26			; LA	_D042+0
_F063 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_A001
_F064 	!WORD	_A001		
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/conio.pla: 0352: end
; libsrc/apple/conio.pla: 0353: def a3tone(duration, pitch)
					; duration -> [0]
					; pitch -> [2]
_C028 					; a3tone()
; libsrc/apple/conio.pla: 0354:     byte env
					; env -> [4]
; libsrc/apple/conio.pla: 0355: 
; libsrc/apple/conio.pla: 0356:     env = ^ENV_REG
	!BYTE	$58,$05,$02		; ENTER	5,2
; libsrc/apple/conio.pla: 0357:     ^ENV_REG = env | $C0
; libsrc/apple/conio.pla: 0358:     a2tone(duration, pitch)
; libsrc/apple/conio.pla: 0359:     ^ENV_REG = env
; libsrc/apple/conio.pla: 0360:     return 0
	!BYTE	$68,$DF,$FF		; LAB	65503
	!BYTE	$6C,$04			; DLB	[4]
	!BYTE	$3E,$C0			; ORI	192
	!BYTE	$78,$DF,$FF		; SAB	65503
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C016
_F065 	!WORD	_C016		
	!BYTE	$30			; DROP 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$78,$DF,$FF		; SAB	65503
	!BYTE	$00			; CN	0
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/conio.pla: 0361: end
; libsrc/apple/conio.pla: 0362: //
; libsrc/apple/conio.pla: 0363: // Apple 1 and III combined routines.
; libsrc/apple/conio.pla: 0364: //
; libsrc/apple/conio.pla: 0365: def a13getkey
_C029 					; a13getkey()
; libsrc/apple/conio.pla: 0366:     while not conio:keypressed()
	!BYTE	$50			; BRNCH	_B036
	!WORD	_B036-*
_B034 
; libsrc/apple/conio.pla: 0367:         randnum = randnum + 123
; libsrc/apple/conio.pla: 0368:     loop
	!BYTE	$6A			; LAW	_D046+0
_F066 	!WORD	_D046+0		
	!BYTE	$38,$7B			; ADDI	123
	!BYTE	$7A			; SAW	_D046+0
_F067 	!WORD	_D046+0		
_B036 
	!BYTE	$6A			; LAW	_D040+0
_F068 	!WORD	_D040+0		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
_B035 
; libsrc/apple/conio.pla: 0369:     return getc()
	!BYTE	$54			; CALL	_X006
_F069 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0370: end
; libsrc/apple/conio.pla: 0371: def a13rnd
_C030 					; a13rnd()
; libsrc/apple/conio.pla: 0372:     randnum = (randnum << 1) + randnum + 123
; libsrc/apple/conio.pla: 0373:     return randnum & $7FFF
	!BYTE	$6A			; LAW	_D046+0
_F070 	!WORD	_D046+0		
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$B6			; ADDAW	_D046+0
_F071 	!WORD	_D046+0		
	!BYTE	$38,$7B			; ADDI	123
	!BYTE	$7E			; DAW	_D046+0
_F072 	!WORD	_D046+0		
	!BYTE	$2C,$FF,$7F		; CW	32767
	!BYTE	$94			; AND 
	!BYTE	$5C			; RET
; libsrc/apple/conio.pla: 0374: end
; libsrc/apple/conio.pla: 0375: //
; libsrc/apple/conio.pla: 0376: // Machine specific initialization.
; libsrc/apple/conio.pla: 0377: //
; libsrc/apple/conio.pla: 0378: when MACHID & MACHID_MODEL
_INIT 
	!BYTE	$68			; LAB	_X001+0
_F073 	!WORD	0+0		
	!BYTE	$3C,$C8			; ANDI	200
	!BYTE	$52			; SEL
	!WORD	_B038-*
; libsrc/apple/conio.pla: 0379:     is MACHID_III
_B039 
; libsrc/apple/conio.pla: 0380:         conio:keypressed = @a3keypressed
; libsrc/apple/conio.pla: 0381:         conio:getkey     = @a13getkey
; libsrc/apple/conio.pla: 0382:         conio:echo       = @a3echo
; libsrc/apple/conio.pla: 0383:         conio:home       = @a3home
; libsrc/apple/conio.pla: 0384:         conio:gotoxy     = @a3gotoxy
; libsrc/apple/conio.pla: 0385:         conio:viewport   = @a3viewport
; libsrc/apple/conio.pla: 0386:         conio:texttype   = @a3texttype
; libsrc/apple/conio.pla: 0387:         conio:textmode   = @a3textmode
; libsrc/apple/conio.pla: 0388:         conio:grmode     = @a3grmode
; libsrc/apple/conio.pla: 0389:         conio:tone       = @a3tone
; libsrc/apple/conio.pla: 0390:         conio:rnd        = @a13rnd
; libsrc/apple/conio.pla: 0391:         break
	!BYTE	$26			; LA	_C020+0
_F074 	!WORD	_C020+0		
	!BYTE	$7A			; SAW	_D040+0
_F075 	!WORD	_D040+0		
	!BYTE	$26			; LA	_C029+0
_F076 	!WORD	_C029+0		
	!BYTE	$7A			; SAW	_D040+2
_F077 	!WORD	_D040+2		
	!BYTE	$26			; LA	_C021+0
_F078 	!WORD	_C021+0		
	!BYTE	$7A			; SAW	_D040+4
_F079 	!WORD	_D040+4		
	!BYTE	$26			; LA	_C022+0
_F080 	!WORD	_C022+0		
	!BYTE	$7A			; SAW	_D040+6
_F081 	!WORD	_D040+6		
	!BYTE	$26			; LA	_C023+0
_F082 	!WORD	_C023+0		
	!BYTE	$7A			; SAW	_D040+8
_F083 	!WORD	_D040+8		
	!BYTE	$26			; LA	_C024+0
_F084 	!WORD	_C024+0		
	!BYTE	$7A			; SAW	_D040+10
_F085 	!WORD	_D040+10		
	!BYTE	$26			; LA	_C025+0
_F086 	!WORD	_C025+0		
	!BYTE	$7A			; SAW	_D040+12
_F087 	!WORD	_D040+12		
	!BYTE	$26			; LA	_C026+0
_F088 	!WORD	_C026+0		
	!BYTE	$7A			; SAW	_D040+14
_F089 	!WORD	_D040+14		
	!BYTE	$26			; LA	_C027+0
_F090 	!WORD	_C027+0		
	!BYTE	$7A			; SAW	_D040+16
_F091 	!WORD	_D040+16		
	!BYTE	$26			; LA	_C028+0
_F092 	!WORD	_C028+0		
	!BYTE	$7A			; SAW	_D040+22
_F093 	!WORD	_D040+22		
	!BYTE	$26			; LA	_C030+0
_F094 	!WORD	_C030+0		
	!BYTE	$7A			; SAW	_D040+24
_F095 	!WORD	_D040+24		
	!BYTE	$50			; BRNCH	_B037
	!WORD	_B037-*
; libsrc/apple/conio.pla: 0392:     is MACHID_I
_B040 
; libsrc/apple/conio.pla: 0393:         conio:keypressed = @a1keypressed
; libsrc/apple/conio.pla: 0394:         conio:getkey     = @a13getkey
; libsrc/apple/conio.pla: 0395:         conio:home       = @a1home
; libsrc/apple/conio.pla: 0396:         conio:gotoxy     = @a1gotoxy
; libsrc/apple/conio.pla: 0397:         conio:viewport   = @a1viewport
; libsrc/apple/conio.pla: 0398:         conio:texttype   = @a1texttype
; libsrc/apple/conio.pla: 0399:         conio:textmode   = @a1textmode
; libsrc/apple/conio.pla: 0400:         conio:grmode     = @a1grmode
; libsrc/apple/conio.pla: 0401:         conio:tone       = @a1tone
; libsrc/apple/conio.pla: 0402:         conio:rnd        = @a13rnd
; libsrc/apple/conio.pla: 0403:         break
	!BYTE	$26			; LA	_C000+0
_F096 	!WORD	_C000+0		
	!BYTE	$7A			; SAW	_D040+0
_F097 	!WORD	_D040+0		
	!BYTE	$26			; LA	_C029+0
_F098 	!WORD	_C029+0		
	!BYTE	$7A			; SAW	_D040+2
_F099 	!WORD	_D040+2		
	!BYTE	$26			; LA	_C002+0
_F100 	!WORD	_C002+0		
	!BYTE	$7A			; SAW	_D040+6
_F101 	!WORD	_D040+6		
	!BYTE	$26			; LA	_C003+0
_F102 	!WORD	_C003+0		
	!BYTE	$7A			; SAW	_D040+8
_F103 	!WORD	_D040+8		
	!BYTE	$26			; LA	_C004+0
_F104 	!WORD	_C004+0		
	!BYTE	$7A			; SAW	_D040+10
_F105 	!WORD	_D040+10		
	!BYTE	$26			; LA	_C005+0
_F106 	!WORD	_C005+0		
	!BYTE	$7A			; SAW	_D040+12
_F107 	!WORD	_D040+12		
	!BYTE	$26			; LA	_C006+0
_F108 	!WORD	_C006+0		
	!BYTE	$7A			; SAW	_D040+14
_F109 	!WORD	_D040+14		
	!BYTE	$26			; LA	_C007+0
_F110 	!WORD	_C007+0		
	!BYTE	$7A			; SAW	_D040+16
_F111 	!WORD	_D040+16		
	!BYTE	$26			; LA	_C008+0
_F112 	!WORD	_C008+0		
	!BYTE	$7A			; SAW	_D040+22
_F113 	!WORD	_D040+22		
	!BYTE	$26			; LA	_C030+0
_F114 	!WORD	_C030+0		
	!BYTE	$7A			; SAW	_D040+24
_F115 	!WORD	_D040+24		
	!BYTE	$50			; BRNCH	_B037
	!WORD	_B037-*
; libsrc/apple/conio.pla: 0404:     otherwise // MACHID_II        puts("Found MACHID_MODEL = $"); putb(MACHID & MACHID_MODEL); putln
_B038 
	!BYTE	$02			; CASEBLOCK
	!WORD	$0008
	!WORD	_B040-*
	!WORD	$00C0
	!WORD	_B039-*
; libsrc/apple/conio.pla: 0405: wend
_B037 
; libsrc/apple/conio.pla: 0406: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_DEFCNT	=	32
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C012		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C013		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C014		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C015		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C016		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C017		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C018		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C019		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C020		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C021		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C022		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C023		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C024		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C025		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C026		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C027		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C028		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C029		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C030		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: MACHID
	!BYTE	$CD,$C1,$C3,$C8,$C9,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	1			; ESD INDEX
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: SYSCALL
	!BYTE	$D3,$D9,$D3,$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	11			; ESD INDEX
	; DCI STRING: MEMSET
	!BYTE	$CD,$C5,$CD,$D3,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	17			; ESD INDEX
	!BYTE	$00			; END OF ESD
