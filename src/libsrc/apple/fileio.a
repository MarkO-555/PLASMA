; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/fileio.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/fileio.pla: 0001: 
; libsrc/apple/fileio.pla: 0002: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
; inc/fileio.plh: 0080: end
; libsrc/apple/fileio.pla: 0002: 
; libsrc/apple/fileio.pla: 0003: //
; libsrc/apple/fileio.pla: 0004: // CFFA1 addresses.
; libsrc/apple/fileio.pla: 0005: //
; libsrc/apple/fileio.pla: 0006: const CFFA1Dest     = $00
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; CFFA1Dest = 0
; libsrc/apple/fileio.pla: 0007: const CFFA1FileName = $02
					; CFFA1FileName = 2
; libsrc/apple/fileio.pla: 0008: const CFFA1OldName  = $04
					; CFFA1OldName = 4
; libsrc/apple/fileio.pla: 0009: const CFFA1FileType = $06
					; CFFA1FileType = 6
; libsrc/apple/fileio.pla: 0010: const CFFA1AuxType  = $07
					; CFFA1AuxType = 7
; libsrc/apple/fileio.pla: 0011: const CFFA1FileSize = $09
					; CFFA1FileSize = 9
; libsrc/apple/fileio.pla: 0012: const CFFA1EntryPtr = $0B
					; CFFA1EntryPtr = 11
; libsrc/apple/fileio.pla: 0013: //
; libsrc/apple/fileio.pla: 0014: // SOS access modes
; libsrc/apple/fileio.pla: 0015: //
; libsrc/apple/fileio.pla: 0016: const O_READ       = 1
					; O_READ = 1
; libsrc/apple/fileio.pla: 0017: const O_WRITE      = 2
					; O_WRITE = 2
; libsrc/apple/fileio.pla: 0018: const O_READ_WRITE = 3
					; O_READ_WRITE = 3
; libsrc/apple/fileio.pla: 0019: //
; libsrc/apple/fileio.pla: 0020: // System I/O buffer for PLASMA. Used when loading modules, free otherwise
; libsrc/apple/fileio.pla: 0021: //
; libsrc/apple/fileio.pla: 0022: const sysbuf = $0800
					; sysbuf = 2048
; libsrc/apple/fileio.pla: 0023: //
; libsrc/apple/fileio.pla: 0024: // External interface
; libsrc/apple/fileio.pla: 0025: //
; libsrc/apple/fileio.pla: 0026: predef a2getpfx(path), a23setpfx(path), a2getfileinfo(path, fileinfo), a2setfileinfo(path, fileinfo), a23geteof(refnum)#2, a23seteof(refnum, eofl, eofh), a2iobufs(iobufs), a2open(path), a2close(refnum)
; libsrc/apple/fileio.pla: 0027: predef a23read(refnum, buf, len), a2write(refnum, buf, len), a2create(path, type, aux), a23destroy(path), a23rename(path, newpath)
; libsrc/apple/fileio.pla: 0028: predef a2newline(refnum, emask, nlchar), a2online(unit, buf), a2readblock(unit, buf, block), a2writeblock(unit, buf, block)
; libsrc/apple/fileio.pla: 0029: //
; libsrc/apple/fileio.pla: 0030: // Exported function table.
; libsrc/apple/fileio.pla: 0031: //
; libsrc/apple/fileio.pla: 0032: word fileio[]
_D046 					; fileio[]
; libsrc/apple/fileio.pla: 0033: word = @a2getpfx, @a23setpfx, @a2getfileinfo, @a2setfileinfo, @a23geteof, @a23seteof, @a2iobufs, @a2open, @a2close
_F000 	!WORD	_P000
_F001 	!WORD	_P001
_F002 	!WORD	_P002
_F003 	!WORD	_P003
_F004 	!WORD	_P004
_F005 	!WORD	_P005
_F006 	!WORD	_P006
_F007 	!WORD	_P007
_F008 	!WORD	_P008
; libsrc/apple/fileio.pla: 0034: word = @a23read, @a2write, @a2create, @a23destroy, @a23rename
_F009 	!WORD	_P009
_F010 	!WORD	_P010
_F011 	!WORD	_P011
_F012 	!WORD	_P012
_F013 	!WORD	_P013
; libsrc/apple/fileio.pla: 0035: word = @a2newline, @a2online, @a2readblock, @a2writeblock
_F014 	!WORD	_P014
_F015 	!WORD	_P015
_F016 	!WORD	_P016
_F017 	!WORD	_P017
; libsrc/apple/fileio.pla: 0036: //
; libsrc/apple/fileio.pla: 0037: // SOS/ProDOS error code
; libsrc/apple/fileio.pla: 0038: //
; libsrc/apple/fileio.pla: 0039: export byte perr
_D047 	!FILL	1			; perr
; libsrc/apple/fileio.pla: 0040: //
; libsrc/apple/fileio.pla: 0041: // I/O buffers
; libsrc/apple/fileio.pla: 0042: //
; libsrc/apple/fileio.pla: 0043: const MAX_IOBUFS = 4
					; MAX_IOBUFS = 4
; libsrc/apple/fileio.pla: 0044: byte iobuf_ref[MAX_IOBUFS]
_D048 	!FILL	4			; iobuf_ref[MAX_IOBUFS]
; libsrc/apple/fileio.pla: 0045: word iobuf_addr[MAX_IOBUFS] = sysbuf
_D049 					; iobuf_addr[MAX_IOBUFS] = sysbuf
	!WORD	$0800
	!FILL	$06
; libsrc/apple/fileio.pla: 0046: //
; libsrc/apple/fileio.pla: 0047: // ProDOS/SOS routines
; libsrc/apple/fileio.pla: 0048: //
; libsrc/apple/fileio.pla: 0049: def a1getpfx(path)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; path -> [0]
_C000 					; a1getpfx()
; libsrc/apple/fileio.pla: 0050:     ^path = 0
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/fileio.pla: 0051:     return path
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0052: end
; libsrc/apple/fileio.pla: 0053: def a2getpfx(path)
					; path -> [0]
_P000 					; a2getpfx(path)()
_C001 					; a2getpfx()
; libsrc/apple/fileio.pla: 0054:     byte params[3]
					; params -> [2]
; libsrc/apple/fileio.pla: 0055: 
; libsrc/apple/fileio.pla: 0056:     ^path    = 0
	!BYTE	$58,$05,$01		; ENTER	5,1
; libsrc/apple/fileio.pla: 0057:     params.0 = 1
; libsrc/apple/fileio.pla: 0058:     params:1 = path
; libsrc/apple/fileio.pla: 0059:     perr     = syscall($C7, @params)
; libsrc/apple/fileio.pla: 0060:     return path
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$02			; CN	1
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2A,$C7			; CB	199
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F018 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F019 	!WORD	_D047+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/fileio.pla: 0061: end
; libsrc/apple/fileio.pla: 0062: def a3getpfx(path)
					; path -> [0]
_C002 					; a3getpfx()
; libsrc/apple/fileio.pla: 0063:     byte params[3]
					; params -> [2]
; libsrc/apple/fileio.pla: 0064: 
; libsrc/apple/fileio.pla: 0065:     params.0 = 2
	!BYTE	$58,$05,$01		; ENTER	5,1
; libsrc/apple/fileio.pla: 0066:     params:1 = path
; libsrc/apple/fileio.pla: 0067:     params.3 = 64
; libsrc/apple/fileio.pla: 0068:     perr     = syscall($C7, @params)
; libsrc/apple/fileio.pla: 0069:     return path
	!BYTE	$04			; CN	2
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2A,$40			; CB	64
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$2A,$C7			; CB	199
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F020 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F021 	!WORD	_D047+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/fileio.pla: 0070: end
; libsrc/apple/fileio.pla: 0071: def a1setpfx(path)
					; path -> [0]
_C003 					; a1setpfx()
; libsrc/apple/fileio.pla: 0072:     return path
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0073: end
; libsrc/apple/fileio.pla: 0074: def a23setpfx(path)
					; path -> [0]
_P001 					; a23setpfx(path)()
_C004 					; a23setpfx()
; libsrc/apple/fileio.pla: 0075:     byte params[3]
					; params -> [2]
; libsrc/apple/fileio.pla: 0076: 
; libsrc/apple/fileio.pla: 0077:     params.0 = 1
	!BYTE	$58,$05,$01		; ENTER	5,1
; libsrc/apple/fileio.pla: 0078:     params:1 = path
; libsrc/apple/fileio.pla: 0079:     perr     = syscall($C6, @params)
; libsrc/apple/fileio.pla: 0080:     return path
	!BYTE	$02			; CN	1
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2A,$C6			; CB	198
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F022 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F023 	!WORD	_D047+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/fileio.pla: 0081: end
; libsrc/apple/fileio.pla: 0082: def a1getfileinfo(path, fileinfo)
					; path -> [0]
					; fileinfo -> [2]
_C005 					; a1getfileinfo()
; libsrc/apple/fileio.pla: 0083:     perr = $01
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/fileio.pla: 0084:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$7C			; DAB	_D047+0
_F024 	!WORD	_D047+0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/fileio.pla: 0085: end
; libsrc/apple/fileio.pla: 0086: def a2getfileinfo(path, fileinfo)
					; path -> [0]
					; fileinfo -> [2]
_P002 					; a2getfileinfo(path, fileinfo)()
_C006 					; a2getfileinfo()
; libsrc/apple/fileio.pla: 0087:     byte params[18]
					; params -> [4]
; libsrc/apple/fileio.pla: 0088: 
; libsrc/apple/fileio.pla: 0089:     params.0 = 10
	!BYTE	$58,$16,$02		; ENTER	22,2
; libsrc/apple/fileio.pla: 0090:     params:1 = path
; libsrc/apple/fileio.pla: 0091:     perr     = syscall($C4, @params)
; libsrc/apple/fileio.pla: 0092:     memcpy(fileinfo, @params + 3, 15)
; libsrc/apple/fileio.pla: 0093:     return perr
	!BYTE	$14			; CN	10
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$2A,$C4			; CB	196
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F025 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F026 	!WORD	_D047+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$28,$07			; LLA	[7]
	!BYTE	$1E			; CN	15
	!BYTE	$54			; CALL	_X018
_F027 	!WORD	0		
	!BYTE	$68			; LAB	_D047+0
_F028 	!WORD	_D047+0		
	!BYTE	$5A,$16			; LEAVE	22
; libsrc/apple/fileio.pla: 0094: end
; libsrc/apple/fileio.pla: 0095: def a3getfileinfo(path, fileinfo)
					; path -> [0]
					; fileinfo -> [2]
_C007 					; a3getfileinfo()
; libsrc/apple/fileio.pla: 0096:     byte params[6]
					; params -> [4]
; libsrc/apple/fileio.pla: 0097: 
; libsrc/apple/fileio.pla: 0098:     params.0 = 3
	!BYTE	$58,$0A,$02		; ENTER	10,2
; libsrc/apple/fileio.pla: 0099:     params:1 = path
; libsrc/apple/fileio.pla: 0100:     params:3 = fileinfo
; libsrc/apple/fileio.pla: 0101:     params.5 = 15
; libsrc/apple/fileio.pla: 0102:     perr     = syscall($C4, @params)
; libsrc/apple/fileio.pla: 0103:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$1E			; CN	15
	!BYTE	$74,$09			; SLB	[9]
	!BYTE	$2A,$C4			; CB	196
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F029 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F030 	!WORD	_D047+0		
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/apple/fileio.pla: 0104: end
; libsrc/apple/fileio.pla: 0105: def a1setfileinfo(path, fileinfo)
					; path -> [0]
					; fileinfo -> [2]
_C008 					; a1setfileinfo()
; libsrc/apple/fileio.pla: 0106:     perr = $01
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/fileio.pla: 0107:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$7C			; DAB	_D047+0
_F031 	!WORD	_D047+0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/fileio.pla: 0108: end
; libsrc/apple/fileio.pla: 0109: def a2setfileinfo(path, fileinfo)
					; path -> [0]
					; fileinfo -> [2]
_P003 					; a2setfileinfo(path, fileinfo)()
_C009 					; a2setfileinfo()
; libsrc/apple/fileio.pla: 0110:     byte params[14]
					; params -> [4]
; libsrc/apple/fileio.pla: 0111: 
; libsrc/apple/fileio.pla: 0112:     params.0 = 7
	!BYTE	$58,$12,$02		; ENTER	18,2
; libsrc/apple/fileio.pla: 0113:     params:1 = path
; libsrc/apple/fileio.pla: 0114:     memcpy(@params + 3, fileinfo, 11)
; libsrc/apple/fileio.pla: 0115:     perr     = syscall($C3, @params)
; libsrc/apple/fileio.pla: 0116:     return perr
	!BYTE	$0E			; CN	7
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$28,$07			; LLA	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$16			; CN	11
	!BYTE	$54			; CALL	_X018
_F032 	!WORD	0		
	!BYTE	$2A,$C3			; CB	195
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F033 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F034 	!WORD	_D047+0		
	!BYTE	$5A,$12			; LEAVE	18
; libsrc/apple/fileio.pla: 0117: end
; libsrc/apple/fileio.pla: 0118: def a3setfileinfo(path, fileinfo)
					; path -> [0]
					; fileinfo -> [2]
_C010 					; a3setfileinfo()
; libsrc/apple/fileio.pla: 0119:     byte params[6]
					; params -> [4]
; libsrc/apple/fileio.pla: 0120: 
; libsrc/apple/fileio.pla: 0121:     params.0 = 3
	!BYTE	$58,$0A,$02		; ENTER	10,2
; libsrc/apple/fileio.pla: 0122:     params:1 = path
; libsrc/apple/fileio.pla: 0123:     params:3 = fileinfo
; libsrc/apple/fileio.pla: 0124:     params.5 = 15
; libsrc/apple/fileio.pla: 0125:     perr     = syscall($C3, @params)
; libsrc/apple/fileio.pla: 0126:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$1E			; CN	15
	!BYTE	$74,$09			; SLB	[9]
	!BYTE	$2A,$C3			; CB	195
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F035 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F036 	!WORD	_D047+0		
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/apple/fileio.pla: 0127: end
; libsrc/apple/fileio.pla: 0128: def a1geteof(refnum)#2
					; refnum -> [0]
_C011 					; a1geteof()
; libsrc/apple/fileio.pla: 0129:     return 0, 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0130: end
; libsrc/apple/fileio.pla: 0131: def a23geteof(refnum)#2
					; refnum -> [0]
_P004 					; a23geteof(refnum)#2()
_C012 					; a23geteof()
; libsrc/apple/fileio.pla: 0132:     byte params[5]
					; params -> [2]
; libsrc/apple/fileio.pla: 0133: 
; libsrc/apple/fileio.pla: 0134:     params.0 = 2
	!BYTE	$58,$07,$01		; ENTER	7,1
; libsrc/apple/fileio.pla: 0135:     params.1 = refnum
; libsrc/apple/fileio.pla: 0136:     params:2 = 0
; libsrc/apple/fileio.pla: 0137:     params.4 = 0
; libsrc/apple/fileio.pla: 0138:     syscall($D1, @params)
; libsrc/apple/fileio.pla: 0139:     return params:2, params.4
	!BYTE	$04			; CN	2
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$00			; CN	0
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$00			; CN	0
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$2A,$D1			; CB	209
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F037 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/apple/fileio.pla: 0140: end
; libsrc/apple/fileio.pla: 0141: def a1seteof(refnum, eofl, eofh)
					; refnum -> [0]
					; eofl -> [2]
					; eofh -> [4]
_C013 					; a1seteof()
; libsrc/apple/fileio.pla: 0142:     return 0
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$00			; CN	0
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0143: end
; libsrc/apple/fileio.pla: 0144: def a23seteof(refnum, eofl, eofh)
					; refnum -> [0]
					; eofl -> [2]
					; eofh -> [4]
_P005 					; a23seteof(refnum, eofl, eofh)()
_C014 					; a23seteof()
; libsrc/apple/fileio.pla: 0145:     byte params[5]
					; params -> [6]
; libsrc/apple/fileio.pla: 0146: 
; libsrc/apple/fileio.pla: 0147:     params.0 = 2
	!BYTE	$58,$0B,$03		; ENTER	11,3
; libsrc/apple/fileio.pla: 0148:     params.1 = refnum
; libsrc/apple/fileio.pla: 0149:     params:2 = eofl
; libsrc/apple/fileio.pla: 0150:     params.4 = eofh
; libsrc/apple/fileio.pla: 0151:     syscall($D0, @params)
; libsrc/apple/fileio.pla: 0152:     return params:2
	!BYTE	$04			; CN	2
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$2A,$D0			; CB	208
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F038 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$5A,$0B			; LEAVE	11
; libsrc/apple/fileio.pla: 0153: end
; libsrc/apple/fileio.pla: 0154: def a1open(path)
					; path -> [0]
_C015 					; a1open()
; libsrc/apple/fileio.pla: 0155:     *CFFA1FileName = path
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/fileio.pla: 0156:     return 0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A,$02,$00		; SAW	2
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0157: end
; libsrc/apple/fileio.pla: 0158: def a2iobufs(iobufs)
					; iobufs -> [0]
_P006 					; a2iobufs(iobufs)()
_C016 					; a2iobufs()
; libsrc/apple/fileio.pla: 0159:     byte i
					; i -> [2]
; libsrc/apple/fileio.pla: 0160:     word freebuf, bufaddr
					; freebuf -> [3]
					; bufaddr -> [5]
; libsrc/apple/fileio.pla: 0161: 
; libsrc/apple/fileio.pla: 0162:     if iobufs > MAX_IOBUFS
	!BYTE	$58,$07,$01		; ENTER	7,1
; libsrc/apple/fileio.pla: 0163:         iobufs = MAX_IOBUFS
; libsrc/apple/fileio.pla: 0164:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$08			; CN	4
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$08			; CN	4
	!BYTE	$76,$00			; SLW	[0]
_B001 
_B002 
; libsrc/apple/fileio.pla: 0165:     if iobufs
; libsrc/apple/fileio.pla: 0166:         iobufs-- // Subtract off system I/O buffer
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
; libsrc/apple/fileio.pla: 0167:         if iobufs
; libsrc/apple/fileio.pla: 0168:             bufaddr = heapallocalign(1024 * iobufs, 8, @freebuf)
; libsrc/apple/fileio.pla: 0169:             for i = 1 to MAX_IOBUFS-1
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$86			; MUL
	!BYTE	$10			; CN	8
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_X013
_F039 	!WORD	0		
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$06			; CN	3
	!BYTE	$02			; CN	1
_B008 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/fileio.pla: 0170:                 if not iobuf_addr[i]
; libsrc/apple/fileio.pla: 0171:                     iobuf_addr[i] = bufaddr
; libsrc/apple/fileio.pla: 0172:                     bufaddr = bufaddr + 1024
; libsrc/apple/fileio.pla: 0173:                     iobufs--
	!BYTE	$26			; LA	_D049+0
_F040 	!WORD	_D049+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$4E			; BRTRU	_B010
	!WORD	_B010-*
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$26			; LA	_D049+0
_F041 	!WORD	_D049+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$82			; ADD 
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
; libsrc/apple/fileio.pla: 0174:                     if not iobufs
; libsrc/apple/fileio.pla: 0175:                         return freebuf
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$4E			; BRTRU	_B012
	!WORD	_B012-*
	!BYTE	$32			; DROP2
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/apple/fileio.pla: 0176:                     fin
_B012 
_B013 
; libsrc/apple/fileio.pla: 0177:                 fin
_B010 
_B011 
; libsrc/apple/fileio.pla: 0178:             next
_B009 
	!BYTE	$A4			; INCBRLE	_B008
	!WORD	_B008-*
_B007 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/fileio.pla: 0179:             return freebuf
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/apple/fileio.pla: 0180:         fin
_B005 
_B006 
; libsrc/apple/fileio.pla: 0181:     else
	!BYTE	$50			; BRNCH	_B004
	!WORD	_B004-*
_B003 
; libsrc/apple/fileio.pla: 0182:         for i = 1 to MAX_IOBUFS-1
	!BYTE	$06			; CN	3
	!BYTE	$02			; CN	1
_B015 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/fileio.pla: 0183:             iobuf_addr[i] = 0 // Free I/O buffers if 0 passed in
; libsrc/apple/fileio.pla: 0184:         next
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D049+0
_F042 	!WORD	_D049+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$72			; SW
_B016 
	!BYTE	$A4			; INCBRLE	_B015
	!WORD	_B015-*
_B014 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/fileio.pla: 0185:     fin
_B004 
; libsrc/apple/fileio.pla: 0186:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/apple/fileio.pla: 0187: end
; libsrc/apple/fileio.pla: 0188: def a13iobufs(iobufs)
					; iobufs -> [0]
_C017 					; a13iobufs()
; libsrc/apple/fileio.pla: 0189:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0190: end
; libsrc/apple/fileio.pla: 0191: def a2open(path)
					; path -> [0]
_P007 					; a2open(path)()
_C018 					; a2open()
; libsrc/apple/fileio.pla: 0192:     byte i, params[6]
					; i -> [2]
					; params -> [3]
; libsrc/apple/fileio.pla: 0193: 
; libsrc/apple/fileio.pla: 0194:     for i = 0 to MAX_IOBUFS-1
	!BYTE	$58,$09,$01		; ENTER	9,1
	!BYTE	$06			; CN	3
	!BYTE	$00			; CN	0
_B018 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/fileio.pla: 0195:         if iobuf_addr[i] and not iobuf_ref[i]
; libsrc/apple/fileio.pla: 0196:             params.0     = 3
; libsrc/apple/fileio.pla: 0197:             params:1     = path
; libsrc/apple/fileio.pla: 0198:             params:3     = iobuf_addr[i]
; libsrc/apple/fileio.pla: 0199:             params.5     = 0
; libsrc/apple/fileio.pla: 0200:             perr         = syscall($C8, @params)
; libsrc/apple/fileio.pla: 0201:             iobuf_ref[i] = params.5
; libsrc/apple/fileio.pla: 0202:             return params.5
	!BYTE	$26			; LA	_D049+0
_F043 	!WORD	_D049+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$AC			; BRAND	_B020
	!WORD	_B020-*
	!BYTE	$26			; LA	_D048+0
_F044 	!WORD	_D048+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$80			; NOT
_B020 
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$06			; CN	3
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$26			; LA	_D049+0
_F045 	!WORD	_D049+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_X011
_F046 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F047 	!WORD	_D047+0		
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$26			; LA	_D048+0
_F048 	!WORD	_D048+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$70			; SB
	!BYTE	$32			; DROP2
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$5A,$09			; LEAVE	9
; libsrc/apple/fileio.pla: 0203:         fin
_B021 
_B022 
; libsrc/apple/fileio.pla: 0204:     next
_B019 
	!BYTE	$A4			; INCBRLE	_B018
	!WORD	_B018-*
_B017 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/fileio.pla: 0205:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$09			; LEAVE	9
; libsrc/apple/fileio.pla: 0206: end
; libsrc/apple/fileio.pla: 0207: def a3open(path)
					; path -> [0]
_C019 					; a3open()
; libsrc/apple/fileio.pla: 0208:     byte params[7]
					; params -> [2]
; libsrc/apple/fileio.pla: 0209: 
; libsrc/apple/fileio.pla: 0210:     params.0 = 4
	!BYTE	$58,$09,$01		; ENTER	9,1
; libsrc/apple/fileio.pla: 0211:     params:1 = path
; libsrc/apple/fileio.pla: 0212:     params.3 = 0
; libsrc/apple/fileio.pla: 0213:     params:4 = 0
; libsrc/apple/fileio.pla: 0214:     params.6 = 0
; libsrc/apple/fileio.pla: 0215:     perr = syscall($C8, @params)
; libsrc/apple/fileio.pla: 0216:     return params.3
	!BYTE	$08			; CN	4
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$00			; CN	0
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$00			; CN	0
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F049 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F050 	!WORD	_D047+0		
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$5A,$09			; LEAVE	9
; libsrc/apple/fileio.pla: 0217: end
; libsrc/apple/fileio.pla: 0218: def a1close(refnum)
					; refnum -> [0]
_C020 					; a1close()
; libsrc/apple/fileio.pla: 0219:     return perr
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$68			; LAB	_D047+0
_F051 	!WORD	_D047+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0220: end
; libsrc/apple/fileio.pla: 0221: def a2close(refnum)
					; refnum -> [0]
_P008 					; a2close(refnum)()
_C021 					; a2close()
; libsrc/apple/fileio.pla: 0222:     byte i, params[2]
					; i -> [2]
					; params -> [3]
; libsrc/apple/fileio.pla: 0223: 
; libsrc/apple/fileio.pla: 0224:     for i = 0 to MAX_IOBUFS-1
	!BYTE	$58,$05,$01		; ENTER	5,1
	!BYTE	$06			; CN	3
	!BYTE	$00			; CN	0
_B024 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/fileio.pla: 0225:         if refnum == iobuf_ref[i]
; libsrc/apple/fileio.pla: 0226:             iobuf_ref[i] = 0
; libsrc/apple/fileio.pla: 0227:             params.0     = 1
; libsrc/apple/fileio.pla: 0228:             params.1     = refnum
; libsrc/apple/fileio.pla: 0229:             perr         = syscall($CC, @params)
; libsrc/apple/fileio.pla: 0230:             return perr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D048+0
_F052 	!WORD	_D048+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$24			; BRNE	_B026
	!WORD	_B026-*
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D048+0
_F053 	!WORD	_D048+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$70			; SB
	!BYTE	$02			; CN	1
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$2A,$CC			; CB	204
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_X011
_F054 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F055 	!WORD	_D047+0		
	!BYTE	$32			; DROP2
	!BYTE	$68			; LAB	_D047+0
_F056 	!WORD	_D047+0		
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/fileio.pla: 0231:         fin
_B026 
_B027 
; libsrc/apple/fileio.pla: 0232:     next
_B025 
	!BYTE	$A4			; INCBRLE	_B024
	!WORD	_B024-*
_B023 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/fileio.pla: 0233:     perr = $45
; libsrc/apple/fileio.pla: 0234:     return perr
	!BYTE	$2A,$45			; CB	69
	!BYTE	$7C			; DAB	_D047+0
_F057 	!WORD	_D047+0		
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/fileio.pla: 0235: end
; libsrc/apple/fileio.pla: 0236: def a3close(refnum)
					; refnum -> [0]
_C022 					; a3close()
; libsrc/apple/fileio.pla: 0237:     byte params[2]
					; params -> [2]
; libsrc/apple/fileio.pla: 0238: 
; libsrc/apple/fileio.pla: 0239:     params.0 = 1
	!BYTE	$58,$04,$01		; ENTER	4,1
; libsrc/apple/fileio.pla: 0240:     params.1 = refnum
; libsrc/apple/fileio.pla: 0241:     perr     = syscall($CC, @params)
; libsrc/apple/fileio.pla: 0242:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$2A,$CC			; CB	204
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F058 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F059 	!WORD	_D047+0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/fileio.pla: 0243: end
; libsrc/apple/fileio.pla: 0244: def a1read(refnum, buf, len)
					; refnum -> [0]
					; buf -> [2]
					; len -> [4]
_C023 					; a1read()
; libsrc/apple/fileio.pla: 0245:     *CFFA1Dest = buf
	!BYTE	$58,$06,$03		; ENTER	6,3
; libsrc/apple/fileio.pla: 0246:     perr = syscall($22, 0) // This reads the entire file from CFFA
; libsrc/apple/fileio.pla: 0247:     return perr
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A,$00,$00		; SAW	0
	!BYTE	$2A,$22			; CB	34
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X011
_F060 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F061 	!WORD	_D047+0		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0248: end
; libsrc/apple/fileio.pla: 0249: def a23read(refnum, buf, len)
					; refnum -> [0]
					; buf -> [2]
					; len -> [4]
_P009 					; a23read(refnum, buf, len)()
_C024 					; a23read()
; libsrc/apple/fileio.pla: 0250:     byte params[8]
					; params -> [6]
; libsrc/apple/fileio.pla: 0251: 
; libsrc/apple/fileio.pla: 0252:     params.0 = 4
	!BYTE	$58,$0E,$03		; ENTER	14,3
; libsrc/apple/fileio.pla: 0253:     params.1 = refnum
; libsrc/apple/fileio.pla: 0254:     params:2 = buf
; libsrc/apple/fileio.pla: 0255:     params:4 = len
; libsrc/apple/fileio.pla: 0256:     params:6 = 0
; libsrc/apple/fileio.pla: 0257:     perr     = syscall($CA, @params)
; libsrc/apple/fileio.pla: 0258:     return params:6
	!BYTE	$08			; CN	4
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$CA			; CB	202
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F062 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F063 	!WORD	_D047+0		
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$5A,$0E			; LEAVE	14
; libsrc/apple/fileio.pla: 0259: end
; libsrc/apple/fileio.pla: 0260: def a1write(refnum, buf, len)
					; refnum -> [0]
					; buf -> [2]
					; len -> [4]
_C025 					; a1write()
; libsrc/apple/fileio.pla: 0261:     return perr
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$68			; LAB	_D047+0
_F064 	!WORD	_D047+0		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0262: end
; libsrc/apple/fileio.pla: 0263: def a2write(refnum, buf, len)
					; refnum -> [0]
					; buf -> [2]
					; len -> [4]
_P010 					; a2write(refnum, buf, len)()
_C026 					; a2write()
; libsrc/apple/fileio.pla: 0264:     byte params[8]
					; params -> [6]
; libsrc/apple/fileio.pla: 0265: 
; libsrc/apple/fileio.pla: 0266:     params.0 = 4
	!BYTE	$58,$0E,$03		; ENTER	14,3
; libsrc/apple/fileio.pla: 0267:     params.1 = refnum
; libsrc/apple/fileio.pla: 0268:     params:2 = buf
; libsrc/apple/fileio.pla: 0269:     params:4 = len
; libsrc/apple/fileio.pla: 0270:     params:6 = 0
; libsrc/apple/fileio.pla: 0271:     perr     = syscall($CB, @params)
; libsrc/apple/fileio.pla: 0272:     return params:6
	!BYTE	$08			; CN	4
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F065 	!WORD	0		
	!BYTE	$78			; SAB	_D047+0
_F066 	!WORD	_D047+0		
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$5A,$0E			; LEAVE	14
; libsrc/apple/fileio.pla: 0273: end
; libsrc/apple/fileio.pla: 0274: def a3write(refnum, buff, len)
					; refnum -> [0]
					; buff -> [2]
					; len -> [4]
_C027 					; a3write()
; libsrc/apple/fileio.pla: 0275:     byte params[6]
					; params -> [6]
; libsrc/apple/fileio.pla: 0276: 
; libsrc/apple/fileio.pla: 0277:     params.0 = 3
	!BYTE	$58,$0C,$03		; ENTER	12,3
; libsrc/apple/fileio.pla: 0278:     params.1 = refnum
; libsrc/apple/fileio.pla: 0279:     params:2 = buff
; libsrc/apple/fileio.pla: 0280:     params:4 = len
; libsrc/apple/fileio.pla: 0281:     perr     = syscall($CB, @params)
; libsrc/apple/fileio.pla: 0282:     return perr ?? 0 :: len
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F067 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F068 	!WORD	_D047+0		
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$00			; CN	0
	!BYTE	$50			; BRNCH	_B029
	!WORD	_B029-*
_B028 
	!BYTE	$66,$04			; LLW	[4]
_B029 
	!BYTE	$5A,$0C			; LEAVE	12
; libsrc/apple/fileio.pla: 0283: end
; libsrc/apple/fileio.pla: 0284: def a1create(path, type, aux)
					; path -> [0]
					; type -> [2]
					; aux -> [4]
_C028 					; a1create()
; libsrc/apple/fileio.pla: 0285:     return perr
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$68			; LAB	_D047+0
_F069 	!WORD	_D047+0		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0286: end
; libsrc/apple/fileio.pla: 0287: def a2create(path, type, aux)
					; path -> [0]
					; type -> [2]
					; aux -> [4]
_P011 					; a2create(path, type, aux)()
_C029 					; a2create()
; libsrc/apple/fileio.pla: 0288:     byte params[12]
					; params -> [6]
; libsrc/apple/fileio.pla: 0289: 
; libsrc/apple/fileio.pla: 0290:     params.0  = 7
	!BYTE	$58,$12,$03		; ENTER	18,3
; libsrc/apple/fileio.pla: 0291:     params:1  = path
; libsrc/apple/fileio.pla: 0292:     params.3  = $C3
; libsrc/apple/fileio.pla: 0293:     params.4  = type
; libsrc/apple/fileio.pla: 0294:     params:5  = aux
; libsrc/apple/fileio.pla: 0295:     params.7  = type == $0F ?? $0D :: $01
; libsrc/apple/fileio.pla: 0296:     params:8  = 0
; libsrc/apple/fileio.pla: 0297:     params:10 = 0
; libsrc/apple/fileio.pla: 0298:     perr      = syscall($C0, @params)
; libsrc/apple/fileio.pla: 0299:     return perr
	!BYTE	$0E			; CN	7
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$2A,$C3			; CB	195
	!BYTE	$74,$09			; SLB	[9]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0B			; SLW	[11]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B030
	!WORD	_B030-*
	!BYTE	$1A			; CN	13
	!BYTE	$50			; BRNCH	_B031
	!WORD	_B031-*
_B030 
	!BYTE	$02			; CN	1
_B031 
	!BYTE	$74,$0D			; SLB	[13]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F070 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F071 	!WORD	_D047+0		
	!BYTE	$5A,$12			; LEAVE	18
; libsrc/apple/fileio.pla: 0300: end
; libsrc/apple/fileio.pla: 0301: def a3create(path, type, aux)
					; path -> [0]
					; type -> [2]
					; aux -> [4]
_C030 					; a3create()
; libsrc/apple/fileio.pla: 0302:     byte params[6]
					; params -> [6]
; libsrc/apple/fileio.pla: 0303:     byte options[4]
					; options -> [12]
; libsrc/apple/fileio.pla: 0304: 
; libsrc/apple/fileio.pla: 0305:     params.0  = 3
	!BYTE	$58,$10,$03		; ENTER	16,3
; libsrc/apple/fileio.pla: 0306:     params:1  = path
; libsrc/apple/fileio.pla: 0307:     params:3  = @options
; libsrc/apple/fileio.pla: 0308:     params.5  = 4
; libsrc/apple/fileio.pla: 0309:     options.0 = type
; libsrc/apple/fileio.pla: 0310:     options:1 = aux
; libsrc/apple/fileio.pla: 0311:     options.3 = type == $0F ?? $0D :: $01
; libsrc/apple/fileio.pla: 0312:     perr      = syscall($C0, @params)
; libsrc/apple/fileio.pla: 0313:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$28,$0C			; LLA	[12]
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$08			; CN	4
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$74,$0C			; SLB	[12]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0D			; SLW	[13]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B032
	!WORD	_B032-*
	!BYTE	$1A			; CN	13
	!BYTE	$50			; BRNCH	_B033
	!WORD	_B033-*
_B032 
	!BYTE	$02			; CN	1
_B033 
	!BYTE	$74,$0F			; SLB	[15]
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F072 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F073 	!WORD	_D047+0		
	!BYTE	$5A,$10			; LEAVE	16
; libsrc/apple/fileio.pla: 0314: end
; libsrc/apple/fileio.pla: 0315: def a1destroy(path)
					; path -> [0]
_C031 					; a1destroy()
; libsrc/apple/fileio.pla: 0316:     perr = $01
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/fileio.pla: 0317:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$7C			; DAB	_D047+0
_F074 	!WORD	_D047+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/fileio.pla: 0318: end
; libsrc/apple/fileio.pla: 0319: def a23destroy(path)
					; path -> [0]
_P012 					; a23destroy(path)()
_C032 					; a23destroy()
; libsrc/apple/fileio.pla: 0320:     byte params[3]
					; params -> [2]
; libsrc/apple/fileio.pla: 0321: 
; libsrc/apple/fileio.pla: 0322:     params.0 = 1
	!BYTE	$58,$05,$01		; ENTER	5,1
; libsrc/apple/fileio.pla: 0323:     params:1 = path
; libsrc/apple/fileio.pla: 0324:     perr     = syscall($C1, @params)
; libsrc/apple/fileio.pla: 0325:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2A,$C1			; CB	193
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F075 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F076 	!WORD	_D047+0		
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/fileio.pla: 0326: end
; libsrc/apple/fileio.pla: 0327: def a1rename(oldpath, newpath)
					; oldpath -> [0]
					; newpath -> [2]
_C033 					; a1rename()
; libsrc/apple/fileio.pla: 0328:     perr = $01
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/fileio.pla: 0329:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$7C			; DAB	_D047+0
_F077 	!WORD	_D047+0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/fileio.pla: 0330: end
; libsrc/apple/fileio.pla: 0331: def a23rename(path, newpath)
					; path -> [0]
					; newpath -> [2]
_P013 					; a23rename(path, newpath)()
_C034 					; a23rename()
; libsrc/apple/fileio.pla: 0332:     byte params[5]
					; params -> [4]
; libsrc/apple/fileio.pla: 0333: 
; libsrc/apple/fileio.pla: 0334:     params.0 = 2
	!BYTE	$58,$09,$02		; ENTER	9,2
; libsrc/apple/fileio.pla: 0335:     params:1 = path
; libsrc/apple/fileio.pla: 0336:     params:3 = newpath
; libsrc/apple/fileio.pla: 0337:     perr     = syscall($C2, @params)
; libsrc/apple/fileio.pla: 0338:     return perr
	!BYTE	$04			; CN	2
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$2A,$C2			; CB	194
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F078 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F079 	!WORD	_D047+0		
	!BYTE	$5A,$09			; LEAVE	9
; libsrc/apple/fileio.pla: 0339: end
; libsrc/apple/fileio.pla: 0340: def a1newline(refnum, emask, nlchar)
					; refnum -> [0]
					; emask -> [2]
					; nlchar -> [4]
_C035 					; a1newline()
; libsrc/apple/fileio.pla: 0341:     return perr
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$68			; LAB	_D047+0
_F080 	!WORD	_D047+0		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0342: end
; libsrc/apple/fileio.pla: 0343: def a2newline(refnum, emask, nlchar)
					; refnum -> [0]
					; emask -> [2]
					; nlchar -> [4]
_P014 					; a2newline(refnum, emask, nlchar)()
_C036 					; a2newline()
; libsrc/apple/fileio.pla: 0344:     byte params[4]
					; params -> [6]
; libsrc/apple/fileio.pla: 0345: 
; libsrc/apple/fileio.pla: 0346:     params.0 = 3
	!BYTE	$58,$0A,$03		; ENTER	10,3
; libsrc/apple/fileio.pla: 0347:     params.1 = refnum
; libsrc/apple/fileio.pla: 0348:     params.2 = emask
; libsrc/apple/fileio.pla: 0349:     params.3 = nlchar
; libsrc/apple/fileio.pla: 0350:     perr     = syscall($C9, @params)
; libsrc/apple/fileio.pla: 0351:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$74,$09			; SLB	[9]
	!BYTE	$2A,$C9			; CB	201
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F081 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F082 	!WORD	_D047+0		
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/apple/fileio.pla: 0352: end
; libsrc/apple/fileio.pla: 0353: def a3newline(refnum, emask, nlchar)
					; refnum -> [0]
					; emask -> [2]
					; nlchar -> [4]
_C037 					; a3newline()
; libsrc/apple/fileio.pla: 0354:     byte params[4]
					; params -> [6]
; libsrc/apple/fileio.pla: 0355: 
; libsrc/apple/fileio.pla: 0356:     params.0 = 3
	!BYTE	$58,$0A,$03		; ENTER	10,3
; libsrc/apple/fileio.pla: 0357:     params.1 = refnum
; libsrc/apple/fileio.pla: 0358:     params.2 = emask ?? $FF :: $00
; libsrc/apple/fileio.pla: 0359:     params.3 = nlchar
; libsrc/apple/fileio.pla: 0360:     perr     = syscall($C9, @params)
; libsrc/apple/fileio.pla: 0361:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$50			; BRNCH	_B035
	!WORD	_B035-*
_B034 
	!BYTE	$00			; CN	0
_B035 
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$74,$09			; SLB	[9]
	!BYTE	$2A,$C9			; CB	201
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F083 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F084 	!WORD	_D047+0		
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/apple/fileio.pla: 0362: end
; libsrc/apple/fileio.pla: 0363: def a1online(unit, buf)
					; unit -> [0]
					; buf -> [2]
_C038 					; a1online()
; libsrc/apple/fileio.pla: 0364:     perr = $27 // IOERR
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/fileio.pla: 0365:     return perr
	!BYTE	$2A,$27			; CB	39
	!BYTE	$7C			; DAB	_D047+0
_F085 	!WORD	_D047+0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/fileio.pla: 0366: end
; libsrc/apple/fileio.pla: 0367: def a2online(unit, buf)
					; unit -> [0]
					; buf -> [2]
_P015 					; a2online(unit, buf)()
_C039 					; a2online()
; libsrc/apple/fileio.pla: 0368:     byte params[4]
					; params -> [4]
; libsrc/apple/fileio.pla: 0369: 
; libsrc/apple/fileio.pla: 0370:     params.0 = 2
	!BYTE	$58,$08,$02		; ENTER	8,2
; libsrc/apple/fileio.pla: 0371:     params.1 = unit
; libsrc/apple/fileio.pla: 0372:     params:2 = buf
; libsrc/apple/fileio.pla: 0373:     perr     = syscall($C5, @params)
; libsrc/apple/fileio.pla: 0374:     return perr
	!BYTE	$04			; CN	2
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$2A,$C5			; CB	197
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F086 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F087 	!WORD	_D047+0		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/fileio.pla: 0375: end
; libsrc/apple/fileio.pla: 0376: def a3volume(unit, volname)
					; unit -> [0]
					; volname -> [2]
_C040 					; a3volume()
; libsrc/apple/fileio.pla: 0377:     byte devname[17]
					; devname -> [4]
; libsrc/apple/fileio.pla: 0378:     byte info[11]
					; info -> [21]
; libsrc/apple/fileio.pla: 0379:     byte params[9]
					; params -> [32]
; libsrc/apple/fileio.pla: 0380: 
; libsrc/apple/fileio.pla: 0381:     ^volname = 0
	!BYTE	$58,$29,$02		; ENTER	41,2
; libsrc/apple/fileio.pla: 0382:     params.0 = 4
; libsrc/apple/fileio.pla: 0383:     params.1 = unit
; libsrc/apple/fileio.pla: 0384:     params:2 = @devname
; libsrc/apple/fileio.pla: 0385:     params:4 = @info
; libsrc/apple/fileio.pla: 0386:     params.6 = 11
; libsrc/apple/fileio.pla: 0387:     if syscall($85, @params) == 0
; libsrc/apple/fileio.pla: 0388:         params.0 = 4
; libsrc/apple/fileio.pla: 0389:         params:1 = @devname
; libsrc/apple/fileio.pla: 0390:         params:3 = volname
; libsrc/apple/fileio.pla: 0391:         params:5 = 0
; libsrc/apple/fileio.pla: 0392:         params:7 = 0
; libsrc/apple/fileio.pla: 0393:         return syscall($C5, @params)
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$08			; CN	4
	!BYTE	$74,$20			; SLB	[32]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$21			; SLB	[33]
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$76,$22			; SLW	[34]
	!BYTE	$28,$15			; LLA	[21]
	!BYTE	$76,$24			; SLW	[36]
	!BYTE	$16			; CN	11
	!BYTE	$74,$26			; SLB	[38]
	!BYTE	$2A,$85			; CB	133
	!BYTE	$28,$20			; LLA	[32]
	!BYTE	$54			; CALL	_X011
_F088 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B036
	!WORD	_B036-*
	!BYTE	$08			; CN	4
	!BYTE	$74,$20			; SLB	[32]
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$76,$21			; SLW	[33]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$23			; SLW	[35]
	!BYTE	$00			; CN	0
	!BYTE	$76,$25			; SLW	[37]
	!BYTE	$00			; CN	0
	!BYTE	$76,$27			; SLW	[39]
	!BYTE	$2A,$C5			; CB	197
	!BYTE	$28,$20			; LLA	[32]
	!BYTE	$54			; CALL	_X011
_F089 	!WORD	0		
	!BYTE	$5A,$29			; LEAVE	41
; libsrc/apple/fileio.pla: 0394:     fin
_B036 
_B037 
; libsrc/apple/fileio.pla: 0395:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$29			; LEAVE	41
; libsrc/apple/fileio.pla: 0396: end
; libsrc/apple/fileio.pla: 0397: def a3online(unit, buf)
					; unit -> [0]
					; buf -> [2]
_C041 					; a3online()
; libsrc/apple/fileio.pla: 0398:     byte info[11]
					; info -> [4]
; libsrc/apple/fileio.pla: 0399:     byte volname[17]
					; volname -> [15]
; libsrc/apple/fileio.pla: 0400:     byte i
					; i -> [32]
; libsrc/apple/fileio.pla: 0401: 
; libsrc/apple/fileio.pla: 0402:     if unit == 0
	!BYTE	$58,$21,$02		; ENTER	33,2
; libsrc/apple/fileio.pla: 0403:         for i = $01 to $0F
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B038
	!WORD	_B038-*
	!BYTE	$1E			; CN	15
	!BYTE	$02			; CN	1
_B041 
	!BYTE	$6C,$20			; DLB	[32]
; libsrc/apple/fileio.pla: 0404:             if a3volume(i, buf) == 0
; libsrc/apple/fileio.pla: 0405:                 ^buf = ^buf | (i << 4)
; libsrc/apple/fileio.pla: 0406:             fin
	!BYTE	$64,$20			; LLB	[32]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C040
_F090 	!WORD	_C040		
	!BYTE	$4E			; BRTRU	_B043
	!WORD	_B043-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$64,$20			; LLB	[32]
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$96			; OR 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
_B043 
_B044 
; libsrc/apple/fileio.pla: 0407:             buf = buf + 16
; libsrc/apple/fileio.pla: 0408:         next
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$76,$02			; SLW	[2]
_B042 
	!BYTE	$A4			; INCBRLE	_B041
	!WORD	_B041-*
_B040 
	!BYTE	$74,$20			; SLB	[32]
	!BYTE	$30			; DROP 
; libsrc/apple/fileio.pla: 0409:     else
	!BYTE	$50			; BRNCH	_B039
	!WORD	_B039-*
_B038 
; libsrc/apple/fileio.pla: 0410:         return a3volume(unit, buf)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C040
_F091 	!WORD	_C040		
	!BYTE	$5A,$21			; LEAVE	33
; libsrc/apple/fileio.pla: 0411:     fin
_B039 
; libsrc/apple/fileio.pla: 0412:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$21			; LEAVE	33
; libsrc/apple/fileio.pla: 0413: end
; libsrc/apple/fileio.pla: 0414: def a13readblock(unit, buf, block)
					; unit -> [0]
					; buf -> [2]
					; block -> [4]
_C042 					; a13readblock()
; libsrc/apple/fileio.pla: 0415:     perr = $27  // IOERR
	!BYTE	$58,$06,$03		; ENTER	6,3
; libsrc/apple/fileio.pla: 0416:     return perr
	!BYTE	$2A,$27			; CB	39
	!BYTE	$7C			; DAB	_D047+0
_F092 	!WORD	_D047+0		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0417: end
; libsrc/apple/fileio.pla: 0418: def a2readblock(unit, buf, block)
					; unit -> [0]
					; buf -> [2]
					; block -> [4]
_P016 					; a2readblock(unit, buf, block)()
_C043 					; a2readblock()
; libsrc/apple/fileio.pla: 0419:     byte params[6]
					; params -> [6]
; libsrc/apple/fileio.pla: 0420: 
; libsrc/apple/fileio.pla: 0421:     params.0 = 3
	!BYTE	$58,$0C,$03		; ENTER	12,3
; libsrc/apple/fileio.pla: 0422:     params.1 = unit
; libsrc/apple/fileio.pla: 0423:     params:2 = buf
; libsrc/apple/fileio.pla: 0424:     params:4 = block
; libsrc/apple/fileio.pla: 0425:     perr     = syscall($80, @params)
; libsrc/apple/fileio.pla: 0426:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$2A,$80			; CB	128
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F093 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F094 	!WORD	_D047+0		
	!BYTE	$5A,$0C			; LEAVE	12
; libsrc/apple/fileio.pla: 0427: end
; libsrc/apple/fileio.pla: 0428: def a13writeblock(unit, buf, block)
					; unit -> [0]
					; buf -> [2]
					; block -> [4]
_C044 					; a13writeblock()
; libsrc/apple/fileio.pla: 0429:     perr = $27  // IOERR
	!BYTE	$58,$06,$03		; ENTER	6,3
; libsrc/apple/fileio.pla: 0430:     return perr
	!BYTE	$2A,$27			; CB	39
	!BYTE	$7C			; DAB	_D047+0
_F095 	!WORD	_D047+0		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/fileio.pla: 0431: end
; libsrc/apple/fileio.pla: 0432: def a2writeblock(unit, buf, block)
					; unit -> [0]
					; buf -> [2]
					; block -> [4]
_P017 					; a2writeblock(unit, buf, block)()
_C045 					; a2writeblock()
; libsrc/apple/fileio.pla: 0433:     byte params[6]
					; params -> [6]
; libsrc/apple/fileio.pla: 0434: 
; libsrc/apple/fileio.pla: 0435:     params.0 = 3
	!BYTE	$58,$0C,$03		; ENTER	12,3
; libsrc/apple/fileio.pla: 0436:     params.1 = unit
; libsrc/apple/fileio.pla: 0437:     params:2 = buf
; libsrc/apple/fileio.pla: 0438:     params:4 = block
; libsrc/apple/fileio.pla: 0439:     perr     = syscall($81, @params)
; libsrc/apple/fileio.pla: 0440:     return perr
	!BYTE	$06			; CN	3
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$2A,$81			; CB	129
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X011
_F096 	!WORD	0		
	!BYTE	$7C			; DAB	_D047+0
_F097 	!WORD	_D047+0		
	!BYTE	$5A,$0C			; LEAVE	12
; libsrc/apple/fileio.pla: 0441: end
; libsrc/apple/fileio.pla: 0442: //
; libsrc/apple/fileio.pla: 0443: // Machine specific initialization.
; libsrc/apple/fileio.pla: 0444: //
; libsrc/apple/fileio.pla: 0445: when MACHID & MACHID_MODEL
_INIT 
	!BYTE	$68			; LAB	_X001+0
_F098 	!WORD	0+0		
	!BYTE	$3C,$C8			; ANDI	200
	!BYTE	$52			; SEL
	!WORD	_B046-*
; libsrc/apple/fileio.pla: 0446:     is MACHID_III
_B047 
; libsrc/apple/fileio.pla: 0447:         fileio:getpfx      = @a3getpfx
; libsrc/apple/fileio.pla: 0448:         fileio:getfileinfo = @a3getfileinfo
; libsrc/apple/fileio.pla: 0449:         fileio:setfileinfo = @a3setfileinfo
; libsrc/apple/fileio.pla: 0450:         fileio:iobufalloc  = @a13iobufs
; libsrc/apple/fileio.pla: 0451:         fileio:open        = @a3open
; libsrc/apple/fileio.pla: 0452:         fileio:close       = @a3close
; libsrc/apple/fileio.pla: 0453:         fileio:write       = @a3write
; libsrc/apple/fileio.pla: 0454:         fileio:create      = @a3create
; libsrc/apple/fileio.pla: 0455:         fileio:newline     = @a3newline
; libsrc/apple/fileio.pla: 0456:         fileio:online      = @a3online
; libsrc/apple/fileio.pla: 0457:         fileio:readblock   = @a13readblock
; libsrc/apple/fileio.pla: 0458:         fileio:writeblock  = @a13writeblock
; libsrc/apple/fileio.pla: 0459:         break
	!BYTE	$26			; LA	_C002+0
_F099 	!WORD	_C002+0		
	!BYTE	$7A			; SAW	_D046+0
_F100 	!WORD	_D046+0		
	!BYTE	$26			; LA	_C007+0
_F101 	!WORD	_C007+0		
	!BYTE	$7A			; SAW	_D046+4
_F102 	!WORD	_D046+4		
	!BYTE	$26			; LA	_C010+0
_F103 	!WORD	_C010+0		
	!BYTE	$7A			; SAW	_D046+6
_F104 	!WORD	_D046+6		
	!BYTE	$26			; LA	_C017+0
_F105 	!WORD	_C017+0		
	!BYTE	$7A			; SAW	_D046+12
_F106 	!WORD	_D046+12		
	!BYTE	$26			; LA	_C019+0
_F107 	!WORD	_C019+0		
	!BYTE	$7A			; SAW	_D046+14
_F108 	!WORD	_D046+14		
	!BYTE	$26			; LA	_C022+0
_F109 	!WORD	_C022+0		
	!BYTE	$7A			; SAW	_D046+16
_F110 	!WORD	_D046+16		
	!BYTE	$26			; LA	_C027+0
_F111 	!WORD	_C027+0		
	!BYTE	$7A			; SAW	_D046+20
_F112 	!WORD	_D046+20		
	!BYTE	$26			; LA	_C030+0
_F113 	!WORD	_C030+0		
	!BYTE	$7A			; SAW	_D046+22
_F114 	!WORD	_D046+22		
	!BYTE	$26			; LA	_C037+0
_F115 	!WORD	_C037+0		
	!BYTE	$7A			; SAW	_D046+28
_F116 	!WORD	_D046+28		
	!BYTE	$26			; LA	_C041+0
_F117 	!WORD	_C041+0		
	!BYTE	$7A			; SAW	_D046+30
_F118 	!WORD	_D046+30		
	!BYTE	$26			; LA	_C042+0
_F119 	!WORD	_C042+0		
	!BYTE	$7A			; SAW	_D046+32
_F120 	!WORD	_D046+32		
	!BYTE	$26			; LA	_C044+0
_F121 	!WORD	_C044+0		
	!BYTE	$7A			; SAW	_D046+34
_F122 	!WORD	_D046+34		
	!BYTE	$50			; BRNCH	_B045
	!WORD	_B045-*
; libsrc/apple/fileio.pla: 0460:     is MACHID_I
_B048 
; libsrc/apple/fileio.pla: 0461:         fileio:getpfx      = @a1getpfx
; libsrc/apple/fileio.pla: 0462:         fileio:setpfx      = @a1setpfx
; libsrc/apple/fileio.pla: 0463:         fileio:getfileinfo = @a1getfileinfo
; libsrc/apple/fileio.pla: 0464:         fileio:setfileinfo = @a1setfileinfo
; libsrc/apple/fileio.pla: 0465:         fileio:geteof      = @a1geteof
; libsrc/apple/fileio.pla: 0466:         fileio:seteof      = @a1seteof
; libsrc/apple/fileio.pla: 0467:         fileio:iobufalloc  = @a13iobufs
; libsrc/apple/fileio.pla: 0468:         fileio:open        = @a1open
; libsrc/apple/fileio.pla: 0469:         fileio:close       = @a1close
; libsrc/apple/fileio.pla: 0470:         fileio:read        = @a1read
; libsrc/apple/fileio.pla: 0471:         fileio:write       = @a1write
; libsrc/apple/fileio.pla: 0472:         fileio:create      = @a1create
; libsrc/apple/fileio.pla: 0473:         fileio:destroy     = @a1destroy
; libsrc/apple/fileio.pla: 0474:         fileio:rename      = @a1rename
; libsrc/apple/fileio.pla: 0475:         fileio:newline     = @a1newline
; libsrc/apple/fileio.pla: 0476:         fileio:online      = @a1online
; libsrc/apple/fileio.pla: 0477:         fileio:readblock   = @a13readblock
; libsrc/apple/fileio.pla: 0478:         fileio:writeblock  = @a13writeblock
; libsrc/apple/fileio.pla: 0479:         break
	!BYTE	$26			; LA	_C000+0
_F123 	!WORD	_C000+0		
	!BYTE	$7A			; SAW	_D046+0
_F124 	!WORD	_D046+0		
	!BYTE	$26			; LA	_C003+0
_F125 	!WORD	_C003+0		
	!BYTE	$7A			; SAW	_D046+2
_F126 	!WORD	_D046+2		
	!BYTE	$26			; LA	_C005+0
_F127 	!WORD	_C005+0		
	!BYTE	$7A			; SAW	_D046+4
_F128 	!WORD	_D046+4		
	!BYTE	$26			; LA	_C008+0
_F129 	!WORD	_C008+0		
	!BYTE	$7A			; SAW	_D046+6
_F130 	!WORD	_D046+6		
	!BYTE	$26			; LA	_C011+0
_F131 	!WORD	_C011+0		
	!BYTE	$7A			; SAW	_D046+8
_F132 	!WORD	_D046+8		
	!BYTE	$26			; LA	_C013+0
_F133 	!WORD	_C013+0		
	!BYTE	$7A			; SAW	_D046+10
_F134 	!WORD	_D046+10		
	!BYTE	$26			; LA	_C017+0
_F135 	!WORD	_C017+0		
	!BYTE	$7A			; SAW	_D046+12
_F136 	!WORD	_D046+12		
	!BYTE	$26			; LA	_C015+0
_F137 	!WORD	_C015+0		
	!BYTE	$7A			; SAW	_D046+14
_F138 	!WORD	_D046+14		
	!BYTE	$26			; LA	_C020+0
_F139 	!WORD	_C020+0		
	!BYTE	$7A			; SAW	_D046+16
_F140 	!WORD	_D046+16		
	!BYTE	$26			; LA	_C023+0
_F141 	!WORD	_C023+0		
	!BYTE	$7A			; SAW	_D046+18
_F142 	!WORD	_D046+18		
	!BYTE	$26			; LA	_C025+0
_F143 	!WORD	_C025+0		
	!BYTE	$7A			; SAW	_D046+20
_F144 	!WORD	_D046+20		
	!BYTE	$26			; LA	_C028+0
_F145 	!WORD	_C028+0		
	!BYTE	$7A			; SAW	_D046+22
_F146 	!WORD	_D046+22		
	!BYTE	$26			; LA	_C031+0
_F147 	!WORD	_C031+0		
	!BYTE	$7A			; SAW	_D046+24
_F148 	!WORD	_D046+24		
	!BYTE	$26			; LA	_C033+0
_F149 	!WORD	_C033+0		
	!BYTE	$7A			; SAW	_D046+26
_F150 	!WORD	_D046+26		
	!BYTE	$26			; LA	_C035+0
_F151 	!WORD	_C035+0		
	!BYTE	$7A			; SAW	_D046+28
_F152 	!WORD	_D046+28		
	!BYTE	$26			; LA	_C038+0
_F153 	!WORD	_C038+0		
	!BYTE	$7A			; SAW	_D046+30
_F154 	!WORD	_D046+30		
	!BYTE	$26			; LA	_C042+0
_F155 	!WORD	_C042+0		
	!BYTE	$7A			; SAW	_D046+32
_F156 	!WORD	_D046+32		
	!BYTE	$26			; LA	_C044+0
_F157 	!WORD	_C044+0		
	!BYTE	$7A			; SAW	_D046+34
_F158 	!WORD	_D046+34		
	!BYTE	$50			; BRNCH	_B045
	!WORD	_B045-*
; libsrc/apple/fileio.pla: 0480:     otherwise // Apple ][
_B046 
	!BYTE	$02			; CASEBLOCK
	!WORD	$0008
	!WORD	_B048-*
	!WORD	$00C0
	!WORD	_B047-*
; libsrc/apple/fileio.pla: 0481: wend
_B045 
; libsrc/apple/fileio.pla: 0482: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	47
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C012		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C013		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C014		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C015		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C016		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C017		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C018		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C019		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C020		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C021		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C022		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C023		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C024		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C025		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C026		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C027		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C028		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C029		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C030		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C031		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C032		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C033		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C034		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C035		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C036		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C037		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C038		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C039		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C040		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C041		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C042		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C043		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C044		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C045		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	13			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F138-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F139-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F140-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F141-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F142-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F143-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F144-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F145-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F146-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F147-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F148-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F149-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F150-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F151-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F152-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F153-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F154-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F155-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F156-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F157-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F158-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: MACHID
	!BYTE	$CD,$C1,$C3,$C8,$C9,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	1			; ESD INDEX
	; DCI STRING: SYSCALL
	!BYTE	$D3,$D9,$D3,$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	11			; ESD INDEX
	; DCI STRING: HEAPALLOCALIGN
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$C3,$C1,$CC,$C9,$C7,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	13			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: PERR
	!BYTE	$D0,$C5,$D2,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_D047		
	!BYTE	$00			; END OF ESD
