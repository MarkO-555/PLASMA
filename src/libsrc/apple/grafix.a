; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/grafix.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/grafix.pla: 0001: 
; libsrc/apple/grafix.pla: 0002: 
; libsrc/apple/grafix.pla: 0003: byte gfxref, gfxseg
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D028 	!FILL	1			; gfxref, gfxseg
_D029 	!FILL	1			; gfxseg
; libsrc/apple/grafix.pla: 0004: byte params[8], cmd[16]
_D030 	!FILL	8			; params[8], cmd[16]
_D031 	!FILL	16			; cmd[16]
; libsrc/apple/grafix.pla: 0005: 
; libsrc/apple/grafix.pla: 0006: export def pencolor(clr)#0
_SUBSEG 				; BYTECODE STARTS
					; clr -> [0]
_C000 					; pencolor()
; libsrc/apple/grafix.pla: 0007:     params:4 = 2
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grafix.pla: 0008:     cmd.0    = 19 // Pen color
; libsrc/apple/grafix.pla: 0009:     cmd.1    = clr
; libsrc/apple/grafix.pla: 0010:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0011: end
	!BYTE	$04			; CN	2
	!BYTE	$7A			; SAW	_D030+4
_F000 	!WORD	_D030+4		
	!BYTE	$2A,$13			; CB	19
	!BYTE	$78			; SAB	_D031+0
_F001 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_D031+1
_F002 	!WORD	_D031+1		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F003 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F004 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grafix.pla: 0012: 
; libsrc/apple/grafix.pla: 0013: export def fillcolor(clr)#0
					; clr -> [0]
_C001 					; fillcolor()
; libsrc/apple/grafix.pla: 0014:     params:4 = 2
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grafix.pla: 0015:     cmd.0    = 20 // Fill color
; libsrc/apple/grafix.pla: 0016:     cmd.1    = clr
; libsrc/apple/grafix.pla: 0017:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0018: end
	!BYTE	$04			; CN	2
	!BYTE	$7A			; SAW	_D030+4
_F005 	!WORD	_D030+4		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$78			; SAB	_D031+0
_F006 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_D031+1
_F007 	!WORD	_D031+1		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F008 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F009 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grafix.pla: 0019: 
; libsrc/apple/grafix.pla: 0020: export def fillscreen()#0
_C002 					; fillscreen()
; libsrc/apple/grafix.pla: 0021:     params:4 = 1
; libsrc/apple/grafix.pla: 0022:     cmd.9    = 28 // Clear viewport
; libsrc/apple/grafix.pla: 0023:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0024: end
	!BYTE	$02			; CN	1
	!BYTE	$7A			; SAW	_D030+4
_F010 	!WORD	_D030+4		
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$78			; SAB	_D031+9
_F011 	!WORD	_D031+9		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F012 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F013 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5C			; RET
; libsrc/apple/grafix.pla: 0025: 
; libsrc/apple/grafix.pla: 0026: export def penmove(x, y)#0
					; x -> [0]
					; y -> [2]
_C003 					; penmove()
; libsrc/apple/grafix.pla: 0027:     params:4 = 5
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/grafix.pla: 0028:     cmd.0    = 26 // Move pen
; libsrc/apple/grafix.pla: 0029:     cmd:1    = x
; libsrc/apple/grafix.pla: 0030:     cmd:3    = y
; libsrc/apple/grafix.pla: 0031:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0032: end
	!BYTE	$0A			; CN	5
	!BYTE	$7A			; SAW	_D030+4
_F014 	!WORD	_D030+4		
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$78			; SAB	_D031+0
_F015 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F016 	!WORD	_D031+1		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+3
_F017 	!WORD	_D031+3		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F018 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F019 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/grafix.pla: 0033: 
; libsrc/apple/grafix.pla: 0034: export def plot(x, y)#0
					; x -> [0]
					; y -> [2]
_C004 					; plot()
; libsrc/apple/grafix.pla: 0035:     params:4 = 5
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/grafix.pla: 0036:     cmd.0    = 25 // Plot
; libsrc/apple/grafix.pla: 0037:     cmd:1    = x
; libsrc/apple/grafix.pla: 0038:     cmd:3    = y
; libsrc/apple/grafix.pla: 0039:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0040: end
	!BYTE	$0A			; CN	5
	!BYTE	$7A			; SAW	_D030+4
_F020 	!WORD	_D030+4		
	!BYTE	$2A,$19			; CB	25
	!BYTE	$78			; SAB	_D031+0
_F021 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F022 	!WORD	_D031+1		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+3
_F023 	!WORD	_D031+3		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F024 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F025 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/grafix.pla: 0041: 
; libsrc/apple/grafix.pla: 0042: export def line(x1, y1, x2, y2)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C005 					; line()
; libsrc/apple/grafix.pla: 0043:     params:4 = 10
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/grafix.pla: 0044:     cmd.0    = 26 // Move pen
; libsrc/apple/grafix.pla: 0045:     cmd:1    = x1
; libsrc/apple/grafix.pla: 0046:     cmd:3    = y1
; libsrc/apple/grafix.pla: 0047:     cmd.5    = 24 // Line
; libsrc/apple/grafix.pla: 0048:     cmd:6    = x2
; libsrc/apple/grafix.pla: 0049:     cmd:8    = y2
; libsrc/apple/grafix.pla: 0050:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0051: end
	!BYTE	$14			; CN	10
	!BYTE	$7A			; SAW	_D030+4
_F026 	!WORD	_D030+4		
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$78			; SAB	_D031+0
_F027 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F028 	!WORD	_D031+1		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+3
_F029 	!WORD	_D031+3		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$78			; SAB	_D031+5
_F030 	!WORD	_D031+5		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$7A			; SAW	_D031+6
_F031 	!WORD	_D031+6		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$7A			; SAW	_D031+8
_F032 	!WORD	_D031+8		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F033 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F034 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/grafix.pla: 0052: 
; libsrc/apple/grafix.pla: 0053: export def lineto(x, y)#0
					; x -> [0]
					; y -> [2]
_C006 					; lineto()
; libsrc/apple/grafix.pla: 0054:     params:4 = 5
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/grafix.pla: 0055:     cmd.0    = 24 // Line
; libsrc/apple/grafix.pla: 0056:     cmd:1    = x
; libsrc/apple/grafix.pla: 0057:     cmd:3    = y
; libsrc/apple/grafix.pla: 0058:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0059: end
	!BYTE	$0A			; CN	5
	!BYTE	$7A			; SAW	_D030+4
_F035 	!WORD	_D030+4		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$78			; SAB	_D031+0
_F036 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F037 	!WORD	_D031+1		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+3
_F038 	!WORD	_D031+3		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F039 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F040 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/grafix.pla: 0060: 
; libsrc/apple/grafix.pla: 0061: export def rect(x1, y1, x2, y2)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C007 					; rect()
; libsrc/apple/grafix.pla: 0062:     params:4 = 10
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/grafix.pla: 0063:     cmd.0    = 26 // Move pen
; libsrc/apple/grafix.pla: 0064:     cmd:1    = x1
; libsrc/apple/grafix.pla: 0065:     cmd:3    = y1
; libsrc/apple/grafix.pla: 0066:     cmd.5    = 24 // Line
; libsrc/apple/grafix.pla: 0067:     cmd:6    = x2
; libsrc/apple/grafix.pla: 0068:     cmd:8    = y1
; libsrc/apple/grafix.pla: 0069:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0070:     params:4 = 15
; libsrc/apple/grafix.pla: 0071:     cmd.0    = 24 // Line
; libsrc/apple/grafix.pla: 0072:     cmd:1    = x2
; libsrc/apple/grafix.pla: 0073:     cmd:3    = y2
; libsrc/apple/grafix.pla: 0074:     cmd.5    = 24 // Line
; libsrc/apple/grafix.pla: 0075:     cmd:6    = x1
; libsrc/apple/grafix.pla: 0076:     cmd:8    = y2
; libsrc/apple/grafix.pla: 0077:     cmd.10   = 24 // Line
; libsrc/apple/grafix.pla: 0078:     cmd:11   = x1
; libsrc/apple/grafix.pla: 0079:     cmd:13   = y1
; libsrc/apple/grafix.pla: 0080:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0081: end
	!BYTE	$14			; CN	10
	!BYTE	$7A			; SAW	_D030+4
_F041 	!WORD	_D030+4		
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$78			; SAB	_D031+0
_F042 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F043 	!WORD	_D031+1		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+3
_F044 	!WORD	_D031+3		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$78			; SAB	_D031+5
_F045 	!WORD	_D031+5		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$7A			; SAW	_D031+6
_F046 	!WORD	_D031+6		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+8
_F047 	!WORD	_D031+8		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F048 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F049 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$1E			; CN	15
	!BYTE	$7A			; SAW	_D030+4
_F050 	!WORD	_D030+4		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$78			; SAB	_D031+0
_F051 	!WORD	_D031+0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$7A			; SAW	_D031+1
_F052 	!WORD	_D031+1		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$7A			; SAW	_D031+3
_F053 	!WORD	_D031+3		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$78			; SAB	_D031+5
_F054 	!WORD	_D031+5		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+6
_F055 	!WORD	_D031+6		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$7A			; SAW	_D031+8
_F056 	!WORD	_D031+8		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$78			; SAB	_D031+10
_F057 	!WORD	_D031+10		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+11
_F058 	!WORD	_D031+11		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+13
_F059 	!WORD	_D031+13		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F060 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F061 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/grafix.pla: 0082: 
; libsrc/apple/grafix.pla: 0083: export def fillrect(x1, y1, x2, y2)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C008 					; fillrect()
; libsrc/apple/grafix.pla: 0084:     params:4 = 11
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/grafix.pla: 0085:     cmd.0    = 2  // Set viewport
; libsrc/apple/grafix.pla: 0086:     cmd:1    = x1
; libsrc/apple/grafix.pla: 0087:     cmd:3    = x2
; libsrc/apple/grafix.pla: 0088:     cmd:5    = y1
; libsrc/apple/grafix.pla: 0089:     cmd:7    = y2
; libsrc/apple/grafix.pla: 0090:     cmd.9    = 28 // Clear viewport
; libsrc/apple/grafix.pla: 0091:     cmd.10   = 1  // Reset viewport
; libsrc/apple/grafix.pla: 0092:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0093: end
	!BYTE	$16			; CN	11
	!BYTE	$7A			; SAW	_D030+4
_F062 	!WORD	_D030+4		
	!BYTE	$04			; CN	2
	!BYTE	$78			; SAB	_D031+0
_F063 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F064 	!WORD	_D031+1		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$7A			; SAW	_D031+3
_F065 	!WORD	_D031+3		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+5
_F066 	!WORD	_D031+5		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$7A			; SAW	_D031+7
_F067 	!WORD	_D031+7		
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$78			; SAB	_D031+9
_F068 	!WORD	_D031+9		
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D031+10
_F069 	!WORD	_D031+10		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F070 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F071 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/grafix.pla: 0094: 
; libsrc/apple/grafix.pla: 0095: export def bitblt(bits, pitch, x, y, width, height)#0
					; bits -> [0]
					; pitch -> [2]
					; x -> [4]
					; y -> [6]
					; width -> [8]
					; height -> [10]
_C009 					; bitblt()
; libsrc/apple/grafix.pla: 0096:     params:4 = 14
	!BYTE	$58,$0C,$06		; ENTER	12,6
; libsrc/apple/grafix.pla: 0097:     cmd.0    = 4  // Draw block
; libsrc/apple/grafix.pla: 0098:     cmd:1    = bits
; libsrc/apple/grafix.pla: 0099:     cmd.3    = ^$FFED & $8F
; libsrc/apple/grafix.pla: 0100:     cmd:4    = pitch
; libsrc/apple/grafix.pla: 0101:     cmd:6    = x
; libsrc/apple/grafix.pla: 0102:     cmd:8    = y
; libsrc/apple/grafix.pla: 0103:     cmd:10   = width
; libsrc/apple/grafix.pla: 0104:     cmd:12   = height
; libsrc/apple/grafix.pla: 0105:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0106: end
	!BYTE	$1C			; CN	14
	!BYTE	$7A			; SAW	_D030+4
_F072 	!WORD	_D030+4		
	!BYTE	$08			; CN	4
	!BYTE	$78			; SAB	_D031+0
_F073 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+1
_F074 	!WORD	_D031+1		
	!BYTE	$68,$ED,$FF		; LAB	65517
	!BYTE	$3C,$8F			; ANDI	143
	!BYTE	$78			; SAB	_D031+3
_F075 	!WORD	_D031+3		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D031+4
_F076 	!WORD	_D031+4		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$7A			; SAW	_D031+6
_F077 	!WORD	_D031+6		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$7A			; SAW	_D031+8
_F078 	!WORD	_D031+8		
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$7A			; SAW	_D031+10
_F079 	!WORD	_D031+10		
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$7A			; SAW	_D031+12
_F080 	!WORD	_D031+12		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F081 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F082 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$0C			; LEAVE	12
; libsrc/apple/grafix.pla: 0107: 
; libsrc/apple/grafix.pla: 0108: export def drawmode(mode)#0
					; mode -> [0]
_C010 					; drawmode()
; libsrc/apple/grafix.pla: 0109:     params:4 = 2
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grafix.pla: 0110:     cmd.0    = 21 // Transfer mode
; libsrc/apple/grafix.pla: 0111:     cmd.1    = mode
; libsrc/apple/grafix.pla: 0112:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0113: end
	!BYTE	$04			; CN	2
	!BYTE	$7A			; SAW	_D030+4
_F083 	!WORD	_D030+4		
	!BYTE	$2A,$15			; CB	21
	!BYTE	$78			; SAB	_D031+0
_F084 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_D031+1
_F085 	!WORD	_D031+1		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F086 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F087 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grafix.pla: 0114: 
; libsrc/apple/grafix.pla: 0115: export def setmode(mode)#0
					; mode -> [0]
_C011 					; setmode()
; libsrc/apple/grafix.pla: 0116:     if mode < 0
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grafix.pla: 0117:         //
; libsrc/apple/grafix.pla: 0118:         // Free driver
; libsrc/apple/grafix.pla: 0119:         //
; libsrc/apple/grafix.pla: 0120:         params.0 = 1
; libsrc/apple/grafix.pla: 0121:         params.1 = gfxref
; libsrc/apple/grafix.pla: 0122:         syscall($CC, @params)
; libsrc/apple/grafix.pla: 0123:         gfxref   = 0
; libsrc/apple/grafix.pla: 0124:         //
; libsrc/apple/grafix.pla: 0125:         // Deaalocate bank 0
; libsrc/apple/grafix.pla: 0126:         //
; libsrc/apple/grafix.pla: 0127:         params.0 = 1
; libsrc/apple/grafix.pla: 0128:         params.1 = gfxseg
; libsrc/apple/grafix.pla: 0129:         syscall($45, @params)
; libsrc/apple/grafix.pla: 0130:         ^$1907   = $00 // Unset graphics pages allocated
; libsrc/apple/grafix.pla: 0131:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D030+0
_F088 	!WORD	_D030+0		
	!BYTE	$68			; LAB	_D028+0
_F089 	!WORD	_D028+0		
	!BYTE	$78			; SAB	_D030+1
_F090 	!WORD	_D030+1		
	!BYTE	$2A,$CC			; CB	204
	!BYTE	$26			; LA	_D030+0
_F091 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F092 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D028+0
_F093 	!WORD	_D028+0		
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D030+0
_F094 	!WORD	_D030+0		
	!BYTE	$68			; LAB	_D029+0
_F095 	!WORD	_D029+0		
	!BYTE	$78			; SAB	_D030+1
_F096 	!WORD	_D030+1		
	!BYTE	$2A,$45			; CB	69
	!BYTE	$26			; LA	_D030+0
_F097 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F098 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$78,$07,$19		; SAB	6407
_B001 
_B002 
; libsrc/apple/grafix.pla: 0132:     if not gfxref
; libsrc/apple/grafix.pla: 0133:         return
	!BYTE	$68			; LAB	_D028+0
_F099 	!WORD	_D028+0		
	!BYTE	$4E			; BRTRU	_B003
	!WORD	_B003-*
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grafix.pla: 0134:     fin
_B003 
_B004 
; libsrc/apple/grafix.pla: 0135:     params.0 = 3
; libsrc/apple/grafix.pla: 0136:     params.1 = gfxref
; libsrc/apple/grafix.pla: 0137:     params:2 = @cmd
; libsrc/apple/grafix.pla: 0138:     params:4 = 8
; libsrc/apple/grafix.pla: 0139:     cmd.0    = 16 // Set mode
; libsrc/apple/grafix.pla: 0140:     cmd.1    = mode
; libsrc/apple/grafix.pla: 0141:     cmd.2    = 19 // Pen color
; libsrc/apple/grafix.pla: 0142:     cmd.3    = 0
; libsrc/apple/grafix.pla: 0143:     cmd.4    = 1  // Reset viewport
; libsrc/apple/grafix.pla: 0144:     cmd.5    = 28 // Clear viewport
; libsrc/apple/grafix.pla: 0145:     cmd.7    = 15 // Turn on screen
; libsrc/apple/grafix.pla: 0146:     syscall($CB, @params)
; libsrc/apple/grafix.pla: 0147: end
	!BYTE	$06			; CN	3
	!BYTE	$78			; SAB	_D030+0
_F100 	!WORD	_D030+0		
	!BYTE	$68			; LAB	_D028+0
_F101 	!WORD	_D028+0		
	!BYTE	$78			; SAB	_D030+1
_F102 	!WORD	_D030+1		
	!BYTE	$26			; LA	_D031+0
_F103 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_D030+2
_F104 	!WORD	_D030+2		
	!BYTE	$10			; CN	8
	!BYTE	$7A			; SAW	_D030+4
_F105 	!WORD	_D030+4		
	!BYTE	$2A,$10			; CB	16
	!BYTE	$78			; SAB	_D031+0
_F106 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_D031+1
_F107 	!WORD	_D031+1		
	!BYTE	$2A,$13			; CB	19
	!BYTE	$78			; SAB	_D031+2
_F108 	!WORD	_D031+2		
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D031+3
_F109 	!WORD	_D031+3		
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D031+4
_F110 	!WORD	_D031+4		
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$78			; SAB	_D031+5
_F111 	!WORD	_D031+5		
	!BYTE	$1E			; CN	15
	!BYTE	$78			; SAB	_D031+7
_F112 	!WORD	_D031+7		
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$26			; LA	_D030+0
_F113 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F114 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grafix.pla: 0148: 
; libsrc/apple/grafix.pla: 0149: if MACHID <> $F2
_INIT 
; libsrc/apple/grafix.pla: 0150:     puts("Apple /// only.\n")
	!BYTE	$68			; LAB	_X001+0
_F115 	!WORD	0+0		
	!BYTE	$2A,$F2			; CB	242
	!BYTE	$22			; BREQ	_B005
	!WORD	_B005-*
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$41,$70,$70,$6C,$65,$20,$2F,$2F
	!BYTE	$2F,$20,$6F,$6E,$6C,$79,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F116 	!WORD	0		
; libsrc/apple/grafix.pla: 0151:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; libsrc/apple/grafix.pla: 0152: fin
_B005 
_B006 
; libsrc/apple/grafix.pla: 0153: //
; libsrc/apple/grafix.pla: 0154: // Allocate bank 0
; libsrc/apple/grafix.pla: 0155: //
; libsrc/apple/grafix.pla: 0156: params.0 = 4
; libsrc/apple/grafix.pla: 0157: params:1 = $2000
; libsrc/apple/grafix.pla: 0158: params:3 = $9F00
; libsrc/apple/grafix.pla: 0159: params.5 = $10
; libsrc/apple/grafix.pla: 0160: params.6 = $00
; libsrc/apple/grafix.pla: 0161: syscall($40, @params)
; libsrc/apple/grafix.pla: 0162: gfxseg   = params.6
; libsrc/apple/grafix.pla: 0163: ^$1907   = $80 // Set graphics pages allocated
; libsrc/apple/grafix.pla: 0164: //
; libsrc/apple/grafix.pla: 0165: // Open graphics driver
; libsrc/apple/grafix.pla: 0166: //
; libsrc/apple/grafix.pla: 0167: params.0 = 4
; libsrc/apple/grafix.pla: 0168: params:1 = ".GRAFIX"
	!BYTE	$08			; CN	4
	!BYTE	$78			; SAB	_D030+0
_F117 	!WORD	_D030+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$7A			; SAW	_D030+1
_F118 	!WORD	_D030+1		
	!BYTE	$2C,$00,$9F		; CW	40704
	!BYTE	$7A			; SAW	_D030+3
_F119 	!WORD	_D030+3		
	!BYTE	$2A,$10			; CB	16
	!BYTE	$78			; SAB	_D030+5
_F120 	!WORD	_D030+5		
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D030+6
_F121 	!WORD	_D030+6		
	!BYTE	$2A,$40			; CB	64
	!BYTE	$26			; LA	_D030+0
_F122 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F123 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D030+6
_F124 	!WORD	_D030+6		
	!BYTE	$78			; SAB	_D029+0
_F125 	!WORD	_D029+0		
	!BYTE	$2A,$80			; CB	128
	!BYTE	$78,$07,$19		; SAB	6407
	!BYTE	$08			; CN	4
	!BYTE	$78			; SAB	_D030+0
_F126 	!WORD	_D030+0		
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$2E,$47,$52,$41,$46,$49,$58
	!BYTE	$7A			; SAW	_D030+1
_F127 	!WORD	_D030+1		
; libsrc/apple/grafix.pla: 0169: params.3 = 0
; libsrc/apple/grafix.pla: 0170: params:4 = 0
; libsrc/apple/grafix.pla: 0171: params.6 = 0
; libsrc/apple/grafix.pla: 0172: syscall($C8, @params)
; libsrc/apple/grafix.pla: 0173: gfxref   = params.3
; libsrc/apple/grafix.pla: 0174: done
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D030+3
_F128 	!WORD	_D030+3		
	!BYTE	$00			; CN	0
	!BYTE	$7A			; SAW	_D030+4
_F129 	!WORD	_D030+4		
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D030+6
_F130 	!WORD	_D030+6		
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$26			; LA	_D030+0
_F131 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X011
_F132 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D030+3
_F133 	!WORD	_D030+3		
	!BYTE	$78			; SAB	_D028+0
_F134 	!WORD	_D028+0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	13
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: MACHID
	!BYTE	$CD,$C1,$C3,$C8,$C9,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	1			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: SYSCALL
	!BYTE	$D3,$D9,$D3,$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	11			; ESD INDEX
	; DCI STRING: PENCOLOR
	!BYTE	$D0,$C5,$CE,$C3,$CF,$CC,$CF,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: FILLCOLOR
	!BYTE	$C6,$C9,$CC,$CC,$C3,$CF,$CC,$CF,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: FILLSCREEN
	!BYTE	$C6,$C9,$CC,$CC,$D3,$C3,$D2,$C5,$C5,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: PENMOVE
	!BYTE	$D0,$C5,$CE,$CD,$CF,$D6,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: PLOT
	!BYTE	$D0,$CC,$CF,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: LINE
	!BYTE	$CC,$C9,$CE,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	; DCI STRING: LINETO
	!BYTE	$CC,$C9,$CE,$C5,$D4,$4F
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C006		
	; DCI STRING: RECT
	!BYTE	$D2,$C5,$C3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C007		
	; DCI STRING: FILLRECT
	!BYTE	$C6,$C9,$CC,$CC,$D2,$C5,$C3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C008		
	; DCI STRING: BITBLT
	!BYTE	$C2,$C9,$D4,$C2,$CC,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C009		
	; DCI STRING: DRAWMODE
	!BYTE	$C4,$D2,$C1,$D7,$CD,$CF,$C4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C010		
	; DCI STRING: SETMODE
	!BYTE	$D3,$C5,$D4,$CD,$CF,$C4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C011		
	!BYTE	$00			; END OF ESD
