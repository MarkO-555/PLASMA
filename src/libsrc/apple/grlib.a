; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/grlib.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/grlib.pla: 0001: 
; libsrc/apple/grlib.pla: 0002: //
; libsrc/apple/grlib.pla: 0003: // Apple II hardware constants.
; libsrc/apple/grlib.pla: 0004: //
; libsrc/apple/grlib.pla: 0005: const showgraphics = $C050
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; showgraphics = 49232
; libsrc/apple/grlib.pla: 0006: const showtext     = $C051
					; showtext = 49233
; libsrc/apple/grlib.pla: 0007: const showfull     = $C052
					; showfull = 49234
; libsrc/apple/grlib.pla: 0008: const showmix      = $C053
					; showmix = 49235
; libsrc/apple/grlib.pla: 0009: const showpage1    = $C054
					; showpage1 = 49236
; libsrc/apple/grlib.pla: 0010: const showpage2    = $C055
					; showpage2 = 49237
; libsrc/apple/grlib.pla: 0011: const showlores    = $C056
					; showlores = 49238
; libsrc/apple/grlib.pla: 0012: const showhires    = $C057
					; showhires = 49239
; libsrc/apple/grlib.pla: 0013: const show40       = $C00C
					; show40 = 49164
; libsrc/apple/grlib.pla: 0014: const show80       = $C00D
					; show80 = 49165
; libsrc/apple/grlib.pla: 0015: const mapmain      = $C000
					; mapmain = 49152
; libsrc/apple/grlib.pla: 0016: const mapaux       = $C001
					; mapaux = 49153
; libsrc/apple/grlib.pla: 0017: const an3on        = $C05E
					; an3on = 49246
; libsrc/apple/grlib.pla: 0018: const an3off       = $C05F
					; an3off = 49247
; libsrc/apple/grlib.pla: 0019: const ena80        = $C07E
					; ena80 = 49278
; libsrc/apple/grlib.pla: 0020: const dis80        = $C07F
					; dis80 = 49279
; libsrc/apple/grlib.pla: 0021: const page1        = 0
					; page1 = 0
; libsrc/apple/grlib.pla: 0022: const page2        = 1
					; page2 = 1
; libsrc/apple/grlib.pla: 0023: //
; libsrc/apple/grlib.pla: 0024: // Screen row address arrays.
; libsrc/apple/grlib.pla: 0025: //
; libsrc/apple/grlib.pla: 0026: word[] gr1row = $0400,$0480,$0500,$0580,$0600,$0680,$0700,$0780
_D028 					; gr1row = $0400,$0480,$0500,$0580,$0600,$0680,$0700,$0780
	!WORD	$0400
	!WORD	$0480
	!WORD	$0500
	!WORD	$0580
	!WORD	$0600
	!WORD	$0680
	!WORD	$0700
	!WORD	$0780
; libsrc/apple/grlib.pla: 0027: word          = $0428,$04A8,$0528,$05A8,$0628,$06A8,$0728,$07A8
	!WORD	$0428
	!WORD	$04A8
	!WORD	$0528
	!WORD	$05A8
	!WORD	$0628
	!WORD	$06A8
	!WORD	$0728
	!WORD	$07A8
; libsrc/apple/grlib.pla: 0028: word          = $0450,$04D0,$0550,$05D0,$0650,$06D0,$0750,$07D0
	!WORD	$0450
	!WORD	$04D0
	!WORD	$0550
	!WORD	$05D0
	!WORD	$0650
	!WORD	$06D0
	!WORD	$0750
	!WORD	$07D0
; libsrc/apple/grlib.pla: 0029: word[] gr2row = $0800,$0880,$0900,$0980,$0A00,$0A80,$0B00,$0B80
_D029 					; gr2row = $0800,$0880,$0900,$0980,$0A00,$0A80,$0B00,$0B80
	!WORD	$0800
	!WORD	$0880
	!WORD	$0900
	!WORD	$0980
	!WORD	$0A00
	!WORD	$0A80
	!WORD	$0B00
	!WORD	$0B80
; libsrc/apple/grlib.pla: 0030: word          = $0828,$08A8,$0928,$09A8,$0A28,$0AA8,$0B28,$0BA8
	!WORD	$0828
	!WORD	$08A8
	!WORD	$0928
	!WORD	$09A8
	!WORD	$0A28
	!WORD	$0AA8
	!WORD	$0B28
	!WORD	$0BA8
; libsrc/apple/grlib.pla: 0031: word          = $0850,$08D0,$0950,$09D0,$0A50,$0AD0,$0B50,$0BD0
	!WORD	$0850
	!WORD	$08D0
	!WORD	$0950
	!WORD	$09D0
	!WORD	$0A50
	!WORD	$0AD0
	!WORD	$0B50
	!WORD	$0BD0
; libsrc/apple/grlib.pla: 0032: word[] grbuff = @gr1row, @gr2row
_D030 					; grbuff = @gr1row, @gr2row
_F000 	!WORD	_D028
_F001 	!WORD	_D029
; libsrc/apple/grlib.pla: 0033: word drawbuff
_D031 	!FILL	2			; drawbuff
; libsrc/apple/grlib.pla: 0034: byte drawpage
_D032 	!FILL	1			; drawpage
; libsrc/apple/grlib.pla: 0035: 
; libsrc/apple/grlib.pla: 0036: asm grInc(buff)
_A000 					; grInc()
; libsrc/apple/grlib.pla: 0037: !SOURCE    "vmsrc/plvmzp.inc"
!SOURCE    "vmsrc/plvmzp.inc"
; libsrc/apple/grlib.pla: 0038: GBASL    =    $26
GBASL    =    $26
; libsrc/apple/grlib.pla: 0039: GBASH    =    $27
GBASH    =    $27
; libsrc/apple/grlib.pla: 0040: GBASE    =    GBASL
GBASE    =    GBASL
; libsrc/apple/grlib.pla: 0041: GCLR     =    $30
GCLR     =    $30
; libsrc/apple/grlib.pla: 0042: end
; libsrc/apple/grlib.pla: 0043: //
; libsrc/apple/grlib.pla: 0044: // Plot pixel
; libsrc/apple/grlib.pla: 0045: //
; libsrc/apple/grlib.pla: 0046: export asm grPlot(x, y)#0
_A001 					; grPlot()
; libsrc/apple/grlib.pla: 0047:         ; GET ROW BUFFER ADDRESSES
        ; GET ROW BUFFER ADDRESSES
; libsrc/apple/grlib.pla: 0048: 		LDA     $3000
		LDA     $3000
; libsrc/apple/grlib.pla: 0049:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0050:         LDA     $3001
        LDA     $3001
; libsrc/apple/grlib.pla: 0051: 		STA		SRCH
		STA		SRCH
; libsrc/apple/grlib.pla: 0052:         LDA     ESTKL,X     ; Y COORD
        LDA     ESTKL,X     ; Y COORD
; libsrc/apple/grlib.pla: 0053:         AND     #$FE
        AND     #$FE
; libsrc/apple/grlib.pla: 0054:         TAY
        TAY
; libsrc/apple/grlib.pla: 0055:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0056:         STA     GBASL
        STA     GBASL
; libsrc/apple/grlib.pla: 0057:         INY
        INY
; libsrc/apple/grlib.pla: 0058:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0059:         STA     GBASH
        STA     GBASH
; libsrc/apple/grlib.pla: 0060:         LDY     ESTKL+1,X   ; X COORD
        LDY     ESTKL+1,X   ; X COORD
; libsrc/apple/grlib.pla: 0061:         LSR     ESTKL,X
        LSR     ESTKL,X
; libsrc/apple/grlib.pla: 0062:         LDA     GCLR        ; COLOR
        LDA     GCLR        ; COLOR
; libsrc/apple/grlib.pla: 0063:         EOR     (GBASE),Y
        EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0064:         BCS     +
        BCS     +
; libsrc/apple/grlib.pla: 0065:         ; EVEN ROW
        ; EVEN ROW
; libsrc/apple/grlib.pla: 0066:         AND     #$0F
        AND     #$0F
; libsrc/apple/grlib.pla: 0067:         BCC     ++
        BCC     ++
; libsrc/apple/grlib.pla: 0068:         ; ODD ROW
        ; ODD ROW
; libsrc/apple/grlib.pla: 0069: +       AND     #$F0
+       AND     #$F0
; libsrc/apple/grlib.pla: 0070: ++      EOR     (GBASE),Y
++      EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0071:         STA     (GBASE),Y
        STA     (GBASE),Y
; libsrc/apple/grlib.pla: 0072:         INX
        INX
; libsrc/apple/grlib.pla: 0073:         INX
        INX
; libsrc/apple/grlib.pla: 0074:         RTS
        RTS
; libsrc/apple/grlib.pla: 0075: end
; libsrc/apple/grlib.pla: 0076: //
; libsrc/apple/grlib.pla: 0077: // Plot horizontal row of pixels
; libsrc/apple/grlib.pla: 0078: //
; libsrc/apple/grlib.pla: 0079: export asm grHLin(x1, x2, y)#0
_A002 					; grHLin()
; libsrc/apple/grlib.pla: 0080:         ; GET ROW BUFFER ADDRESSES
        ; GET ROW BUFFER ADDRESSES
; libsrc/apple/grlib.pla: 0081: 		LDA     $3000
		LDA     $3000
; libsrc/apple/grlib.pla: 0082:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0083:         LDA     $3001
        LDA     $3001
; libsrc/apple/grlib.pla: 0084: 		STA		SRCH
		STA		SRCH
; libsrc/apple/grlib.pla: 0085:         LDA     ESTKL+1,X    ; X2 COORD
        LDA     ESTKL+1,X    ; X2 COORD
; libsrc/apple/grlib.pla: 0086:         STA     TMPH
        STA     TMPH
; libsrc/apple/grlib.pla: 0087:         LDA     ESTKL+0,X    ; Y COORD
        LDA     ESTKL+0,X    ; Y COORD
; libsrc/apple/grlib.pla: 0088:         AND     #$FE
        AND     #$FE
; libsrc/apple/grlib.pla: 0089:         TAY
        TAY
; libsrc/apple/grlib.pla: 0090:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0091:         STA     GBASL
        STA     GBASL
; libsrc/apple/grlib.pla: 0092:         INY
        INY
; libsrc/apple/grlib.pla: 0093:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0094:         STA     GBASH
        STA     GBASH
; libsrc/apple/grlib.pla: 0095:         LDY     ESTKL+2,X   ; X1 COORD
        LDY     ESTKL+2,X   ; X1 COORD
; libsrc/apple/grlib.pla: 0096: -       LDA     ESTKL+0,X   ; Y COORD
-       LDA     ESTKL+0,X   ; Y COORD
; libsrc/apple/grlib.pla: 0097:         LSR
        LSR
; libsrc/apple/grlib.pla: 0098:         LDA     GCLR        ; COLOR
        LDA     GCLR        ; COLOR
; libsrc/apple/grlib.pla: 0099:         ; EVEN ROW
        ; EVEN ROW
; libsrc/apple/grlib.pla: 0100:         EOR     (GBASE),Y
        EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0101:         BCS     +
        BCS     +
; libsrc/apple/grlib.pla: 0102:         AND     #$0F
        AND     #$0F
; libsrc/apple/grlib.pla: 0103:         BCC     ++
        BCC     ++
; libsrc/apple/grlib.pla: 0104:         ; ODD ROW
        ; ODD ROW
; libsrc/apple/grlib.pla: 0105: +       AND     #$F0
+       AND     #$F0
; libsrc/apple/grlib.pla: 0106: ++      EOR     (GBASE),Y
++      EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0107:         STA     (GBASE),Y
        STA     (GBASE),Y
; libsrc/apple/grlib.pla: 0108:         INC     ESTKL+2,X   ; X1 COORD
        INC     ESTKL+2,X   ; X1 COORD
; libsrc/apple/grlib.pla: 0109:         LDY     ESTKL+2,X
        LDY     ESTKL+2,X
; libsrc/apple/grlib.pla: 0110:         CPY     TMPH        ; X2 COORD
        CPY     TMPH        ; X2 COORD
; libsrc/apple/grlib.pla: 0111:         BCC     -
        BCC     -
; libsrc/apple/grlib.pla: 0112:         BEQ     -
        BEQ     -
; libsrc/apple/grlib.pla: 0113:         INX
        INX
; libsrc/apple/grlib.pla: 0114:         INX
        INX
; libsrc/apple/grlib.pla: 0115:         INX
        INX
; libsrc/apple/grlib.pla: 0116:         RTS
        RTS
; libsrc/apple/grlib.pla: 0117: end
; libsrc/apple/grlib.pla: 0118: //
; libsrc/apple/grlib.pla: 0119: // Plot horizontal row of pixels
; libsrc/apple/grlib.pla: 0120: //
; libsrc/apple/grlib.pla: 0121: export asm grVLin(y1, y2, x)#0
_A003 					; grVLin()
; libsrc/apple/grlib.pla: 0122:         ; GET ROW BUFFER ADDRESSES
        ; GET ROW BUFFER ADDRESSES
; libsrc/apple/grlib.pla: 0123: 		LDA     $3000
		LDA     $3000
; libsrc/apple/grlib.pla: 0124:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0125:         LDA     $3001
        LDA     $3001
; libsrc/apple/grlib.pla: 0126: 		STA		SRCH
		STA		SRCH
; libsrc/apple/grlib.pla: 0127:         LDA     ESTKL+2,X   ; Y1 COORD
        LDA     ESTKL+2,X   ; Y1 COORD
; libsrc/apple/grlib.pla: 0128: -       AND     #$FE
-       AND     #$FE
; libsrc/apple/grlib.pla: 0129:         TAY
        TAY
; libsrc/apple/grlib.pla: 0130:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0131:         STA     GBASL
        STA     GBASL
; libsrc/apple/grlib.pla: 0132:         INY
        INY
; libsrc/apple/grlib.pla: 0133:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0134:         STA     GBASH
        STA     GBASH
; libsrc/apple/grlib.pla: 0135:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0136:         LSR
        LSR
; libsrc/apple/grlib.pla: 0137:         LDY     ESTKL+0,X   ; X COORD
        LDY     ESTKL+0,X   ; X COORD
; libsrc/apple/grlib.pla: 0138:         LDA     GCLR        ; COLOR
        LDA     GCLR        ; COLOR
; libsrc/apple/grlib.pla: 0139:         ; EVEN ROW
        ; EVEN ROW
; libsrc/apple/grlib.pla: 0140:         EOR     (GBASE),Y
        EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0141:         BCS     +
        BCS     +
; libsrc/apple/grlib.pla: 0142:         AND     #$0F
        AND     #$0F
; libsrc/apple/grlib.pla: 0143:         BCC     ++
        BCC     ++
; libsrc/apple/grlib.pla: 0144:         ; ODD ROW
        ; ODD ROW
; libsrc/apple/grlib.pla: 0145: +       AND     #$F0
+       AND     #$F0
; libsrc/apple/grlib.pla: 0146: ++      EOR     (GBASE),Y
++      EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0147:         STA     (GBASE),Y
        STA     (GBASE),Y
; libsrc/apple/grlib.pla: 0148:         INC     ESTKL+2,X   ; Y1 COORD
        INC     ESTKL+2,X   ; Y1 COORD
; libsrc/apple/grlib.pla: 0149:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0150:         CMP     ESTKL+1,X   ; Y2 COORD
        CMP     ESTKL+1,X   ; Y2 COORD
; libsrc/apple/grlib.pla: 0151:         BCC     -
        BCC     -
; libsrc/apple/grlib.pla: 0152:         BEQ     -
        BEQ     -
; libsrc/apple/grlib.pla: 0153:         INX
        INX
; libsrc/apple/grlib.pla: 0154:         INX
        INX
; libsrc/apple/grlib.pla: 0155:         INX
        INX
; libsrc/apple/grlib.pla: 0156:         RTS
        RTS
; libsrc/apple/grlib.pla: 0157: end
; libsrc/apple/grlib.pla: 0158: //
; libsrc/apple/grlib.pla: 0159: // Draw sprite
; libsrc/apple/grlib.pla: 0160: //
; libsrc/apple/grlib.pla: 0161: export asm grBLT(x, y, width, height, src)#0
_A004 					; grBLT()
; libsrc/apple/grlib.pla: 0162:         ; GET ROW BUFFER ADDRESSES
        ; GET ROW BUFFER ADDRESSES
; libsrc/apple/grlib.pla: 0163: 		LDA     $3000
		LDA     $3000
; libsrc/apple/grlib.pla: 0164:         STA     DSTL
        STA     DSTL
; libsrc/apple/grlib.pla: 0165:         LDA     $3001
        LDA     $3001
; libsrc/apple/grlib.pla: 0166: 		STA		DSTH
		STA		DSTH
; libsrc/apple/grlib.pla: 0167:         LDA     ESTKL,X     ; SPRITE
        LDA     ESTKL,X     ; SPRITE
; libsrc/apple/grlib.pla: 0168:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0169:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/apple/grlib.pla: 0170:         STA     SRCH
        STA     SRCH
; libsrc/apple/grlib.pla: 0171:         LDA     ESTKL+4,X   ; X1 COORD
        LDA     ESTKL+4,X   ; X1 COORD
; libsrc/apple/grlib.pla: 0172:         CMP     #40
        CMP     #40
; libsrc/apple/grlib.pla: 0173:         BPL     ++++
        BPL     ++++
; libsrc/apple/grlib.pla: 0174:         CLC
        CLC
; libsrc/apple/grlib.pla: 0175:         ADC     ESTKL+2,X
        ADC     ESTKL+2,X
; libsrc/apple/grlib.pla: 0176:         BMI     ++++
        BMI     ++++
; libsrc/apple/grlib.pla: 0177:         STA     ESTKH+2,X   ; X2 COORD
        STA     ESTKH+2,X   ; X2 COORD
; libsrc/apple/grlib.pla: 0178:         LDA     ESTKL+3,X   ; Y1 COORD
        LDA     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/grlib.pla: 0179:         CMP     #48
        CMP     #48
; libsrc/apple/grlib.pla: 0180:         BPL     ++++
        BPL     ++++
; libsrc/apple/grlib.pla: 0181:         STA     ESTKH+3,X   ; Y COORD
        STA     ESTKH+3,X   ; Y COORD
; libsrc/apple/grlib.pla: 0182:         CLC
        CLC
; libsrc/apple/grlib.pla: 0183:         ADC     ESTKL+1,X
        ADC     ESTKL+1,X
; libsrc/apple/grlib.pla: 0184:         BMI     ++++
        BMI     ++++
; libsrc/apple/grlib.pla: 0185:         STA     ESTKH+1,X   ; Y2 COORD
        STA     ESTKH+1,X   ; Y2 COORD
; libsrc/apple/grlib.pla: 0186:         STX     ESP
        STX     ESP
; libsrc/apple/grlib.pla: 0187:         LDA     ESTKH+3,X
        LDA     ESTKH+3,X
; libsrc/apple/grlib.pla: 0188: -       CMP     #48
-       CMP     #48
; libsrc/apple/grlib.pla: 0189:         BCC     +
        BCC     +
; libsrc/apple/grlib.pla: 0190:         LDA     SRCL        ; SKIP TO NEXT ROW
        LDA     SRCL        ; SKIP TO NEXT ROW
; libsrc/apple/grlib.pla: 0191:         CLC
        CLC
; libsrc/apple/grlib.pla: 0192:         ADC     ESTKL+2,X   ; WIDTH
        ADC     ESTKL+2,X   ; WIDTH
; libsrc/apple/grlib.pla: 0193:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0194:         LDA     SRCH
        LDA     SRCH
; libsrc/apple/grlib.pla: 0195:         ADC     #$00
        ADC     #$00
; libsrc/apple/grlib.pla: 0196:         STA     SRCH
        STA     SRCH
; libsrc/apple/grlib.pla: 0197:         BNE     +++
        BNE     +++
; libsrc/apple/grlib.pla: 0198: +       AND     #$FE
+       AND     #$FE
; libsrc/apple/grlib.pla: 0199:         TAY
        TAY
; libsrc/apple/grlib.pla: 0200:         LDA     (DST),Y
        LDA     (DST),Y
; libsrc/apple/grlib.pla: 0201:         STA     GBASL
        STA     GBASL
; libsrc/apple/grlib.pla: 0202:         INY
        INY
; libsrc/apple/grlib.pla: 0203:         LDA     (DST),Y
        LDA     (DST),Y
; libsrc/apple/grlib.pla: 0204:         STA     GBASH
        STA     GBASH
; libsrc/apple/grlib.pla: 0205:         LDA     ESTKL+4,X   ; X1 COORD
        LDA     ESTKL+4,X   ; X1 COORD
; libsrc/apple/grlib.pla: 0206:         STA     ESTKH+4,X   ; X COORD
        STA     ESTKH+4,X   ; X COORD
; libsrc/apple/grlib.pla: 0207: --      CMP     #40
--      CMP     #40
; libsrc/apple/grlib.pla: 0208:         BCS     ++
        BCS     ++
; libsrc/apple/grlib.pla: 0209:         STA     TMP
        STA     TMP
; libsrc/apple/grlib.pla: 0210:         LDA     ESTKH+3,X   ; Y COORD
        LDA     ESTKH+3,X   ; Y COORD
; libsrc/apple/grlib.pla: 0211:         LSR
        LSR
; libsrc/apple/grlib.pla: 0212:         LDY     #$00
        LDY     #$00
; libsrc/apple/grlib.pla: 0213:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/grlib.pla: 0214:         BMI     ++
        BMI     ++
; libsrc/apple/grlib.pla: 0215:         LDY     TMP
        LDY     TMP
; libsrc/apple/grlib.pla: 0216:         BCS     oddBLT
        BCS     oddBLT
; libsrc/apple/grlib.pla: 0217:         ; EVEN ROW
        ; EVEN ROW
; libsrc/apple/grlib.pla: 0218:         EOR     (GBASE),Y
        EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0219:         AND     #$0F
        AND     #$0F
; libsrc/apple/grlib.pla: 0220:         BCC     evnBLT
        BCC     evnBLT
; libsrc/apple/grlib.pla: 0221:        ; ODD ROW
       ; ODD ROW
; libsrc/apple/grlib.pla: 0222: oddBLT  ASL
oddBLT  ASL
; libsrc/apple/grlib.pla: 0223:         ASL
        ASL
; libsrc/apple/grlib.pla: 0224:         ASL
        ASL
; libsrc/apple/grlib.pla: 0225:         ASL
        ASL
; libsrc/apple/grlib.pla: 0226:         EOR     (GBASE),Y
        EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0227:         AND     #$F0
        AND     #$F0
; libsrc/apple/grlib.pla: 0228: evnBLT  EOR     (GBASE),Y
evnBLT  EOR     (GBASE),Y
; libsrc/apple/grlib.pla: 0229:         STA     (GBASE),Y
        STA     (GBASE),Y
; libsrc/apple/grlib.pla: 0230: ++      INC     SRCL
++      INC     SRCL
; libsrc/apple/grlib.pla: 0231:         BNE     +
        BNE     +
; libsrc/apple/grlib.pla: 0232:         INC     SRCH
        INC     SRCH
; libsrc/apple/grlib.pla: 0233: +       INC     ESTKH+4,X   ; X COORD
+       INC     ESTKH+4,X   ; X COORD
; libsrc/apple/grlib.pla: 0234:         LDA     ESTKH+4,X
        LDA     ESTKH+4,X
; libsrc/apple/grlib.pla: 0235:         BMI     --
        BMI     --
; libsrc/apple/grlib.pla: 0236:         CMP     ESTKH+2,X   ; X2 COORD
        CMP     ESTKH+2,X   ; X2 COORD
; libsrc/apple/grlib.pla: 0237:         BCC     --
        BCC     --
; libsrc/apple/grlib.pla: 0238: +++     INC     ESTKH+3,X   ; Y COORD
+++     INC     ESTKH+3,X   ; Y COORD
; libsrc/apple/grlib.pla: 0239:         LDA     ESTKH+3,X
        LDA     ESTKH+3,X
; libsrc/apple/grlib.pla: 0240:         BMI     -
        BMI     -
; libsrc/apple/grlib.pla: 0241:         CMP     ESTKH+1,X   ; Y2 COORD
        CMP     ESTKH+1,X   ; Y2 COORD
; libsrc/apple/grlib.pla: 0242:         BCC     -
        BCC     -
; libsrc/apple/grlib.pla: 0243: ++++    INX
++++    INX
; libsrc/apple/grlib.pla: 0244:         INX
        INX
; libsrc/apple/grlib.pla: 0245:         INX
        INX
; libsrc/apple/grlib.pla: 0246:         INX
        INX
; libsrc/apple/grlib.pla: 0247:         INX
        INX
; libsrc/apple/grlib.pla: 0248:         RTS
        RTS
; libsrc/apple/grlib.pla: 0249: end
; libsrc/apple/grlib.pla: 0250: //
; libsrc/apple/grlib.pla: 0251: // Draw 8x8 tile (forced to 1x2 block address)
; libsrc/apple/grlib.pla: 0252: //
; libsrc/apple/grlib.pla: 0253: export asm grTile(x, y, src)#0
_A005 					; grTile()
; libsrc/apple/grlib.pla: 0254:         ; GET ROW BUFFER ADDRESSES
        ; GET ROW BUFFER ADDRESSES
; libsrc/apple/grlib.pla: 0255: 		LDA     $3000
		LDA     $3000
; libsrc/apple/grlib.pla: 0256:         STA     DSTL
        STA     DSTL
; libsrc/apple/grlib.pla: 0257:         LDA     $3001
        LDA     $3001
; libsrc/apple/grlib.pla: 0258: 		STA		DSTH
		STA		DSTH
; libsrc/apple/grlib.pla: 0259:         STX     ESP
        STX     ESP
; libsrc/apple/grlib.pla: 0260:         LDA     ESTKL,X     ; TILE
        LDA     ESTKL,X     ; TILE
; libsrc/apple/grlib.pla: 0261:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0262:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/apple/grlib.pla: 0263:         STA     SRCH
        STA     SRCH
; libsrc/apple/grlib.pla: 0264:         LDA     ESTKL+2,X   ; X1 COORD
        LDA     ESTKL+2,X   ; X1 COORD
; libsrc/apple/grlib.pla: 0265:         CMP     #40
        CMP     #40
; libsrc/apple/grlib.pla: 0266:         BPL     ++++
        BPL     ++++
; libsrc/apple/grlib.pla: 0267:         CLC
        CLC
; libsrc/apple/grlib.pla: 0268:         ADC     #$08
        ADC     #$08
; libsrc/apple/grlib.pla: 0269:         BMI     ++++
        BMI     ++++
; libsrc/apple/grlib.pla: 0270:         STA     ESTKH+2,X   ; X2 COORD
        STA     ESTKH+2,X   ; X2 COORD
; libsrc/apple/grlib.pla: 0271:         LDA     ESTKL+1,X   ; Y1 COORD
        LDA     ESTKL+1,X   ; Y1 COORD
; libsrc/apple/grlib.pla: 0272:         CMP     #48
        CMP     #48
; libsrc/apple/grlib.pla: 0273:         BPL     ++++
        BPL     ++++
; libsrc/apple/grlib.pla: 0274:         STA     TMPL        ; Y COORD
        STA     TMPL        ; Y COORD
; libsrc/apple/grlib.pla: 0275:         CLC
        CLC
; libsrc/apple/grlib.pla: 0276:         ADC     #$08
        ADC     #$08
; libsrc/apple/grlib.pla: 0277:         BMI     ++++
        BMI     ++++
; libsrc/apple/grlib.pla: 0278:         STA     ESTKH+1,X   ; Y2 COORD
        STA     ESTKH+1,X   ; Y2 COORD
; libsrc/apple/grlib.pla: 0279:         LDA     TMPL        ; Y COORD
        LDA     TMPL        ; Y COORD
; libsrc/apple/grlib.pla: 0280: -       CMP     #48
-       CMP     #48
; libsrc/apple/grlib.pla: 0281:         BCC     +
        BCC     +
; libsrc/apple/grlib.pla: 0282:         LDA     SRCL        ; SKIP TO NEXT ROW
        LDA     SRCL        ; SKIP TO NEXT ROW
; libsrc/apple/grlib.pla: 0283:         ADC     #$07        ; CARRY = 1
        ADC     #$07        ; CARRY = 1
; libsrc/apple/grlib.pla: 0284:         STA     SRCL
        STA     SRCL
; libsrc/apple/grlib.pla: 0285:         LDA     SRCH
        LDA     SRCH
; libsrc/apple/grlib.pla: 0286:         ADC     #$00
        ADC     #$00
; libsrc/apple/grlib.pla: 0287:         STA     SRCH
        STA     SRCH
; libsrc/apple/grlib.pla: 0288:         BNE     +++
        BNE     +++
; libsrc/apple/grlib.pla: 0289: +       AND     #$FE
+       AND     #$FE
; libsrc/apple/grlib.pla: 0290:         TAY
        TAY
; libsrc/apple/grlib.pla: 0291:         LDA     (DST),Y
        LDA     (DST),Y
; libsrc/apple/grlib.pla: 0292:         STA     GBASL
        STA     GBASL
; libsrc/apple/grlib.pla: 0293:         INY
        INY
; libsrc/apple/grlib.pla: 0294:         LDA     (DST),Y
        LDA     (DST),Y
; libsrc/apple/grlib.pla: 0295:         STA     GBASH
        STA     GBASH
; libsrc/apple/grlib.pla: 0296:         LDA     ESTKL+2,X   ; X1 COORD
        LDA     ESTKL+2,X   ; X1 COORD
; libsrc/apple/grlib.pla: 0297:         STA     TMPH        ; X COORD
        STA     TMPH        ; X COORD
; libsrc/apple/grlib.pla: 0298: --      TAY
--      TAY
; libsrc/apple/grlib.pla: 0299:         CMP     #40
        CMP     #40
; libsrc/apple/grlib.pla: 0300:         LDX     #$00
        LDX     #$00
; libsrc/apple/grlib.pla: 0301:         LDA     (SRC,X)
        LDA     (SRC,X)
; libsrc/apple/grlib.pla: 0302:         INC     SRCL
        INC     SRCL
; libsrc/apple/grlib.pla: 0303:         BNE     +
        BNE     +
; libsrc/apple/grlib.pla: 0304:         INC     SRCH
        INC     SRCH
; libsrc/apple/grlib.pla: 0305: +       BCS     ++
+       BCS     ++
; libsrc/apple/grlib.pla: 0306:         STA     (GBASE),Y
        STA     (GBASE),Y
; libsrc/apple/grlib.pla: 0307: ++      INC     TMPH        ; X COORD
++      INC     TMPH        ; X COORD
; libsrc/apple/grlib.pla: 0308:         LDA     TMPH
        LDA     TMPH
; libsrc/apple/grlib.pla: 0309:         BMI     --
        BMI     --
; libsrc/apple/grlib.pla: 0310:         LDX     ESP
        LDX     ESP
; libsrc/apple/grlib.pla: 0311:         CMP     ESTKH+2,X   ; X2 COORD
        CMP     ESTKH+2,X   ; X2 COORD
; libsrc/apple/grlib.pla: 0312:         BCC     --
        BCC     --
; libsrc/apple/grlib.pla: 0313: +++     INC     TMPL        ; Y COORD
+++     INC     TMPL        ; Y COORD
; libsrc/apple/grlib.pla: 0314:         INC     TMPL        ; Y COORD
        INC     TMPL        ; Y COORD
; libsrc/apple/grlib.pla: 0315:         LDA     TMPL
        LDA     TMPL
; libsrc/apple/grlib.pla: 0316:         BMI     -
        BMI     -
; libsrc/apple/grlib.pla: 0317:         CMP     ESTKH+1,X   ; Y2 COORD
        CMP     ESTKH+1,X   ; Y2 COORD
; libsrc/apple/grlib.pla: 0318:         BCC     -
        BCC     -
; libsrc/apple/grlib.pla: 0319: ++++    INX
++++    INX
; libsrc/apple/grlib.pla: 0320:         INX
        INX
; libsrc/apple/grlib.pla: 0321:         INX
        INX
; libsrc/apple/grlib.pla: 0322:         RTS
        RTS
; libsrc/apple/grlib.pla: 0323: end
; libsrc/apple/grlib.pla: 0324: //
; libsrc/apple/grlib.pla: 0325: // Draw a string of tiles
; libsrc/apple/grlib.pla: 0326: //
; libsrc/apple/grlib.pla: 0327: export asm grTileStr(x, y, tilestr, strlen, tilebuff)#0
_A006 					; grTileStr()
; libsrc/apple/grlib.pla: 0328: -       DEX
-       DEX
; libsrc/apple/grlib.pla: 0329:         DEX
        DEX
; libsrc/apple/grlib.pla: 0330:         DEX
        DEX
; libsrc/apple/grlib.pla: 0331:         LDA     ESTKL+7,X   ; X COORD
        LDA     ESTKL+7,X   ; X COORD
; libsrc/apple/grlib.pla: 0332:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0333:         LDA     ESTKL+6,X   ; Y COORD
        LDA     ESTKL+6,X   ; Y COORD
; libsrc/apple/grlib.pla: 0334:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/grlib.pla: 0335:         LDA     ESTKL+3,X   ; TILE
        LDA     ESTKL+3,X   ; TILE
; libsrc/apple/grlib.pla: 0336:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/grlib.pla: 0337:         LDA     ESTKH+3,X   ; TILE
        LDA     ESTKH+3,X   ; TILE
; libsrc/apple/grlib.pla: 0338:         STA     ESTKH,X
        STA     ESTKH,X
; libsrc/apple/grlib.pla: 0339: end
; libsrc/apple/grlib.pla: 0340: asm _grTileTile
_A007 					; _grTileTile()
; libsrc/apple/grlib.pla: 0341:         JSR     $5000
        JSR     $5000
; libsrc/apple/grlib.pla: 0342:         LDA     ESTKL+4,X   ; UPDATE X COORD
        LDA     ESTKL+4,X   ; UPDATE X COORD
; libsrc/apple/grlib.pla: 0343:         CLC
        CLC
; libsrc/apple/grlib.pla: 0344:         ADC     #$08
        ADC     #$08
; libsrc/apple/grlib.pla: 0345:         CMP     #40         ; OFF RIGHT SIDE
        CMP     #40         ; OFF RIGHT SIDE
; libsrc/apple/grlib.pla: 0346:         BPL     +
        BPL     +
; libsrc/apple/grlib.pla: 0347:         STA     ESTKL+4,X
        STA     ESTKL+4,X
; libsrc/apple/grlib.pla: 0348:         DEC     ESTKL+1,X   ; DEC STRLEN
        DEC     ESTKL+1,X   ; DEC STRLEN
; libsrc/apple/grlib.pla: 0349:         BNE     -
        BNE     -
; libsrc/apple/grlib.pla: 0350: +       INX
+       INX
; libsrc/apple/grlib.pla: 0351:         INX
        INX
; libsrc/apple/grlib.pla: 0352:         INX
        INX
; libsrc/apple/grlib.pla: 0353:         INX
        INX
; libsrc/apple/grlib.pla: 0354:         INX
        INX
; libsrc/apple/grlib.pla: 0355:         RTS
        RTS
; libsrc/apple/grlib.pla: 0356: end
; libsrc/apple/grlib.pla: 0357: //
; libsrc/apple/grlib.pla: 0358: // Fill a buffer with tiles
; libsrc/apple/grlib.pla: 0359: //
; libsrc/apple/grlib.pla: 0360: export asm grFill(x, y, tile)#0
_A008 					; grFill()
; libsrc/apple/grlib.pla: 0361:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0362:         AND     #$0F
        AND     #$0F
; libsrc/apple/grlib.pla: 0363:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0364:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/grlib.pla: 0365:         AND     #$0F
        AND     #$0F
; libsrc/apple/grlib.pla: 0366:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/grlib.pla: 0367:         LDA     #$00
        LDA     #$00
; libsrc/apple/grlib.pla: 0368:         SEC
        SEC
; libsrc/apple/grlib.pla: 0369:         SBC     ESTKL+2,X   ; ORIGINAL X
        SBC     ESTKL+2,X   ; ORIGINAL X
; libsrc/apple/grlib.pla: 0370:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0371:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/apple/grlib.pla: 0372:         LDA     #$00
        LDA     #$00
; libsrc/apple/grlib.pla: 0373:         SEC
        SEC
; libsrc/apple/grlib.pla: 0374:         SBC     ESTKL+1,X
        SBC     ESTKL+1,X
; libsrc/apple/grlib.pla: 0375:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/grlib.pla: 0376: -       DEX
-       DEX
; libsrc/apple/grlib.pla: 0377:         DEX
        DEX
; libsrc/apple/grlib.pla: 0378:         DEX
        DEX
; libsrc/apple/grlib.pla: 0379:         LDA     ESTKL+5,X   ; X COORD
        LDA     ESTKL+5,X   ; X COORD
; libsrc/apple/grlib.pla: 0380:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0381:         LDA     ESTKL+4,X   ; Y COORD
        LDA     ESTKL+4,X   ; Y COORD
; libsrc/apple/grlib.pla: 0382:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/grlib.pla: 0383:         LDA     ESTKL+3,X   ; TILE
        LDA     ESTKL+3,X   ; TILE
; libsrc/apple/grlib.pla: 0384:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/grlib.pla: 0385:         LDA     ESTKH+3,X   ; TILE
        LDA     ESTKH+3,X   ; TILE
; libsrc/apple/grlib.pla: 0386:         STA     ESTKH,X
        STA     ESTKH,X
; libsrc/apple/grlib.pla: 0387: end
; libsrc/apple/grlib.pla: 0388: asm _grFillTile
_A009 					; _grFillTile()
; libsrc/apple/grlib.pla: 0389:         JSR     $5000
        JSR     $5000
; libsrc/apple/grlib.pla: 0390:         LDA     ESTKL+2,X   ; UPDATE X COORD
        LDA     ESTKL+2,X   ; UPDATE X COORD
; libsrc/apple/grlib.pla: 0391:         CLC
        CLC
; libsrc/apple/grlib.pla: 0392:         ADC     #$08
        ADC     #$08
; libsrc/apple/grlib.pla: 0393:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0394:         CMP     #40         ; OFF RIGHT SIDE?
        CMP     #40         ; OFF RIGHT SIDE?
; libsrc/apple/grlib.pla: 0395:         BMI     -
        BMI     -
; libsrc/apple/grlib.pla: 0396:         LDA     ESTKH+2,X   ; RESTORE X COORD
        LDA     ESTKH+2,X   ; RESTORE X COORD
; libsrc/apple/grlib.pla: 0397:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/grlib.pla: 0398:         LDA     ESTKL+1,X   ; UPDATE Y COORD
        LDA     ESTKL+1,X   ; UPDATE Y COORD
; libsrc/apple/grlib.pla: 0399:         CLC
        CLC
; libsrc/apple/grlib.pla: 0400:         ADC     #$08
        ADC     #$08
; libsrc/apple/grlib.pla: 0401:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/grlib.pla: 0402:         CMP     #48         ; OFF BOTTOM?
        CMP     #48         ; OFF BOTTOM?
; libsrc/apple/grlib.pla: 0403:         BMI     -
        BMI     -
; libsrc/apple/grlib.pla: 0404:         INX
        INX
; libsrc/apple/grlib.pla: 0405:         INX
        INX
; libsrc/apple/grlib.pla: 0406:         INX
        INX
; libsrc/apple/grlib.pla: 0407:         RTS
        RTS
; libsrc/apple/grlib.pla: 0408: end
; libsrc/apple/grlib.pla: 0409: //
; libsrc/apple/grlib.pla: 0410: // Wait for VLB
; libsrc/apple/grlib.pla: 0411: //
; libsrc/apple/grlib.pla: 0412: export asm grVLB#0
_A010 					; grVLB()
; libsrc/apple/grlib.pla: 0413:         LDA     $BF98
        LDA     $BF98
; libsrc/apple/grlib.pla: 0414:         AND     #$C0
        AND     #$C0
; libsrc/apple/grlib.pla: 0415:         CMP     #$80
        CMP     #$80
; libsrc/apple/grlib.pla: 0416:         BNE     +
        BNE     +
; libsrc/apple/grlib.pla: 0417:         PHP
        PHP
; libsrc/apple/grlib.pla: 0418:         SEI
        SEI
; libsrc/apple/grlib.pla: 0419:         STA     $C079   ; Enable IOU access and reset VBL int on //c
        STA     $C079   ; Enable IOU access and reset VBL int on //c
; libsrc/apple/grlib.pla: 0420:         STA     $C05B   ; Enable VBL int
        STA     $C05B   ; Enable VBL int
; libsrc/apple/grlib.pla: 0421: -       LDA     $C019
-       LDA     $C019
; libsrc/apple/grlib.pla: 0422:         STA     $C079   ; Reset VBL int on //c
        STA     $C079   ; Reset VBL int on //c
; libsrc/apple/grlib.pla: 0423:         BMI     -
        BMI     -
; libsrc/apple/grlib.pla: 0424: -       LDA     $C019
-       LDA     $C019
; libsrc/apple/grlib.pla: 0425:         BPL     -
        BPL     -
; libsrc/apple/grlib.pla: 0426:         STA     $C05A   ; Disable VBL int on //c
        STA     $C05A   ; Disable VBL int on //c
; libsrc/apple/grlib.pla: 0427:         STA     $C078   ; Disable IOU access on //c
        STA     $C078   ; Disable IOU access on //c
; libsrc/apple/grlib.pla: 0428:         PLP
        PLP
; libsrc/apple/grlib.pla: 0429: +       RTS
+       RTS
; libsrc/apple/grlib.pla: 0430: end
; libsrc/apple/grlib.pla: 0431: //
; libsrc/apple/grlib.pla: 0432: // Clear the buffer
; libsrc/apple/grlib.pla: 0433: //
; libsrc/apple/grlib.pla: 0434: export def grClear(clr)#0
_SUBSEG 				; BYTECODE STARTS
					; clr -> [0]
_C000 					; grClear()
; libsrc/apple/grlib.pla: 0435:     byte[32] clrtile
					; clrtile -> [2]
; libsrc/apple/grlib.pla: 0436: 
; libsrc/apple/grlib.pla: 0437:     clr = (clr & $0F) | (clr << 4)
	!BYTE	$58,$22,$01		; ENTER	34,1
; libsrc/apple/grlib.pla: 0438:     clr = (clr & $FF) | (clr << 8)
; libsrc/apple/grlib.pla: 0439:     memset(@clrtile, clr, 32)
; libsrc/apple/grlib.pla: 0440:     grFill(0, 0, @clrtile)
; libsrc/apple/grlib.pla: 0441: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$96			; OR 
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$3C,$FF			; ANDI	255
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$96			; OR 
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X017
_F002 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_A008
_F003 	!WORD	_A008		
	!BYTE	$5A,$22			; LEAVE	34
; libsrc/apple/grlib.pla: 0442: //
; libsrc/apple/grlib.pla: 0443: // Set lores graphics, return draw buffer
; libsrc/apple/grlib.pla: 0444: //
; libsrc/apple/grlib.pla: 0445: export def grMode(mode)#1
					; mode -> [0]
_C001 					; grMode()
; libsrc/apple/grlib.pla: 0446:     if mode
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grlib.pla: 0447:         //
; libsrc/apple/grlib.pla: 0448:         // Set GR mode
; libsrc/apple/grlib.pla: 0449:         //
; libsrc/apple/grlib.pla: 0450:         ^showlores
; libsrc/apple/grlib.pla: 0451:         ^showfull
; libsrc/apple/grlib.pla: 0452:         ^showgraphics
; libsrc/apple/grlib.pla: 0453:         ^showpage1
; libsrc/apple/grlib.pla: 0454:         ^ena80   = 0
; libsrc/apple/grlib.pla: 0455:         ^show40  = 0
; libsrc/apple/grlib.pla: 0456:         ^mapmain = 0
; libsrc/apple/grlib.pla: 0457:         ^an3off
; libsrc/apple/grlib.pla: 0458:         drawpage = 1
; libsrc/apple/grlib.pla: 0459:         drawbuff = grbuff[1]
; libsrc/apple/grlib.pla: 0460:         return 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$68,$56,$C0		; LAB	49238
	!BYTE	$30			; DROP 
	!BYTE	$68,$52,$C0		; LAB	49234
	!BYTE	$30			; DROP 
	!BYTE	$68,$50,$C0		; LAB	49232
	!BYTE	$30			; DROP 
	!BYTE	$68,$54,$C0		; LAB	49236
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$78,$7E,$C0		; SAB	49278
	!BYTE	$00			; CN	0
	!BYTE	$78,$0C,$C0		; SAB	49164
	!BYTE	$00			; CN	0
	!BYTE	$78,$00,$C0		; SAB	49152
	!BYTE	$68,$5F,$C0		; LAB	49247
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D032+0
_F004 	!WORD	_D032+0		
	!BYTE	$6A			; LAW	_D030+2
_F005 	!WORD	_D030+2		
	!BYTE	$7A			; SAW	_D031+0
_F006 	!WORD	_D031+0		
	!BYTE	$02			; CN	1
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grlib.pla: 0461:     fin
_B001 
_B002 
; libsrc/apple/grlib.pla: 0462:     //
; libsrc/apple/grlib.pla: 0463:     // Set text mode
; libsrc/apple/grlib.pla: 0464:     //
; libsrc/apple/grlib.pla: 0465:     ^showtext
; libsrc/apple/grlib.pla: 0466:     ^showpage1
; libsrc/apple/grlib.pla: 0467:     ^ena80   = 0
; libsrc/apple/grlib.pla: 0468:     ^show40  = 0
; libsrc/apple/grlib.pla: 0469:     ^mapmain = 0
; libsrc/apple/grlib.pla: 0470:     ^an3off
; libsrc/apple/grlib.pla: 0471:     call($FC58, 0, 0, 0, 0) // home()
; libsrc/apple/grlib.pla: 0472:     return 0
	!BYTE	$68,$51,$C0		; LAB	49233
	!BYTE	$30			; DROP 
	!BYTE	$68,$54,$C0		; LAB	49236
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$78,$7E,$C0		; SAB	49278
	!BYTE	$00			; CN	0
	!BYTE	$78,$0C,$C0		; SAB	49164
	!BYTE	$00			; CN	0
	!BYTE	$78,$00,$C0		; SAB	49152
	!BYTE	$68,$5F,$C0		; LAB	49247
	!BYTE	$30			; DROP 
	!BYTE	$2C,$58,$FC		; CW	64600
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F007 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grlib.pla: 0473: end
; libsrc/apple/grlib.pla: 0474: //
; libsrc/apple/grlib.pla: 0475: // Set display page, return other page
; libsrc/apple/grlib.pla: 0476: //
; libsrc/apple/grlib.pla: 0477: export def grShow(page)#1
					; page -> [0]
_C002 					; grShow()
; libsrc/apple/grlib.pla: 0478:     page = page & 1
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grlib.pla: 0479:     ^(showpage1 + page)
; libsrc/apple/grlib.pla: 0480:     return page ^ 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$2C,$54,$C0		; CW	49236
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$02			; CN	1
	!BYTE	$98			; XOR
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grlib.pla: 0481: end
; libsrc/apple/grlib.pla: 0482: export def grSwap#0
_C003 					; grSwap()
; libsrc/apple/grlib.pla: 0483:     //vlbWait
; libsrc/apple/grlib.pla: 0484:     ^(showpage1 + drawpage)
; libsrc/apple/grlib.pla: 0485:     drawpage   = drawpage ^ 1
; libsrc/apple/grlib.pla: 0486:     drawbuff = grbuff[drawpage]
; libsrc/apple/grlib.pla: 0487: end
	!BYTE	$2C,$54,$C0		; CW	49236
	!BYTE	$B4			; ADDAB	_D032+0
_F008 	!WORD	_D032+0		
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D032+0
_F009 	!WORD	_D032+0		
	!BYTE	$02			; CN	1
	!BYTE	$98			; XOR
	!BYTE	$78			; SAB	_D032+0
_F010 	!WORD	_D032+0		
	!BYTE	$26			; LA	_D030+0
_F011 	!WORD	_D030+0		
	!BYTE	$BC			; IDXAB	_D032+0
_F012 	!WORD	_D032+0		
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D031+0
_F013 	!WORD	_D031+0		
	!BYTE	$5C			; RET
; libsrc/apple/grlib.pla: 0488: export def grDrawBuf(page)#0
					; page -> [0]
_C004 					; grDrawBuf()
; libsrc/apple/grlib.pla: 0489:     drawpage   = page
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grlib.pla: 0490:     drawbuff = grbuff[drawpage]
; libsrc/apple/grlib.pla: 0491: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_D032+0
_F014 	!WORD	_D032+0		
	!BYTE	$26			; LA	_D030+0
_F015 	!WORD	_D030+0		
	!BYTE	$BC			; IDXAB	_D032+0
_F016 	!WORD	_D032+0		
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D031+0
_F017 	!WORD	_D031+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grlib.pla: 0492: //
; libsrc/apple/grlib.pla: 0493: // Set color for clear & plot routines
; libsrc/apple/grlib.pla: 0494: //
; libsrc/apple/grlib.pla: 0495: export def grColor(clr)#0
					; clr -> [0]
_C005 					; grColor()
; libsrc/apple/grlib.pla: 0496:     ^$30 = (clr & $0F) | (clr << 4)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/grlib.pla: 0497: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$96			; OR 
	!BYTE	$78,$30,$00		; SAB	48
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/grlib.pla: 0498: //
; libsrc/apple/grlib.pla: 0499: // Assembly fixups
; libsrc/apple/grlib.pla: 0500: //
; libsrc/apple/grlib.pla: 0501: _grTileTile:1  = @grTile
_INIT 
; libsrc/apple/grlib.pla: 0502: _grFillTile:1  = @grTile
; libsrc/apple/grlib.pla: 0503: //
; libsrc/apple/grlib.pla: 0504: // Fixups for drawbuff
; libsrc/apple/grlib.pla: 0505: //
; libsrc/apple/grlib.pla: 0506: grPlot:1       = @drawbuff
; libsrc/apple/grlib.pla: 0507: grPlot:6       = @drawbuff+1
; libsrc/apple/grlib.pla: 0508: grHLin:1       = @drawbuff
; libsrc/apple/grlib.pla: 0509: grHLin:6       = @drawbuff+1
; libsrc/apple/grlib.pla: 0510: grVLin:1       = @drawbuff
; libsrc/apple/grlib.pla: 0511: grVLin:6       = @drawbuff+1
; libsrc/apple/grlib.pla: 0512: grBLT:1        = @drawbuff
; libsrc/apple/grlib.pla: 0513: grBLT:6        = @drawbuff+1
; libsrc/apple/grlib.pla: 0514: grTile:1       = @drawbuff
; libsrc/apple/grlib.pla: 0515: grTile:6       = @drawbuff+1
; libsrc/apple/grlib.pla: 0516: done
	!BYTE	$26			; LA	_A005+0
_F018 	!WORD	_A005+0		
	!BYTE	$7A			; SAW	_A007+1
_F019 	!WORD	_A007+1		
	!BYTE	$26			; LA	_A005+0
_F020 	!WORD	_A005+0		
	!BYTE	$7A			; SAW	_A009+1
_F021 	!WORD	_A009+1		
	!BYTE	$26			; LA	_D031+0
_F022 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A001+1
_F023 	!WORD	_A001+1		
	!BYTE	$26			; LA	_D031+1
_F024 	!WORD	_D031+1		
	!BYTE	$7A			; SAW	_A001+6
_F025 	!WORD	_A001+6		
	!BYTE	$26			; LA	_D031+0
_F026 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A002+1
_F027 	!WORD	_A002+1		
	!BYTE	$26			; LA	_D031+1
_F028 	!WORD	_D031+1		
	!BYTE	$7A			; SAW	_A002+6
_F029 	!WORD	_A002+6		
	!BYTE	$26			; LA	_D031+0
_F030 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A003+1
_F031 	!WORD	_A003+1		
	!BYTE	$26			; LA	_D031+1
_F032 	!WORD	_D031+1		
	!BYTE	$7A			; SAW	_A003+6
_F033 	!WORD	_A003+6		
	!BYTE	$26			; LA	_D031+0
_F034 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A004+1
_F035 	!WORD	_A004+1		
	!BYTE	$26			; LA	_D031+1
_F036 	!WORD	_D031+1		
	!BYTE	$7A			; SAW	_A004+6
_F037 	!WORD	_A004+6		
	!BYTE	$26			; LA	_D031+0
_F038 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A005+1
_F039 	!WORD	_A005+1		
	!BYTE	$26			; LA	_D031+1
_F040 	!WORD	_D031+1		
	!BYTE	$7A			; SAW	_A005+6
_F041 	!WORD	_A005+6		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: MEMSET
	!BYTE	$CD,$C5,$CD,$D3,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	17			; ESD INDEX
	; DCI STRING: GRPLOT
	!BYTE	$C7,$D2,$D0,$CC,$CF,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A001		
	; DCI STRING: GRHLIN
	!BYTE	$C7,$D2,$C8,$CC,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A002		
	; DCI STRING: GRVLIN
	!BYTE	$C7,$D2,$D6,$CC,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A003		
	; DCI STRING: GRBLT
	!BYTE	$C7,$D2,$C2,$CC,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A004		
	; DCI STRING: GRTILE
	!BYTE	$C7,$D2,$D4,$C9,$CC,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A005		
	; DCI STRING: GRTILESTR
	!BYTE	$C7,$D2,$D4,$C9,$CC,$C5,$D3,$D4,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A006		
	; DCI STRING: GRFILL
	!BYTE	$C7,$D2,$C6,$C9,$CC,$4C
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A008		
	; DCI STRING: GRVLB
	!BYTE	$C7,$D2,$D6,$CC,$42
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A010		
	; DCI STRING: GRCLEAR
	!BYTE	$C7,$D2,$C3,$CC,$C5,$C1,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: GRMODE
	!BYTE	$C7,$D2,$CD,$CF,$C4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: GRSHOW
	!BYTE	$C7,$D2,$D3,$C8,$CF,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: GRSWAP
	!BYTE	$C7,$D2,$D3,$D7,$C1,$50
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: GRDRAWBUF
	!BYTE	$C7,$D2,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: GRCOLOR
	!BYTE	$C7,$D2,$C3,$CF,$CC,$CF,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	!BYTE	$00			; END OF ESD
