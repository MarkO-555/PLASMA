; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/hgrlib.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/hgrlib.pla: 0001: 
; libsrc/apple/hgrlib.pla: 0002: //
; libsrc/apple/hgrlib.pla: 0003: // Hardware addresses
; libsrc/apple/hgrlib.pla: 0004: //
; libsrc/apple/hgrlib.pla: 0005: const showgraphics = $C050
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; showgraphics = 49232
; libsrc/apple/hgrlib.pla: 0006: const showtext     = $C051
					; showtext = 49233
; libsrc/apple/hgrlib.pla: 0007: const showfull     = $C052
					; showfull = 49234
; libsrc/apple/hgrlib.pla: 0008: const showmix      = $C053
					; showmix = 49235
; libsrc/apple/hgrlib.pla: 0009: const showpage1    = $C054
					; showpage1 = 49236
; libsrc/apple/hgrlib.pla: 0010: const showpage2    = $C055
					; showpage2 = 49237
; libsrc/apple/hgrlib.pla: 0011: const showlores    = $C056
					; showlores = 49238
; libsrc/apple/hgrlib.pla: 0012: const showhires    = $C057
					; showhires = 49239
; libsrc/apple/hgrlib.pla: 0013: const keyboard     = $C000
					; keyboard = 49152
; libsrc/apple/hgrlib.pla: 0014: const keystrobe    = $C010
					; keystrobe = 49168
; libsrc/apple/hgrlib.pla: 0015: const hgr1         = $2000
					; hgr1 = 8192
; libsrc/apple/hgrlib.pla: 0016: const hgr2         = $4000
					; hgr2 = 16384
; libsrc/apple/hgrlib.pla: 0017: const page1        = 0
					; page1 = 0
; libsrc/apple/hgrlib.pla: 0018: const page2        = 1
					; page2 = 1
; libsrc/apple/hgrlib.pla: 0019: //
; libsrc/apple/hgrlib.pla: 0020: // Apple III hardware constants.
; libsrc/apple/hgrlib.pla: 0021: //
; libsrc/apple/hgrlib.pla: 0022: const ENV_REG      = $FFDF
					; ENV_REG = 65503
; libsrc/apple/hgrlib.pla: 0023: //
; libsrc/apple/hgrlib.pla: 0024: // Screen addresses
; libsrc/apple/hgrlib.pla: 0025: //
; libsrc/apple/hgrlib.pla: 0026: word hgrbuff[] = hgr1, hgr2
_D028 					; hgrbuff[] = hgr1, hgr2
	!WORD	$2000
	!WORD	$4000
; libsrc/apple/hgrlib.pla: 0027: //word hgrscan[] = $0000,$0400,$0800,$0C00,$1000,$1400,$1800,$1C00
; libsrc/apple/hgrlib.pla: 0028: //word           = $0080,$0480,$0880,$0C80,$1080,$1480,$1880,$1C80
; libsrc/apple/hgrlib.pla: 0029: //word           = $0100,$0500,$0900,$0D00,$1100,$1500,$1900,$1D00
; libsrc/apple/hgrlib.pla: 0030: //word           = $0180,$0580,$0980,$0D80,$1180,$1580,$1980,$1D80
; libsrc/apple/hgrlib.pla: 0031: //word           = $0200,$0600,$0A00,$0E00,$1200,$1600,$1A00,$1E00
; libsrc/apple/hgrlib.pla: 0032: //word           = $0280,$0680,$0A80,$0E80,$1280,$1680,$1A80,$1E80
; libsrc/apple/hgrlib.pla: 0033: //word           = $0300,$0700,$0B00,$0F00,$1300,$1700,$1B00,$1F00
; libsrc/apple/hgrlib.pla: 0034: //word           = $0380,$0780,$0B80,$0F80,$1380,$1780,$1B80,$1F80
; libsrc/apple/hgrlib.pla: 0035: //word           = $0028,$0428,$0828,$0C28,$1028,$1428,$1828,$1C28
; libsrc/apple/hgrlib.pla: 0036: //word           = $00A8,$04A8,$08A8,$0CA8,$10A8,$14A8,$18A8,$1CA8
; libsrc/apple/hgrlib.pla: 0037: //word           = $0128,$0528,$0928,$0D28,$1128,$1528,$1928,$1D28
; libsrc/apple/hgrlib.pla: 0038: //word           = $01A8,$05A8,$09A8,$0DA8,$11A8,$15A8,$19A8,$1DA8
; libsrc/apple/hgrlib.pla: 0039: //word           = $0228,$0628,$0A28,$0E28,$1228,$1628,$1A28,$1E28
; libsrc/apple/hgrlib.pla: 0040: //word           = $02A8,$06A8,$0AA8,$0EA8,$12A8,$16A8,$1AA8,$1EA8
; libsrc/apple/hgrlib.pla: 0041: //word           = $0328,$0728,$0B28,$0F28,$1328,$1728,$1B28,$1F28
; libsrc/apple/hgrlib.pla: 0042: //word           = $03A8,$07A8,$0BA8,$0FA8,$13A8,$17A8,$1BA8,$1FA8
; libsrc/apple/hgrlib.pla: 0043: //word           = $0050,$0450,$0850,$0C50,$1050,$1450,$1850,$1C50
; libsrc/apple/hgrlib.pla: 0044: //word           = $00D0,$04D0,$08D0,$0CD0,$10D0,$14D0,$18D0,$1CD0
; libsrc/apple/hgrlib.pla: 0045: //word           = $0150,$0550,$0950,$0D50,$1150,$1550,$1950,$1D50
; libsrc/apple/hgrlib.pla: 0046: //word           = $01D0,$05D0,$09D0,$0DD0,$11D0,$15D0,$19D0,$1DD0
; libsrc/apple/hgrlib.pla: 0047: //word           = $0250,$0650,$0A50,$0E50,$1250,$1650,$1A50,$1E50
; libsrc/apple/hgrlib.pla: 0048: //word           = $02D0,$06D0,$0AD0,$0ED0,$12D0,$16D0,$1AD0,$1ED0
; libsrc/apple/hgrlib.pla: 0049: //word           = $0350,$0750,$0B50,$0F50,$1350,$1750,$1B50,$1F50
; libsrc/apple/hgrlib.pla: 0050: //word           = $03D0,$07D0,$0BD0,$0FD0,$13D0,$17D0,$1BD0,$1FD0
; libsrc/apple/hgrlib.pla: 0051: //word hmask     = $8081,$8082,$8084,$8088,$8090,$80A0,$80C0
; libsrc/apple/hgrlib.pla: 0052: //word           = $8180,$8280,$8480,$8880,$9080,$A080,$C080
; libsrc/apple/hgrlib.pla: 0053: byte hgrscanl[]= $00,$00,$00,$00,$00,$00,$00,$00
_D029 					; hgrscanl[]= $00,$00,$00,$00,$00,$00,$00,$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
; libsrc/apple/hgrlib.pla: 0054: byte           = $80,$80,$80,$80,$80,$80,$80,$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
; libsrc/apple/hgrlib.pla: 0055: byte           = $00,$00,$00,$00,$00,$00,$00,$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
; libsrc/apple/hgrlib.pla: 0056: byte           = $80,$80,$80,$80,$80,$80,$80,$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
; libsrc/apple/hgrlib.pla: 0057: byte           = $00,$00,$00,$00,$00,$00,$00,$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
; libsrc/apple/hgrlib.pla: 0058: byte           = $80,$80,$80,$80,$80,$80,$80,$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
; libsrc/apple/hgrlib.pla: 0059: byte           = $00,$00,$00,$00,$00,$00,$00,$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
; libsrc/apple/hgrlib.pla: 0060: byte           = $80,$80,$80,$80,$80,$80,$80,$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$80
; libsrc/apple/hgrlib.pla: 0061: byte           = $28,$28,$28,$28,$28,$28,$28,$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
; libsrc/apple/hgrlib.pla: 0062: byte           = $A8,$A8,$A8,$A8,$A8,$A8,$A8,$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
; libsrc/apple/hgrlib.pla: 0063: byte           = $28,$28,$28,$28,$28,$28,$28,$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
; libsrc/apple/hgrlib.pla: 0064: byte           = $A8,$A8,$A8,$A8,$A8,$A8,$A8,$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
; libsrc/apple/hgrlib.pla: 0065: byte           = $28,$28,$28,$28,$28,$28,$28,$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
; libsrc/apple/hgrlib.pla: 0066: byte           = $A8,$A8,$A8,$A8,$A8,$A8,$A8,$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
; libsrc/apple/hgrlib.pla: 0067: byte           = $28,$28,$28,$28,$28,$28,$28,$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
	!BYTE	$28
; libsrc/apple/hgrlib.pla: 0068: byte           = $A8,$A8,$A8,$A8,$A8,$A8,$A8,$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
	!BYTE	$A8
; libsrc/apple/hgrlib.pla: 0069: byte           = $50,$50,$50,$50,$50,$50,$50,$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
; libsrc/apple/hgrlib.pla: 0070: byte           = $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
; libsrc/apple/hgrlib.pla: 0071: byte           = $50,$50,$50,$50,$50,$50,$50,$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
; libsrc/apple/hgrlib.pla: 0072: byte           = $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
; libsrc/apple/hgrlib.pla: 0073: byte           = $50,$50,$50,$50,$50,$50,$50,$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
; libsrc/apple/hgrlib.pla: 0074: byte           = $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
; libsrc/apple/hgrlib.pla: 0075: byte           = $50,$50,$50,$50,$50,$50,$50,$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
	!BYTE	$50
; libsrc/apple/hgrlib.pla: 0076: byte           = $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
	!BYTE	$D0
; libsrc/apple/hgrlib.pla: 0077: byte hgrscanh[]= $00,$04,$08,$0C,$10,$14,$18,$1C
_D030 					; hgrscanh[]= $00,$04,$08,$0C,$10,$14,$18,$1C
	!BYTE	$00
	!BYTE	$04
	!BYTE	$08
	!BYTE	$0C
	!BYTE	$10
	!BYTE	$14
	!BYTE	$18
	!BYTE	$1C
; libsrc/apple/hgrlib.pla: 0078: byte           = $00,$04,$08,$0C,$10,$14,$18,$1C
	!BYTE	$00
	!BYTE	$04
	!BYTE	$08
	!BYTE	$0C
	!BYTE	$10
	!BYTE	$14
	!BYTE	$18
	!BYTE	$1C
; libsrc/apple/hgrlib.pla: 0079: byte           = $01,$05,$09,$0D,$11,$15,$19,$1D
	!BYTE	$01
	!BYTE	$05
	!BYTE	$09
	!BYTE	$0D
	!BYTE	$11
	!BYTE	$15
	!BYTE	$19
	!BYTE	$1D
; libsrc/apple/hgrlib.pla: 0080: byte           = $01,$05,$09,$0D,$11,$15,$19,$1D
	!BYTE	$01
	!BYTE	$05
	!BYTE	$09
	!BYTE	$0D
	!BYTE	$11
	!BYTE	$15
	!BYTE	$19
	!BYTE	$1D
; libsrc/apple/hgrlib.pla: 0081: byte           = $02,$06,$0A,$0E,$12,$16,$1A,$1E
	!BYTE	$02
	!BYTE	$06
	!BYTE	$0A
	!BYTE	$0E
	!BYTE	$12
	!BYTE	$16
	!BYTE	$1A
	!BYTE	$1E
; libsrc/apple/hgrlib.pla: 0082: byte           = $02,$06,$0A,$0E,$12,$16,$1A,$1E
	!BYTE	$02
	!BYTE	$06
	!BYTE	$0A
	!BYTE	$0E
	!BYTE	$12
	!BYTE	$16
	!BYTE	$1A
	!BYTE	$1E
; libsrc/apple/hgrlib.pla: 0083: byte           = $03,$07,$0B,$0F,$13,$17,$1B,$1F
	!BYTE	$03
	!BYTE	$07
	!BYTE	$0B
	!BYTE	$0F
	!BYTE	$13
	!BYTE	$17
	!BYTE	$1B
	!BYTE	$1F
; libsrc/apple/hgrlib.pla: 0084: byte           = $03,$07,$0B,$0F,$13,$17,$1B,$1F
	!BYTE	$03
	!BYTE	$07
	!BYTE	$0B
	!BYTE	$0F
	!BYTE	$13
	!BYTE	$17
	!BYTE	$1B
	!BYTE	$1F
; libsrc/apple/hgrlib.pla: 0085: byte           = $00,$04,$08,$0C,$10,$14,$18,$1C
	!BYTE	$00
	!BYTE	$04
	!BYTE	$08
	!BYTE	$0C
	!BYTE	$10
	!BYTE	$14
	!BYTE	$18
	!BYTE	$1C
; libsrc/apple/hgrlib.pla: 0086: byte           = $00,$04,$08,$0C,$10,$14,$18,$1C
	!BYTE	$00
	!BYTE	$04
	!BYTE	$08
	!BYTE	$0C
	!BYTE	$10
	!BYTE	$14
	!BYTE	$18
	!BYTE	$1C
; libsrc/apple/hgrlib.pla: 0087: byte           = $01,$05,$09,$0D,$11,$15,$19,$1D
	!BYTE	$01
	!BYTE	$05
	!BYTE	$09
	!BYTE	$0D
	!BYTE	$11
	!BYTE	$15
	!BYTE	$19
	!BYTE	$1D
; libsrc/apple/hgrlib.pla: 0088: byte           = $01,$05,$09,$0D,$11,$15,$19,$1D
	!BYTE	$01
	!BYTE	$05
	!BYTE	$09
	!BYTE	$0D
	!BYTE	$11
	!BYTE	$15
	!BYTE	$19
	!BYTE	$1D
; libsrc/apple/hgrlib.pla: 0089: byte           = $02,$06,$0A,$0E,$12,$16,$1A,$1E
	!BYTE	$02
	!BYTE	$06
	!BYTE	$0A
	!BYTE	$0E
	!BYTE	$12
	!BYTE	$16
	!BYTE	$1A
	!BYTE	$1E
; libsrc/apple/hgrlib.pla: 0090: byte           = $02,$06,$0A,$0E,$12,$16,$1A,$1E
	!BYTE	$02
	!BYTE	$06
	!BYTE	$0A
	!BYTE	$0E
	!BYTE	$12
	!BYTE	$16
	!BYTE	$1A
	!BYTE	$1E
; libsrc/apple/hgrlib.pla: 0091: byte           = $03,$07,$0B,$0F,$13,$17,$1B,$1F
	!BYTE	$03
	!BYTE	$07
	!BYTE	$0B
	!BYTE	$0F
	!BYTE	$13
	!BYTE	$17
	!BYTE	$1B
	!BYTE	$1F
; libsrc/apple/hgrlib.pla: 0092: byte           = $03,$07,$0B,$0F,$13,$17,$1B,$1F
	!BYTE	$03
	!BYTE	$07
	!BYTE	$0B
	!BYTE	$0F
	!BYTE	$13
	!BYTE	$17
	!BYTE	$1B
	!BYTE	$1F
; libsrc/apple/hgrlib.pla: 0093: byte           = $00,$04,$08,$0C,$10,$14,$18,$1C
	!BYTE	$00
	!BYTE	$04
	!BYTE	$08
	!BYTE	$0C
	!BYTE	$10
	!BYTE	$14
	!BYTE	$18
	!BYTE	$1C
; libsrc/apple/hgrlib.pla: 0094: byte           = $00,$04,$08,$0C,$10,$14,$18,$1C
	!BYTE	$00
	!BYTE	$04
	!BYTE	$08
	!BYTE	$0C
	!BYTE	$10
	!BYTE	$14
	!BYTE	$18
	!BYTE	$1C
; libsrc/apple/hgrlib.pla: 0095: byte           = $01,$05,$09,$0D,$11,$15,$19,$1D
	!BYTE	$01
	!BYTE	$05
	!BYTE	$09
	!BYTE	$0D
	!BYTE	$11
	!BYTE	$15
	!BYTE	$19
	!BYTE	$1D
; libsrc/apple/hgrlib.pla: 0096: byte           = $01,$05,$09,$0D,$11,$15,$19,$1D
	!BYTE	$01
	!BYTE	$05
	!BYTE	$09
	!BYTE	$0D
	!BYTE	$11
	!BYTE	$15
	!BYTE	$19
	!BYTE	$1D
; libsrc/apple/hgrlib.pla: 0097: byte           = $02,$06,$0A,$0E,$12,$16,$1A,$1E
	!BYTE	$02
	!BYTE	$06
	!BYTE	$0A
	!BYTE	$0E
	!BYTE	$12
	!BYTE	$16
	!BYTE	$1A
	!BYTE	$1E
; libsrc/apple/hgrlib.pla: 0098: byte           = $02,$06,$0A,$0E,$12,$16,$1A,$1E
	!BYTE	$02
	!BYTE	$06
	!BYTE	$0A
	!BYTE	$0E
	!BYTE	$12
	!BYTE	$16
	!BYTE	$1A
	!BYTE	$1E
; libsrc/apple/hgrlib.pla: 0099: byte           = $03,$07,$0B,$0F,$13,$17,$1B,$1F
	!BYTE	$03
	!BYTE	$07
	!BYTE	$0B
	!BYTE	$0F
	!BYTE	$13
	!BYTE	$17
	!BYTE	$1B
	!BYTE	$1F
; libsrc/apple/hgrlib.pla: 0100: byte           = $03,$07,$0B,$0F,$13,$17,$1B,$1F
	!BYTE	$03
	!BYTE	$07
	!BYTE	$0B
	!BYTE	$0F
	!BYTE	$13
	!BYTE	$17
	!BYTE	$1B
	!BYTE	$1F
; libsrc/apple/hgrlib.pla: 0101: byte hbmask    = $81,$82,$84,$88,$90,$A0,$C0
_D031 					; hbmask    = $81,$82,$84,$88,$90,$A0,$C0
	!BYTE	$81
	!BYTE	$82
	!BYTE	$84
	!BYTE	$88
	!BYTE	$90
	!BYTE	$A0
	!BYTE	$C0
; libsrc/apple/hgrlib.pla: 0102: byte hlmask    = $FF,$FE,$FC,$F8,$F0,$E0,$C0
_D032 					; hlmask    = $FF,$FE,$FC,$F8,$F0,$E0,$C0
	!BYTE	$FF
	!BYTE	$FE
	!BYTE	$FC
	!BYTE	$F8
	!BYTE	$F0
	!BYTE	$E0
	!BYTE	$C0
; libsrc/apple/hgrlib.pla: 0103: byte hrmask    = $81,$83,$87,$8F,$9F,$BF,$FF
_D033 					; hrmask    = $81,$83,$87,$8F,$9F,$BF,$FF
	!BYTE	$81
	!BYTE	$83
	!BYTE	$87
	!BYTE	$8F
	!BYTE	$9F
	!BYTE	$BF
	!BYTE	$FF
; libsrc/apple/hgrlib.pla: 0104: word hcolor[]  = $0000,$552A,$2A55,$7F7F,$8080,$D5AA,$AAD5,$FFFF
_D034 					; hcolor[]  = $0000,$552A,$2A55,$7F7F,$8080,$D5AA,$AAD5,$FFFF
	!WORD	$0000
	!WORD	$552A
	!WORD	$2A55
	!WORD	$7F7F
	!WORD	$8080
	!WORD	$D5AA
	!WORD	$AAD5
	!WORD	$FFFF
; libsrc/apple/hgrlib.pla: 0105: word curhclr
_D035 	!FILL	2			; curhclr
; libsrc/apple/hgrlib.pla: 0106: byte drawpage  = 1
_D036 					; drawpage  = 1
	!BYTE	$01
; libsrc/apple/hgrlib.pla: 0107: word drawbuff  = hgr2
_D037 					; drawbuff  = hgr2
	!WORD	$4000
; libsrc/apple/hgrlib.pla: 0108: 
; libsrc/apple/hgrlib.pla: 0109: export asm divmod7(x)#2
_A000 					; divmod7()
; libsrc/apple/hgrlib.pla: 0110: !SOURCE    "vmsrc/plvmzp.inc"
!SOURCE    "vmsrc/plvmzp.inc"
; libsrc/apple/hgrlib.pla: 0111:         LDA     ESTKL+0,X   ; X COORDL
        LDA     ESTKL+0,X   ; X COORDL
; libsrc/apple/hgrlib.pla: 0112:         LDY     ESTKH+0,X   ; X COORDH
        LDY     ESTKH+0,X   ; X COORDH
; libsrc/apple/hgrlib.pla: 0113:         BPL     +
        BPL     +
; libsrc/apple/hgrlib.pla: 0114:         TYA                 ; DEAL WITH NEG X COORD
        TYA                 ; DEAL WITH NEG X COORD
; libsrc/apple/hgrlib.pla: 0115:         EOR     #$FF
        EOR     #$FF
; libsrc/apple/hgrlib.pla: 0116:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0117:         LDA     ESTKL+0,X
        LDA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0118:         EOR     #$FF
        EOR     #$FF
; libsrc/apple/hgrlib.pla: 0119: +       CPY     #$01
+       CPY     #$01
; libsrc/apple/hgrlib.pla: 0120:         BEQ     ++          ; MUST BE >= 140
        BEQ     ++          ; MUST BE >= 140
; libsrc/apple/hgrlib.pla: 0121:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0122:         LDY     #40         ; > 512 SO CLIP AT MAX
        LDY     #40         ; > 512 SO CLIP AT MAX
; libsrc/apple/hgrlib.pla: 0123:         LDA     #00
        LDA     #00
; libsrc/apple/hgrlib.pla: 0124:         BEQ     +++     
        BEQ     +++     
; libsrc/apple/hgrlib.pla: 0125: +       CMP     #140
+       CMP     #140
; libsrc/apple/hgrlib.pla: 0126:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0127: ++      SEC
++      SEC
; libsrc/apple/hgrlib.pla: 0128:         SBC     #140
        SBC     #140
; libsrc/apple/hgrlib.pla: 0129:         LDY     #20
        LDY     #20
; libsrc/apple/hgrlib.pla: 0130: +       CMP     #70
+       CMP     #70
; libsrc/apple/hgrlib.pla: 0131:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0132:         SBC     #70
        SBC     #70
; libsrc/apple/hgrlib.pla: 0133:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0134:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 0135:         ADC     #9
        ADC     #9
; libsrc/apple/hgrlib.pla: 0136:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0137:         LDA     ESTKL+0,X
        LDA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0138: +       CMP     #35
+       CMP     #35
; libsrc/apple/hgrlib.pla: 0139:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0140:         SBC     #35
        SBC     #35
; libsrc/apple/hgrlib.pla: 0141:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0142:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 0143:         ADC     #4
        ADC     #4
; libsrc/apple/hgrlib.pla: 0144:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0145:         LDA     ESTKL+0,X
        LDA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0146: +
+
; libsrc/apple/hgrlib.pla: 0147: -       CMP     #7
-       CMP     #7
; libsrc/apple/hgrlib.pla: 0148:         BCC     +++
        BCC     +++
; libsrc/apple/hgrlib.pla: 0149:         SBC     #7
        SBC     #7
; libsrc/apple/hgrlib.pla: 0150:         INY
        INY
; libsrc/apple/hgrlib.pla: 0151:         BNE     -
        BNE     -
; libsrc/apple/hgrlib.pla: 0152: +++     DEX
+++     DEX
; libsrc/apple/hgrlib.pla: 0153:         ASL     ESTKH+1,X   ; CHECK SIGN OF XCOORD
        ASL     ESTKH+1,X   ; CHECK SIGN OF XCOORD
; libsrc/apple/hgrlib.pla: 0154:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0155:         STA     ESTKL+0,X   ; REMAINDERL
        STA     ESTKL+0,X   ; REMAINDERL
; libsrc/apple/hgrlib.pla: 0156:         STY     ESTKL+1,X   ; QUOTIENTL
        STY     ESTKL+1,X   ; QUOTIENTL
; libsrc/apple/hgrlib.pla: 0157:         LDY     #$00
        LDY     #$00
; libsrc/apple/hgrlib.pla: 0158:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0159:         STY     ESTKH+1,X
        STY     ESTKH+1,X
; libsrc/apple/hgrlib.pla: 0160:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0161: +       EOR     #$07
+       EOR     #$07
; libsrc/apple/hgrlib.pla: 0162:         SBC     #$01
        SBC     #$01
; libsrc/apple/hgrlib.pla: 0163:         STA     ESTKL+0,X   ; REMAINDERL
        STA     ESTKL+0,X   ; REMAINDERL
; libsrc/apple/hgrlib.pla: 0164:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 0165:         EOR     #$FF
        EOR     #$FF
; libsrc/apple/hgrlib.pla: 0166:         STA     ESTKL+1,X   ; QUOTIENTL
        STA     ESTKL+1,X   ; QUOTIENTL
; libsrc/apple/hgrlib.pla: 0167:         LDY     #$00
        LDY     #$00
; libsrc/apple/hgrlib.pla: 0168:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0169:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0170:         STY     ESTKH+1,X
        STY     ESTKH+1,X
; libsrc/apple/hgrlib.pla: 0171:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0172: end
; libsrc/apple/hgrlib.pla: 0173: asm clipsrc(ofst, y, w, h, srcptr)#0
_A001 					; clipsrc()
; libsrc/apple/hgrlib.pla: 0174:         LDA     ESTKL+0,X   ; SRC PTR
        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 0175:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0176:         LDA     ESTKH+0,X
        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0177:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 0178:         LDA     ESTKL+2,X   ; WIDTH (SRC PITCH)
        LDA     ESTKL+2,X   ; WIDTH (SRC PITCH)
; libsrc/apple/hgrlib.pla: 0179:         STA     TMPH        ; WIDTH (DRAW WIDTH)
        STA     TMPH        ; WIDTH (DRAW WIDTH)
; libsrc/apple/hgrlib.pla: 0180: ; CLPTOP
; CLPTOP
; libsrc/apple/hgrlib.pla: 0181:         LDY     ESTKH+3,X   ; Y COORDH
        LDY     ESTKH+3,X   ; Y COORDH
; libsrc/apple/hgrlib.pla: 0182:         BPL     CLPBOTM
        BPL     CLPBOTM
; libsrc/apple/hgrlib.pla: 0183:         INY
        INY
; libsrc/apple/hgrlib.pla: 0184: ;        STY     ESTKH+3,X   ; Y COORDH
;        STY     ESTKH+3,X   ; Y COORDH
; libsrc/apple/hgrlib.pla: 0185:         BNE     CLPPED
        BNE     CLPPED
; libsrc/apple/hgrlib.pla: 0186:         LDY     ESTKL+3,X   ; Y COORDL
        LDY     ESTKL+3,X   ; Y COORDL
; libsrc/apple/hgrlib.pla: 0187: -       LDA     SRCL
-       LDA     SRCL
; libsrc/apple/hgrlib.pla: 0188:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0189:         ADC     ESTKL+2,X   ; PITCH
        ADC     ESTKL+2,X   ; PITCH
; libsrc/apple/hgrlib.pla: 0190:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0191:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0192:         INC     SRCH
        INC     SRCH
; libsrc/apple/hgrlib.pla: 0193: +       DEC     ESTKL+1,X   ; HEIGHT
+       DEC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0194:         BEQ     CLPPED
        BEQ     CLPPED
; libsrc/apple/hgrlib.pla: 0195:         INY                 ; Y COORDL
        INY                 ; Y COORDL
; libsrc/apple/hgrlib.pla: 0196:         BNE     -
        BNE     -
; libsrc/apple/hgrlib.pla: 0197:         STY     ESTKL+3,X   ; Y COORDL
        STY     ESTKL+3,X   ; Y COORDL
; libsrc/apple/hgrlib.pla: 0198:         BEQ     CLPLEFT     ; BETTER BE ZERO
        BEQ     CLPLEFT     ; BETTER BE ZERO
; libsrc/apple/hgrlib.pla: 0199: CLPBOTM BNE     CLPPED
CLPBOTM BNE     CLPPED
; libsrc/apple/hgrlib.pla: 0200:         LDA     ESTKL+3,X   ; YCOORDL
        LDA     ESTKL+3,X   ; YCOORDL
; libsrc/apple/hgrlib.pla: 0201:         CMP     #192
        CMP     #192
; libsrc/apple/hgrlib.pla: 0202:         BCS     CLPPED
        BCS     CLPPED
; libsrc/apple/hgrlib.pla: 0203: ;        CLC
;        CLC
; libsrc/apple/hgrlib.pla: 0204:         ADC     ESTKL+1,X   ; HEIGHT
        ADC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0205:         SBC     #191
        SBC     #191
; libsrc/apple/hgrlib.pla: 0206:         BCC     CLPLEFT
        BCC     CLPLEFT
; libsrc/apple/hgrlib.pla: 0207:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0208:         LDA     ESTKL+1,X   ; HEIGHT
        LDA     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0209:         SBC     TMPL
        SBC     TMPL
; libsrc/apple/hgrlib.pla: 0210:         STA     ESTKL+1,X   ; HEIGHT
        STA     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0211:         BEQ     CLPPED
        BEQ     CLPPED
; libsrc/apple/hgrlib.pla: 0212: CLPLEFT LDY     ESTKH+4,X   ; HORIZ OFFSETH
CLPLEFT LDY     ESTKH+4,X   ; HORIZ OFFSETH
; libsrc/apple/hgrlib.pla: 0213:         BPL     CLPRGHT
        BPL     CLPRGHT
; libsrc/apple/hgrlib.pla: 0214:         INY
        INY
; libsrc/apple/hgrlib.pla: 0215: ;        STY     ESTKH+4,X
;        STY     ESTKH+4,X
; libsrc/apple/hgrlib.pla: 0216:         BNE     CLPPED
        BNE     CLPPED
; libsrc/apple/hgrlib.pla: 0217:         LDY     ESTKL+4,X   ; HORIZ OFFSETL
        LDY     ESTKL+4,X   ; HORIZ OFFSETL
; libsrc/apple/hgrlib.pla: 0218: -       INC     SRCL
-       INC     SRCL
; libsrc/apple/hgrlib.pla: 0219:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0220:         INC     SRCH
        INC     SRCH
; libsrc/apple/hgrlib.pla: 0221: +       DEC     TMPH        ; WIDTH
+       DEC     TMPH        ; WIDTH
; libsrc/apple/hgrlib.pla: 0222:         BEQ     CLPPED
        BEQ     CLPPED
; libsrc/apple/hgrlib.pla: 0223:         INY                 ; HORIZ OFFSETL
        INY                 ; HORIZ OFFSETL
; libsrc/apple/hgrlib.pla: 0224:         BNE     -
        BNE     -
; libsrc/apple/hgrlib.pla: 0225:         STY     ESTKL+4,X   ; HORIZ OFFSETL
        STY     ESTKL+4,X   ; HORIZ OFFSETL
; libsrc/apple/hgrlib.pla: 0226:         BEQ     CLPDONE     ; BETTER BE ZERO
        BEQ     CLPDONE     ; BETTER BE ZERO
; libsrc/apple/hgrlib.pla: 0227: CLPRGHT BNE     CLPPED
CLPRGHT BNE     CLPPED
; libsrc/apple/hgrlib.pla: 0228:         LDA     ESTKL+4,X   ; HORIZ OFFSETL
        LDA     ESTKL+4,X   ; HORIZ OFFSETL
; libsrc/apple/hgrlib.pla: 0229:         CMP     #40
        CMP     #40
; libsrc/apple/hgrlib.pla: 0230:         BCS     CLPPED
        BCS     CLPPED
; libsrc/apple/hgrlib.pla: 0231: ;        CLC
;        CLC
; libsrc/apple/hgrlib.pla: 0232:         ADC     TMPH         ; WIDTH
        ADC     TMPH         ; WIDTH
; libsrc/apple/hgrlib.pla: 0233:         SBC     #39
        SBC     #39
; libsrc/apple/hgrlib.pla: 0234:         BCC     CLPDONE
        BCC     CLPDONE
; libsrc/apple/hgrlib.pla: 0235:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0236:         LDA     TMPH        ; WIDTH
        LDA     TMPH        ; WIDTH
; libsrc/apple/hgrlib.pla: 0237:         SBC     TMPL
        SBC     TMPL
; libsrc/apple/hgrlib.pla: 0238:         STA     TMPH        ; WIDTH
        STA     TMPH        ; WIDTH
; libsrc/apple/hgrlib.pla: 0239: CLPDONE LDA     TMPH
CLPDONE LDA     TMPH
; libsrc/apple/hgrlib.pla: 0240:         STA     ESTKH+2,X   ; WIDTH (DRAW WIDTH)
        STA     ESTKH+2,X   ; WIDTH (DRAW WIDTH)
; libsrc/apple/hgrlib.pla: 0241: ;        LDA     SRCL
;        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0242: ;        STA     ESTKL+0,X   ; SRC PTR
;        STA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 0243: ;        LDA     SRCH
;        LDA     SRCH
; libsrc/apple/hgrlib.pla: 0244: ;        STA     ESTKH+0,X
;        STA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0245:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0246: CLPPED  INX
CLPPED  INX
; libsrc/apple/hgrlib.pla: 0247:         INX
        INX
; libsrc/apple/hgrlib.pla: 0248:         INX
        INX
; libsrc/apple/hgrlib.pla: 0249:         INX
        INX
; libsrc/apple/hgrlib.pla: 0250:         INX
        INX
; libsrc/apple/hgrlib.pla: 0251:         PLA
        PLA
; libsrc/apple/hgrlib.pla: 0252:         PLA
        PLA
; libsrc/apple/hgrlib.pla: 0253:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0254: end
; libsrc/apple/hgrlib.pla: 0255: //export def hgrColor(c)#0
; libsrc/apple/hgrlib.pla: 0256: //    curhclr = hcolor[c & $07]
; libsrc/apple/hgrlib.pla: 0257: //end
; libsrc/apple/hgrlib.pla: 0258: export asm hgrColor(c)#0
_A002 					; hgrColor()
; libsrc/apple/hgrlib.pla: 0259:         LDA     ESTKL+0,X   ; COLOR
        LDA     ESTKL+0,X   ; COLOR
; libsrc/apple/hgrlib.pla: 0260:         AND     #$07
        AND     #$07
; libsrc/apple/hgrlib.pla: 0261:         ASL
        ASL
; libsrc/apple/hgrlib.pla: 0262:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0263:         LDA     $1000,Y     ; HCOLORL
        LDA     $1000,Y     ; HCOLORL
; libsrc/apple/hgrlib.pla: 0264:         STA     $2000       ; CURHCLRL
        STA     $2000       ; CURHCLRL
; libsrc/apple/hgrlib.pla: 0265:         LDA     $1001,Y     ; HCOLORH
        LDA     $1001,Y     ; HCOLORH
; libsrc/apple/hgrlib.pla: 0266:         STA     $2001       ; CRHCLRH
        STA     $2001       ; CRHCLRH
; libsrc/apple/hgrlib.pla: 0267:         INX
        INX
; libsrc/apple/hgrlib.pla: 0268:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0269: end
; libsrc/apple/hgrlib.pla: 0270: //export def hgrCopyDst(ofst, y, w, h, dstptr)#0
; libsrc/apple/hgrlib.pla: 0271: //    word j, srcptr
; libsrc/apple/hgrlib.pla: 0272: //
; libsrc/apple/hgrlib.pla: 0273: //    ofst = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0274: //    for j = y to y + h - 1
; libsrc/apple/hgrlib.pla: 0275: //        srcptr = hgrscan[j] + ofst
; libsrc/apple/hgrlib.pla: 0276: //        memcpy(dstptr, srcptr, w)
; libsrc/apple/hgrlib.pla: 0277: //        dstptr = dstptr + w
; libsrc/apple/hgrlib.pla: 0278: //    next
; libsrc/apple/hgrlib.pla: 0279: //end
; libsrc/apple/hgrlib.pla: 0280: export asm hgrCopyDst(ofst, y, w, h, dstptr)#0
_A003 					; hgrCopyDst()
; libsrc/apple/hgrlib.pla: 0281:         JSR     $C000       ; CLIPSRC
        JSR     $C000       ; CLIPSRC
; libsrc/apple/hgrlib.pla: 0282: ;        LDA     ESTKL+0,X   ; DST PTR
;        LDA     ESTKL+0,X   ; DST PTR
; libsrc/apple/hgrlib.pla: 0283:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0284:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0285: ;        LDA     ESTKH+0,X
;        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0286:         LDA     SRCH
        LDA     SRCH
; libsrc/apple/hgrlib.pla: 0287:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0288: --      LDY     ESTKL+3,X   ; Y COORD
--      LDY     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0289:         LDA     ESTKL+4,X   ; HORIZ OFFSET
        LDA     ESTKL+4,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0290:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0291: end
; libsrc/apple/hgrlib.pla: 0292: asm     _hgrCopyDst
_A004 					; _hgrCopyDst()
; libsrc/apple/hgrlib.pla: 0293:         ADC     $8000,Y     ; HGRSCANL
        ADC     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0294:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0295:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0296:         ADC     $9000,Y     ; HGRSCANH
        ADC     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0297:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 0298:         LDY     ESTKH+2,X   ; WIDTH
        LDY     ESTKH+2,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 0299:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0300: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 0301:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0302:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0303:         BPL     -
        BPL     -
; libsrc/apple/hgrlib.pla: 0304:         LDA     DSTL
        LDA     DSTL
; libsrc/apple/hgrlib.pla: 0305:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0306:         ADC     ESTKL+2,X   ; PITCH
        ADC     ESTKL+2,X   ; PITCH
; libsrc/apple/hgrlib.pla: 0307:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0308:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0309:         INC     DSTH
        INC     DSTH
; libsrc/apple/hgrlib.pla: 0310: +       INC     ESTKL+3,X   ; Y COORD
+       INC     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0311:         DEC     ESTKL+1,X   ; HEIGHT
        DEC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0312:         BNE     --
        BNE     --
; libsrc/apple/hgrlib.pla: 0313:         INX
        INX
; libsrc/apple/hgrlib.pla: 0314:         INX
        INX
; libsrc/apple/hgrlib.pla: 0315:         INX
        INX
; libsrc/apple/hgrlib.pla: 0316:         INX
        INX
; libsrc/apple/hgrlib.pla: 0317:         INX
        INX
; libsrc/apple/hgrlib.pla: 0318:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0319: end
; libsrc/apple/hgrlib.pla: 0320: //export def hgrCopySrc(ofst, y, w, h, srcptr)#0
; libsrc/apple/hgrlib.pla: 0321: //    word j, dstptr
; libsrc/apple/hgrlib.pla: 0322: //
; libsrc/apple/hgrlib.pla: 0323: //    ofst = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0324: //    for j = y to y + h - 1
; libsrc/apple/hgrlib.pla: 0325: //        dstptr = hgrscan[j] + ofst
; libsrc/apple/hgrlib.pla: 0326: //        memcpy(dstptr, srcptr, w)
; libsrc/apple/hgrlib.pla: 0327: //        srcptr = srcptr + w
; libsrc/apple/hgrlib.pla: 0328: //    next
; libsrc/apple/hgrlib.pla: 0329: //end
; libsrc/apple/hgrlib.pla: 0330: export asm hgrCopySrc(ofst, y, w, h, srcptr)#0
_A005 					; hgrCopySrc()
; libsrc/apple/hgrlib.pla: 0331:         JSR     $C000       ; CLIPSRC
        JSR     $C000       ; CLIPSRC
; libsrc/apple/hgrlib.pla: 0332: ;        LDA     ESTKL+0,X   ; SRC PTR
;        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 0333: ;        STA     SRCL
;        STA     SRCL
; libsrc/apple/hgrlib.pla: 0334: ;        LDA     ESTKH+0,X
;        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0335: ;        STA     SRCH        
;        STA     SRCH        
; libsrc/apple/hgrlib.pla: 0336: --      LDY     ESTKL+3,X   ; Y COORD
--      LDY     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0337:         LDA     ESTKL+4,X   ; HORIZ OFFSET
        LDA     ESTKL+4,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0338:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0339: end
; libsrc/apple/hgrlib.pla: 0340: asm     _hgrCopySrc
_A006 					; _hgrCopySrc()
; libsrc/apple/hgrlib.pla: 0341:         ADC     $8000,Y     ; HGRSCANL
        ADC     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0342:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0343:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0344:         ADC     $9000,Y     ; HGRSCANH
        ADC     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0345:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0346:         LDY     ESTKH+2,X   ; WIDTH
        LDY     ESTKH+2,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 0347:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0348: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 0349:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0350:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0351:         BPL     -
        BPL     -
; libsrc/apple/hgrlib.pla: 0352:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0353:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0354:         ADC     ESTKL+2,X   ; PITCH
        ADC     ESTKL+2,X   ; PITCH
; libsrc/apple/hgrlib.pla: 0355:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0356:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0357:         INC     SRCH
        INC     SRCH
; libsrc/apple/hgrlib.pla: 0358: +       INC     ESTKL+3,X   ; Y COORD
+       INC     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0359:         DEC     ESTKL+1,X   ; HEIGHT
        DEC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0360:         BNE     --
        BNE     --
; libsrc/apple/hgrlib.pla: 0361:         INX
        INX
; libsrc/apple/hgrlib.pla: 0362:         INX
        INX
; libsrc/apple/hgrlib.pla: 0363:         INX
        INX
; libsrc/apple/hgrlib.pla: 0364:         INX
        INX
; libsrc/apple/hgrlib.pla: 0365:         INX
        INX
; libsrc/apple/hgrlib.pla: 0366:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0367: end
; libsrc/apple/hgrlib.pla: 0368: //export def hgrAndSrc(ofst, y, w, h, srcptr)#0
; libsrc/apple/hgrlib.pla: 0369: //    word j, dstptr
; libsrc/apple/hgrlib.pla: 0370: //    byte i
; libsrc/apple/hgrlib.pla: 0371: //
; libsrc/apple/hgrlib.pla: 0372: //    ofst = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0373: //    for j = y to y + h - 1
; libsrc/apple/hgrlib.pla: 0374: //        dstptr = hgrscan[j] + ofst
; libsrc/apple/hgrlib.pla: 0375: //        for i = 0 to w - 1
; libsrc/apple/hgrlib.pla: 0376: //            dstptr->[i] = dstptr->[i] & srcptr->[i]
; libsrc/apple/hgrlib.pla: 0377: //        next
; libsrc/apple/hgrlib.pla: 0378: //        srcptr = srcptr + w
; libsrc/apple/hgrlib.pla: 0379: //    next
; libsrc/apple/hgrlib.pla: 0380: //end
; libsrc/apple/hgrlib.pla: 0381: export asm hgrAndSrc(ofst, y, w, h, srcptr)#0
_A007 					; hgrAndSrc()
; libsrc/apple/hgrlib.pla: 0382:         JSR     $C000       ; CLIPSRC
        JSR     $C000       ; CLIPSRC
; libsrc/apple/hgrlib.pla: 0383: ;        LDA     ESTKL+0,X   ; SRC PTR
;        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 0384: ;        STA     SRCL
;        STA     SRCL
; libsrc/apple/hgrlib.pla: 0385: ;        LDA     ESTKH+0,X
;        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0386: ;        STA     SRCH        
;        STA     SRCH        
; libsrc/apple/hgrlib.pla: 0387: --      LDY     ESTKL+3,X   ; Y COORD
--      LDY     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0388:         LDA     ESTKL+4,X   ; HORIZ OFFSET
        LDA     ESTKL+4,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0389:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0390: end
; libsrc/apple/hgrlib.pla: 0391: asm     _hgrAndSrc
_A008 					; _hgrAndSrc()
; libsrc/apple/hgrlib.pla: 0392:         ADC     $8000,Y     ; HGRSCANL
        ADC     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0393:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0394:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0395:         ADC     $9000,Y     ; HGRSCANH
        ADC     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0396:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0397:         LDY     ESTKH+2,X   ; WIDTH
        LDY     ESTKH+2,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 0398:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0399: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 0400:         AND     (DST),Y
        AND     (DST),Y
; libsrc/apple/hgrlib.pla: 0401:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0402:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0403:         BPL     -
        BPL     -
; libsrc/apple/hgrlib.pla: 0404:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0405:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0406:         ADC     ESTKL+2,X   ; PITCH
        ADC     ESTKL+2,X   ; PITCH
; libsrc/apple/hgrlib.pla: 0407:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0408:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0409:         INC     SRCH
        INC     SRCH
; libsrc/apple/hgrlib.pla: 0410: +       INC     ESTKL+3,X   ; Y COORD
+       INC     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0411:         DEC     ESTKL+1,X   ; HEIGHT
        DEC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0412:         BNE     --
        BNE     --
; libsrc/apple/hgrlib.pla: 0413:         INX
        INX
; libsrc/apple/hgrlib.pla: 0414:         INX
        INX
; libsrc/apple/hgrlib.pla: 0415:         INX
        INX
; libsrc/apple/hgrlib.pla: 0416:         INX
        INX
; libsrc/apple/hgrlib.pla: 0417:         INX
        INX
; libsrc/apple/hgrlib.pla: 0418:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0419: end
; libsrc/apple/hgrlib.pla: 0420: //export def hgrXorSrc(ofst, y, w, h, srcptr)#0
; libsrc/apple/hgrlib.pla: 0421: //    word j, dstptr
; libsrc/apple/hgrlib.pla: 0422: //    byte i
; libsrc/apple/hgrlib.pla: 0423: //
; libsrc/apple/hgrlib.pla: 0424: //    ofst = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0425: //    for j = y to y + h - 1
; libsrc/apple/hgrlib.pla: 0426: //        dstptr = hgrscan[j] + ofst
; libsrc/apple/hgrlib.pla: 0427: //        for i = 0 to w - 1
; libsrc/apple/hgrlib.pla: 0428: //            dstptr->[i] = dstptr->[i] ^ srcptr->[i]
; libsrc/apple/hgrlib.pla: 0429: //        next
; libsrc/apple/hgrlib.pla: 0430: //        srcptr = srcptr + w
; libsrc/apple/hgrlib.pla: 0431: //    next
; libsrc/apple/hgrlib.pla: 0432: //end
; libsrc/apple/hgrlib.pla: 0433: export asm hgrXorSrc(ofst, y, w, h, srcptr)#0
_A009 					; hgrXorSrc()
; libsrc/apple/hgrlib.pla: 0434:         JSR     $C000       ; CLIPSRC
        JSR     $C000       ; CLIPSRC
; libsrc/apple/hgrlib.pla: 0435: ;        LDA     ESTKL+0,X   ; SRC PTR
;        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 0436: ;        STA     SRCL
;        STA     SRCL
; libsrc/apple/hgrlib.pla: 0437: ;        LDA     ESTKH+0,X
;        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0438: ;        STA     SRCH        
;        STA     SRCH        
; libsrc/apple/hgrlib.pla: 0439: --      LDY     ESTKL+3,X   ; Y COORD
--      LDY     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0440:         LDA     ESTKL+4,X   ; HORIZ OFFSET
        LDA     ESTKL+4,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0441:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0442: end
; libsrc/apple/hgrlib.pla: 0443: asm     _hgrXorSrc
_A010 					; _hgrXorSrc()
; libsrc/apple/hgrlib.pla: 0444:         ADC     $8000,Y     ; HGRSCANL
        ADC     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0445:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0446:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0447:         ADC     $9000,Y     ; HGRSCANH
        ADC     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0448:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0449:         LDY     ESTKH+2,X   ; WIDTH
        LDY     ESTKH+2,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 0450:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0451: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 0452:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0453:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0454:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0455:         BPL     -
        BPL     -
; libsrc/apple/hgrlib.pla: 0456:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0457:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0458:         ADC     ESTKL+2,X   ; PITCH
        ADC     ESTKL+2,X   ; PITCH
; libsrc/apple/hgrlib.pla: 0459:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0460:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0461:         INC     SRCH
        INC     SRCH
; libsrc/apple/hgrlib.pla: 0462: +       INC     ESTKL+3,X   ; Y COORD
+       INC     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0463:         DEC     ESTKL+1,X   ; HEIGHT
        DEC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0464:         BNE     --
        BNE     --
; libsrc/apple/hgrlib.pla: 0465:         INX
        INX
; libsrc/apple/hgrlib.pla: 0466:         INX
        INX
; libsrc/apple/hgrlib.pla: 0467:         INX
        INX
; libsrc/apple/hgrlib.pla: 0468:         INX
        INX
; libsrc/apple/hgrlib.pla: 0469:         INX
        INX
; libsrc/apple/hgrlib.pla: 0470:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0471: end
; libsrc/apple/hgrlib.pla: 0472: //export def hgrOrSrc(ofst, y, w, h, srcptr)#0
; libsrc/apple/hgrlib.pla: 0473: //    word j, dstptr
; libsrc/apple/hgrlib.pla: 0474: //    byte i
; libsrc/apple/hgrlib.pla: 0475: //
; libsrc/apple/hgrlib.pla: 0476: //    ofst = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0477: //    for j = y to y + h - 1
; libsrc/apple/hgrlib.pla: 0478: //        dstptr = hgrscan[j] + ofst
; libsrc/apple/hgrlib.pla: 0479: //        for i = 0 to w - 1
; libsrc/apple/hgrlib.pla: 0480: //            dstptr->[i] = dstptr->[i] ^ srcptr->[i]
; libsrc/apple/hgrlib.pla: 0481: //        next
; libsrc/apple/hgrlib.pla: 0482: //        srcptr = srcptr + w
; libsrc/apple/hgrlib.pla: 0483: //    next
; libsrc/apple/hgrlib.pla: 0484: //end
; libsrc/apple/hgrlib.pla: 0485: export asm hgrOrSrc(ofst, y, w, h, srcptr)#0
_A011 					; hgrOrSrc()
; libsrc/apple/hgrlib.pla: 0486:         JSR     $C000       ; CLIPSRC
        JSR     $C000       ; CLIPSRC
; libsrc/apple/hgrlib.pla: 0487: ;        LDA     ESTKL+0,X   ; SRC PTR
;        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 0488: ;        STA     SRCL
;        STA     SRCL
; libsrc/apple/hgrlib.pla: 0489: ;        LDA     ESTKH+0,X
;        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0490: ;        STA     SRCH        
;        STA     SRCH        
; libsrc/apple/hgrlib.pla: 0491: --      LDY     ESTKL+3,X   ; Y COORD
--      LDY     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0492:         LDA     ESTKL+4,X   ; HORIZ OFFSET
        LDA     ESTKL+4,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0493:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0494: end
; libsrc/apple/hgrlib.pla: 0495: asm     _hgrOrSrc
_A012 					; _hgrOrSrc()
; libsrc/apple/hgrlib.pla: 0496:         ADC     $8000,Y     ; HGRSCANL
        ADC     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0497:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0498:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0499:         ADC     $9000,Y     ; HGRSCANH
        ADC     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0500:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0501:         LDY     ESTKH+2,X   ; WIDTH
        LDY     ESTKH+2,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 0502:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0503: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 0504:         ORA     (DST),Y
        ORA     (DST),Y
; libsrc/apple/hgrlib.pla: 0505:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0506:         DEY
        DEY
; libsrc/apple/hgrlib.pla: 0507:         BPL     -
        BPL     -
; libsrc/apple/hgrlib.pla: 0508:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0509:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 0510:         ADC     ESTKL+2,X   ; PITCH
        ADC     ESTKL+2,X   ; PITCH
; libsrc/apple/hgrlib.pla: 0511:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0512:         BCC     +
        BCC     +
; libsrc/apple/hgrlib.pla: 0513:         INC     SRCH
        INC     SRCH
; libsrc/apple/hgrlib.pla: 0514: +       INC     ESTKL+3,X   ; Y COORD
+       INC     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0515:         DEC     ESTKL+1,X   ; HEIGHT
        DEC     ESTKL+1,X   ; HEIGHT
; libsrc/apple/hgrlib.pla: 0516:         BNE     --
        BNE     --
; libsrc/apple/hgrlib.pla: 0517:         INX
        INX
; libsrc/apple/hgrlib.pla: 0518:         INX
        INX
; libsrc/apple/hgrlib.pla: 0519:         INX
        INX
; libsrc/apple/hgrlib.pla: 0520:         INX
        INX
; libsrc/apple/hgrlib.pla: 0521:         INX
        INX
; libsrc/apple/hgrlib.pla: 0522:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0523: end
; libsrc/apple/hgrlib.pla: 0524: //export def hgrPlot(x, y)#0
; libsrc/apple/hgrlib.pla: 0525: //    word pixptr
; libsrc/apple/hgrlib.pla: 0526: //    byte ofst, pixofst, pmask
; libsrc/apple/hgrlib.pla: 0527: //    
; libsrc/apple/hgrlib.pla: 0528: //    ofst, pixofst = divmod7(x)
; libsrc/apple/hgrlib.pla: 0529: //    pixptr = hgrscan[y] + drawbuff + ofst
; libsrc/apple/hgrlib.pla: 0530: //    pmask = hbmask[pixofst]
; libsrc/apple/hgrlib.pla: 0531: //    ^pixptr = (^pixptr & ~pmask) | (curhclr.[ofst & 1] & pmask)
; libsrc/apple/hgrlib.pla: 0532: //end
; libsrc/apple/hgrlib.pla: 0533: export asm hgrPlot(x, y)#0
_A013 					; hgrPlot()
; libsrc/apple/hgrlib.pla: 0534:         LDY     ESTKL+0,X   ; Y COORD
        LDY     ESTKL+0,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0535:         CPY     #192
        CPY     #192
; libsrc/apple/hgrlib.pla: 0536:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0537: end
; libsrc/apple/hgrlib.pla: 0538: asm     _hgrPlotA
_A014 					; _hgrPlotA()
; libsrc/apple/hgrlib.pla: 0539:         LDA     $8000,Y     ; HGRSCANL
        LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0540:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0541:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0542:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0543:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0544:         INX
        INX
; libsrc/apple/hgrlib.pla: 0545: end
; libsrc/apple/hgrlib.pla: 0546: asm     _hgrPlotB
_A015 					; _hgrPlotB()
; libsrc/apple/hgrlib.pla: 0547:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0548:         LDY     ESTKL+0,X   ; PIXEL OFFSET
        LDY     ESTKL+0,X   ; PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0549: end
; libsrc/apple/hgrlib.pla: 0550: asm     _hgrPlotC
_A016 					; _hgrPlotC()
; libsrc/apple/hgrlib.pla: 0551:         LDA     $1000,Y     ; HBMASK
        LDA     $1000,Y     ; HBMASK
; libsrc/apple/hgrlib.pla: 0552:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0553:         LDA     ESTKL+1,X   ; HORIZ OFFSET
        LDA     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0554:         CMP     #40
        CMP     #40
; libsrc/apple/hgrlib.pla: 0555:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0556:         AND     #$01
        AND     #$01
; libsrc/apple/hgrlib.pla: 0557:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0558: end
; libsrc/apple/hgrlib.pla: 0559: asm     _hgrPlotD
_A017 					; _hgrPlotD()
; libsrc/apple/hgrlib.pla: 0560:         LDA     $2000,Y     ; CURHCLR
        LDA     $2000,Y     ; CURHCLR
; libsrc/apple/hgrlib.pla: 0561:         LDY     ESTKL+1,X   ; HORIZ OFFSET
        LDY     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0562:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0563:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0564:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0565:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0566: +       INX
+       INX
; libsrc/apple/hgrlib.pla: 0567:         INX
        INX
; libsrc/apple/hgrlib.pla: 0568:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0569: end
; libsrc/apple/hgrlib.pla: 0570: //export def hgrXorPlot(x, y)#0
; libsrc/apple/hgrlib.pla: 0571: //    word pixptr
; libsrc/apple/hgrlib.pla: 0572: //    byte ofst, pixofst, pmask
; libsrc/apple/hgrlib.pla: 0573: //    
; libsrc/apple/hgrlib.pla: 0574: //    ofst, pixofst = divmod7(x)
; libsrc/apple/hgrlib.pla: 0575: //    pixptr = hgrscan[y] + drawbuff + ofst
; libsrc/apple/hgrlib.pla: 0576: //    pmask = hbmask[pixofst]
; libsrc/apple/hgrlib.pla: 0577: //    ^pixptr = ^pixptr ^ (curhclr.[ofst & 1] & pmask)
; libsrc/apple/hgrlib.pla: 0578: //end
; libsrc/apple/hgrlib.pla: 0579: export asm hgrXorPlot(x, y)#0
_A018 					; hgrXorPlot()
; libsrc/apple/hgrlib.pla: 0580:         LDY     ESTKL+0,X   ; Y COORD
        LDY     ESTKL+0,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0581:         CPY     #192
        CPY     #192
; libsrc/apple/hgrlib.pla: 0582:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0583: end
; libsrc/apple/hgrlib.pla: 0584: asm     _hgrXorPlotA
_A019 					; _hgrXorPlotA()
; libsrc/apple/hgrlib.pla: 0585:         LDA     $8000,Y     ; HGRSCANL
        LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0586:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0587:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0588:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0589:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0590:         INX
        INX
; libsrc/apple/hgrlib.pla: 0591: end
; libsrc/apple/hgrlib.pla: 0592: asm     _hgrXorPlotB
_A020 					; _hgrXorPlotB()
; libsrc/apple/hgrlib.pla: 0593:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0594:         LDY     ESTKL+0,X   ; PIXEL OFFSET
        LDY     ESTKL+0,X   ; PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0595: end
; libsrc/apple/hgrlib.pla: 0596: asm     _hgrXorPlotC
_A021 					; _hgrXorPlotC()
; libsrc/apple/hgrlib.pla: 0597:         LDA     $1000,Y     ; HBMASK
        LDA     $1000,Y     ; HBMASK
; libsrc/apple/hgrlib.pla: 0598:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0599:         LDA     ESTKL+1,X   ; HORIZ OFFSET
        LDA     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0600:         CMP     #40
        CMP     #40
; libsrc/apple/hgrlib.pla: 0601:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0602:         AND     #$01
        AND     #$01
; libsrc/apple/hgrlib.pla: 0603:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0604: end
; libsrc/apple/hgrlib.pla: 0605: asm     _hgrXorPlotD
_A022 					; _hgrXorPlotD()
; libsrc/apple/hgrlib.pla: 0606:         LDA     $2000,Y     ; CURHCLR
        LDA     $2000,Y     ; CURHCLR
; libsrc/apple/hgrlib.pla: 0607:         LDY     ESTKL+1,X   ; HORIZ OFFSET
        LDY     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0608:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0609:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0610:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0611: +       INX
+       INX
; libsrc/apple/hgrlib.pla: 0612:         INX
        INX
; libsrc/apple/hgrlib.pla: 0613:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0614: end
; libsrc/apple/hgrlib.pla: 0615: //export def hgrOrPlot(x, y)#0
; libsrc/apple/hgrlib.pla: 0616: //    word pixptr
; libsrc/apple/hgrlib.pla: 0617: //    byte ofst, pixofst, pmask
; libsrc/apple/hgrlib.pla: 0618: //    
; libsrc/apple/hgrlib.pla: 0619: //    ofst, pixofst = divmod7(x)
; libsrc/apple/hgrlib.pla: 0620: //    pixptr = hgrscan[y] + drawbuff + ofst
; libsrc/apple/hgrlib.pla: 0621: //    pmask = hbmask[pixofst]
; libsrc/apple/hgrlib.pla: 0622: //    ^pixptr = ^pixptr | (curhclr.[ofst & 1] & pmask)
; libsrc/apple/hgrlib.pla: 0623: //end
; libsrc/apple/hgrlib.pla: 0624: export asm hgrOrPlot(x, y)#0
_A023 					; hgrOrPlot()
; libsrc/apple/hgrlib.pla: 0625:         LDY     ESTKL+0,X   ; Y COORD
        LDY     ESTKL+0,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0626:         CPY     #192
        CPY     #192
; libsrc/apple/hgrlib.pla: 0627:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0628: end
; libsrc/apple/hgrlib.pla: 0629: asm     _hgrOrPlotA
_A024 					; _hgrOrPlotA()
; libsrc/apple/hgrlib.pla: 0630:         LDA     $8000,Y     ; HGRSCANL
        LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0631:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0632:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0633:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0634:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0635:         INX
        INX
; libsrc/apple/hgrlib.pla: 0636: end
; libsrc/apple/hgrlib.pla: 0637: asm     _hgrOrPlotB
_A025 					; _hgrOrPlotB()
; libsrc/apple/hgrlib.pla: 0638:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0639:         LDY     ESTKL+0,X   ; PIXEL OFFSET
        LDY     ESTKL+0,X   ; PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0640: end
; libsrc/apple/hgrlib.pla: 0641: asm     _hgrOrPlotC
_A026 					; _hgrOrPlotC()
; libsrc/apple/hgrlib.pla: 0642:         LDA     $1000,Y     ; HBMASK
        LDA     $1000,Y     ; HBMASK
; libsrc/apple/hgrlib.pla: 0643:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0644:         LDA     ESTKL+1,X   ; HORIZ OFFSET
        LDA     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0645:         CMP     #40
        CMP     #40
; libsrc/apple/hgrlib.pla: 0646:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0647:         AND     #$01
        AND     #$01
; libsrc/apple/hgrlib.pla: 0648:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0649: end
; libsrc/apple/hgrlib.pla: 0650: asm     _hgrOrPlotD
_A027 					; _hgrOrPlotD()
; libsrc/apple/hgrlib.pla: 0651:         LDA     $2000,Y     ; CURHCLR
        LDA     $2000,Y     ; CURHCLR
; libsrc/apple/hgrlib.pla: 0652:         LDY     ESTKL+1,X   ; HORIZ OFFSET
        LDY     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0653:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0654:         ORA     (DST),Y
        ORA     (DST),Y
; libsrc/apple/hgrlib.pla: 0655:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0656: +       INX
+       INX
; libsrc/apple/hgrlib.pla: 0657:         INX
        INX
; libsrc/apple/hgrlib.pla: 0658:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0659: end
; libsrc/apple/hgrlib.pla: 0660: //export def hgrHLin(x1, x2, y)#0
; libsrc/apple/hgrlib.pla: 0661: //    word pixptr, x
; libsrc/apple/hgrlib.pla: 0662: //    byte lofst, lpixofst, lpmask
; libsrc/apple/hgrlib.pla: 0663: //    byte rofst, rpixofst, rpmask
; libsrc/apple/hgrlib.pla: 0664: //    
; libsrc/apple/hgrlib.pla: 0665: //    if x1 == x2
; libsrc/apple/hgrlib.pla: 0666: //        hgrPlot(x1, y)
; libsrc/apple/hgrlib.pla: 0667: //    else
; libsrc/apple/hgrlib.pla: 0668: //        lofst, lpixofst = divmod7(x1)
; libsrc/apple/hgrlib.pla: 0669: //        pixptr = hgrscan[y] + drawbuff + lofst
; libsrc/apple/hgrlib.pla: 0670: //        rofst, rpixofst = divmod7(x2)
; libsrc/apple/hgrlib.pla: 0671: //        lpmask = hlmask[lpixofst]
; libsrc/apple/hgrlib.pla: 0672: //        rpmask = hrmask[rpixofst]
; libsrc/apple/hgrlib.pla: 0673: //        if lofst == rofst
; libsrc/apple/hgrlib.pla: 0674: //            lpmask = lpmask & rpmask
; libsrc/apple/hgrlib.pla: 0675: //            ^pixptr = (^pixptr & ~lpmask) | (curhclr.[pixptr.0 & 1] & lpmask)
; libsrc/apple/hgrlib.pla: 0676: //        else
; libsrc/apple/hgrlib.pla: 0677: //            ^pixptr = (^pixptr & ~lpmask) | (curhclr.[pixptr.0 & 1] & lpmask)
; libsrc/apple/hgrlib.pla: 0678: //            pixptr++
; libsrc/apple/hgrlib.pla: 0679: //            for x = lofst + 1 to rofst - 1
; libsrc/apple/hgrlib.pla: 0680: //                ^pixptr = curhclr.[pixptr.0 & 1]
; libsrc/apple/hgrlib.pla: 0681: //                pixptr++
; libsrc/apple/hgrlib.pla: 0682: //            next
; libsrc/apple/hgrlib.pla: 0683: //            ^pixptr = (^pixptr & ~rpmask) | (curhclr.[pixptr.0 & 1] & rpmask)
; libsrc/apple/hgrlib.pla: 0684: //        fin
; libsrc/apple/hgrlib.pla: 0685: //    fin
; libsrc/apple/hgrlib.pla: 0686: //end
; libsrc/apple/hgrlib.pla: 0687: export asm hgrHLin(x1, x2, y)#0
_A028 					; hgrHLin()
; libsrc/apple/hgrlib.pla: 0688:         LDA     ESTKL+1
        LDA     ESTKL+1
; libsrc/apple/hgrlib.pla: 0689:         CMP     ESTKL+2
        CMP     ESTKL+2
; libsrc/apple/hgrlib.pla: 0690:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0691:         LDA     ESTKH+1
        LDA     ESTKH+1
; libsrc/apple/hgrlib.pla: 0692:         CMP     ESTKH+2
        CMP     ESTKH+2
; libsrc/apple/hgrlib.pla: 0693:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0694: end
; libsrc/apple/hgrlib.pla: 0695: asm     _hgrHLinA
_A029 					; _hgrHLinA()
; libsrc/apple/hgrlib.pla: 0696:         JSR     $F000
        JSR     $F000
; libsrc/apple/hgrlib.pla: 0697:         INX
        INX
; libsrc/apple/hgrlib.pla: 0698:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0699: +       LDY     ESTKL+0,X   ; Y COORD
+       LDY     ESTKL+0,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0700: end
; libsrc/apple/hgrlib.pla: 0701: asm     _hgrHLinB
_A030 					; _hgrHLinB()
; libsrc/apple/hgrlib.pla: 0702:         LDA     $8000,Y     ; HGRSCANL
        LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0703:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0704:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0705:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0706:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0707:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/hgrlib.pla: 0708:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0709:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/apple/hgrlib.pla: 0710:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0711: end
; libsrc/apple/hgrlib.pla: 0712: asm     _hgrHLinC
_A031 					; _hgrHLinC()
; libsrc/apple/hgrlib.pla: 0713:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0714:         LDY     ESTKL+0,X   ; RIGHT PIXEL OFFSET
        LDY     ESTKL+0,X   ; RIGHT PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0715: end
; libsrc/apple/hgrlib.pla: 0716: asm     _hgrHLinD
_A032 					; _hgrHLinD()
; libsrc/apple/hgrlib.pla: 0717:         LDA     $1000,Y     ; HRMASK
        LDA     $1000,Y     ; HRMASK
; libsrc/apple/hgrlib.pla: 0718:         STA     TMPH
        STA     TMPH
; libsrc/apple/hgrlib.pla: 0719:         LDY     ESTKL+1,X   ; RIGHT HORIZ OFFSET
        LDY     ESTKL+1,X   ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0720:         STY     IPY         ; STEAL THIS ZP FOR A MOMENT
        STY     IPY         ; STEAL THIS ZP FOR A MOMENT
; libsrc/apple/hgrlib.pla: 0721:         INX
        INX
; libsrc/apple/hgrlib.pla: 0722:         INX
        INX
; libsrc/apple/hgrlib.pla: 0723:         INX
        INX
; libsrc/apple/hgrlib.pla: 0724: end
; libsrc/apple/hgrlib.pla: 0725: asm     _hgrHLinE
_A033 					; _hgrHLinE()
; libsrc/apple/hgrlib.pla: 0726:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0727:         LDY     ESTKL+0,X   ; LEFT PIXEL OFFSET
        LDY     ESTKL+0,X   ; LEFT PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0728: end
; libsrc/apple/hgrlib.pla: 0729: asm     _hgrHLinF
_A034 					; _hgrHLinF()
; libsrc/apple/hgrlib.pla: 0730:         LDA     $1000,Y     ; HLMASK
        LDA     $1000,Y     ; HLMASK
; libsrc/apple/hgrlib.pla: 0731:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0732:         LDY     ESTKL+1,X   ; LEFT HORIZ OFFSET
        LDY     ESTKL+1,X   ; LEFT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0733:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 0734:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 0735:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0736: end
; libsrc/apple/hgrlib.pla: 0737: asm     _hgrHLinG
_A035 					; _hgrHLinG()
; libsrc/apple/hgrlib.pla: 0738:         LDA     $2001       ; CURHCLRH
        LDA     $2001       ; CURHCLRH
; libsrc/apple/hgrlib.pla: 0739:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 0740:         LDA     $2000       ; CURHCLRL
        LDA     $2000       ; CURHCLRL
; libsrc/apple/hgrlib.pla: 0741:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0742:         BCC     ++
        BCC     ++
; libsrc/apple/hgrlib.pla: 0743: +       LDA     $2000       ; CURHCLRL
+       LDA     $2000       ; CURHCLRL
; libsrc/apple/hgrlib.pla: 0744:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 0745:         LDA     $2001       ; CURHCLRH
        LDA     $2001       ; CURHCLRH
; libsrc/apple/hgrlib.pla: 0746:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0747: ++      CPY     IPY         ; RIGHT HORIZ OFFSET
++      CPY     IPY         ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0748:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0749:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0750:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0751:         AND     TMPH
        AND     TMPH
; libsrc/apple/hgrlib.pla: 0752:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0753:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0754:         INX
        INX
; libsrc/apple/hgrlib.pla: 0755:         INX
        INX
; libsrc/apple/hgrlib.pla: 0756:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0757: +       EOR     (DST),Y
+       EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0758:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0759:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0760: -       STA     (DST),Y
-       STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0761:         LDA     SRCH
        LDA     SRCH
; libsrc/apple/hgrlib.pla: 0762:         INY
        INY
; libsrc/apple/hgrlib.pla: 0763:         CPY     IPY         ; RIGHT HORIZ OFFSET
        CPY     IPY         ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0764:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0765:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0766:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0767:         INY
        INY
; libsrc/apple/hgrlib.pla: 0768:         CPY     IPY         ; RIGHT HORIZ OFFSET
        CPY     IPY         ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0769:         BCC     -
        BCC     -
; libsrc/apple/hgrlib.pla: 0770: +       EOR     (DST),Y
+       EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0771:         AND     TMPH
        AND     TMPH
; libsrc/apple/hgrlib.pla: 0772:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0773:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0774:         INX
        INX
; libsrc/apple/hgrlib.pla: 0775:         INX
        INX
; libsrc/apple/hgrlib.pla: 0776:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0777: end
; libsrc/apple/hgrlib.pla: 0778: //export def hgrXorHLin(x1, x2, y)#0
; libsrc/apple/hgrlib.pla: 0779: //    word pixptr, x
; libsrc/apple/hgrlib.pla: 0780: //    byte lofst, lpixofst, lpmask
; libsrc/apple/hgrlib.pla: 0781: //    byte rofst, rpixofst, rpmask
; libsrc/apple/hgrlib.pla: 0782: //    
; libsrc/apple/hgrlib.pla: 0783: //    if x1 == x2
; libsrc/apple/hgrlib.pla: 0784: //        hgrPlot(x1, y)
; libsrc/apple/hgrlib.pla: 0785: //    else
; libsrc/apple/hgrlib.pla: 0786: //        lofst, lpixofst = divmod7(x1)
; libsrc/apple/hgrlib.pla: 0787: //        pixptr = hgrscan[y] + drawbuff + lofst
; libsrc/apple/hgrlib.pla: 0788: //        rofst, rpixofst = divmod7(x2)
; libsrc/apple/hgrlib.pla: 0789: //        lpmask = hlmask[lpixofst]
; libsrc/apple/hgrlib.pla: 0790: //        rpmask = hrmask[rpixofst]
; libsrc/apple/hgrlib.pla: 0791: //        if lofst == rofst
; libsrc/apple/hgrlib.pla: 0792: //            lpmask = lpmask & rpmask
; libsrc/apple/hgrlib.pla: 0793: //            ^pixptr = ^pixptr ^ (curhclr.[pixptr.0 & 1] & lpmask)
; libsrc/apple/hgrlib.pla: 0794: //        else
; libsrc/apple/hgrlib.pla: 0795: //            ^pixptr = ^pixptr ^ (curhclr.[pixptr.0 & 1] & lpmask)
; libsrc/apple/hgrlib.pla: 0796: //            pixptr++
; libsrc/apple/hgrlib.pla: 0797: //            for x = lofst + 1 to rofst - 1
; libsrc/apple/hgrlib.pla: 0798: //                ^pixptr = ^pixptr ^ curhclr.[pixptr.0 & 1]
; libsrc/apple/hgrlib.pla: 0799: //                pixptr++
; libsrc/apple/hgrlib.pla: 0800: //            next
; libsrc/apple/hgrlib.pla: 0801: //            ^pixptr = ^pixptr ^ (curhclr.[pixptr.0 & 1] & rpmask)
; libsrc/apple/hgrlib.pla: 0802: //        fin
; libsrc/apple/hgrlib.pla: 0803: //    fin
; libsrc/apple/hgrlib.pla: 0804: //end
; libsrc/apple/hgrlib.pla: 0805: export asm hgrXorHLin(x1, x2, y)#0
_A036 					; hgrXorHLin()
; libsrc/apple/hgrlib.pla: 0806:         LDA     ESTKL+1
        LDA     ESTKL+1
; libsrc/apple/hgrlib.pla: 0807:         CMP     ESTKL+2
        CMP     ESTKL+2
; libsrc/apple/hgrlib.pla: 0808:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0809:         LDA     ESTKH+1
        LDA     ESTKH+1
; libsrc/apple/hgrlib.pla: 0810:         CMP     ESTKH+2
        CMP     ESTKH+2
; libsrc/apple/hgrlib.pla: 0811:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0812: end
; libsrc/apple/hgrlib.pla: 0813: asm     _hgrXHLinA
_A037 					; _hgrXHLinA()
; libsrc/apple/hgrlib.pla: 0814:         JSR     $F000
        JSR     $F000
; libsrc/apple/hgrlib.pla: 0815:         INX
        INX
; libsrc/apple/hgrlib.pla: 0816:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0817: +       LDY     ESTKL+0,X   ; Y COORD
+       LDY     ESTKL+0,X   ; Y COORD
; libsrc/apple/hgrlib.pla: 0818: end
; libsrc/apple/hgrlib.pla: 0819: asm     _hgrXHLinB
_A038 					; _hgrXHLinB()
; libsrc/apple/hgrlib.pla: 0820:         LDA     $8000,Y     ; HGRSCANL
        LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0821:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0822:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0823:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0824:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0825:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/hgrlib.pla: 0826:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 0827:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/apple/hgrlib.pla: 0828:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 0829: end
; libsrc/apple/hgrlib.pla: 0830: asm     _hgrXHLinC
_A039 					; _hgrXHLinC()
; libsrc/apple/hgrlib.pla: 0831:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0832:         LDY     ESTKL+0,X   ; RIGHT PIXEL OFFSET
        LDY     ESTKL+0,X   ; RIGHT PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0833: end
; libsrc/apple/hgrlib.pla: 0834: asm     _hgrXHLinD
_A040 					; _hgrXHLinD()
; libsrc/apple/hgrlib.pla: 0835:         LDA     $1000,Y     ; HRMASK
        LDA     $1000,Y     ; HRMASK
; libsrc/apple/hgrlib.pla: 0836:         STA     TMPH
        STA     TMPH
; libsrc/apple/hgrlib.pla: 0837:         LDY     ESTKL+1,X   ; RIGHT HORIZ OFFSET
        LDY     ESTKL+1,X   ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0838:         STY     IPY         ; STEAL THIS ZP FOR A MOMENT
        STY     IPY         ; STEAL THIS ZP FOR A MOMENT
; libsrc/apple/hgrlib.pla: 0839:         INX
        INX
; libsrc/apple/hgrlib.pla: 0840:         INX
        INX
; libsrc/apple/hgrlib.pla: 0841:         INX
        INX
; libsrc/apple/hgrlib.pla: 0842: end
; libsrc/apple/hgrlib.pla: 0843: asm     _hgrXHLinE
_A041 					; _hgrXHLinE()
; libsrc/apple/hgrlib.pla: 0844:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0845:         LDY     ESTKL+0,X   ; LEFT PIXEL OFFSET
        LDY     ESTKL+0,X   ; LEFT PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0846: end
; libsrc/apple/hgrlib.pla: 0847: asm     _hgrXHLinF
_A042 					; _hgrXHLinF()
; libsrc/apple/hgrlib.pla: 0848:         LDA     $1000,Y     ; HLMASK
        LDA     $1000,Y     ; HLMASK
; libsrc/apple/hgrlib.pla: 0849:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0850:         LDY     ESTKL+1,X   ; LEFT HORIZ OFFSET
        LDY     ESTKL+1,X   ; LEFT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0851:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 0852:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 0853:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0854: end
; libsrc/apple/hgrlib.pla: 0855: asm     _hgrXHLinG
_A043 					; _hgrXHLinG()
; libsrc/apple/hgrlib.pla: 0856:         LDA     $2001       ; CURHCLRH
        LDA     $2001       ; CURHCLRH
; libsrc/apple/hgrlib.pla: 0857:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 0858:         LDA     $2000       ; CURHCLRH
        LDA     $2000       ; CURHCLRH
; libsrc/apple/hgrlib.pla: 0859:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0860:         BCC     ++
        BCC     ++
; libsrc/apple/hgrlib.pla: 0861: +       LDA     $2000       ; CURHCLRL
+       LDA     $2000       ; CURHCLRL
; libsrc/apple/hgrlib.pla: 0862:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 0863:         LDA     $2001       ; CURHCLRH
        LDA     $2001       ; CURHCLRH
; libsrc/apple/hgrlib.pla: 0864:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 0865: ++      CPY     IPY         ; RIGHT HORIZ OFFSET
++      CPY     IPY         ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0866:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 0867:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0868:         AND     TMPH
        AND     TMPH
; libsrc/apple/hgrlib.pla: 0869:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0870:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0871:         INX
        INX
; libsrc/apple/hgrlib.pla: 0872:         INX
        INX
; libsrc/apple/hgrlib.pla: 0873:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0874: +       AND     TMPL
+       AND     TMPL
; libsrc/apple/hgrlib.pla: 0875: -       EOR     (DST),Y
-       EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0876:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0877:         LDA     SRCH
        LDA     SRCH
; libsrc/apple/hgrlib.pla: 0878:         INY
        INY
; libsrc/apple/hgrlib.pla: 0879:         CPY     IPY         ; RIGHT HORIZ OFFSET
        CPY     IPY         ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0880:         BCS     +
        BCS     +
; libsrc/apple/hgrlib.pla: 0881:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0882:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0883:         LDA     SRCL
        LDA     SRCL
; libsrc/apple/hgrlib.pla: 0884:         INY
        INY
; libsrc/apple/hgrlib.pla: 0885:         CPY     IPY         ; RIGHT HORIZ OFFSET
        CPY     IPY         ; RIGHT HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0886:         BCC     -
        BCC     -
; libsrc/apple/hgrlib.pla: 0887: +       AND     TMPH
+       AND     TMPH
; libsrc/apple/hgrlib.pla: 0888:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 0889:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0890:         INX
        INX
; libsrc/apple/hgrlib.pla: 0891:         INX
        INX
; libsrc/apple/hgrlib.pla: 0892:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0893: end
; libsrc/apple/hgrlib.pla: 0894: //export def hgrVlin(y1, y2, x)#0
; libsrc/apple/hgrlib.pla: 0895: //    word pixptr, y, ofst
; libsrc/apple/hgrlib.pla: 0896: //    byte pixofst, pmask, cmask
; libsrc/apple/hgrlib.pla: 0897: //    
; libsrc/apple/hgrlib.pla: 0898: //    if y1 == y2
; libsrc/apple/hgrlib.pla: 0899: //        hgrPlot(x, y1)
; libsrc/apple/hgrlib.pla: 0900: //    else
; libsrc/apple/hgrlib.pla: 0901: //        ofst, pixofst = divmod7(x)
; libsrc/apple/hgrlib.pla: 0902: //        ofst  = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0903: //        pmask = hbmask[pixofst]
; libsrc/apple/hgrlib.pla: 0904: //        cmask = curhclr.[ofst & 1] & pmask
; libsrc/apple/hgrlib.pla: 0905: //        pmask = ~pmask
; libsrc/apple/hgrlib.pla: 0906: //        for y = y1 to y2
; libsrc/apple/hgrlib.pla: 0907: //            pixptr = hgrscan[y] + ofst
; libsrc/apple/hgrlib.pla: 0908: //            ^pixptr = (^pixptr & pmask) | cmask
; libsrc/apple/hgrlib.pla: 0909: //        next
; libsrc/apple/hgrlib.pla: 0910: //    fin
; libsrc/apple/hgrlib.pla: 0911: //end
; libsrc/apple/hgrlib.pla: 0912: export asm hgrVlin(y1, y2, x)#0
_A044 					; hgrVlin()
; libsrc/apple/hgrlib.pla: 0913:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0914:         LDY     ESTKL+0,X   ; PIXEL OFFSET
        LDY     ESTKL+0,X   ; PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0915: end
; libsrc/apple/hgrlib.pla: 0916: asm     _hgrVLinA
_A045 					; _hgrVLinA()
; libsrc/apple/hgrlib.pla: 0917:         LDA     $1000,Y     ; HBMASK
        LDA     $1000,Y     ; HBMASK
; libsrc/apple/hgrlib.pla: 0918:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0919:         EOR     #$FF
        EOR     #$FF
; libsrc/apple/hgrlib.pla: 0920:         STA     TMPH
        STA     TMPH
; libsrc/apple/hgrlib.pla: 0921:         LDA     ESTKL+1,X   ; HORIZ OFFSET
        LDA     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0922:         AND     #$01
        AND     #$01
; libsrc/apple/hgrlib.pla: 0923:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0924: end
; libsrc/apple/hgrlib.pla: 0925: asm     _hgrVLinB
_A046 					; _hgrVLinB()
; libsrc/apple/hgrlib.pla: 0926:         LDA     $2000,Y     ; CURHCLR
        LDA     $2000,Y     ; CURHCLR
; libsrc/apple/hgrlib.pla: 0927:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0928:         STA     TMPL        
        STA     TMPL        
; libsrc/apple/hgrlib.pla: 0929:         LDY     ESTKL+3,X   ; Y1 COORD
        LDY     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/hgrlib.pla: 0930: end
; libsrc/apple/hgrlib.pla: 0931: asm     _hgrVLinC
_A047 					; _hgrVLinC()
; libsrc/apple/hgrlib.pla: 0932: -       LDA     $8000,Y     ; HGRSCANL
-       LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0933:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0934:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0935:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0936:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0937:         LDY     ESTKL+1,X   ; HORIZ OFFSET
        LDY     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0938:         LDA     (DST),Y
        LDA     (DST),Y
; libsrc/apple/hgrlib.pla: 0939:         AND     TMPH
        AND     TMPH
; libsrc/apple/hgrlib.pla: 0940:         ORA     TMPL
        ORA     TMPL
; libsrc/apple/hgrlib.pla: 0941:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 0942:         LDY     ESTKL+3,X   ; Y1 COORD
        LDY     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/hgrlib.pla: 0943:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 0944:         INY
        INY
; libsrc/apple/hgrlib.pla: 0945:         STY     ESTKL+3,X   ; Y1 COORD
        STY     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/hgrlib.pla: 0946:         CMP     ESTKL+2,X   ; Y2 COORD
        CMP     ESTKL+2,X   ; Y2 COORD
; libsrc/apple/hgrlib.pla: 0947:         BNE     -
        BNE     -
; libsrc/apple/hgrlib.pla: 0948:         INX
        INX
; libsrc/apple/hgrlib.pla: 0949:         INX
        INX
; libsrc/apple/hgrlib.pla: 0950:         INX
        INX
; libsrc/apple/hgrlib.pla: 0951:         INX
        INX
; libsrc/apple/hgrlib.pla: 0952:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 0953: end
; libsrc/apple/hgrlib.pla: 0954: //export def hgrXVlin(y1, y2, x)#0
; libsrc/apple/hgrlib.pla: 0955: //    word pixptr, y, ofst
; libsrc/apple/hgrlib.pla: 0956: //    byte pixofst, pmask, cmask
; libsrc/apple/hgrlib.pla: 0957: //    
; libsrc/apple/hgrlib.pla: 0958: //    if y1 == y2
; libsrc/apple/hgrlib.pla: 0959: //        hgrXorPlot(x, y1)
; libsrc/apple/hgrlib.pla: 0960: //    else
; libsrc/apple/hgrlib.pla: 0961: //        ofst, pixofst = divmod7(x)
; libsrc/apple/hgrlib.pla: 0962: //        ofst  = ofst + drawbuff
; libsrc/apple/hgrlib.pla: 0963: //        pmask = hbmask[pixofst]
; libsrc/apple/hgrlib.pla: 0964: //        cmask = curhclr.[ofst & 1] & pmask
; libsrc/apple/hgrlib.pla: 0965: //        pmask = ~pmask
; libsrc/apple/hgrlib.pla: 0966: //        for y = y1 to y2
; libsrc/apple/hgrlib.pla: 0967: //            pixptr = hgrscan[y] + ofst
; libsrc/apple/hgrlib.pla: 0968: //            ^pixptr = ^pixptr ^ cmask
; libsrc/apple/hgrlib.pla: 0969: //        next
; libsrc/apple/hgrlib.pla: 0970: //    fin
; libsrc/apple/hgrlib.pla: 0971: //end
; libsrc/apple/hgrlib.pla: 0972: export asm hgrXorVlin(y1, y2, x)#0
_A048 					; hgrXorVlin()
; libsrc/apple/hgrlib.pla: 0973:         JSR     1000        ; DIVMOD7
        JSR     1000        ; DIVMOD7
; libsrc/apple/hgrlib.pla: 0974:         LDY     ESTKL+0,X   ; PIXEL OFFSET
        LDY     ESTKL+0,X   ; PIXEL OFFSET
; libsrc/apple/hgrlib.pla: 0975: end
; libsrc/apple/hgrlib.pla: 0976: asm     _hgrXVLinA
_A049 					; _hgrXVLinA()
; libsrc/apple/hgrlib.pla: 0977:         LDA     $1000,Y     ; HBMASK
        LDA     $1000,Y     ; HBMASK
; libsrc/apple/hgrlib.pla: 0978:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrlib.pla: 0979:         EOR     #$FF
        EOR     #$FF
; libsrc/apple/hgrlib.pla: 0980:         STA     TMPH
        STA     TMPH
; libsrc/apple/hgrlib.pla: 0981:         LDA     ESTKL+1,X   ; HORIZ OFFSET
        LDA     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0982:         AND     #$01
        AND     #$01
; libsrc/apple/hgrlib.pla: 0983:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 0984: end
; libsrc/apple/hgrlib.pla: 0985: asm     _hgrXVLinB
_A050 					; _hgrXVLinB()
; libsrc/apple/hgrlib.pla: 0986:         LDA     $2000,Y     ; CURHCLR
        LDA     $2000,Y     ; CURHCLR
; libsrc/apple/hgrlib.pla: 0987:         AND     TMPL
        AND     TMPL
; libsrc/apple/hgrlib.pla: 0988:         STA     TMPL        
        STA     TMPL        
; libsrc/apple/hgrlib.pla: 0989:         LDY     ESTKL+3,X   ; Y1 COORD
        LDY     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/hgrlib.pla: 0990: end
; libsrc/apple/hgrlib.pla: 0991: asm     _hgrXVLinC
_A051 					; _hgrXVLinC()
; libsrc/apple/hgrlib.pla: 0992: -       LDA     $8000,Y     ; HGRSCANL
-       LDA     $8000,Y     ; HGRSCANL
; libsrc/apple/hgrlib.pla: 0993:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrlib.pla: 0994:         LDA     $1000       ; DRAWBUFFH
        LDA     $1000       ; DRAWBUFFH
; libsrc/apple/hgrlib.pla: 0995:         ORA     $9000,Y     ; HGRSCANH
        ORA     $9000,Y     ; HGRSCANH
; libsrc/apple/hgrlib.pla: 0996:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrlib.pla: 0997:         LDY     ESTKL+1,X   ; HORIZ OFFSET
        LDY     ESTKL+1,X   ; HORIZ OFFSET
; libsrc/apple/hgrlib.pla: 0998:         LDA     TMPL
        LDA     TMPL
; libsrc/apple/hgrlib.pla: 0999:         EOR     (DST),Y
        EOR     (DST),Y
; libsrc/apple/hgrlib.pla: 1000:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/hgrlib.pla: 1001:         LDY     ESTKL+3,X   ; Y1 COORD
        LDY     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/hgrlib.pla: 1002:         TYA
        TYA
; libsrc/apple/hgrlib.pla: 1003:         INY
        INY
; libsrc/apple/hgrlib.pla: 1004:         STY     ESTKL+3,X   ; Y1 COORD
        STY     ESTKL+3,X   ; Y1 COORD
; libsrc/apple/hgrlib.pla: 1005:         CMP     ESTKL+2,X   ; Y2 COORD
        CMP     ESTKL+2,X   ; Y2 COORD
; libsrc/apple/hgrlib.pla: 1006:         BNE     -
        BNE     -
; libsrc/apple/hgrlib.pla: 1007:         INX
        INX
; libsrc/apple/hgrlib.pla: 1008:         INX
        INX
; libsrc/apple/hgrlib.pla: 1009:         INX
        INX
; libsrc/apple/hgrlib.pla: 1010:         INX
        INX
; libsrc/apple/hgrlib.pla: 1011:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 1012: end
; libsrc/apple/hgrlib.pla: 1013: //
; libsrc/apple/hgrlib.pla: 1014: // Masked BLT scanline of pixmap
; libsrc/apple/hgrlib.pla: 1015: //
; libsrc/apple/hgrlib.pla: 1016: asm scanBLT(x, y, w, srcptr)#0
_A052 					; scanBLT()
; libsrc/apple/hgrlib.pla: 1017:         LDA     ESTKL+0,X   ; SRC PTR
        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrlib.pla: 1018:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrlib.pla: 1019:         LDA     ESTKH+0,X
        LDA     ESTKH+0,X
; libsrc/apple/hgrlib.pla: 1020:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrlib.pla: 1021:         LDA     #$00
        LDA     #$00
; libsrc/apple/hgrlib.pla: 1022: -       PHA
-       PHA
; libsrc/apple/hgrlib.pla: 1023:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 1024:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 1025:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 1026:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 1027:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 1028:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 1029:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 1030:         PHA
        PHA
; libsrc/apple/hgrlib.pla: 1031:         DEX
        DEX
; libsrc/apple/hgrlib.pla: 1032:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 1033: end
; libsrc/apple/hgrlib.pla: 1034: asm     _scanBLTA
_A053 					; _scanBLTA()
; libsrc/apple/hgrlib.pla: 1035:         JSR     $C000       ; HCOLOR
        JSR     $C000       ; HCOLOR
; libsrc/apple/hgrlib.pla: 1036:         DEX
        DEX
; libsrc/apple/hgrlib.pla: 1037:         DEX
        DEX
; libsrc/apple/hgrlib.pla: 1038:         LDA     ESTKL+5,X   ; X COORDL
        LDA     ESTKL+5,X   ; X COORDL
; libsrc/apple/hgrlib.pla: 1039:         STA     ESTKL+1,X     
        STA     ESTKL+1,X     
; libsrc/apple/hgrlib.pla: 1040:         LDA     ESTKH+5,X   ; X COORDH
        LDA     ESTKH+5,X   ; X COORDH
; libsrc/apple/hgrlib.pla: 1041:         STA     ESTKH+1,X     
        STA     ESTKH+1,X     
; libsrc/apple/hgrlib.pla: 1042:         LDA     ESTKL+4,X   ; Y COORDL
        LDA     ESTKL+4,X   ; Y COORDL
; libsrc/apple/hgrlib.pla: 1043:         STA     ESTKL+0,X     
        STA     ESTKL+0,X     
; libsrc/apple/hgrlib.pla: 1044:         LDA     ESTKH+4,X   ; Y COORDH
        LDA     ESTKH+4,X   ; Y COORDH
; libsrc/apple/hgrlib.pla: 1045:         STA     ESTKH+0,X     
        STA     ESTKH+0,X     
; libsrc/apple/hgrlib.pla: 1046:         PLA
        PLA
; libsrc/apple/hgrlib.pla: 1047:         AND     #$08
        AND     #$08
; libsrc/apple/hgrlib.pla: 1048:         BEQ     +
        BEQ     +
; libsrc/apple/hgrlib.pla: 1049: end
; libsrc/apple/hgrlib.pla: 1050: asm     _scanBLTB
_A054 					; _scanBLTB()
; libsrc/apple/hgrlib.pla: 1051:         JSR     $D000       ; HPLOT
        JSR     $D000       ; HPLOT
; libsrc/apple/hgrlib.pla: 1052:         BEQ     ++
        BEQ     ++
; libsrc/apple/hgrlib.pla: 1053:         BNE     ++
        BNE     ++
; libsrc/apple/hgrlib.pla: 1054: +       JSR     $E000       ; HPLOTOR
+       JSR     $E000       ; HPLOTOR
; libsrc/apple/hgrlib.pla: 1055: ++      INC     ESTKL+3,X   ; X COORDL
++      INC     ESTKL+3,X   ; X COORDL
; libsrc/apple/hgrlib.pla: 1056:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 1057:         INC     ESTKH+3,X   ; X COORDH
        INC     ESTKH+3,X   ; X COORDH
; libsrc/apple/hgrlib.pla: 1058: +       PLA
+       PLA
; libsrc/apple/hgrlib.pla: 1059:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 1060:         ADC     #$01
        ADC     #$01
; libsrc/apple/hgrlib.pla: 1061:         CMP     ESTKL+1,X   ; WIDTH
        CMP     ESTKL+1,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 1062:         BEQ     BLTDONE
        BEQ     BLTDONE
; libsrc/apple/hgrlib.pla: 1063:         PHA
        PHA
; libsrc/apple/hgrlib.pla: 1064:         LSR
        LSR
; libsrc/apple/hgrlib.pla: 1065:         TAY
        TAY
; libsrc/apple/hgrlib.pla: 1066:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrlib.pla: 1067:         PHA
        PHA
; libsrc/apple/hgrlib.pla: 1068:         DEX
        DEX
; libsrc/apple/hgrlib.pla: 1069:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrlib.pla: 1070: end
; libsrc/apple/hgrlib.pla: 1071: asm     _scanBLTC
_A055 					; _scanBLTC()
; libsrc/apple/hgrlib.pla: 1072:         JSR     $C000       ; HCOLOR
        JSR     $C000       ; HCOLOR
; libsrc/apple/hgrlib.pla: 1073:         DEX
        DEX
; libsrc/apple/hgrlib.pla: 1074:         DEX
        DEX
; libsrc/apple/hgrlib.pla: 1075:         LDA     ESTKL+5,X   ; X COORDL
        LDA     ESTKL+5,X   ; X COORDL
; libsrc/apple/hgrlib.pla: 1076:         STA     ESTKL+1,X     
        STA     ESTKL+1,X     
; libsrc/apple/hgrlib.pla: 1077:         LDA     ESTKH+5,X   ; X COORDH
        LDA     ESTKH+5,X   ; X COORDH
; libsrc/apple/hgrlib.pla: 1078:         STA     ESTKH+1,X     
        STA     ESTKH+1,X     
; libsrc/apple/hgrlib.pla: 1079:         LDA     ESTKL+4,X   ; Y COORDL
        LDA     ESTKL+4,X   ; Y COORDL
; libsrc/apple/hgrlib.pla: 1080:         STA     ESTKL+0,X     
        STA     ESTKL+0,X     
; libsrc/apple/hgrlib.pla: 1081:         LDA     ESTKH+4,X   ; Y COORDH
        LDA     ESTKH+4,X   ; Y COORDH
; libsrc/apple/hgrlib.pla: 1082:         STA     ESTKH+0,X     
        STA     ESTKH+0,X     
; libsrc/apple/hgrlib.pla: 1083:         PLA
        PLA
; libsrc/apple/hgrlib.pla: 1084:         AND     #$08
        AND     #$08
; libsrc/apple/hgrlib.pla: 1085:         BEQ     +
        BEQ     +
; libsrc/apple/hgrlib.pla: 1086: end
; libsrc/apple/hgrlib.pla: 1087: asm     _scanBLTD
_A056 					; _scanBLTD()
; libsrc/apple/hgrlib.pla: 1088:         JSR     $D000       ; HPLOT
        JSR     $D000       ; HPLOT
; libsrc/apple/hgrlib.pla: 1089:         BEQ     ++
        BEQ     ++
; libsrc/apple/hgrlib.pla: 1090:         BNE     ++
        BNE     ++
; libsrc/apple/hgrlib.pla: 1091: +       JSR     $E000       ; HPLOTOR
+       JSR     $E000       ; HPLOTOR
; libsrc/apple/hgrlib.pla: 1092: ++      INC     ESTKL+3,X   ; X COORDL
++      INC     ESTKL+3,X   ; X COORDL
; libsrc/apple/hgrlib.pla: 1093:         BNE     +
        BNE     +
; libsrc/apple/hgrlib.pla: 1094:         INC     ESTKH+3,X   ; X COORDH
        INC     ESTKH+3,X   ; X COORDH
; libsrc/apple/hgrlib.pla: 1095: +       PLA
+       PLA
; libsrc/apple/hgrlib.pla: 1096:         CLC
        CLC
; libsrc/apple/hgrlib.pla: 1097:         ADC     #$01
        ADC     #$01
; libsrc/apple/hgrlib.pla: 1098:         CMP     ESTKL+1,X   ; WIDTH
        CMP     ESTKL+1,X   ; WIDTH
; libsrc/apple/hgrlib.pla: 1099:         BNE     -
        BNE     -
; libsrc/apple/hgrlib.pla: 1100: BLTDONE INX
BLTDONE INX
; libsrc/apple/hgrlib.pla: 1101:         INX
        INX
; libsrc/apple/hgrlib.pla: 1102:         INX
        INX
; libsrc/apple/hgrlib.pla: 1103:         INX
        INX
; libsrc/apple/hgrlib.pla: 1104:         RTS
        RTS
; libsrc/apple/hgrlib.pla: 1105: end
; libsrc/apple/hgrlib.pla: 1106: export def hgrRect(x1, y1, x2, y2)#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C000 					; hgrRect()
; libsrc/apple/hgrlib.pla: 1107:     word y
					; y -> [8]
; libsrc/apple/hgrlib.pla: 1108:     
; libsrc/apple/hgrlib.pla: 1109:     if x1 == x2
	!BYTE	$58,$0A,$04		; ENTER	10,4
; libsrc/apple/hgrlib.pla: 1110:         hgrVLin(y1, y2, x1)
; libsrc/apple/hgrlib.pla: 1111:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$24			; BRNE	_B001
	!WORD	_B001-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_A044
_F000 	!WORD	_A044		
	!BYTE	$50			; BRNCH	_B002
	!WORD	_B002-*
_B001 
; libsrc/apple/hgrlib.pla: 1112:         for y = y1 to y2
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$A0			; BRGT	_B003
	!WORD	_B003-*
_B004 
	!BYTE	$6E,$08			; DLW	[8]
; libsrc/apple/hgrlib.pla: 1113:             hgrHLin(x1, x2, y)
; libsrc/apple/hgrlib.pla: 1114:         next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_A028
_F001 	!WORD	_A028		
_B005 
	!BYTE	$A4			; INCBRLE	_B004
	!WORD	_B004-*
_B003 
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrlib.pla: 1115:     fin
_B002 
; libsrc/apple/hgrlib.pla: 1116: end
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/apple/hgrlib.pla: 1117: export def hgrXorRect(x1, y1, x2, y2)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C001 					; hgrXorRect()
; libsrc/apple/hgrlib.pla: 1118:     word y
					; y -> [8]
; libsrc/apple/hgrlib.pla: 1119:     
; libsrc/apple/hgrlib.pla: 1120:     if x1 == x2
	!BYTE	$58,$0A,$04		; ENTER	10,4
; libsrc/apple/hgrlib.pla: 1121:         hgrXorVLin(y1, y2, x1)
; libsrc/apple/hgrlib.pla: 1122:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$24			; BRNE	_B006
	!WORD	_B006-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_A048
_F002 	!WORD	_A048		
	!BYTE	$50			; BRNCH	_B007
	!WORD	_B007-*
_B006 
; libsrc/apple/hgrlib.pla: 1123:         for y = y1 to y2
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$A0			; BRGT	_B008
	!WORD	_B008-*
_B009 
	!BYTE	$6E,$08			; DLW	[8]
; libsrc/apple/hgrlib.pla: 1124:             hgrXorHLin(x1, x2, y)
; libsrc/apple/hgrlib.pla: 1125:         next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_A036
_F003 	!WORD	_A036		
_B010 
	!BYTE	$A4			; INCBRLE	_B009
	!WORD	_B009-*
_B008 
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrlib.pla: 1126:     fin
_B007 
; libsrc/apple/hgrlib.pla: 1127: end
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/apple/hgrlib.pla: 1128: export def hgrBLT(x, y, w, h, srcptr)#0
					; x -> [0]
					; y -> [2]
					; w -> [4]
					; h -> [6]
					; srcptr -> [8]
_C002 					; hgrBLT()
; libsrc/apple/hgrlib.pla: 1129:     word i, j
					; i -> [10]
					; j -> [12]
; libsrc/apple/hgrlib.pla: 1130:     word saveclr
					; saveclr -> [14]
; libsrc/apple/hgrlib.pla: 1131:     byte c
					; c -> [16]
; libsrc/apple/hgrlib.pla: 1132:     
; libsrc/apple/hgrlib.pla: 1133:     saveclr = curhclr
	!BYTE	$58,$11,$05		; ENTER	17,5
; libsrc/apple/hgrlib.pla: 1134:     for j = y to y + h - 1
	!BYTE	$6A			; LAW	_D035+0
_F004 	!WORD	_D035+0		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$8E			; DECR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$A0			; BRGT	_B011
	!WORD	_B011-*
_B012 
	!BYTE	$6E,$0C			; DLW	[12]
; libsrc/apple/hgrlib.pla: 1135:     scanBLT(x, j, w, srcptr)
; libsrc/apple/hgrlib.pla: 1136: //        for i = 0 to w - 1
; libsrc/apple/hgrlib.pla: 1137: //            c = srcptr->[i >> 1]
; libsrc/apple/hgrlib.pla: 1138: //            if i & 1
; libsrc/apple/hgrlib.pla: 1139: //                hgrColor(c)
; libsrc/apple/hgrlib.pla: 1140: //                if c & $08
; libsrc/apple/hgrlib.pla: 1141: //                    hgrOrPlot(x + i, j)
; libsrc/apple/hgrlib.pla: 1142: //                else
; libsrc/apple/hgrlib.pla: 1143: //                    hgrPlot(x + i, j)
; libsrc/apple/hgrlib.pla: 1144: //                fin
; libsrc/apple/hgrlib.pla: 1145: //            else
; libsrc/apple/hgrlib.pla: 1146: //                hgrColor(c >> 4)
; libsrc/apple/hgrlib.pla: 1147: //                if c & $80
; libsrc/apple/hgrlib.pla: 1148: //                    hgrXorPlot(x + i, j)
; libsrc/apple/hgrlib.pla: 1149: //                else
; libsrc/apple/hgrlib.pla: 1150: //                    hgrPlot(x + i, j)
; libsrc/apple/hgrlib.pla: 1151: //                fin
; libsrc/apple/hgrlib.pla: 1152: //            fin
; libsrc/apple/hgrlib.pla: 1153: //        next
; libsrc/apple/hgrlib.pla: 1154:         srcptr = srcptr + (w + 1) / 2
; libsrc/apple/hgrlib.pla: 1155:     next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_A052
_F005 	!WORD	_A052		
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8C			; INCR
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$82			; ADD 
	!BYTE	$76,$08			; SLW	[8]
_B013 
	!BYTE	$A4			; INCBRLE	_B012
	!WORD	_B012-*
_B011 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrlib.pla: 1156:     curhclr = saveclr
; libsrc/apple/hgrlib.pla: 1157: end
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$7A			; SAW	_D035+0
_F006 	!WORD	_D035+0		
	!BYTE	$5A,$11			; LEAVE	17
; libsrc/apple/hgrlib.pla: 1158: export def hgrMode(mode)#1
					; mode -> [0]
_C003 					; hgrMode()
; libsrc/apple/hgrlib.pla: 1159:     if mode
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrlib.pla: 1160:         //
; libsrc/apple/hgrlib.pla: 1161:         // Set HGR mode
; libsrc/apple/hgrlib.pla: 1162:         //
; libsrc/apple/hgrlib.pla: 1163:         memset(hgr1, 0, $2000) // Clear HGR page 1
; libsrc/apple/hgrlib.pla: 1164:         ^showpage1
; libsrc/apple/hgrlib.pla: 1165:         ^showfull
; libsrc/apple/hgrlib.pla: 1166:         ^showhires
; libsrc/apple/hgrlib.pla: 1167:         ^showgraphics
; libsrc/apple/hgrlib.pla: 1168:         drawpage = 1
; libsrc/apple/hgrlib.pla: 1169:         drawbuff = hgrbuff[1]
; libsrc/apple/hgrlib.pla: 1170:         return 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$00			; CN	0
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X017
_F007 	!WORD	0		
	!BYTE	$68,$54,$C0		; LAB	49236
	!BYTE	$30			; DROP 
	!BYTE	$68,$52,$C0		; LAB	49234
	!BYTE	$30			; DROP 
	!BYTE	$68,$57,$C0		; LAB	49239
	!BYTE	$30			; DROP 
	!BYTE	$68,$50,$C0		; LAB	49232
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D036+0
_F008 	!WORD	_D036+0		
	!BYTE	$6A			; LAW	_D028+2
_F009 	!WORD	_D028+2		
	!BYTE	$7A			; SAW	_D037+0
_F010 	!WORD	_D037+0		
	!BYTE	$02			; CN	1
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrlib.pla: 1171:     fin
_B014 
_B015 
; libsrc/apple/hgrlib.pla: 1172:     //
; libsrc/apple/hgrlib.pla: 1173:     // Show text mode
; libsrc/apple/hgrlib.pla: 1174:     //
; libsrc/apple/hgrlib.pla: 1175:     ^showpage1
; libsrc/apple/hgrlib.pla: 1176:     ^showtext
; libsrc/apple/hgrlib.pla: 1177:     return 0
	!BYTE	$68,$54,$C0		; LAB	49236
	!BYTE	$30			; DROP 
	!BYTE	$68,$51,$C0		; LAB	49233
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrlib.pla: 1178: end
; libsrc/apple/hgrlib.pla: 1179: export def hgrClear#0
_C004 					; hgrClear()
; libsrc/apple/hgrlib.pla: 1180:     memset(drawbuff, curhclr, drawbuff) // Clear current HGR page
; libsrc/apple/hgrlib.pla: 1181: end
	!BYTE	$6A			; LAW	_D037+0
_F011 	!WORD	_D037+0		
	!BYTE	$6A			; LAW	_D035+0
_F012 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_D037+0
_F013 	!WORD	_D037+0		
	!BYTE	$54			; CALL	_X017
_F014 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/hgrlib.pla: 1182: //
; libsrc/apple/hgrlib.pla: 1183: // Set display page, return other page
; libsrc/apple/hgrlib.pla: 1184: //
; libsrc/apple/hgrlib.pla: 1185: export def hgrShow(page)#1
					; page -> [0]
_C005 					; hgrShow()
; libsrc/apple/hgrlib.pla: 1186:     page = page & 1
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrlib.pla: 1187:     ^(showpage1 + page)
; libsrc/apple/hgrlib.pla: 1188:     return page ^ 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$2C,$54,$C0		; CW	49236
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$02			; CN	1
	!BYTE	$98			; XOR
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrlib.pla: 1189: end
; libsrc/apple/hgrlib.pla: 1190: export def hgrSwap#1
_C006 					; hgrSwap()
; libsrc/apple/hgrlib.pla: 1191:     ^(showpage1 + drawpage)
; libsrc/apple/hgrlib.pla: 1192:     drawpage = drawpage ^ 1
; libsrc/apple/hgrlib.pla: 1193:     drawbuff = hgrbuff[drawpage]
; libsrc/apple/hgrlib.pla: 1194:     return drawpage
	!BYTE	$2C,$54,$C0		; CW	49236
	!BYTE	$B4			; ADDAB	_D036+0
_F015 	!WORD	_D036+0		
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D036+0
_F016 	!WORD	_D036+0		
	!BYTE	$02			; CN	1
	!BYTE	$98			; XOR
	!BYTE	$78			; SAB	_D036+0
_F017 	!WORD	_D036+0		
	!BYTE	$26			; LA	_D028+0
_F018 	!WORD	_D028+0		
	!BYTE	$BC			; IDXAB	_D036+0
_F019 	!WORD	_D036+0		
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D037+0
_F020 	!WORD	_D037+0		
	!BYTE	$68			; LAB	_D036+0
_F021 	!WORD	_D036+0		
	!BYTE	$5C			; RET
; libsrc/apple/hgrlib.pla: 1195: end
; libsrc/apple/hgrlib.pla: 1196: export def hgrDrawBuf(page)#1
					; page -> [0]
_C007 					; hgrDrawBuf()
; libsrc/apple/hgrlib.pla: 1197:     drawpage = page & 1
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrlib.pla: 1198:     drawbuff = hgrbuff[drawpage]
; libsrc/apple/hgrlib.pla: 1199:     return drawpage
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$78			; SAB	_D036+0
_F022 	!WORD	_D036+0		
	!BYTE	$26			; LA	_D028+0
_F023 	!WORD	_D028+0		
	!BYTE	$BC			; IDXAB	_D036+0
_F024 	!WORD	_D036+0		
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D037+0
_F025 	!WORD	_D037+0		
	!BYTE	$68			; LAB	_D036+0
_F026 	!WORD	_D036+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrlib.pla: 1200: end
; libsrc/apple/hgrlib.pla: 1201: //
; libsrc/apple/hgrlib.pla: 1202: // Machine compatibility check
; libsrc/apple/hgrlib.pla: 1203: //
; libsrc/apple/hgrlib.pla: 1204: if MACHID & MACHID_MODEL == MACHID_III or MACHID & MACHID_MODEL == MACHID_I
_INIT 
; libsrc/apple/hgrlib.pla: 1205:     puts("Apple II compatible only.\n")
	!BYTE	$68			; LAB	_X001+0
_F027 	!WORD	0+0		
	!BYTE	$3C,$C8			; ANDI	200
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B016
	!WORD	_B016-*
	!BYTE	$68			; LAB	_X001+0
_F028 	!WORD	0+0		
	!BYTE	$3C,$C8			; ANDI	200
	!BYTE	$10			; CN	8
	!BYTE	$40			; ISEQ
_B016 
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$2E			; CS
	!BYTE	$1A
	!BYTE	$41,$70,$70,$6C,$65,$20,$49,$49
	!BYTE	$20,$63,$6F,$6D,$70,$61,$74,$69
	!BYTE	$62,$6C,$65,$20,$6F,$6E,$6C,$79
	!BYTE	$2E,$0D
	!BYTE	$54			; CALL	_X004
_F029 	!WORD	0		
; libsrc/apple/hgrlib.pla: 1206:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; libsrc/apple/hgrlib.pla: 1207: fin
_B017 
_B018 
; libsrc/apple/hgrlib.pla: 1208: //
; libsrc/apple/hgrlib.pla: 1209: // Assembly fixups
; libsrc/apple/hgrlib.pla: 1210: //
; libsrc/apple/hgrlib.pla: 1211: hgrCopyDst:1   = @clipsrc
; libsrc/apple/hgrlib.pla: 1212: _hgrCopyDst:1  = @hgrscanl
; libsrc/apple/hgrlib.pla: 1213: _hgrCopyDst:6  = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1214: _hgrCopyDst:9  = @hgrscanh
; libsrc/apple/hgrlib.pla: 1215: hgrCopySrc:1   = @clipsrc
; libsrc/apple/hgrlib.pla: 1216: _hgrCopySrc:1  = @hgrscanl
; libsrc/apple/hgrlib.pla: 1217: _hgrCopySrc:6  = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1218: _hgrCopySrc:9  = @hgrscanh
; libsrc/apple/hgrlib.pla: 1219: hgrAndSrc:1    = @clipsrc
; libsrc/apple/hgrlib.pla: 1220: _hgrAndSrc:1   = @hgrscanl
; libsrc/apple/hgrlib.pla: 1221: _hgrAndSrc:6   = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1222: _hgrAndSrc:9   = @hgrscanh
; libsrc/apple/hgrlib.pla: 1223: hgrXorSrc:1    = @clipsrc
; libsrc/apple/hgrlib.pla: 1224: _hgrXorSrc:1   = @hgrscanl
; libsrc/apple/hgrlib.pla: 1225: _hgrXorSrc:6   = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1226: _hgrXorSrc:9   = @hgrscanh
; libsrc/apple/hgrlib.pla: 1227: hgrOrSrc:1     = @clipsrc
; libsrc/apple/hgrlib.pla: 1228: _hgrOrSrc:1    = @hgrscanl
; libsrc/apple/hgrlib.pla: 1229: _hgrOrSrc:6    = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1230: _hgrOrSrc:9    = @hgrscanh
; libsrc/apple/hgrlib.pla: 1231: _hgrPlotA:1    = @hgrscanl
; libsrc/apple/hgrlib.pla: 1232: _hgrPlotA:6    = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1233: _hgrPlotA:9    = @hgrscanh
; libsrc/apple/hgrlib.pla: 1234: _hgrPlotB:1    = @divmod7
; libsrc/apple/hgrlib.pla: 1235: _hgrPlotC:1    = @hbmask
; libsrc/apple/hgrlib.pla: 1236: _hgrPlotD:1    = @curhclr
; libsrc/apple/hgrlib.pla: 1237: _hgrXorPlotA:1 = @hgrscanl
; libsrc/apple/hgrlib.pla: 1238: _hgrXorPlotA:6 = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1239: _hgrXorPlotA:9 = @hgrscanh
; libsrc/apple/hgrlib.pla: 1240: _hgrXorPlotB:1 = @divmod7
; libsrc/apple/hgrlib.pla: 1241: _hgrXorPlotC:1 = @hbmask
; libsrc/apple/hgrlib.pla: 1242: _hgrXorPlotD:1 = @curhclr
; libsrc/apple/hgrlib.pla: 1243: _hgrOrPlotA:1  = @hgrscanl
; libsrc/apple/hgrlib.pla: 1244: _hgrOrPlotA:6  = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1245: _hgrOrPlotA:9  = @hgrscanh
; libsrc/apple/hgrlib.pla: 1246: _hgrOrPlotB:1  = @divmod7
; libsrc/apple/hgrlib.pla: 1247: _hgrOrPlotC:1  = @hbmask
; libsrc/apple/hgrlib.pla: 1248: _hgrOrPlotD:1  = @curhclr
; libsrc/apple/hgrlib.pla: 1249: _hgrHLinA:1    = @hgrPlot
; libsrc/apple/hgrlib.pla: 1250: _hgrHLinB:1    = @hgrscanl
; libsrc/apple/hgrlib.pla: 1251: _hgrHLinB:6    = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1252: _hgrHLinB:9    = @hgrscanh
; libsrc/apple/hgrlib.pla: 1253: _hgrHLinC:1    = @divmod7
; libsrc/apple/hgrlib.pla: 1254: _hgrHLinD:1    = @hrmask
; libsrc/apple/hgrlib.pla: 1255: _hgrHLinE:1    = @divmod7
; libsrc/apple/hgrlib.pla: 1256: _hgrHLinF:1    = @hlmask
; libsrc/apple/hgrlib.pla: 1257: _hgrHLinG:1    = @curhclr.1
; libsrc/apple/hgrlib.pla: 1258: _hgrHLinG:6    = @curhclr
; libsrc/apple/hgrlib.pla: 1259: _hgrHLinG:13   = @curhclr
; libsrc/apple/hgrlib.pla: 1260: _hgrHLinG:18   = @curhclr.1
; libsrc/apple/hgrlib.pla: 1261: _hgrXHLinA:1   = @hgrXorPlot
; libsrc/apple/hgrlib.pla: 1262: _hgrXHLinB:1   = @hgrscanl
; libsrc/apple/hgrlib.pla: 1263: _hgrXHLinB:6   = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1264: _hgrXHLinB:9   = @hgrscanh
; libsrc/apple/hgrlib.pla: 1265: _hgrXHLinC:1   = @divmod7
; libsrc/apple/hgrlib.pla: 1266: _hgrXHLinD:1   = @hrmask
; libsrc/apple/hgrlib.pla: 1267: _hgrXHLinE:1   = @divmod7
; libsrc/apple/hgrlib.pla: 1268: _hgrXHLinF:1   = @hlmask
; libsrc/apple/hgrlib.pla: 1269: _hgrXHLinG:1   = @curhclr.1
; libsrc/apple/hgrlib.pla: 1270: _hgrXHLinG:6   = @curhclr
; libsrc/apple/hgrlib.pla: 1271: _hgrXHLinG:13  = @curhclr
; libsrc/apple/hgrlib.pla: 1272: _hgrXHLinG:18  = @curhclr.1
; libsrc/apple/hgrlib.pla: 1273: hgrVLin:1      = @divmod7
; libsrc/apple/hgrlib.pla: 1274: _hgrVLinA:1    = @hbmask
; libsrc/apple/hgrlib.pla: 1275: _hgrVLinB:1    = @curhclr
; libsrc/apple/hgrlib.pla: 1276: _hgrVLinC:1    = @hgrscanl
; libsrc/apple/hgrlib.pla: 1277: _hgrVLinC:6    = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1278: _hgrVLinC:9    = @hgrscanh
; libsrc/apple/hgrlib.pla: 1279: hgrXorVLin:1   = @divmod7
; libsrc/apple/hgrlib.pla: 1280: _hgrXVLinA:1   = @hbmask
; libsrc/apple/hgrlib.pla: 1281: _hgrXVLinB:1   = @curhclr
; libsrc/apple/hgrlib.pla: 1282: _hgrXVLinC:1   = @hgrscanl
; libsrc/apple/hgrlib.pla: 1283: _hgrXVLinC:6   = @drawbuff.1
; libsrc/apple/hgrlib.pla: 1284: _hgrXVLinC:9   = @hgrscanh
; libsrc/apple/hgrlib.pla: 1285: hgrColor:7     = @hcolor
; libsrc/apple/hgrlib.pla: 1286: hgrColor:10    = @curhclr
; libsrc/apple/hgrlib.pla: 1287: hgrColor:13    = @hcolor.1
; libsrc/apple/hgrlib.pla: 1288: hgrColor:16    = @curhclr.1
; libsrc/apple/hgrlib.pla: 1289: _scanBLTA:1    = @hgrColor
; libsrc/apple/hgrlib.pla: 1290: _scanBLTB:1    = @hgrPlot
; libsrc/apple/hgrlib.pla: 1291: _scanBLTB:8    = @hgrOrPlot
; libsrc/apple/hgrlib.pla: 1292: _scanBLTC:1    = @hgrColor
; libsrc/apple/hgrlib.pla: 1293: _scanBLTD:1    = @hgrPlot
; libsrc/apple/hgrlib.pla: 1294: _scanBLTD:8    = @hgrOrPlot
; libsrc/apple/hgrlib.pla: 1295: done
	!BYTE	$26			; LA	_A001+0
_F030 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_A003+1
_F031 	!WORD	_A003+1		
	!BYTE	$26			; LA	_D029+0
_F032 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A004+1
_F033 	!WORD	_A004+1		
	!BYTE	$26			; LA	_D037+1
_F034 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A004+6
_F035 	!WORD	_A004+6		
	!BYTE	$26			; LA	_D030+0
_F036 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A004+9
_F037 	!WORD	_A004+9		
	!BYTE	$26			; LA	_A001+0
_F038 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_A005+1
_F039 	!WORD	_A005+1		
	!BYTE	$26			; LA	_D029+0
_F040 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A006+1
_F041 	!WORD	_A006+1		
	!BYTE	$26			; LA	_D037+1
_F042 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A006+6
_F043 	!WORD	_A006+6		
	!BYTE	$26			; LA	_D030+0
_F044 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A006+9
_F045 	!WORD	_A006+9		
	!BYTE	$26			; LA	_A001+0
_F046 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_A007+1
_F047 	!WORD	_A007+1		
	!BYTE	$26			; LA	_D029+0
_F048 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A008+1
_F049 	!WORD	_A008+1		
	!BYTE	$26			; LA	_D037+1
_F050 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A008+6
_F051 	!WORD	_A008+6		
	!BYTE	$26			; LA	_D030+0
_F052 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A008+9
_F053 	!WORD	_A008+9		
	!BYTE	$26			; LA	_A001+0
_F054 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_A009+1
_F055 	!WORD	_A009+1		
	!BYTE	$26			; LA	_D029+0
_F056 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A010+1
_F057 	!WORD	_A010+1		
	!BYTE	$26			; LA	_D037+1
_F058 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A010+6
_F059 	!WORD	_A010+6		
	!BYTE	$26			; LA	_D030+0
_F060 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A010+9
_F061 	!WORD	_A010+9		
	!BYTE	$26			; LA	_A001+0
_F062 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_A011+1
_F063 	!WORD	_A011+1		
	!BYTE	$26			; LA	_D029+0
_F064 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A012+1
_F065 	!WORD	_A012+1		
	!BYTE	$26			; LA	_D037+1
_F066 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A012+6
_F067 	!WORD	_A012+6		
	!BYTE	$26			; LA	_D030+0
_F068 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A012+9
_F069 	!WORD	_A012+9		
	!BYTE	$26			; LA	_D029+0
_F070 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A014+1
_F071 	!WORD	_A014+1		
	!BYTE	$26			; LA	_D037+1
_F072 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A014+6
_F073 	!WORD	_A014+6		
	!BYTE	$26			; LA	_D030+0
_F074 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A014+9
_F075 	!WORD	_A014+9		
	!BYTE	$26			; LA	_A000+0
_F076 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A015+1
_F077 	!WORD	_A015+1		
	!BYTE	$26			; LA	_D031+0
_F078 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A016+1
_F079 	!WORD	_A016+1		
	!BYTE	$26			; LA	_D035+0
_F080 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A017+1
_F081 	!WORD	_A017+1		
	!BYTE	$26			; LA	_D029+0
_F082 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A019+1
_F083 	!WORD	_A019+1		
	!BYTE	$26			; LA	_D037+1
_F084 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A019+6
_F085 	!WORD	_A019+6		
	!BYTE	$26			; LA	_D030+0
_F086 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A019+9
_F087 	!WORD	_A019+9		
	!BYTE	$26			; LA	_A000+0
_F088 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A020+1
_F089 	!WORD	_A020+1		
	!BYTE	$26			; LA	_D031+0
_F090 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A021+1
_F091 	!WORD	_A021+1		
	!BYTE	$26			; LA	_D035+0
_F092 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A022+1
_F093 	!WORD	_A022+1		
	!BYTE	$26			; LA	_D029+0
_F094 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A024+1
_F095 	!WORD	_A024+1		
	!BYTE	$26			; LA	_D037+1
_F096 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A024+6
_F097 	!WORD	_A024+6		
	!BYTE	$26			; LA	_D030+0
_F098 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A024+9
_F099 	!WORD	_A024+9		
	!BYTE	$26			; LA	_A000+0
_F100 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A025+1
_F101 	!WORD	_A025+1		
	!BYTE	$26			; LA	_D031+0
_F102 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A026+1
_F103 	!WORD	_A026+1		
	!BYTE	$26			; LA	_D035+0
_F104 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A027+1
_F105 	!WORD	_A027+1		
	!BYTE	$26			; LA	_A013+0
_F106 	!WORD	_A013+0		
	!BYTE	$7A			; SAW	_A029+1
_F107 	!WORD	_A029+1		
	!BYTE	$26			; LA	_D029+0
_F108 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A030+1
_F109 	!WORD	_A030+1		
	!BYTE	$26			; LA	_D037+1
_F110 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A030+6
_F111 	!WORD	_A030+6		
	!BYTE	$26			; LA	_D030+0
_F112 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A030+9
_F113 	!WORD	_A030+9		
	!BYTE	$26			; LA	_A000+0
_F114 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A031+1
_F115 	!WORD	_A031+1		
	!BYTE	$26			; LA	_D033+0
_F116 	!WORD	_D033+0		
	!BYTE	$7A			; SAW	_A032+1
_F117 	!WORD	_A032+1		
	!BYTE	$26			; LA	_A000+0
_F118 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A033+1
_F119 	!WORD	_A033+1		
	!BYTE	$26			; LA	_D032+0
_F120 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A034+1
_F121 	!WORD	_A034+1		
	!BYTE	$26			; LA	_D035+1
_F122 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A035+1
_F123 	!WORD	_A035+1		
	!BYTE	$26			; LA	_D035+0
_F124 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A035+6
_F125 	!WORD	_A035+6		
	!BYTE	$26			; LA	_D035+0
_F126 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A035+13
_F127 	!WORD	_A035+13		
	!BYTE	$26			; LA	_D035+1
_F128 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A035+18
_F129 	!WORD	_A035+18		
	!BYTE	$26			; LA	_A018+0
_F130 	!WORD	_A018+0		
	!BYTE	$7A			; SAW	_A037+1
_F131 	!WORD	_A037+1		
	!BYTE	$26			; LA	_D029+0
_F132 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A038+1
_F133 	!WORD	_A038+1		
	!BYTE	$26			; LA	_D037+1
_F134 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A038+6
_F135 	!WORD	_A038+6		
	!BYTE	$26			; LA	_D030+0
_F136 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A038+9
_F137 	!WORD	_A038+9		
	!BYTE	$26			; LA	_A000+0
_F138 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A039+1
_F139 	!WORD	_A039+1		
	!BYTE	$26			; LA	_D033+0
_F140 	!WORD	_D033+0		
	!BYTE	$7A			; SAW	_A040+1
_F141 	!WORD	_A040+1		
	!BYTE	$26			; LA	_A000+0
_F142 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A041+1
_F143 	!WORD	_A041+1		
	!BYTE	$26			; LA	_D032+0
_F144 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A042+1
_F145 	!WORD	_A042+1		
	!BYTE	$26			; LA	_D035+1
_F146 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A043+1
_F147 	!WORD	_A043+1		
	!BYTE	$26			; LA	_D035+0
_F148 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A043+6
_F149 	!WORD	_A043+6		
	!BYTE	$26			; LA	_D035+0
_F150 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A043+13
_F151 	!WORD	_A043+13		
	!BYTE	$26			; LA	_D035+1
_F152 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A043+18
_F153 	!WORD	_A043+18		
	!BYTE	$26			; LA	_A000+0
_F154 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A044+1
_F155 	!WORD	_A044+1		
	!BYTE	$26			; LA	_D031+0
_F156 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A045+1
_F157 	!WORD	_A045+1		
	!BYTE	$26			; LA	_D035+0
_F158 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A046+1
_F159 	!WORD	_A046+1		
	!BYTE	$26			; LA	_D029+0
_F160 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A047+1
_F161 	!WORD	_A047+1		
	!BYTE	$26			; LA	_D037+1
_F162 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A047+6
_F163 	!WORD	_A047+6		
	!BYTE	$26			; LA	_D030+0
_F164 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A047+9
_F165 	!WORD	_A047+9		
	!BYTE	$26			; LA	_A000+0
_F166 	!WORD	_A000+0		
	!BYTE	$7A			; SAW	_A048+1
_F167 	!WORD	_A048+1		
	!BYTE	$26			; LA	_D031+0
_F168 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A049+1
_F169 	!WORD	_A049+1		
	!BYTE	$26			; LA	_D035+0
_F170 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A050+1
_F171 	!WORD	_A050+1		
	!BYTE	$26			; LA	_D029+0
_F172 	!WORD	_D029+0		
	!BYTE	$7A			; SAW	_A051+1
_F173 	!WORD	_A051+1		
	!BYTE	$26			; LA	_D037+1
_F174 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A051+6
_F175 	!WORD	_A051+6		
	!BYTE	$26			; LA	_D030+0
_F176 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A051+9
_F177 	!WORD	_A051+9		
	!BYTE	$26			; LA	_D034+0
_F178 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A002+7
_F179 	!WORD	_A002+7		
	!BYTE	$26			; LA	_D035+0
_F180 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A002+10
_F181 	!WORD	_A002+10		
	!BYTE	$26			; LA	_D034+1
_F182 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A002+13
_F183 	!WORD	_A002+13		
	!BYTE	$26			; LA	_D035+1
_F184 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A002+16
_F185 	!WORD	_A002+16		
	!BYTE	$26			; LA	_A002+0
_F186 	!WORD	_A002+0		
	!BYTE	$7A			; SAW	_A053+1
_F187 	!WORD	_A053+1		
	!BYTE	$26			; LA	_A013+0
_F188 	!WORD	_A013+0		
	!BYTE	$7A			; SAW	_A054+1
_F189 	!WORD	_A054+1		
	!BYTE	$26			; LA	_A023+0
_F190 	!WORD	_A023+0		
	!BYTE	$7A			; SAW	_A054+8
_F191 	!WORD	_A054+8		
	!BYTE	$26			; LA	_A002+0
_F192 	!WORD	_A002+0		
	!BYTE	$7A			; SAW	_A055+1
_F193 	!WORD	_A055+1		
	!BYTE	$26			; LA	_A013+0
_F194 	!WORD	_A013+0		
	!BYTE	$7A			; SAW	_A056+1
_F195 	!WORD	_A056+1		
	!BYTE	$26			; LA	_A023+0
_F196 	!WORD	_A023+0		
	!BYTE	$7A			; SAW	_A056+8
_F197 	!WORD	_A056+8		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	9
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F138-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F139-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F140-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F141-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F142-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F143-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F144-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F145-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F146-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F147-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F148-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F149-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F150-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F151-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F152-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F153-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F154-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F155-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F156-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F157-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F158-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F159-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F160-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F161-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F162-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F163-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F164-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F165-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F166-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F167-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F168-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F169-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F170-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F171-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F172-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F173-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F174-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F175-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F176-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F177-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F178-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F179-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F180-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F181-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F182-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F183-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F184-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F185-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F186-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F187-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F188-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F189-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F190-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F191-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F192-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F193-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F194-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F195-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F196-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F197-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: MACHID
	!BYTE	$CD,$C1,$C3,$C8,$C9,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	1			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: MEMSET
	!BYTE	$CD,$C5,$CD,$D3,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	17			; ESD INDEX
	; DCI STRING: DIVMOD7
	!BYTE	$C4,$C9,$D6,$CD,$CF,$C4,$37
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A000		
	; DCI STRING: HGRCOLOR
	!BYTE	$C8,$C7,$D2,$C3,$CF,$CC,$CF,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A002		
	; DCI STRING: HGRCOPYDST
	!BYTE	$C8,$C7,$D2,$C3,$CF,$D0,$D9,$C4,$D3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A003		
	; DCI STRING: HGRCOPYSRC
	!BYTE	$C8,$C7,$D2,$C3,$CF,$D0,$D9,$D3,$D2,$43
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A005		
	; DCI STRING: HGRANDSRC
	!BYTE	$C8,$C7,$D2,$C1,$CE,$C4,$D3,$D2,$43
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A007		
	; DCI STRING: HGRXORSRC
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D3,$D2,$43
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A009		
	; DCI STRING: HGRORSRC
	!BYTE	$C8,$C7,$D2,$CF,$D2,$D3,$D2,$43
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A011		
	; DCI STRING: HGRPLOT
	!BYTE	$C8,$C7,$D2,$D0,$CC,$CF,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A013		
	; DCI STRING: HGRXORPLOT
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D0,$CC,$CF,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A018		
	; DCI STRING: HGRORPLOT
	!BYTE	$C8,$C7,$D2,$CF,$D2,$D0,$CC,$CF,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A023		
	; DCI STRING: HGRHLIN
	!BYTE	$C8,$C7,$D2,$C8,$CC,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A028		
	; DCI STRING: HGRXORHLIN
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$C8,$CC,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A036		
	; DCI STRING: HGRVLIN
	!BYTE	$C8,$C7,$D2,$D6,$CC,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A044		
	; DCI STRING: HGRXORVLIN
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D6,$CC,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A048		
	; DCI STRING: HGRRECT
	!BYTE	$C8,$C7,$D2,$D2,$C5,$C3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: HGRXORRECT
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D2,$C5,$C3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: HGRBLT
	!BYTE	$C8,$C7,$D2,$C2,$CC,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: HGRMODE
	!BYTE	$C8,$C7,$D2,$CD,$CF,$C4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: HGRCLEAR
	!BYTE	$C8,$C7,$D2,$C3,$CC,$C5,$C1,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: HGRSHOW
	!BYTE	$C8,$C7,$D2,$D3,$C8,$CF,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	; DCI STRING: HGRSWAP
	!BYTE	$C8,$C7,$D2,$D3,$D7,$C1,$50
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C006		
	; DCI STRING: HGRDRAWBUF
	!BYTE	$C8,$C7,$D2,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C007		
	!BYTE	$00			; END OF ESD
