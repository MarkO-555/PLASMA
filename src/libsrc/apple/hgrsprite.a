; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/hgrsprite.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/hgrsprite.pla: 0001: 
; libsrc/apple/hgrsprite.pla: 0002: include "inc/hgrlib.plh"
; inc/hgrlib.plh: 0001: import hgrlib
	; DCI STRING: HGRLIB
	!BYTE	$C8,$C7,$D2,$CC,$C9,$42
					; HGRLIB -> X028
; inc/hgrlib.plh: 0002:     predef divmod7(x)#2
					; DIVMOD7 -> X029
; inc/hgrlib.plh: 0003:     predef hgrPlot(x, y)#0
					; HGRPLOT -> X030
; inc/hgrlib.plh: 0004:     predef hgrOrPlot(x, y)#0
					; HGRORPLOT -> X031
; inc/hgrlib.plh: 0005:     predef hgrXorPlot(x, y)#0
					; HGRXORPLOT -> X032
; inc/hgrlib.plh: 0006:     predef hgrHLin(x1, x2, y)#0
					; HGRHLIN -> X033
; inc/hgrlib.plh: 0007:     predef hgrVLin(y1, y2, x)#0
					; HGRVLIN -> X034
; inc/hgrlib.plh: 0008:     predef hgrXorHLin(x1, x2, y)#0
					; HGRXORHLIN -> X035
; inc/hgrlib.plh: 0009:     predef hgrXorVLin(y1, y2, x)#0
					; HGRXORVLIN -> X036
; inc/hgrlib.plh: 0010:     predef hgrRect(x1, y1, x2, y2)#0
					; HGRRECT -> X037
; inc/hgrlib.plh: 0011:     predef hgrXorRect(x1, y1, x2, y2)#0
					; HGRXORRECT -> X038
; inc/hgrlib.plh: 0012:     predef hgrBLT(x, y, width, height, srcptr)#0
					; HGRBLT -> X039
; inc/hgrlib.plh: 0013:     predef hgrCopySrc(ofst, y, w, h, srcptr)#0
					; HGRCOPYSRC -> X040
; inc/hgrlib.plh: 0014:     predef hgrAndSrc(ofst, y, w, h, srcptr)#0
					; HGRANDSRC -> X041
; inc/hgrlib.plh: 0015:     predef hgrXorSrc(ofst, y, w, h, srcptr)#0
					; HGRXORSRC -> X042
; inc/hgrlib.plh: 0016:     predef hgrOrSrc(ofst, y, w, h, srcptr)#0
					; HGRORSRC -> X043
; inc/hgrlib.plh: 0017:     predef hgrCopyDst(ofst, y, w, h, dstptr)#0
					; HGRCOPYDST -> X044
; inc/hgrlib.plh: 0018:     predef hgrMode(mode)#1
					; HGRMODE -> X045
; inc/hgrlib.plh: 0019:     predef hgrClear#0
					; HGRCLEAR -> X046
; inc/hgrlib.plh: 0020:     predef hgrShow(page)#1
					; HGRSHOW -> X047
; inc/hgrlib.plh: 0021:     predef hgrSwap#1
					; HGRSWAP -> X048
; inc/hgrlib.plh: 0022:     predef hgrDrawBuf(page)#1
					; HGRDRAWBUF -> X049
; inc/hgrlib.plh: 0023:     predef hgrColor(clr)#0
					; HGRCOLOR -> X050
; inc/hgrlib.plh: 0024: end
; libsrc/apple/hgrsprite.pla: 0002: 
; libsrc/apple/hgrsprite.pla: 0003: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X051
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X052
; inc/fileio.plh: 0080: end
; libsrc/apple/hgrsprite.pla: 0003: 
; libsrc/apple/hgrsprite.pla: 0004: 
; libsrc/apple/hgrsprite.pla: 0005: struc t_sprite
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/apple/hgrsprite.pla: 0006:     var  s_xpos
					; s_xpos = 0
; libsrc/apple/hgrsprite.pla: 0007:     var  s_ypos
					; s_ypos = 2
; libsrc/apple/hgrsprite.pla: 0008:     var  s_undery[2]
					; s_undery = 4
; libsrc/apple/hgrsprite.pla: 0009:     var  s_underofst[2]
					; s_underofst = 8
; libsrc/apple/hgrsprite.pla: 0010:     byte s_undermap[2]
					; s_undermap = 12
; libsrc/apple/hgrsprite.pla: 0011:     byte s_xcenter
					; s_xcenter = 14
; libsrc/apple/hgrsprite.pla: 0012:     byte s_ycenter
					; s_ycenter = 15
; libsrc/apple/hgrsprite.pla: 0013:     byte s_pitch
					; s_pitch = 16
; libsrc/apple/hgrsprite.pla: 0014:     byte s_height
					; s_height = 17
; libsrc/apple/hgrsprite.pla: 0015:     var  s_size
					; s_size = 18
; libsrc/apple/hgrsprite.pla: 0016:     var  s_mask[14]
					; s_mask = 20
; libsrc/apple/hgrsprite.pla: 0017:     var  s_map[14]
					; s_map = 48
; libsrc/apple/hgrsprite.pla: 0018:     var  s_under[14]
					; s_under = 76
; libsrc/apple/hgrsprite.pla: 0019: end
					; t_sprite = 104
; libsrc/apple/hgrsprite.pla: 0020: 
; libsrc/apple/hgrsprite.pla: 0021: var drawList[16]
_D053 	!FILL	32			; drawList[16]
; libsrc/apple/hgrsprite.pla: 0022: var undrawList0[16]
_D054 	!FILL	32			; undrawList0[16]
; libsrc/apple/hgrsprite.pla: 0023: var undrawList1[16]
_D055 	!FILL	32			; undrawList1[16]
; libsrc/apple/hgrsprite.pla: 0024: var undrawList[2] = @undrawList0, @undrawList1
_D056 					; undrawList[2] = @undrawList0, @undrawList1
_F000 	!WORD	_D054
_F001 	!WORD	_D055
; libsrc/apple/hgrsprite.pla: 0025: byte drawpage
_D057 	!FILL	1			; drawpage
; libsrc/apple/hgrsprite.pla: 0026: //
; libsrc/apple/hgrsprite.pla: 0027: // Sprite routines
; libsrc/apple/hgrsprite.pla: 0028: //
; libsrc/apple/hgrsprite.pla: 0029: asm scanMask(x, y, w, srcptr)#0
_A000 					; scanMask()
; libsrc/apple/hgrsprite.pla: 0030: !SOURCE    "vmsrc/plvmzp.inc"
!SOURCE    "vmsrc/plvmzp.inc"
; libsrc/apple/hgrsprite.pla: 0031:         LDA     ESTKL+0,X   ; SRC PTR
        LDA     ESTKL+0,X   ; SRC PTR
; libsrc/apple/hgrsprite.pla: 0032:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrsprite.pla: 0033:         LDA     ESTKH+0,X
        LDA     ESTKH+0,X
; libsrc/apple/hgrsprite.pla: 0034:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrsprite.pla: 0035:         LDA     #$00
        LDA     #$00
; libsrc/apple/hgrsprite.pla: 0036: -       PHA
-       PHA
; libsrc/apple/hgrsprite.pla: 0037:         LSR
        LSR
; libsrc/apple/hgrsprite.pla: 0038:         TAY
        TAY
; libsrc/apple/hgrsprite.pla: 0039:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrsprite.pla: 0040:         AND     #$80
        AND     #$80
; libsrc/apple/hgrsprite.pla: 0041:         BEQ     +
        BEQ     +
; libsrc/apple/hgrsprite.pla: 0042:         LDA     #$03
        LDA     #$03
; libsrc/apple/hgrsprite.pla: 0043: +       DEX
+       DEX
; libsrc/apple/hgrsprite.pla: 0044:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrsprite.pla: 0045: end
; libsrc/apple/hgrsprite.pla: 0046: asm     _scanMaskA
_A001 					; _scanMaskA()
; libsrc/apple/hgrsprite.pla: 0047:         JSR     $C000       ; HCOLOR
        JSR     $C000       ; HCOLOR
; libsrc/apple/hgrsprite.pla: 0048:         DEX
        DEX
; libsrc/apple/hgrsprite.pla: 0049:         DEX
        DEX
; libsrc/apple/hgrsprite.pla: 0050:         LDA     ESTKL+5,X   ; X COORDL
        LDA     ESTKL+5,X   ; X COORDL
; libsrc/apple/hgrsprite.pla: 0051:         STA     ESTKL+1,X     
        STA     ESTKL+1,X     
; libsrc/apple/hgrsprite.pla: 0052:         LDA     ESTKH+5,X   ; X COORDH
        LDA     ESTKH+5,X   ; X COORDH
; libsrc/apple/hgrsprite.pla: 0053:         STA     ESTKH+1,X     
        STA     ESTKH+1,X     
; libsrc/apple/hgrsprite.pla: 0054:         LDA     ESTKL+4,X   ; Y COORDL
        LDA     ESTKL+4,X   ; Y COORDL
; libsrc/apple/hgrsprite.pla: 0055:         STA     ESTKL+0,X     
        STA     ESTKL+0,X     
; libsrc/apple/hgrsprite.pla: 0056:         LDA     ESTKH+4,X   ; Y COORDH
        LDA     ESTKH+4,X   ; Y COORDH
; libsrc/apple/hgrsprite.pla: 0057:         STA     ESTKH+0,X     
        STA     ESTKH+0,X     
; libsrc/apple/hgrsprite.pla: 0058: end
; libsrc/apple/hgrsprite.pla: 0059: asm     _scanMaskB
_A002 					; _scanMaskB()
; libsrc/apple/hgrsprite.pla: 0060:         JSR     $D000       ; HPLOT
        JSR     $D000       ; HPLOT
; libsrc/apple/hgrsprite.pla: 0061:         INC     ESTKL+3,X   ; X COORDL
        INC     ESTKL+3,X   ; X COORDL
; libsrc/apple/hgrsprite.pla: 0062:         BNE     +
        BNE     +
; libsrc/apple/hgrsprite.pla: 0063:         INC     ESTKH+3,X   ; X COORDH
        INC     ESTKH+3,X   ; X COORDH
; libsrc/apple/hgrsprite.pla: 0064: +       PLA
+       PLA
; libsrc/apple/hgrsprite.pla: 0065:         CLC
        CLC
; libsrc/apple/hgrsprite.pla: 0066:         ADC     #$01
        ADC     #$01
; libsrc/apple/hgrsprite.pla: 0067:         CMP     ESTKL+1,X   ; WIDTH
        CMP     ESTKL+1,X   ; WIDTH
; libsrc/apple/hgrsprite.pla: 0068:         BEQ     BLTDONE
        BEQ     BLTDONE
; libsrc/apple/hgrsprite.pla: 0069:         PHA
        PHA
; libsrc/apple/hgrsprite.pla: 0070:         LSR
        LSR
; libsrc/apple/hgrsprite.pla: 0071:         TAY
        TAY
; libsrc/apple/hgrsprite.pla: 0072:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrsprite.pla: 0073:         AND     #$08
        AND     #$08
; libsrc/apple/hgrsprite.pla: 0074:         BEQ     +
        BEQ     +
; libsrc/apple/hgrsprite.pla: 0075:         LDA     #$03
        LDA     #$03
; libsrc/apple/hgrsprite.pla: 0076: +       DEX
+       DEX
; libsrc/apple/hgrsprite.pla: 0077:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/apple/hgrsprite.pla: 0078: end
; libsrc/apple/hgrsprite.pla: 0079: asm     _scanMaskC
_A003 					; _scanMaskC()
; libsrc/apple/hgrsprite.pla: 0080:         JSR     $C000       ; HCOLOR
        JSR     $C000       ; HCOLOR
; libsrc/apple/hgrsprite.pla: 0081:         DEX
        DEX
; libsrc/apple/hgrsprite.pla: 0082:         DEX
        DEX
; libsrc/apple/hgrsprite.pla: 0083:         LDA     ESTKL+5,X   ; X COORDL
        LDA     ESTKL+5,X   ; X COORDL
; libsrc/apple/hgrsprite.pla: 0084:         STA     ESTKL+1,X     
        STA     ESTKL+1,X     
; libsrc/apple/hgrsprite.pla: 0085:         LDA     ESTKH+5,X   ; X COORDH
        LDA     ESTKH+5,X   ; X COORDH
; libsrc/apple/hgrsprite.pla: 0086:         STA     ESTKH+1,X     
        STA     ESTKH+1,X     
; libsrc/apple/hgrsprite.pla: 0087:         LDA     ESTKL+4,X   ; Y COORDL
        LDA     ESTKL+4,X   ; Y COORDL
; libsrc/apple/hgrsprite.pla: 0088:         STA     ESTKL+0,X     
        STA     ESTKL+0,X     
; libsrc/apple/hgrsprite.pla: 0089:         LDA     ESTKH+4,X   ; Y COORDH
        LDA     ESTKH+4,X   ; Y COORDH
; libsrc/apple/hgrsprite.pla: 0090:         STA     ESTKH+0,X     
        STA     ESTKH+0,X     
; libsrc/apple/hgrsprite.pla: 0091: end
; libsrc/apple/hgrsprite.pla: 0092: asm     _scanMaskD
_A004 					; _scanMaskD()
; libsrc/apple/hgrsprite.pla: 0093:         JSR     $D000       ; HPLOT
        JSR     $D000       ; HPLOT
; libsrc/apple/hgrsprite.pla: 0094:         INC     ESTKL+3,X   ; X COORDL
        INC     ESTKL+3,X   ; X COORDL
; libsrc/apple/hgrsprite.pla: 0095:         BNE     +
        BNE     +
; libsrc/apple/hgrsprite.pla: 0096:         INC     ESTKH+3,X   ; X COORDH
        INC     ESTKH+3,X   ; X COORDH
; libsrc/apple/hgrsprite.pla: 0097: +       PLA
+       PLA
; libsrc/apple/hgrsprite.pla: 0098:         CLC
        CLC
; libsrc/apple/hgrsprite.pla: 0099:         ADC     #$01
        ADC     #$01
; libsrc/apple/hgrsprite.pla: 0100:         CMP     ESTKL+1,X   ; WIDTH
        CMP     ESTKL+1,X   ; WIDTH
; libsrc/apple/hgrsprite.pla: 0101:         BNE     -
        BNE     -
; libsrc/apple/hgrsprite.pla: 0102: BLTDONE INX
BLTDONE INX
; libsrc/apple/hgrsprite.pla: 0103:         INX
        INX
; libsrc/apple/hgrsprite.pla: 0104:         INX
        INX
; libsrc/apple/hgrsprite.pla: 0105:         INX
        INX
; libsrc/apple/hgrsprite.pla: 0106:         RTS
        RTS
; libsrc/apple/hgrsprite.pla: 0107: end
; libsrc/apple/hgrsprite.pla: 0108: def spriteBLTMask(x, y, w, h, srcptr)#0
_SUBSEG 				; BYTECODE STARTS
					; x -> [0]
					; y -> [2]
					; w -> [4]
					; h -> [6]
					; srcptr -> [8]
_C000 					; spriteBLTMask()
; libsrc/apple/hgrsprite.pla: 0109:     word i, j
					; i -> [10]
					; j -> [12]
; libsrc/apple/hgrsprite.pla: 0110:     byte pitch
					; pitch -> [14]
; libsrc/apple/hgrsprite.pla: 0111:     byte c
					; c -> [15]
; libsrc/apple/hgrsprite.pla: 0112:     
; libsrc/apple/hgrsprite.pla: 0113:     pitch = (w + 1) / 2
	!BYTE	$58,$10,$05		; ENTER	16,5
; libsrc/apple/hgrsprite.pla: 0114:     for j = y to y + h - 1
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8C			; INCR
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$74,$0E			; SLB	[14]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$8E			; DECR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$A0			; BRGT	_B001
	!WORD	_B001-*
_B002 
	!BYTE	$6E,$0C			; DLW	[12]
; libsrc/apple/hgrsprite.pla: 0115:         scanMask(x, j, w, srcptr)
; libsrc/apple/hgrsprite.pla: 0116: //        for i = 0 to w - 1
; libsrc/apple/hgrsprite.pla: 0117: //            c = srcptr->[i >> 1]
; libsrc/apple/hgrsprite.pla: 0118: //            if i & 1
; libsrc/apple/hgrsprite.pla: 0119: //                hgrColor(c & $08 ?? 3 :: 0)
; libsrc/apple/hgrsprite.pla: 0120: //            else
; libsrc/apple/hgrsprite.pla: 0121: //                hgrColor(c & $80 ?? 3 :: 0)
; libsrc/apple/hgrsprite.pla: 0122: //            fin
; libsrc/apple/hgrsprite.pla: 0123: //            hgrPlot(x + i, j)
; libsrc/apple/hgrsprite.pla: 0124: //        next
; libsrc/apple/hgrsprite.pla: 0125:         srcptr = srcptr + pitch
; libsrc/apple/hgrsprite.pla: 0126:     next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_A000
_F002 	!WORD	_A000		
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B0,$0E			; ADDLB	[14]
	!BYTE	$76,$08			; SLW	[8]
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0127: end
	!BYTE	$5A,$10			; LEAVE	16
; libsrc/apple/hgrsprite.pla: 0128: export def spriteCompile(w, h, xcenter, ycenter, srcptr)#1
					; w -> [0]
					; h -> [2]
					; xcenter -> [4]
					; ycenter -> [6]
					; srcptr -> [8]
_C001 					; spriteCompile()
; libsrc/apple/hgrsprite.pla: 0129:     var sprtptr, bytewidth, spritesize, i
					; sprtptr -> [10]
					; bytewidth -> [12]
					; spritesize -> [14]
					; i -> [16]
; libsrc/apple/hgrsprite.pla: 0130:     
; libsrc/apple/hgrsprite.pla: 0131:     sprtptr             = heapalloc(t_sprite)
	!BYTE	$58,$12,$05		; ENTER	18,5
; libsrc/apple/hgrsprite.pla: 0132:     if not sprtptr; return 0; fin
	!BYTE	$2A,$68			; CB	104
	!BYTE	$54			; CALL	_X014
_F003 	!WORD	0		
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$4E			; BRTRU	_B004
	!WORD	_B004-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$12			; LEAVE	18
_B004 
_B005 
; libsrc/apple/hgrsprite.pla: 0133:     bytewidth           = (w + 13) / 7
; libsrc/apple/hgrsprite.pla: 0134:     sprtptr->s_pitch    = bytewidth
; libsrc/apple/hgrsprite.pla: 0135:     spritesize          = bytewidth * h
; libsrc/apple/hgrsprite.pla: 0136:     sprtptr=>s_size     = spritesize
; libsrc/apple/hgrsprite.pla: 0137:     sprtptr->s_height   = h
; libsrc/apple/hgrsprite.pla: 0138:     sprtptr->s_xcenter  = xcenter
; libsrc/apple/hgrsprite.pla: 0139:     sprtptr->s_ycenter  = ycenter
; libsrc/apple/hgrsprite.pla: 0140:     sprtptr=>s_under[0] = 0
; libsrc/apple/hgrsprite.pla: 0141:     sprtptr=>s_under[1] = 0
; libsrc/apple/hgrsprite.pla: 0142:     for i = 0 to 13
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$0E			; CN	7
	!BYTE	$88			; DIV
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$86			; MUL
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$70			; SB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$70			; SB
	!BYTE	$00			; CN	0
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$00			; CN	0
	!BYTE	$9E			; IDXW
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$02			; CN	1
	!BYTE	$9E			; IDXW
	!BYTE	$72			; SW
	!BYTE	$1A			; CN	13
	!BYTE	$00			; CN	0
_B007 
	!BYTE	$6E,$10			; DLW	[16]
; libsrc/apple/hgrsprite.pla: 0143:         sprtptr=>s_map[i]  = heapalloc(spritesize)
; libsrc/apple/hgrsprite.pla: 0144:         sprtptr=>s_mask[i] = heapalloc(spritesize)
; libsrc/apple/hgrsprite.pla: 0145:         if not sprtptr=>s_map[i] or not sprtptr=>s_mask[i]
; libsrc/apple/hgrsprite.pla: 0146:             heaprelease(sprtptr)
; libsrc/apple/hgrsprite.pla: 0147:             return 0
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_X014
_F004 	!WORD	0		
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$BA,$10			; IDXLW	[16]
	!BYTE	$72			; SW
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_X014
_F005 	!WORD	0		
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$BA,$10			; IDXLW	[16]
	!BYTE	$72			; SW
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$BA,$10			; IDXLW	[16]
	!BYTE	$62			; LW
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B009
	!WORD	_B009-*
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$BA,$10			; IDXLW	[16]
	!BYTE	$62			; LW
	!BYTE	$80			; NOT
_B009 
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$54			; CALL	_X015
_F006 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$32			; DROP2
	!BYTE	$00			; CN	0
	!BYTE	$5A,$12			; LEAVE	18
; libsrc/apple/hgrsprite.pla: 0148:         fin
_B010 
_B011 
; libsrc/apple/hgrsprite.pla: 0149:         hgrColor(7)
; libsrc/apple/hgrsprite.pla: 0150:         hgrRect(0, 0, w + 21, h - 1)
; libsrc/apple/hgrsprite.pla: 0151:         spriteBLTMask(i, 0, w, h, srcptr)
; libsrc/apple/hgrsprite.pla: 0152:         hgrCopyDst(i > 6 ?? 1 :: 0, 0, bytewidth, h, sprtptr=>s_mask[i])
; libsrc/apple/hgrsprite.pla: 0153:         hgrColor(0)
; libsrc/apple/hgrsprite.pla: 0154:         hgrRect(0, h, w + 21, h * 2 - 1)
; libsrc/apple/hgrsprite.pla: 0155:         hgrBLT(i, h, w, h, srcptr)
; libsrc/apple/hgrsprite.pla: 0156:         hgrCopyDst(i > 6 ?? 1 :: 0, h, bytewidth, h, sprtptr=>s_map[i])
; libsrc/apple/hgrsprite.pla: 0157:     next
	!BYTE	$0E			; CN	7
	!BYTE	$54			; CALL	_X050
_F007 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$15			; ADDI	21
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8E			; DECR
	!BYTE	$54			; CALL	_X037
_F008 	!WORD	0		
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_C000
_F009 	!WORD	_C000		
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$0C			; CN	6
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$02			; CN	1
	!BYTE	$50			; BRNCH	_B015
	!WORD	_B015-*
_B014 
	!BYTE	$00			; CN	0
_B015 
	!BYTE	$00			; CN	0
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$BA,$10			; IDXLW	[16]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X044
_F010 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X050
_F011 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$15			; ADDI	21
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$8E			; DECR
	!BYTE	$54			; CALL	_X037
_F012 	!WORD	0		
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_X039
_F013 	!WORD	0		
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$0C			; CN	6
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B018
	!WORD	_B018-*
	!BYTE	$02			; CN	1
	!BYTE	$50			; BRNCH	_B019
	!WORD	_B019-*
_B018 
	!BYTE	$00			; CN	0
_B019 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$BA,$10			; IDXLW	[16]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X044
_F014 	!WORD	0		
_B008 
	!BYTE	$A4			; INCBRLE	_B007
	!WORD	_B007-*
_B006 
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0158:     return sprtptr
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$5A,$12			; LEAVE	18
; libsrc/apple/hgrsprite.pla: 0159: end
; libsrc/apple/hgrsprite.pla: 0160: export def spriteDup(sprtsrc)#1
					; sprtsrc -> [0]
_C002 					; spriteDup()
; libsrc/apple/hgrsprite.pla: 0161:     var sprtdup
					; sprtdup -> [2]
; libsrc/apple/hgrsprite.pla: 0162:     byte i
					; i -> [4]
; libsrc/apple/hgrsprite.pla: 0163:     
; libsrc/apple/hgrsprite.pla: 0164:     sprtdup = heapalloc(t_sprite)
	!BYTE	$58,$05,$01		; ENTER	5,1
; libsrc/apple/hgrsprite.pla: 0165:     if not sprtdup; return 0; fin
	!BYTE	$2A,$68			; CB	104
	!BYTE	$54			; CALL	_X014
_F015 	!WORD	0		
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$4E			; BRTRU	_B020
	!WORD	_B020-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$05			; LEAVE	5
_B020 
_B021 
; libsrc/apple/hgrsprite.pla: 0166:     memcpy(sprtdup, sprtsrc, t_sprite)
; libsrc/apple/hgrsprite.pla: 0167:     sprtdup=>s_under[0] = 0
; libsrc/apple/hgrsprite.pla: 0168:     sprtdup=>s_under[1] = 0
; libsrc/apple/hgrsprite.pla: 0169:     return sprtdup
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2A,$68			; CB	104
	!BYTE	$54			; CALL	_X018
_F016 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$00			; CN	0
	!BYTE	$9E			; IDXW
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$02			; CN	1
	!BYTE	$9E			; IDXW
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/hgrsprite.pla: 0170: end
; libsrc/apple/hgrsprite.pla: 0171: export def spriteRead(filestr)#1
					; filestr -> [0]
_C003 					; spriteRead()
; libsrc/apple/hgrsprite.pla: 0172:     var sprtptr, spritesize
					; sprtptr -> [2]
					; spritesize -> [4]
; libsrc/apple/hgrsprite.pla: 0173:     byte refnum, i
					; refnum -> [6]
					; i -> [7]
; libsrc/apple/hgrsprite.pla: 0174:     
; libsrc/apple/hgrsprite.pla: 0175:     sprtptr = heapalloc(t_sprite)
	!BYTE	$58,$08,$01		; ENTER	8,1
; libsrc/apple/hgrsprite.pla: 0176:     if not sprtptr; return 0; fin
	!BYTE	$2A,$68			; CB	104
	!BYTE	$54			; CALL	_X014
_F017 	!WORD	0		
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$4E			; BRTRU	_B022
	!WORD	_B022-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
_B022 
_B023 
; libsrc/apple/hgrsprite.pla: 0177:     refnum  = fileio:open(filestr)
; libsrc/apple/hgrsprite.pla: 0178:     if refnum
; libsrc/apple/hgrsprite.pla: 0179:         if fileio:read(refnum, sprtptr, t_sprite) == t_sprite
; libsrc/apple/hgrsprite.pla: 0180:             spritesize          = sprtptr=>s_size
; libsrc/apple/hgrsprite.pla: 0181:             sprtptr=>s_under[0] = 0
; libsrc/apple/hgrsprite.pla: 0182:             sprtptr=>s_under[1] = 0
; libsrc/apple/hgrsprite.pla: 0183:             for i = 0 to 13
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X051+14
_F018 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$06			; DLB	[6]
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2A,$68			; CB	104
	!BYTE	$6A			; LAW	_X051+18
_F019 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$2A,$68			; CB	104
	!BYTE	$24			; BRNE	_B026
	!WORD	_B026-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$62			; LW
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$00			; CN	0
	!BYTE	$9E			; IDXW
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$02			; CN	1
	!BYTE	$9E			; IDXW
	!BYTE	$72			; SW
	!BYTE	$1A			; CN	13
	!BYTE	$00			; CN	0
_B029 
	!BYTE	$6C,$07			; DLB	[7]
; libsrc/apple/hgrsprite.pla: 0184:                 sprtptr=>s_map[i]  = heapalloc(spritesize)
; libsrc/apple/hgrsprite.pla: 0185:                 sprtptr=>s_mask[i] = heapalloc(spritesize)
; libsrc/apple/hgrsprite.pla: 0186:                 if not sprtptr=>s_map[i] or not sprtptr=>s_mask[i]
; libsrc/apple/hgrsprite.pla: 0187:                     heaprelease(sprtptr)
; libsrc/apple/hgrsprite.pla: 0188:                     fileio:close(refnum)
; libsrc/apple/hgrsprite.pla: 0189:                     return 0
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X014
_F020 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$72			; SW
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X014
_F021 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$62			; LW
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B031
	!WORD	_B031-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$62			; LW
	!BYTE	$80			; NOT
_B031 
	!BYTE	$4C			; BRFLS	_B032
	!WORD	_B032-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X015
_F022 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$6A			; LAW	_X051+16
_F023 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$32			; DROP2
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/hgrsprite.pla: 0190:                 fin
_B032 
_B033 
; libsrc/apple/hgrsprite.pla: 0191:                 fileio:read(refnum, sprtptr=>s_map[i], spritesize)
; libsrc/apple/hgrsprite.pla: 0192:                 fileio:read(refnum, sprtptr=>s_mask[i], spritesize)
; libsrc/apple/hgrsprite.pla: 0193:             next
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$62			; LW
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_X051+18
_F024 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$62			; LW
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_X051+18
_F025 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B030 
	!BYTE	$A4			; INCBRLE	_B029
	!WORD	_B029-*
_B028 
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0194:         else
	!BYTE	$50			; BRNCH	_B027
	!WORD	_B027-*
_B026 
; libsrc/apple/hgrsprite.pla: 0195:             heaprelease(sprtptr)
; libsrc/apple/hgrsprite.pla: 0196:             sprtptr = 0
; libsrc/apple/hgrsprite.pla: 0197:         fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X015
_F026 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
_B027 
; libsrc/apple/hgrsprite.pla: 0198:         fileio:close(refnum)
; libsrc/apple/hgrsprite.pla: 0199:     else
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$6A			; LAW	_X051+16
_F027 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B025
	!WORD	_B025-*
_B024 
; libsrc/apple/hgrsprite.pla: 0200:         heaprelease(sprtptr)
; libsrc/apple/hgrsprite.pla: 0201:         sprtptr = 0
; libsrc/apple/hgrsprite.pla: 0202:     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X015
_F028 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
_B025 
; libsrc/apple/hgrsprite.pla: 0203:     return sprtptr
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/hgrsprite.pla: 0204: end
; libsrc/apple/hgrsprite.pla: 0205: export def spriteSave(filestr, sprtptr)#1
					; filestr -> [0]
					; sprtptr -> [2]
_C004 					; spriteSave()
; libsrc/apple/hgrsprite.pla: 0206:     var spritesize
					; spritesize -> [4]
; libsrc/apple/hgrsprite.pla: 0207:     byte refnum, i
					; refnum -> [6]
					; i -> [7]
; libsrc/apple/hgrsprite.pla: 0208: 
; libsrc/apple/hgrsprite.pla: 0209:     fileio:destroy(filestr)
	!BYTE	$58,$08,$02		; ENTER	8,2
; libsrc/apple/hgrsprite.pla: 0210:     if fileio:create(filestr, $06, $0000) == FILE_ERR_OK
; libsrc/apple/hgrsprite.pla: 0211:         refnum = fileio:open(filestr)
; libsrc/apple/hgrsprite.pla: 0212:         if refnum
; libsrc/apple/hgrsprite.pla: 0213:             if fileio:write(refnum, sprtptr, t_sprite) == t_sprite
; libsrc/apple/hgrsprite.pla: 0214:                 spritesize = sprtptr=>s_size
; libsrc/apple/hgrsprite.pla: 0215:                 for i = 0 to 13
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X051+24
_F029 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$0C			; CN	6
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X051+22
_F030 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B034
	!WORD	_B034-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X051+14
_F031 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$06			; DLB	[6]
	!BYTE	$4C			; BRFLS	_B036
	!WORD	_B036-*
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2A,$68			; CB	104
	!BYTE	$6A			; LAW	_X051+20
_F032 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$2A,$68			; CB	104
	!BYTE	$24			; BRNE	_B038
	!WORD	_B038-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$62			; LW
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$1A			; CN	13
	!BYTE	$00			; CN	0
_B041 
	!BYTE	$6C,$07			; DLB	[7]
; libsrc/apple/hgrsprite.pla: 0216:                     fileio:write(refnum, sprtptr=>s_map[i], spritesize)
; libsrc/apple/hgrsprite.pla: 0217:                     fileio:write(refnum, sprtptr=>s_mask[i], spritesize)
; libsrc/apple/hgrsprite.pla: 0218:                 next
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$62			; LW
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_X051+20
_F033 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$B8,$07			; IDXLB	[7]
	!BYTE	$62			; LW
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_X051+20
_F034 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B042 
	!BYTE	$A4			; INCBRLE	_B041
	!WORD	_B041-*
_B040 
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0219:             fin
_B038 
_B039 
; libsrc/apple/hgrsprite.pla: 0220:             fileio:close(refnum)
; libsrc/apple/hgrsprite.pla: 0221:             return 0
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$6A			; LAW	_X051+16
_F035 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/hgrsprite.pla: 0222:         fin
_B036 
_B037 
; libsrc/apple/hgrsprite.pla: 0223:     fin
_B034 
_B035 
; libsrc/apple/hgrsprite.pla: 0224:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/hgrsprite.pla: 0225: end
; libsrc/apple/hgrsprite.pla: 0226: export def spriteDraw(sprtptr)#0
					; sprtptr -> [0]
_C005 					; spriteDraw()
; libsrc/apple/hgrsprite.pla: 0227:     byte map, pitch, height
					; map -> [2]
					; pitch -> [3]
					; height -> [4]
; libsrc/apple/hgrsprite.pla: 0228:     var ofst, y
					; ofst -> [5]
					; y -> [7]
; libsrc/apple/hgrsprite.pla: 0229:     
; libsrc/apple/hgrsprite.pla: 0230:     y = sprtptr=>s_ypos
	!BYTE	$58,$09,$01		; ENTER	9,1
; libsrc/apple/hgrsprite.pla: 0231:     ofst, map = divmod7(sprtptr=>s_xpos)
; libsrc/apple/hgrsprite.pla: 0232:     if ofst & 1
; libsrc/apple/hgrsprite.pla: 0233:         map = map + 7
; libsrc/apple/hgrsprite.pla: 0234:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X029
_F036 	!WORD	0		
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$6E,$05			; DLW	[5]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B043
	!WORD	_B043-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$74,$02			; SLB	[2]
_B043 
_B044 
; libsrc/apple/hgrsprite.pla: 0235:     sprtptr=>s_underofst[drawpage] = ofst
; libsrc/apple/hgrsprite.pla: 0236:     sprtptr=>s_undery[drawpage]    = y
; libsrc/apple/hgrsprite.pla: 0237:     pitch  = sprtptr->s_pitch
; libsrc/apple/hgrsprite.pla: 0238:     height = sprtptr->s_height
; libsrc/apple/hgrsprite.pla: 0239:     if not sprtptr=>s_under[drawpage]
; libsrc/apple/hgrsprite.pla: 0240:         sprtptr=>s_under[drawpage] = heapalloc(sprtptr=>s_size)
; libsrc/apple/hgrsprite.pla: 0241:         if not sprtptr=>s_under[drawpage]; return; fin
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$BC			; IDXAB	_D057+0
_F037 	!WORD	_D057+0		
	!BYTE	$72			; SW
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$BC			; IDXAB	_D057+0
_F038 	!WORD	_D057+0		
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$BC			; IDXAB	_D057+0
_F039 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$4E			; BRTRU	_B045
	!WORD	_B045-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X014
_F040 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$BC			; IDXAB	_D057+0
_F041 	!WORD	_D057+0		
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$BC			; IDXAB	_D057+0
_F042 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$4E			; BRTRU	_B047
	!WORD	_B047-*
	!BYTE	$5A,$09			; LEAVE	9
_B047 
_B048 
; libsrc/apple/hgrsprite.pla: 0242:     fin
_B045 
_B046 
; libsrc/apple/hgrsprite.pla: 0243:     hgrCopyDst(ofst, y, pitch, height, sprtptr=>s_under[drawpage])
; libsrc/apple/hgrsprite.pla: 0244:     hgrAndSrc( ofst, y, pitch, height, sprtptr=>s_mask[map])
; libsrc/apple/hgrsprite.pla: 0245:     hgrXorSrc( ofst, y, pitch, height, sprtptr=>s_map[map])
; libsrc/apple/hgrsprite.pla: 0246: end
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$BC			; IDXAB	_D057+0
_F043 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X044
_F044 	!WORD	0		
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X041
_F045 	!WORD	0		
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X042
_F046 	!WORD	0		
	!BYTE	$5A,$09			; LEAVE	9
; libsrc/apple/hgrsprite.pla: 0247: export def spriteUnDraw(sprtptr)#0
					; sprtptr -> [0]
_C006 					; spriteUnDraw()
; libsrc/apple/hgrsprite.pla: 0248:     if sprtptr=>s_under[drawpage]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrsprite.pla: 0249:         hgrCopySrc(sprtptr=>s_underofst[drawpage], sprtptr=>s_undery[drawpage], sprtptr->s_pitch, sprtptr->s_height, sprtptr=>s_under[drawpage])
; libsrc/apple/hgrsprite.pla: 0250:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$BC			; IDXAB	_D057+0
_F047 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B049
	!WORD	_B049-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$BC			; IDXAB	_D057+0
_F048 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$BC			; IDXAB	_D057+0
_F049 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$4C			; ADDI	76
	!BYTE	$BC			; IDXAB	_D057+0
_F050 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X040
_F051 	!WORD	0		
_B049 
_B050 
; libsrc/apple/hgrsprite.pla: 0251: end
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrsprite.pla: 0252: export def spriteDrawXor(sprtptr)#0
					; sprtptr -> [0]
_C007 					; spriteDrawXor()
; libsrc/apple/hgrsprite.pla: 0253:     byte map, pitch, height
					; map -> [2]
					; pitch -> [3]
					; height -> [4]
; libsrc/apple/hgrsprite.pla: 0254:     var ofst, y
					; ofst -> [5]
					; y -> [7]
; libsrc/apple/hgrsprite.pla: 0255:     
; libsrc/apple/hgrsprite.pla: 0256:     y = sprtptr=>s_ypos
	!BYTE	$58,$09,$01		; ENTER	9,1
; libsrc/apple/hgrsprite.pla: 0257:     ofst, map = divmod7(sprtptr=>s_xpos)
; libsrc/apple/hgrsprite.pla: 0258:     if ofst & 1
; libsrc/apple/hgrsprite.pla: 0259:         map = map + 7
; libsrc/apple/hgrsprite.pla: 0260:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X029
_F052 	!WORD	0		
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$6E,$05			; DLW	[5]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B051
	!WORD	_B051-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$74,$02			; SLB	[2]
_B051 
_B052 
; libsrc/apple/hgrsprite.pla: 0261:     sprtptr->s_undermap[drawpage]  = map
; libsrc/apple/hgrsprite.pla: 0262:     sprtptr=>s_underofst[drawpage] = ofst
; libsrc/apple/hgrsprite.pla: 0263:     sprtptr=>s_undery[drawpage]    = y
; libsrc/apple/hgrsprite.pla: 0264:     pitch  = sprtptr->s_pitch
; libsrc/apple/hgrsprite.pla: 0265:     height = sprtptr->s_height
; libsrc/apple/hgrsprite.pla: 0266:     hgrXorSrc( ofst, y, pitch, height, sprtptr=>s_map[map])
; libsrc/apple/hgrsprite.pla: 0267: end
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$B4			; ADDAB	_D057+0
_F053 	!WORD	_D057+0		
	!BYTE	$70			; SB
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$BC			; IDXAB	_D057+0
_F054 	!WORD	_D057+0		
	!BYTE	$72			; SW
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$BC			; IDXAB	_D057+0
_F055 	!WORD	_D057+0		
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X042
_F056 	!WORD	0		
	!BYTE	$5A,$09			; LEAVE	9
; libsrc/apple/hgrsprite.pla: 0268: export def spriteUnDrawXor(sprtptr)#0
					; sprtptr -> [0]
_C008 					; spriteUnDrawXor()
; libsrc/apple/hgrsprite.pla: 0269:     hgrXorSrc(sprtptr=>s_underofst[drawpage], sprtptr=>s_undery[drawpage], sprtptr->s_pitch, sprtptr->s_height, sprtptr=>s_map[sprtptr->s_undermap[drawpage]])
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrsprite.pla: 0270: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$BC			; IDXAB	_D057+0
_F057 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$BC			; IDXAB	_D057+0
_F058 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$B4			; ADDAB	_D057+0
_F059 	!WORD	_D057+0		
	!BYTE	$60			; LB
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X042
_F060 	!WORD	0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrsprite.pla: 0271: export def spritePos(x, y, sprtptr)#0
					; x -> [0]
					; y -> [2]
					; sprtptr -> [4]
_C009 					; spritePos()
; libsrc/apple/hgrsprite.pla: 0272:     sprtptr=>s_ypos = y - sprtptr->s_ycenter
	!BYTE	$58,$06,$03		; ENTER	6,3
; libsrc/apple/hgrsprite.pla: 0273:     sprtptr=>s_xpos = x - sprtptr->s_xcenter
; libsrc/apple/hgrsprite.pla: 0274: end
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$60			; LB
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$60			; LB
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$72			; SW
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/hgrsprite.pla: 0275: export def spritePosIndex(x, y, i)#0
					; x -> [0]
					; y -> [2]
					; i -> [4]
_C010 					; spritePosIndex()
; libsrc/apple/hgrsprite.pla: 0276:     i = i & 15
	!BYTE	$58,$06,$03		; ENTER	6,3
; libsrc/apple/hgrsprite.pla: 0277:     if drawList[i]
; libsrc/apple/hgrsprite.pla: 0278:         drawList[i]=>s_ypos = y - drawList[i]->s_ycenter
; libsrc/apple/hgrsprite.pla: 0279:         drawList[i]=>s_xpos = x - drawList[i]->s_xcenter
; libsrc/apple/hgrsprite.pla: 0280:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$26			; LA	_D053+0
_F061 	!WORD	_D053+0		
	!BYTE	$BA,$04			; IDXLW	[4]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B053
	!WORD	_B053-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$26			; LA	_D053+0
_F062 	!WORD	_D053+0		
	!BYTE	$BA,$04			; IDXLW	[4]
	!BYTE	$62			; LW
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$60			; LB
	!BYTE	$84			; SUB 
	!BYTE	$26			; LA	_D053+0
_F063 	!WORD	_D053+0		
	!BYTE	$BA,$04			; IDXLW	[4]
	!BYTE	$62			; LW
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D053+0
_F064 	!WORD	_D053+0		
	!BYTE	$BA,$04			; IDXLW	[4]
	!BYTE	$62			; LW
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$60			; LB
	!BYTE	$84			; SUB 
	!BYTE	$26			; LA	_D053+0
_F065 	!WORD	_D053+0		
	!BYTE	$BA,$04			; IDXLW	[4]
	!BYTE	$62			; LW
	!BYTE	$72			; SW
_B053 
_B054 
; libsrc/apple/hgrsprite.pla: 0281: end
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/hgrsprite.pla: 0282: export def spriteUnDrawList#0
_C011 					; spriteUnDrawList()
; libsrc/apple/hgrsprite.pla: 0283:     byte i
					; i -> [0]
; libsrc/apple/hgrsprite.pla: 0284:     var undrawptr
					; undrawptr -> [1]
; libsrc/apple/hgrsprite.pla: 0285:     
; libsrc/apple/hgrsprite.pla: 0286:     undrawptr = undrawList[drawpage]
	!BYTE	$58,$03,$00		; ENTER	3,0
; libsrc/apple/hgrsprite.pla: 0287:     for i = 15 downto 0
	!BYTE	$26			; LA	_D056+0
_F066 	!WORD	_D056+0		
	!BYTE	$BC			; IDXAB	_D057+0
_F067 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$00			; CN	0
	!BYTE	$1E			; CN	15
_B056 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/apple/hgrsprite.pla: 0288:         if undrawptr=>[i]
; libsrc/apple/hgrsprite.pla: 0289:             spriteUnDraw(undrawptr=>[i])
; libsrc/apple/hgrsprite.pla: 0290:             undrawptr=>[i] = 0
; libsrc/apple/hgrsprite.pla: 0291:         fin
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B058
	!WORD	_B058-*
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C006
_F068 	!WORD	_C006		
	!BYTE	$00			; CN	0
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$72			; SW
_B058 
_B059 
; libsrc/apple/hgrsprite.pla: 0292:     next
_B057 
	!BYTE	$A8			; DECBRGE	_B056
	!WORD	_B056-*
_B055 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0293: end
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/hgrsprite.pla: 0294: export def spriteDrawList#0
_C012 					; spriteDrawList()
; libsrc/apple/hgrsprite.pla: 0295:     byte i
					; i -> [0]
; libsrc/apple/hgrsprite.pla: 0296:     var undrawptr
					; undrawptr -> [1]
; libsrc/apple/hgrsprite.pla: 0297:     
; libsrc/apple/hgrsprite.pla: 0298:     undrawptr = undrawList[drawpage]
	!BYTE	$58,$03,$00		; ENTER	3,0
; libsrc/apple/hgrsprite.pla: 0299:     for i = 15 downto 0
	!BYTE	$26			; LA	_D056+0
_F069 	!WORD	_D056+0		
	!BYTE	$BC			; IDXAB	_D057+0
_F070 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$00			; CN	0
	!BYTE	$1E			; CN	15
_B061 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/apple/hgrsprite.pla: 0300:         if undrawptr=>[i]
; libsrc/apple/hgrsprite.pla: 0301:             spriteUnDraw(undrawptr=>[i])
; libsrc/apple/hgrsprite.pla: 0302:         fin
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B063
	!WORD	_B063-*
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C006
_F071 	!WORD	_C006		
_B063 
_B064 
; libsrc/apple/hgrsprite.pla: 0303:     next
_B062 
	!BYTE	$A8			; DECBRGE	_B061
	!WORD	_B061-*
_B060 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0304:     for i = 0 to 15
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
_B066 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/apple/hgrsprite.pla: 0305:         if drawList[i]
; libsrc/apple/hgrsprite.pla: 0306:             spriteDraw(drawList[i])
; libsrc/apple/hgrsprite.pla: 0307:         fin
	!BYTE	$26			; LA	_D053+0
_F072 	!WORD	_D053+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B068
	!WORD	_B068-*
	!BYTE	$26			; LA	_D053+0
_F073 	!WORD	_D053+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C005
_F074 	!WORD	_C005		
_B068 
_B069 
; libsrc/apple/hgrsprite.pla: 0308:     next
_B067 
	!BYTE	$A4			; INCBRLE	_B066
	!WORD	_B066-*
_B065 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0309:     memcpy(undrawptr, @drawList, 16*2)
; libsrc/apple/hgrsprite.pla: 0310: end
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$26			; LA	_D053+0
_F075 	!WORD	_D053+0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X018
_F076 	!WORD	0		
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/hgrsprite.pla: 0311: export def spriteUnDrawXorList#0
_C013 					; spriteUnDrawXorList()
; libsrc/apple/hgrsprite.pla: 0312:     byte i
					; i -> [0]
; libsrc/apple/hgrsprite.pla: 0313:     var undrawptr
					; undrawptr -> [1]
; libsrc/apple/hgrsprite.pla: 0314:     
; libsrc/apple/hgrsprite.pla: 0315:     undrawptr = undrawList[drawpage]
	!BYTE	$58,$03,$00		; ENTER	3,0
; libsrc/apple/hgrsprite.pla: 0316:     for i = 0 to 15
	!BYTE	$26			; LA	_D056+0
_F077 	!WORD	_D056+0		
	!BYTE	$BC			; IDXAB	_D057+0
_F078 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
_B071 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/apple/hgrsprite.pla: 0317:         if undrawptr=>[i]
; libsrc/apple/hgrsprite.pla: 0318:             spriteUnDrawXor(undrawptr=>[i])
; libsrc/apple/hgrsprite.pla: 0319:             undrawptr=>[i] = 0
; libsrc/apple/hgrsprite.pla: 0320:         fin
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B073
	!WORD	_B073-*
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C008
_F079 	!WORD	_C008		
	!BYTE	$00			; CN	0
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$72			; SW
_B073 
_B074 
; libsrc/apple/hgrsprite.pla: 0321:     next
_B072 
	!BYTE	$A4			; INCBRLE	_B071
	!WORD	_B071-*
_B070 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0322: end
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/hgrsprite.pla: 0323: export def spriteDrawXorList#0
_C014 					; spriteDrawXorList()
; libsrc/apple/hgrsprite.pla: 0324:     byte i
					; i -> [0]
; libsrc/apple/hgrsprite.pla: 0325:     var undrawptr
					; undrawptr -> [1]
; libsrc/apple/hgrsprite.pla: 0326:     
; libsrc/apple/hgrsprite.pla: 0327:     undrawptr = undrawList[drawpage]
	!BYTE	$58,$03,$00		; ENTER	3,0
; libsrc/apple/hgrsprite.pla: 0328:     for i = 0 to 15
	!BYTE	$26			; LA	_D056+0
_F080 	!WORD	_D056+0		
	!BYTE	$BC			; IDXAB	_D057+0
_F081 	!WORD	_D057+0		
	!BYTE	$62			; LW
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
_B076 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/apple/hgrsprite.pla: 0329:         if undrawptr=>[i]
; libsrc/apple/hgrsprite.pla: 0330:             spriteUnDrawXor(undrawptr=>[i])
; libsrc/apple/hgrsprite.pla: 0331:         fin
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B078
	!WORD	_B078-*
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C008
_F082 	!WORD	_C008		
_B078 
_B079 
; libsrc/apple/hgrsprite.pla: 0332:         if drawList[i]
; libsrc/apple/hgrsprite.pla: 0333:             spriteDrawXor(drawList[i])
; libsrc/apple/hgrsprite.pla: 0334:         fin
	!BYTE	$26			; LA	_D053+0
_F083 	!WORD	_D053+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B080
	!WORD	_B080-*
	!BYTE	$26			; LA	_D053+0
_F084 	!WORD	_D053+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C007
_F085 	!WORD	_C007		
_B080 
_B081 
; libsrc/apple/hgrsprite.pla: 0335:     next
_B077 
	!BYTE	$A4			; INCBRLE	_B076
	!WORD	_B076-*
_B075 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrsprite.pla: 0336:     memcpy(undrawptr, @drawList, 16*2)
; libsrc/apple/hgrsprite.pla: 0337: end
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$26			; LA	_D053+0
_F086 	!WORD	_D053+0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X018
_F087 	!WORD	0		
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/hgrsprite.pla: 0338: export def spriteAdd(i, sprtptr)#1
					; i -> [0]
					; sprtptr -> [2]
_C015 					; spriteAdd()
; libsrc/apple/hgrsprite.pla: 0339:     var sprtprev
					; sprtprev -> [4]
; libsrc/apple/hgrsprite.pla: 0340:     
; libsrc/apple/hgrsprite.pla: 0341:     i = i & 15
	!BYTE	$58,$06,$02		; ENTER	6,2
; libsrc/apple/hgrsprite.pla: 0342:     sprtprev = drawList[i]
; libsrc/apple/hgrsprite.pla: 0343:     drawList[i] = sprtptr
; libsrc/apple/hgrsprite.pla: 0344:     return sprtprev
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$26			; LA	_D053+0
_F088 	!WORD	_D053+0		
	!BYTE	$BA,$00			; IDXLW	[0]
	!BYTE	$62			; LW
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$26			; LA	_D053+0
_F089 	!WORD	_D053+0		
	!BYTE	$BA,$00			; IDXLW	[0]
	!BYTE	$72			; SW
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/apple/hgrsprite.pla: 0345: end
; libsrc/apple/hgrsprite.pla: 0346: export def spriteDel(i)#1
					; i -> [0]
_C016 					; spriteDel()
; libsrc/apple/hgrsprite.pla: 0347:     var sprtprev
					; sprtprev -> [2]
; libsrc/apple/hgrsprite.pla: 0348:     
; libsrc/apple/hgrsprite.pla: 0349:     i = i & 15
	!BYTE	$58,$04,$01		; ENTER	4,1
; libsrc/apple/hgrsprite.pla: 0350:     sprtprev = drawList[i]
; libsrc/apple/hgrsprite.pla: 0351:     drawList[i] = 0
; libsrc/apple/hgrsprite.pla: 0352:     return sprtprev
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$26			; LA	_D053+0
_F090 	!WORD	_D053+0		
	!BYTE	$BA,$00			; IDXLW	[0]
	!BYTE	$62			; LW
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D053+0
_F091 	!WORD	_D053+0		
	!BYTE	$BA,$00			; IDXLW	[0]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/hgrsprite.pla: 0353: end
; libsrc/apple/hgrsprite.pla: 0354: export def spriteDrawBuf(page)#1
					; page -> [0]
_C017 					; spriteDrawBuf()
; libsrc/apple/hgrsprite.pla: 0355:     drawpage = page & 1
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrsprite.pla: 0356:     return drawpage
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$7C			; DAB	_D057+0
_F092 	!WORD	_D057+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrsprite.pla: 0357: end
; libsrc/apple/hgrsprite.pla: 0358: //
; libsrc/apple/hgrsprite.pla: 0359: // Assembly fixups
; libsrc/apple/hgrsprite.pla: 0360: //
; libsrc/apple/hgrsprite.pla: 0361: _scanMaskA:1    = @hgrColor
_INIT 
; libsrc/apple/hgrsprite.pla: 0362: _scanMaskB:1    = @hgrPlot
; libsrc/apple/hgrsprite.pla: 0363: _scanMaskC:1    = @hgrColor
; libsrc/apple/hgrsprite.pla: 0364: _scanMaskD:1    = @hgrPlot
; libsrc/apple/hgrsprite.pla: 0365: done
	!BYTE	$26			; LA	_X050+0
_F093 	!WORD	0+0		
	!BYTE	$7A			; SAW	_A001+1
_F094 	!WORD	_A001+1		
	!BYTE	$26			; LA	_X030+0
_F095 	!WORD	0+0		
	!BYTE	$7A			; SAW	_A002+1
_F096 	!WORD	_A002+1		
	!BYTE	$26			; LA	_X050+0
_F097 	!WORD	0+0		
	!BYTE	$7A			; SAW	_A003+1
_F098 	!WORD	_A003+1		
	!BYTE	$26			; LA	_X030+0
_F099 	!WORD	0+0		
	!BYTE	$7A			; SAW	_A004+1
_F100 	!WORD	_A004+1		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	19
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C012		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C013		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C014		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C015		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C016		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C017		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	44			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	39			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	44			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	51			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	44			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	41			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	40			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: DIVMOD7
	!BYTE	$C4,$C9,$D6,$CD,$CF,$C4,$37
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: HGRPLOT
	!BYTE	$C8,$C7,$D2,$D0,$CC,$CF,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: HGRRECT
	!BYTE	$C8,$C7,$D2,$D2,$C5,$C3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	37			; ESD INDEX
	; DCI STRING: HGRBLT
	!BYTE	$C8,$C7,$D2,$C2,$CC,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	39			; ESD INDEX
	; DCI STRING: HGRCOPYSRC
	!BYTE	$C8,$C7,$D2,$C3,$CF,$D0,$D9,$D3,$D2,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	40			; ESD INDEX
	; DCI STRING: HGRANDSRC
	!BYTE	$C8,$C7,$D2,$C1,$CE,$C4,$D3,$D2,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	41			; ESD INDEX
	; DCI STRING: HGRXORSRC
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D3,$D2,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	42			; ESD INDEX
	; DCI STRING: HGRCOPYDST
	!BYTE	$C8,$C7,$D2,$C3,$CF,$D0,$D9,$C4,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	44			; ESD INDEX
	; DCI STRING: HGRCOLOR
	!BYTE	$C8,$C7,$D2,$C3,$CF,$CC,$CF,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	50			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	51			; ESD INDEX
	; DCI STRING: SPRITECOMPILE
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C3,$CF,$CD,$D0,$C9,$CC,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: SPRITEDUP
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D5,$50
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: SPRITEREAD
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D2,$C5,$C1,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: SPRITESAVE
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D3,$C1,$D6,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: SPRITEDRAW
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	; DCI STRING: SPRITEUNDRAW
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D5,$CE,$C4,$D2,$C1,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C006		
	; DCI STRING: SPRITEDRAWXOR
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$D8,$CF,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C007		
	; DCI STRING: SPRITEUNDRAWXOR
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D5,$CE,$C4,$D2,$C1,$D7,$D8,$CF,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C008		
	; DCI STRING: SPRITEPOS
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D0,$CF,$53
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C009		
	; DCI STRING: SPRITEPOSINDEX
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D0,$CF,$D3,$C9,$CE,$C4,$C5,$58
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C010		
	; DCI STRING: SPRITEUNDRAWLIST
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D5,$CE,$C4,$D2,$C1,$D7,$CC,$C9,$D3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C011		
	; DCI STRING: SPRITEDRAWLIST
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$CC,$C9,$D3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C012		
	; DCI STRING: SPRITEUNDRAWXORLIST
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D5,$CE,$C4,$D2,$C1,$D7,$D8,$CF,$D2,$CC,$C9,$D3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C013		
	; DCI STRING: SPRITEDRAWXORLIST
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$D8,$CF,$D2,$CC,$C9,$D3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C014		
	; DCI STRING: SPRITEADD
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C1,$C4,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C015		
	; DCI STRING: SPRITEDEL
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$C5,$4C
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C016		
	; DCI STRING: SPRITEDRAWBUF
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C017		
	!BYTE	$00			; END OF ESD
