; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/hgrtile.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/hgrtile.pla: 0001: 
; libsrc/apple/hgrtile.pla: 0002: //
; libsrc/apple/hgrtile.pla: 0003: // Hardware addresses
; libsrc/apple/hgrtile.pla: 0004: //
; libsrc/apple/hgrtile.pla: 0005: const showgraphics = $C050
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; showgraphics = 49232
; libsrc/apple/hgrtile.pla: 0006: const showtext     = $C051
					; showtext = 49233
; libsrc/apple/hgrtile.pla: 0007: const showfull     = $C052
					; showfull = 49234
; libsrc/apple/hgrtile.pla: 0008: const showmix      = $C053
					; showmix = 49235
; libsrc/apple/hgrtile.pla: 0009: const showpage1    = $C054
					; showpage1 = 49236
; libsrc/apple/hgrtile.pla: 0010: const showpage2    = $C055
					; showpage2 = 49237
; libsrc/apple/hgrtile.pla: 0011: const showlores    = $C056
					; showlores = 49238
; libsrc/apple/hgrtile.pla: 0012: const showhires    = $C057
					; showhires = 49239
; libsrc/apple/hgrtile.pla: 0013: const keyboard     = $C000
					; keyboard = 49152
; libsrc/apple/hgrtile.pla: 0014: const keystrobe    = $C010
					; keystrobe = 49168
; libsrc/apple/hgrtile.pla: 0015: const txt1         = $0400
					; txt1 = 1024
; libsrc/apple/hgrtile.pla: 0016: const txt2         = $0800
					; txt2 = 2048
; libsrc/apple/hgrtile.pla: 0017: const hgr1         = $2000
					; hgr1 = 8192
; libsrc/apple/hgrtile.pla: 0018: const hgr2         = $4000
					; hgr2 = 16384
; libsrc/apple/hgrtile.pla: 0019: const page1        = 0
					; page1 = 0
; libsrc/apple/hgrtile.pla: 0020: const page2        = 1
					; page2 = 1
; libsrc/apple/hgrtile.pla: 0021: 
; libsrc/apple/hgrtile.pla: 0022: word txtbuff[] = txt1, txt2
_D028 					; txtbuff[] = txt1, txt2
	!WORD	$0400
	!WORD	$0800
; libsrc/apple/hgrtile.pla: 0023: word hgrbuff[] = hgr1, hgr2
_D029 					; hgrbuff[] = hgr1, hgr2
	!WORD	$2000
	!WORD	$4000
; libsrc/apple/hgrtile.pla: 0024: //
; libsrc/apple/hgrtile.pla: 0025: // Screen tile scanline addresses.
; libsrc/apple/hgrtile.pla: 0026: //
; libsrc/apple/hgrtile.pla: 0027: word[] rowaddr   = $0000,$0080,$0100,$0180,$0200,$0280,$0300,$0380
_D030 					; rowaddr   = $0000,$0080,$0100,$0180,$0200,$0280,$0300,$0380
	!WORD	$0000
	!WORD	$0080
	!WORD	$0100
	!WORD	$0180
	!WORD	$0200
	!WORD	$0280
	!WORD	$0300
	!WORD	$0380
; libsrc/apple/hgrtile.pla: 0028: word             = $0028,$00A8,$0128,$01A8,$0228,$02A8,$0328,$03A8
	!WORD	$0028
	!WORD	$00A8
	!WORD	$0128
	!WORD	$01A8
	!WORD	$0228
	!WORD	$02A8
	!WORD	$0328
	!WORD	$03A8
; libsrc/apple/hgrtile.pla: 0029: word             = $0050,$00D0,$0150,$01D0,$0250,$02D0,$0350,$03D0
	!WORD	$0050
	!WORD	$00D0
	!WORD	$0150
	!WORD	$01D0
	!WORD	$0250
	!WORD	$02D0
	!WORD	$0350
	!WORD	$03D0
; libsrc/apple/hgrtile.pla: 0030: byte[] scanbttml = $00,$80,$00,$80,$00,$80,$00,$80
_D031 					; scanbttml = $00,$80,$00,$80,$00,$80,$00,$80
	!BYTE	$00
	!BYTE	$80
	!BYTE	$00
	!BYTE	$80
	!BYTE	$00
	!BYTE	$80
	!BYTE	$00
	!BYTE	$80
; libsrc/apple/hgrtile.pla: 0031: byte             = $28,$A8,$28,$A8,$28,$A8,$28,$A8
	!BYTE	$28
	!BYTE	$A8
	!BYTE	$28
	!BYTE	$A8
	!BYTE	$28
	!BYTE	$A8
	!BYTE	$28
	!BYTE	$A8
; libsrc/apple/hgrtile.pla: 0032: byte             = $50,$D0,$50,$D0,$50,$D0,$50,$D0
	!BYTE	$50
	!BYTE	$D0
	!BYTE	$50
	!BYTE	$D0
	!BYTE	$50
	!BYTE	$D0
	!BYTE	$50
	!BYTE	$D0
; libsrc/apple/hgrtile.pla: 0033: byte[] scanbttmh = $1C,$1C,$1D,$1D,$1E,$1E,$1F,$1F
_D032 					; scanbttmh = $1C,$1C,$1D,$1D,$1E,$1E,$1F,$1F
	!BYTE	$1C
	!BYTE	$1C
	!BYTE	$1D
	!BYTE	$1D
	!BYTE	$1E
	!BYTE	$1E
	!BYTE	$1F
	!BYTE	$1F
; libsrc/apple/hgrtile.pla: 0034: byte             = $1C,$1C,$1D,$1D,$1E,$1E,$1F,$1F
	!BYTE	$1C
	!BYTE	$1C
	!BYTE	$1D
	!BYTE	$1D
	!BYTE	$1E
	!BYTE	$1E
	!BYTE	$1F
	!BYTE	$1F
; libsrc/apple/hgrtile.pla: 0035: byte             = $1C,$1C,$1D,$1D,$1E,$1E,$1F,$1F
	!BYTE	$1C
	!BYTE	$1C
	!BYTE	$1D
	!BYTE	$1D
	!BYTE	$1E
	!BYTE	$1E
	!BYTE	$1F
	!BYTE	$1F
; libsrc/apple/hgrtile.pla: 0036: 
; libsrc/apple/hgrtile.pla: 0037: byte hbmask    = $81,$82,$84,$88,$90,$A0,$C0
_D033 					; hbmask    = $81,$82,$84,$88,$90,$A0,$C0
	!BYTE	$81
	!BYTE	$82
	!BYTE	$84
	!BYTE	$88
	!BYTE	$90
	!BYTE	$A0
	!BYTE	$C0
; libsrc/apple/hgrtile.pla: 0038: word hcolor[]  = $0000,$552A,$2A55,$7F7F,$8080,$D5AA,$AAD5,$FFFF
_D034 					; hcolor[]  = $0000,$552A,$2A55,$7F7F,$8080,$D5AA,$AAD5,$FFFF
	!WORD	$0000
	!WORD	$552A
	!WORD	$2A55
	!WORD	$7F7F
	!WORD	$8080
	!WORD	$D5AA
	!WORD	$AAD5
	!WORD	$FFFF
; libsrc/apple/hgrtile.pla: 0039: byte drawpage  = 0
_D035 					; drawpage  = 0
	!BYTE	$00
; libsrc/apple/hgrtile.pla: 0040: word drawbuff  = hgr1
_D036 					; drawbuff  = hgr1
	!WORD	$2000
; libsrc/apple/hgrtile.pla: 0041: 
; libsrc/apple/hgrtile.pla: 0042: asm tileInc#0
_A000 					; tileInc()
; libsrc/apple/hgrtile.pla: 0043: !SOURCE    "vmsrc/plvmzp.inc"
!SOURCE    "vmsrc/plvmzp.inc"
; libsrc/apple/hgrtile.pla: 0044: CURSH   =   $24
CURSH   =   $24
; libsrc/apple/hgrtile.pla: 0045: CURSV   =   $25
CURSV   =   $25
; libsrc/apple/hgrtile.pla: 0046: GBASL   =   $26
GBASL   =   $26
; libsrc/apple/hgrtile.pla: 0047: GBASH   =   $27
GBASH   =   $27
; libsrc/apple/hgrtile.pla: 0048: GBASE   =   GBASL
GBASE   =   GBASL
; libsrc/apple/hgrtile.pla: 0049: TBASL   =   $28
TBASL   =   $28
; libsrc/apple/hgrtile.pla: 0050: TBASH   =   $29
TBASH   =   $29
; libsrc/apple/hgrtile.pla: 0051: TBASE   =   TBASL
TBASE   =   TBASL
; libsrc/apple/hgrtile.pla: 0052: TBAS2L  =   $2A
TBAS2L  =   $2A
; libsrc/apple/hgrtile.pla: 0053: TBAS2H  =   $2B
TBAS2H  =   $2B
; libsrc/apple/hgrtile.pla: 0054: TBAS2E  =   TBAS2L
TBAS2E  =   TBAS2L
; libsrc/apple/hgrtile.pla: 0055: end
; libsrc/apple/hgrtile.pla: 0056: //export def tileDraw(x, y, tileptr)#0
; libsrc/apple/hgrtile.pla: 0057: //    var scrnptr
; libsrc/apple/hgrtile.pla: 0058: //    
; libsrc/apple/hgrtile.pla: 0059: //    scrnptr = (scanaddr[y] | drawbuff) + x
; libsrc/apple/hgrtile.pla: 0060: //    scrnptr->[$1C00] = tileptr->[7]
; libsrc/apple/hgrtile.pla: 0061: //    scrnptr->[$1800] = tileptr->[6]
; libsrc/apple/hgrtile.pla: 0062: //    scrnptr->[$1400] = tileptr->[5]
; libsrc/apple/hgrtile.pla: 0063: //    scrnptr->[$1000] = tileptr->[4]
; libsrc/apple/hgrtile.pla: 0064: //    scrnptr->[$0C00] = tileptr->[3]
; libsrc/apple/hgrtile.pla: 0065: //    scrnptr->[$0800] = tileptr->[2]
; libsrc/apple/hgrtile.pla: 0066: //    scrnptr->[$0400] = tileptr->[1]
; libsrc/apple/hgrtile.pla: 0067: //    scrnptr->[$0000] = tileptr->[0]
; libsrc/apple/hgrtile.pla: 0068: //end
; libsrc/apple/hgrtile.pla: 0069: export asm tileDraw(x, y, tileptr)#0
_A001 					; tileDraw()
; libsrc/apple/hgrtile.pla: 0070:         LDA     ESTKL+0,X   ; TILEPTRL
        LDA     ESTKL+0,X   ; TILEPTRL
; libsrc/apple/hgrtile.pla: 0071:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrtile.pla: 0072:         LDA     ESTKH+0,X   ; TILEPTRH
        LDA     ESTKH+0,X   ; TILEPTRH
; libsrc/apple/hgrtile.pla: 0073:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrtile.pla: 0074:         LDY     ESTKL+1,X   ; Y COORD
        LDY     ESTKL+1,X   ; Y COORD
; libsrc/apple/hgrtile.pla: 0075:         LDA     ESTKL+2,X   ; X COORD
        LDA     ESTKL+2,X   ; X COORD
; libsrc/apple/hgrtile.pla: 0076:         CLC
        CLC
; libsrc/apple/hgrtile.pla: 0077: end
; libsrc/apple/hgrtile.pla: 0078: asm     _tileDraw
_A002 					; _tileDraw()
; libsrc/apple/hgrtile.pla: 0079:         ADC     $1000,Y     ; SCANBTTML
        ADC     $1000,Y     ; SCANBTTML
; libsrc/apple/hgrtile.pla: 0080:         STA     ESTKL+0,X   ; USE ESTK AS POINTER
        STA     ESTKL+0,X   ; USE ESTK AS POINTER
; libsrc/apple/hgrtile.pla: 0081:         LDA     $3001       ; DRAWBUFFH
        LDA     $3001       ; DRAWBUFFH
; libsrc/apple/hgrtile.pla: 0082:         ADC     $2000,Y     ; SCANBTTMH
        ADC     $2000,Y     ; SCANBTTMH
; libsrc/apple/hgrtile.pla: 0083:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0084:         LDY     #$07        ; DRAW BOTTOM UP
        LDY     #$07        ; DRAW BOTTOM UP
; libsrc/apple/hgrtile.pla: 0085:         SEC
        SEC
; libsrc/apple/hgrtile.pla: 0086: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0087:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0088:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0089:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0090:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0091:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0092:         BNE     -
        BNE     -
; libsrc/apple/hgrtile.pla: 0093:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0094:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0095:         INX
        INX
; libsrc/apple/hgrtile.pla: 0096:         INX
        INX
; libsrc/apple/hgrtile.pla: 0097:         INX
        INX
; libsrc/apple/hgrtile.pla: 0098:         RTS
        RTS
; libsrc/apple/hgrtile.pla: 0099: end
; libsrc/apple/hgrtile.pla: 0100: //export def tileXorDraw(x, y, tileptr)#0
; libsrc/apple/hgrtile.pla: 0101: //    var scrnptr
; libsrc/apple/hgrtile.pla: 0102: //    
; libsrc/apple/hgrtile.pla: 0103: //    scrnptr = (scanaddr[y] | drawbuff) + x
; libsrc/apple/hgrtile.pla: 0104: //    scrnptr->[$1C00] = tileptr->[7]
; libsrc/apple/hgrtile.pla: 0105: //    scrnptr->[$1800] = tileptr->[6]
; libsrc/apple/hgrtile.pla: 0106: //    scrnptr->[$1400] = tileptr->[5]
; libsrc/apple/hgrtile.pla: 0107: //    scrnptr->[$1000] = tileptr->[4]
; libsrc/apple/hgrtile.pla: 0108: //    scrnptr->[$0C00] = tileptr->[3]
; libsrc/apple/hgrtile.pla: 0109: //    scrnptr->[$0800] = tileptr->[2]
; libsrc/apple/hgrtile.pla: 0110: //    scrnptr->[$0400] = tileptr->[1]
; libsrc/apple/hgrtile.pla: 0111: //    scrnptr->[$0000] = tileptr->[0]
; libsrc/apple/hgrtile.pla: 0112: //end
; libsrc/apple/hgrtile.pla: 0113: export asm tileXorDraw(x, y, tileptr)#0
_A003 					; tileXorDraw()
; libsrc/apple/hgrtile.pla: 0114:         LDA     ESTKL+0,X   ; TILEPTRL
        LDA     ESTKL+0,X   ; TILEPTRL
; libsrc/apple/hgrtile.pla: 0115:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrtile.pla: 0116:         LDA     ESTKH+0,X   ; TILEPTRH
        LDA     ESTKH+0,X   ; TILEPTRH
; libsrc/apple/hgrtile.pla: 0117:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrtile.pla: 0118:         LDY     ESTKL+1,X   ; Y COORD
        LDY     ESTKL+1,X   ; Y COORD
; libsrc/apple/hgrtile.pla: 0119:         LDA     ESTKL+2,X   ; X COORD
        LDA     ESTKL+2,X   ; X COORD
; libsrc/apple/hgrtile.pla: 0120:         CLC
        CLC
; libsrc/apple/hgrtile.pla: 0121: end
; libsrc/apple/hgrtile.pla: 0122: asm     _tileXDraw
_A004 					; _tileXDraw()
; libsrc/apple/hgrtile.pla: 0123:         ADC     $1000,Y     ; SCANBTTML
        ADC     $1000,Y     ; SCANBTTML
; libsrc/apple/hgrtile.pla: 0124:         STA     ESTKL+0,X   ; USE ESTK AS POINTER
        STA     ESTKL+0,X   ; USE ESTK AS POINTER
; libsrc/apple/hgrtile.pla: 0125:         LDA     $3001       ; DRAWBUFFH
        LDA     $3001       ; DRAWBUFFH
; libsrc/apple/hgrtile.pla: 0126:         ADC     $2000,Y     ; SCANBTTMH
        ADC     $2000,Y     ; SCANBTTMH
; libsrc/apple/hgrtile.pla: 0127:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0128:         LDY     #$07        ; DRAW BOTTOM UP
        LDY     #$07        ; DRAW BOTTOM UP
; libsrc/apple/hgrtile.pla: 0129:         SEC
        SEC
; libsrc/apple/hgrtile.pla: 0130: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0131:         EOR     (ESTKL,X)
        EOR     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0132:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0133:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0134:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0135:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0136:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0137:         BNE     -
        BNE     -
; libsrc/apple/hgrtile.pla: 0138:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0139:         EOR     (ESTKL,X)
        EOR     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0140:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0141:         INX
        INX
; libsrc/apple/hgrtile.pla: 0142:         INX
        INX
; libsrc/apple/hgrtile.pla: 0143:         INX
        INX
; libsrc/apple/hgrtile.pla: 0144:         RTS
        RTS
; libsrc/apple/hgrtile.pla: 0145: end
; libsrc/apple/hgrtile.pla: 0146: //export def tileOrDraw(x, y, tileptr)#0
; libsrc/apple/hgrtile.pla: 0147: //    var scrnptr
; libsrc/apple/hgrtile.pla: 0148: //    
; libsrc/apple/hgrtile.pla: 0149: //    scrnptr = (scanaddr[y] | drawbuff) + x
; libsrc/apple/hgrtile.pla: 0150: //    scrnptr->[$1C00] = tileptr->[7]
; libsrc/apple/hgrtile.pla: 0151: //    scrnptr->[$1800] = tileptr->[6]
; libsrc/apple/hgrtile.pla: 0152: //    scrnptr->[$1400] = tileptr->[5]
; libsrc/apple/hgrtile.pla: 0153: //    scrnptr->[$1000] = tileptr->[4]
; libsrc/apple/hgrtile.pla: 0154: //    scrnptr->[$0C00] = tileptr->[3]
; libsrc/apple/hgrtile.pla: 0155: //    scrnptr->[$0800] = tileptr->[2]
; libsrc/apple/hgrtile.pla: 0156: //    scrnptr->[$0400] = tileptr->[1]
; libsrc/apple/hgrtile.pla: 0157: //    scrnptr->[$0000] = tileptr->[0]
; libsrc/apple/hgrtile.pla: 0158: //end
; libsrc/apple/hgrtile.pla: 0159: export asm tileOrDraw(x, y, tileptr)#0
_A005 					; tileOrDraw()
; libsrc/apple/hgrtile.pla: 0160:         LDA     ESTKL+0,X   ; TILEPTRL
        LDA     ESTKL+0,X   ; TILEPTRL
; libsrc/apple/hgrtile.pla: 0161:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrtile.pla: 0162:         LDA     ESTKH+0,X   ; TILEPTRH
        LDA     ESTKH+0,X   ; TILEPTRH
; libsrc/apple/hgrtile.pla: 0163:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrtile.pla: 0164:         LDY     ESTKL+1,X   ; Y COORD
        LDY     ESTKL+1,X   ; Y COORD
; libsrc/apple/hgrtile.pla: 0165:         LDA     ESTKL+2,X   ; X COORD
        LDA     ESTKL+2,X   ; X COORD
; libsrc/apple/hgrtile.pla: 0166:         CLC
        CLC
; libsrc/apple/hgrtile.pla: 0167: end
; libsrc/apple/hgrtile.pla: 0168: asm     _tileODraw
_A006 					; _tileODraw()
; libsrc/apple/hgrtile.pla: 0169:         ADC     $1000,Y     ; SCANBTTML
        ADC     $1000,Y     ; SCANBTTML
; libsrc/apple/hgrtile.pla: 0170:         STA     ESTKL+0,X   ; USE ESTK AS POINTER
        STA     ESTKL+0,X   ; USE ESTK AS POINTER
; libsrc/apple/hgrtile.pla: 0171:         LDA     $3001       ; DRAWBUFFH
        LDA     $3001       ; DRAWBUFFH
; libsrc/apple/hgrtile.pla: 0172:         ADC     $2000,Y     ; SCANBTTMH
        ADC     $2000,Y     ; SCANBTTMH
; libsrc/apple/hgrtile.pla: 0173:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0174:         LDY     #$07        ; DRAW BOTTOM UP
        LDY     #$07        ; DRAW BOTTOM UP
; libsrc/apple/hgrtile.pla: 0175:         SEC
        SEC
; libsrc/apple/hgrtile.pla: 0176: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0177:         ORA     (ESTKL,X)
        ORA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0178:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0179:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0180:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0181:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0182:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0183:         BNE     -
        BNE     -
; libsrc/apple/hgrtile.pla: 0184:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0185:         ORA     (ESTKL,X)
        ORA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0186:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0187:         INX
        INX
; libsrc/apple/hgrtile.pla: 0188:         INX
        INX
; libsrc/apple/hgrtile.pla: 0189:         INX
        INX
; libsrc/apple/hgrtile.pla: 0190:         RTS
        RTS
; libsrc/apple/hgrtile.pla: 0191: end
; libsrc/apple/hgrtile.pla: 0192: //export def tileAndDraw(x, y, tileptr)#0
; libsrc/apple/hgrtile.pla: 0193: //    var scrnptr
; libsrc/apple/hgrtile.pla: 0194: //    
; libsrc/apple/hgrtile.pla: 0195: //    scrnptr = (scanaddr[y] | drawbuff) + x
; libsrc/apple/hgrtile.pla: 0196: //    scrnptr->[$1C00] = tileptr->[7]
; libsrc/apple/hgrtile.pla: 0197: //    scrnptr->[$1800] = tileptr->[6]
; libsrc/apple/hgrtile.pla: 0198: //    scrnptr->[$1400] = tileptr->[5]
; libsrc/apple/hgrtile.pla: 0199: //    scrnptr->[$1000] = tileptr->[4]
; libsrc/apple/hgrtile.pla: 0200: //    scrnptr->[$0C00] = tileptr->[3]
; libsrc/apple/hgrtile.pla: 0201: //    scrnptr->[$0800] = tileptr->[2]
; libsrc/apple/hgrtile.pla: 0202: //    scrnptr->[$0400] = tileptr->[1]
; libsrc/apple/hgrtile.pla: 0203: //    scrnptr->[$0000] = tileptr->[0]
; libsrc/apple/hgrtile.pla: 0204: //end
; libsrc/apple/hgrtile.pla: 0205: export asm tileAndDraw(x, y, tileptr)#0
_A007 					; tileAndDraw()
; libsrc/apple/hgrtile.pla: 0206:         LDA     ESTKL+0,X   ; TILEPTRL
        LDA     ESTKL+0,X   ; TILEPTRL
; libsrc/apple/hgrtile.pla: 0207:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrtile.pla: 0208:         LDA     ESTKH+0,X   ; TILEPTRH
        LDA     ESTKH+0,X   ; TILEPTRH
; libsrc/apple/hgrtile.pla: 0209:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrtile.pla: 0210:         LDY     ESTKL+1,X   ; Y COORD
        LDY     ESTKL+1,X   ; Y COORD
; libsrc/apple/hgrtile.pla: 0211:         LDA     ESTKL+2,X   ; X COORD
        LDA     ESTKL+2,X   ; X COORD
; libsrc/apple/hgrtile.pla: 0212:         CLC
        CLC
; libsrc/apple/hgrtile.pla: 0213: end
; libsrc/apple/hgrtile.pla: 0214: asm     _tileADraw
_A008 					; _tileADraw()
; libsrc/apple/hgrtile.pla: 0215:         ADC     $1000,Y     ; SCANBTTML
        ADC     $1000,Y     ; SCANBTTML
; libsrc/apple/hgrtile.pla: 0216:         STA     ESTKL+0,X   ; USE ESTK AS POINTER
        STA     ESTKL+0,X   ; USE ESTK AS POINTER
; libsrc/apple/hgrtile.pla: 0217:         LDA     $3001       ; DRAWBUFFH
        LDA     $3001       ; DRAWBUFFH
; libsrc/apple/hgrtile.pla: 0218:         ADC     $2000,Y     ; SCANBTTMH
        ADC     $2000,Y     ; SCANBTTMH
; libsrc/apple/hgrtile.pla: 0219:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0220:         LDY     #$07        ; DRAW BOTTOM UP
        LDY     #$07        ; DRAW BOTTOM UP
; libsrc/apple/hgrtile.pla: 0221:         SEC
        SEC
; libsrc/apple/hgrtile.pla: 0222: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0223:         AND     (ESTKL,X)
        AND     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0224:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0225:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0226:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0227:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/hgrtile.pla: 0228:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0229:         BNE     -
        BNE     -
; libsrc/apple/hgrtile.pla: 0230:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0231:         AND     (ESTKL,X)
        AND     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0232:         STA     (ESTKL,X)
        STA     (ESTKL,X)
; libsrc/apple/hgrtile.pla: 0233:         INX
        INX
; libsrc/apple/hgrtile.pla: 0234:         INX
        INX
; libsrc/apple/hgrtile.pla: 0235:         INX
        INX
; libsrc/apple/hgrtile.pla: 0236:         RTS
        RTS
; libsrc/apple/hgrtile.pla: 0237: end
; libsrc/apple/hgrtile.pla: 0238: //export def tileDrawStr(x, y, strptr, strlen, tileset)#0
; libsrc/apple/hgrtile.pla: 0239: //    while strlen
; libsrc/apple/hgrtile.pla: 0240: //        tileDraw(x, y, tileset + ^strptr * 8)
; libsrc/apple/hgrtile.pla: 0241: //        x++
; libsrc/apple/hgrtile.pla: 0242: //        strptr++
; libsrc/apple/hgrtile.pla: 0243: //        strlen--
; libsrc/apple/hgrtile.pla: 0244: //    loop
; libsrc/apple/hgrtile.pla: 0245: //end
; libsrc/apple/hgrtile.pla: 0246: export asm tileDrawStr(x, y, strptr, strlen, tileset)#0
_A009 					; tileDrawStr()
; libsrc/apple/hgrtile.pla: 0247:         LDA     ESTKL+0,X   ; TILESETPTRL
        LDA     ESTKL+0,X   ; TILESETPTRL
; libsrc/apple/hgrtile.pla: 0248:         STA     DSTL
        STA     DSTL
; libsrc/apple/hgrtile.pla: 0249:         LDA     ESTKH+0,X   ; TILESETPTRH
        LDA     ESTKH+0,X   ; TILESETPTRH
; libsrc/apple/hgrtile.pla: 0250:         STA     DSTH
        STA     DSTH
; libsrc/apple/hgrtile.pla: 0251:         LDA     ESTKL+2,X   ; STRPTRL
        LDA     ESTKL+2,X   ; STRPTRL
; libsrc/apple/hgrtile.pla: 0252:         STA     TMPL
        STA     TMPL
; libsrc/apple/hgrtile.pla: 0253:         LDA     ESTKH+2,X   ; STRPTRH
        LDA     ESTKH+2,X   ; STRPTRH
; libsrc/apple/hgrtile.pla: 0254:         STA     TMPH
        STA     TMPH
; libsrc/apple/hgrtile.pla: 0255:         LDY     ESTKL+3,X   ; Y COORD
        LDY     ESTKL+3,X   ; Y COORD
; libsrc/apple/hgrtile.pla: 0256:         LDA     ESTKL+4,X   ; X COORD
        LDA     ESTKL+4,X   ; X COORD
; libsrc/apple/hgrtile.pla: 0257:         CLC
        CLC
; libsrc/apple/hgrtile.pla: 0258: end
; libsrc/apple/hgrtile.pla: 0259: asm     _tileDSa
_A010 					; _tileDSa()
; libsrc/apple/hgrtile.pla: 0260:         ADC     $1000,Y     ; SCANBTTML
        ADC     $1000,Y     ; SCANBTTML
; libsrc/apple/hgrtile.pla: 0261:         STA     $D000       ; SELF MODIFY LOOP
        STA     $D000       ; SELF MODIFY LOOP
; libsrc/apple/hgrtile.pla: 0262:         STA     $D001
        STA     $D001
; libsrc/apple/hgrtile.pla: 0263:         STA     $D002
        STA     $D002
; libsrc/apple/hgrtile.pla: 0264:         STA     $D003
        STA     $D003
; libsrc/apple/hgrtile.pla: 0265:         STA     $D004
        STA     $D004
; libsrc/apple/hgrtile.pla: 0266:         STA     $D005
        STA     $D005
; libsrc/apple/hgrtile.pla: 0267:         STA     $D006
        STA     $D006
; libsrc/apple/hgrtile.pla: 0268:         STA     $D007
        STA     $D007
; libsrc/apple/hgrtile.pla: 0269: end
; libsrc/apple/hgrtile.pla: 0270: asm     _tileDSb
_A011 					; _tileDSb()
; libsrc/apple/hgrtile.pla: 0271:         LDA     $3001       ; DRAWBUFFH
        LDA     $3001       ; DRAWBUFFH
; libsrc/apple/hgrtile.pla: 0272:         ADC     $2000,Y     ; SCANBTTMH
        ADC     $2000,Y     ; SCANBTTMH
; libsrc/apple/hgrtile.pla: 0273:         STA     $D008       ; SELF MODIFY LOOP
        STA     $D008       ; SELF MODIFY LOOP
; libsrc/apple/hgrtile.pla: 0274:         SEC
        SEC
; libsrc/apple/hgrtile.pla: 0275:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0276:         STA     $D009
        STA     $D009
; libsrc/apple/hgrtile.pla: 0277:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0278:         STA     $D00A
        STA     $D00A
; libsrc/apple/hgrtile.pla: 0279:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0280:         STA     $D00B
        STA     $D00B
; libsrc/apple/hgrtile.pla: 0281:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0282:         STA     $D00C
        STA     $D00C
; libsrc/apple/hgrtile.pla: 0283:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0284:         STA     $D00D
        STA     $D00D
; libsrc/apple/hgrtile.pla: 0285:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0286:         STA     $D00E
        STA     $D00E
; libsrc/apple/hgrtile.pla: 0287:         SBC     #$04
        SBC     #$04
; libsrc/apple/hgrtile.pla: 0288:         STA     $D00F
        STA     $D00F
; libsrc/apple/hgrtile.pla: 0289:         LDA     ESTKL+1,X   ; STRLEN
        LDA     ESTKL+1,X   ; STRLEN
; libsrc/apple/hgrtile.pla: 0290:         STX     IPY
        STX     IPY
; libsrc/apple/hgrtile.pla: 0291:         TAX                 ; DRAW RIGHT TO LEFT
        TAX                 ; DRAW RIGHT TO LEFT
; libsrc/apple/hgrtile.pla: 0292:         BEQ     +
        BEQ     +
; libsrc/apple/hgrtile.pla: 0293:         DEX
        DEX
; libsrc/apple/hgrtile.pla: 0294:         LDY     #$00
        LDY     #$00
; libsrc/apple/hgrtile.pla: 0295: -       STY     SRCH
-       STY     SRCH
; libsrc/apple/hgrtile.pla: 0296:         TXA
        TXA
; libsrc/apple/hgrtile.pla: 0297:         TAY
        TAY
; libsrc/apple/hgrtile.pla: 0298:         LDA     (TMP),Y     ; TILE INDEX * 8
        LDA     (TMP),Y     ; TILE INDEX * 8
; libsrc/apple/hgrtile.pla: 0299:         ASL
        ASL
; libsrc/apple/hgrtile.pla: 0300:         ROL     SRCH
        ROL     SRCH
; libsrc/apple/hgrtile.pla: 0301:         ASL
        ASL
; libsrc/apple/hgrtile.pla: 0302:         ROL     SRCH
        ROL     SRCH
; libsrc/apple/hgrtile.pla: 0303:         ASL
        ASL
; libsrc/apple/hgrtile.pla: 0304:         ROL     SRCH
        ROL     SRCH
; libsrc/apple/hgrtile.pla: 0305: ;        CLC                ; CARRY IS CLEAR FROM ABOVE
;        CLC                ; CARRY IS CLEAR FROM ABOVE
; libsrc/apple/hgrtile.pla: 0306:         ADC     DSTL        ; ADD TO TILESETPTR
        ADC     DSTL        ; ADD TO TILESETPTR
; libsrc/apple/hgrtile.pla: 0307:         STA     SRCL
        STA     SRCL
; libsrc/apple/hgrtile.pla: 0308:         LDA     SRCH
        LDA     SRCH
; libsrc/apple/hgrtile.pla: 0309:         ADC     DSTH
        ADC     DSTH
; libsrc/apple/hgrtile.pla: 0310:         STA     SRCH
        STA     SRCH
; libsrc/apple/hgrtile.pla: 0311:         LDY     #$07        ; DRAW BOTTOM UP
        LDY     #$07        ; DRAW BOTTOM UP
; libsrc/apple/hgrtile.pla: 0312: end
; libsrc/apple/hgrtile.pla: 0313: asm     _tileDSc
_A012 					; _tileDSc()
; libsrc/apple/hgrtile.pla: 0314:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0315:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0316:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0317:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0318:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0319:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0320:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0321:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0322:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0323:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0324:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0325:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0326:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0327:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0328:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0329:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0330:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0331:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0332:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0333:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0334:         DEY
        DEY
; libsrc/apple/hgrtile.pla: 0335:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/hgrtile.pla: 0336:         STA     $4000,X
        STA     $4000,X
; libsrc/apple/hgrtile.pla: 0337:         DEX
        DEX
; libsrc/apple/hgrtile.pla: 0338:         BPL     -
        BPL     -
; libsrc/apple/hgrtile.pla: 0339:         LDX     IPY
        LDX     IPY
; libsrc/apple/hgrtile.pla: 0340: +       INX
+       INX
; libsrc/apple/hgrtile.pla: 0341:         INX
        INX
; libsrc/apple/hgrtile.pla: 0342:         INX
        INX
; libsrc/apple/hgrtile.pla: 0343:         INX
        INX
; libsrc/apple/hgrtile.pla: 0344:         INX
        INX
; libsrc/apple/hgrtile.pla: 0345:         RTS
        RTS
; libsrc/apple/hgrtile.pla: 0346: end
; libsrc/apple/hgrtile.pla: 0347: export def tileFromText(txtpage, tileset)#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; txtpage -> [0]
					; tileset -> [2]
_C000 					; tileFromText()
; libsrc/apple/hgrtile.pla: 0348:     byte y
					; y -> [4]
; libsrc/apple/hgrtile.pla: 0349:     word txtptr
					; txtptr -> [5]
; libsrc/apple/hgrtile.pla: 0350:     
; libsrc/apple/hgrtile.pla: 0351:     txtptr = txtbuff[txtpage & 1]
	!BYTE	$58,$07,$02		; ENTER	7,2
; libsrc/apple/hgrtile.pla: 0352:     for y = 0 to 23
	!BYTE	$26			; LA	_D028+0
_F000 	!WORD	_D028+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$2A,$17			; CB	23
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6C,$04			; DLB	[4]
; libsrc/apple/hgrtile.pla: 0353:         tileDrawStr(0, y, rowaddr[y] | txtptr, 40, tileset)
; libsrc/apple/hgrtile.pla: 0354:     next        
	!BYTE	$00			; CN	0
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$26			; LA	_D030+0
_F001 	!WORD	_D030+0		
	!BYTE	$B8,$04			; IDXLB	[4]
	!BYTE	$62			; LW
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$96			; OR 
	!BYTE	$2A,$28			; CB	40
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_A009
_F002 	!WORD	_A009		
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/apple/hgrtile.pla: 0355: end
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/apple/hgrtile.pla: 0356: export def tileMode(mode)#1
					; mode -> [0]
_C001 					; tileMode()
; libsrc/apple/hgrtile.pla: 0357:     if mode
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrtile.pla: 0358:         //
; libsrc/apple/hgrtile.pla: 0359:         // Set HGR mode
; libsrc/apple/hgrtile.pla: 0360:         //
; libsrc/apple/hgrtile.pla: 0361:         memset(hgr1, 0, $2000) // Clear HGR page 1
; libsrc/apple/hgrtile.pla: 0362:         ^showpage1
; libsrc/apple/hgrtile.pla: 0363:         ^showfull
; libsrc/apple/hgrtile.pla: 0364:         ^showhires
; libsrc/apple/hgrtile.pla: 0365:         ^showgraphics
; libsrc/apple/hgrtile.pla: 0366:         drawpage = 0
; libsrc/apple/hgrtile.pla: 0367:         drawbuff = hgr1
; libsrc/apple/hgrtile.pla: 0368:         return 0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$00			; CN	0
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X017
_F003 	!WORD	0		
	!BYTE	$68,$54,$C0		; LAB	49236
	!BYTE	$30			; DROP 
	!BYTE	$68,$52,$C0		; LAB	49234
	!BYTE	$30			; DROP 
	!BYTE	$68,$57,$C0		; LAB	49239
	!BYTE	$30			; DROP 
	!BYTE	$68,$50,$C0		; LAB	49232
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D035+0
_F004 	!WORD	_D035+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$7A			; SAW	_D036+0
_F005 	!WORD	_D036+0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrtile.pla: 0369:     fin
_B004 
_B005 
; libsrc/apple/hgrtile.pla: 0370:     //
; libsrc/apple/hgrtile.pla: 0371:     // Show text mode
; libsrc/apple/hgrtile.pla: 0372:     //
; libsrc/apple/hgrtile.pla: 0373:     ^showpage1
; libsrc/apple/hgrtile.pla: 0374:     ^showtext
; libsrc/apple/hgrtile.pla: 0375:     return 0
	!BYTE	$68,$54,$C0		; LAB	49236
	!BYTE	$30			; DROP 
	!BYTE	$68,$51,$C0		; LAB	49233
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrtile.pla: 0376: end
; libsrc/apple/hgrtile.pla: 0377: export def tileClear#0
_C002 					; tileClear()
; libsrc/apple/hgrtile.pla: 0378:     memset(drawbuff, $0000, drawbuff) // Clear current HGR page
; libsrc/apple/hgrtile.pla: 0379: end
	!BYTE	$6A			; LAW	_D036+0
_F006 	!WORD	_D036+0		
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D036+0
_F007 	!WORD	_D036+0		
	!BYTE	$54			; CALL	_X017
_F008 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/hgrtile.pla: 0380: //
; libsrc/apple/hgrtile.pla: 0381: // Set display page, return other page
; libsrc/apple/hgrtile.pla: 0382: //
; libsrc/apple/hgrtile.pla: 0383: export def tileShow(page)#1
					; page -> [0]
_C003 					; tileShow()
; libsrc/apple/hgrtile.pla: 0384:     page = page & 1
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrtile.pla: 0385:     ^(showpage1 + page)
; libsrc/apple/hgrtile.pla: 0386:     return page ^ 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$2C,$54,$C0		; CW	49236
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$02			; CN	1
	!BYTE	$98			; XOR
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrtile.pla: 0387: end
; libsrc/apple/hgrtile.pla: 0388: export def tileSwap#1
_C004 					; tileSwap()
; libsrc/apple/hgrtile.pla: 0389:     ^(showpage1 + drawpage)
; libsrc/apple/hgrtile.pla: 0390:     drawpage = drawpage ^ 1
; libsrc/apple/hgrtile.pla: 0391:     drawbuff = hgrbuff[drawpage]
; libsrc/apple/hgrtile.pla: 0392:     return drawpage
	!BYTE	$2C,$54,$C0		; CW	49236
	!BYTE	$B4			; ADDAB	_D035+0
_F009 	!WORD	_D035+0		
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D035+0
_F010 	!WORD	_D035+0		
	!BYTE	$02			; CN	1
	!BYTE	$98			; XOR
	!BYTE	$78			; SAB	_D035+0
_F011 	!WORD	_D035+0		
	!BYTE	$26			; LA	_D029+0
_F012 	!WORD	_D029+0		
	!BYTE	$BC			; IDXAB	_D035+0
_F013 	!WORD	_D035+0		
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D036+0
_F014 	!WORD	_D036+0		
	!BYTE	$68			; LAB	_D035+0
_F015 	!WORD	_D035+0		
	!BYTE	$5C			; RET
; libsrc/apple/hgrtile.pla: 0393: end
; libsrc/apple/hgrtile.pla: 0394: export def tileDrawBuf(page)#1
					; page -> [0]
_C005 					; tileDrawBuf()
; libsrc/apple/hgrtile.pla: 0395:     drawpage = page & 1
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/hgrtile.pla: 0396:     drawbuff = hgrbuff[drawpage]
; libsrc/apple/hgrtile.pla: 0397:     return drawpage
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$78			; SAB	_D035+0
_F016 	!WORD	_D035+0		
	!BYTE	$26			; LA	_D029+0
_F017 	!WORD	_D029+0		
	!BYTE	$BC			; IDXAB	_D035+0
_F018 	!WORD	_D035+0		
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D036+0
_F019 	!WORD	_D036+0		
	!BYTE	$68			; LAB	_D035+0
_F020 	!WORD	_D035+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/hgrtile.pla: 0398: end
; libsrc/apple/hgrtile.pla: 0399: //
; libsrc/apple/hgrtile.pla: 0400: // Assembly fixups
; libsrc/apple/hgrtile.pla: 0401: //
; libsrc/apple/hgrtile.pla: 0402: _tileDraw:1  = @scanbttml
_INIT 
; libsrc/apple/hgrtile.pla: 0403: _tileDraw:6  = @drawbuff.1
; libsrc/apple/hgrtile.pla: 0404: _tileDraw:9  = @scanbttmh
; libsrc/apple/hgrtile.pla: 0405: _tileXDraw:1 = @scanbttml
; libsrc/apple/hgrtile.pla: 0406: _tileXDraw:6 = @drawbuff.1
; libsrc/apple/hgrtile.pla: 0407: _tileXDraw:9 = @scanbttmh
; libsrc/apple/hgrtile.pla: 0408: _tileODraw:1 = @scanbttml
; libsrc/apple/hgrtile.pla: 0409: _tileODraw:6 = @drawbuff.1
; libsrc/apple/hgrtile.pla: 0410: _tileODraw:9 = @scanbttmh
; libsrc/apple/hgrtile.pla: 0411: _tileADraw:1 = @scanbttml
; libsrc/apple/hgrtile.pla: 0412: _tileADraw:6 = @drawbuff.1
; libsrc/apple/hgrtile.pla: 0413: _tileADraw:9 = @scanbttmh
; libsrc/apple/hgrtile.pla: 0414: _tileDSa:1   = @scanbttml
; libsrc/apple/hgrtile.pla: 0415: _tileDSa:4   = @_tileDSc.3
; libsrc/apple/hgrtile.pla: 0416: _tileDSa:7   = @_tileDSc.9
; libsrc/apple/hgrtile.pla: 0417: _tileDSa:10  = @_tileDSc.15
; libsrc/apple/hgrtile.pla: 0418: _tileDSa:13  = @_tileDSc.21
; libsrc/apple/hgrtile.pla: 0419: _tileDSa:16  = @_tileDSc.27
; libsrc/apple/hgrtile.pla: 0420: _tileDSa:19  = @_tileDSc.33
; libsrc/apple/hgrtile.pla: 0421: _tileDSa:22  = @_tileDSc.39
; libsrc/apple/hgrtile.pla: 0422: _tileDSa:25  = @_tileDSc.45
; libsrc/apple/hgrtile.pla: 0423: _tileDSa:28  = @_tileDSc.51
; libsrc/apple/hgrtile.pla: 0424: _tileDSb:1   = @drawbuff.1
; libsrc/apple/hgrtile.pla: 0425: _tileDSb:4   = @scanbttmh
; libsrc/apple/hgrtile.pla: 0426: _tileDSb:7   = @_tileDSc.4
; libsrc/apple/hgrtile.pla: 0427: _tileDSb:13  = @_tileDSc.10
; libsrc/apple/hgrtile.pla: 0428: _tileDSb:18  = @_tileDSc.16
; libsrc/apple/hgrtile.pla: 0429: _tileDSb:23  = @_tileDSc.22
; libsrc/apple/hgrtile.pla: 0430: _tileDSb:28  = @_tileDSc.28
; libsrc/apple/hgrtile.pla: 0431: _tileDSb:33  = @_tileDSc.34
; libsrc/apple/hgrtile.pla: 0432: _tileDSb:38  = @_tileDSc.40
; libsrc/apple/hgrtile.pla: 0433: _tileDSb:43  = @_tileDSc.46
; libsrc/apple/hgrtile.pla: 0434: done
	!BYTE	$26			; LA	_D031+0
_F021 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A002+1
_F022 	!WORD	_A002+1		
	!BYTE	$26			; LA	_D036+1
_F023 	!WORD	_D036+1		
	!BYTE	$7A			; SAW	_A002+6
_F024 	!WORD	_A002+6		
	!BYTE	$26			; LA	_D032+0
_F025 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A002+9
_F026 	!WORD	_A002+9		
	!BYTE	$26			; LA	_D031+0
_F027 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A004+1
_F028 	!WORD	_A004+1		
	!BYTE	$26			; LA	_D036+1
_F029 	!WORD	_D036+1		
	!BYTE	$7A			; SAW	_A004+6
_F030 	!WORD	_A004+6		
	!BYTE	$26			; LA	_D032+0
_F031 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A004+9
_F032 	!WORD	_A004+9		
	!BYTE	$26			; LA	_D031+0
_F033 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A006+1
_F034 	!WORD	_A006+1		
	!BYTE	$26			; LA	_D036+1
_F035 	!WORD	_D036+1		
	!BYTE	$7A			; SAW	_A006+6
_F036 	!WORD	_A006+6		
	!BYTE	$26			; LA	_D032+0
_F037 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A006+9
_F038 	!WORD	_A006+9		
	!BYTE	$26			; LA	_D031+0
_F039 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A008+1
_F040 	!WORD	_A008+1		
	!BYTE	$26			; LA	_D036+1
_F041 	!WORD	_D036+1		
	!BYTE	$7A			; SAW	_A008+6
_F042 	!WORD	_A008+6		
	!BYTE	$26			; LA	_D032+0
_F043 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A008+9
_F044 	!WORD	_A008+9		
	!BYTE	$26			; LA	_D031+0
_F045 	!WORD	_D031+0		
	!BYTE	$7A			; SAW	_A010+1
_F046 	!WORD	_A010+1		
	!BYTE	$26			; LA	_A012+3
_F047 	!WORD	_A012+3		
	!BYTE	$7A			; SAW	_A010+4
_F048 	!WORD	_A010+4		
	!BYTE	$26			; LA	_A012+9
_F049 	!WORD	_A012+9		
	!BYTE	$7A			; SAW	_A010+7
_F050 	!WORD	_A010+7		
	!BYTE	$26			; LA	_A012+15
_F051 	!WORD	_A012+15		
	!BYTE	$7A			; SAW	_A010+10
_F052 	!WORD	_A010+10		
	!BYTE	$26			; LA	_A012+21
_F053 	!WORD	_A012+21		
	!BYTE	$7A			; SAW	_A010+13
_F054 	!WORD	_A010+13		
	!BYTE	$26			; LA	_A012+27
_F055 	!WORD	_A012+27		
	!BYTE	$7A			; SAW	_A010+16
_F056 	!WORD	_A010+16		
	!BYTE	$26			; LA	_A012+33
_F057 	!WORD	_A012+33		
	!BYTE	$7A			; SAW	_A010+19
_F058 	!WORD	_A010+19		
	!BYTE	$26			; LA	_A012+39
_F059 	!WORD	_A012+39		
	!BYTE	$7A			; SAW	_A010+22
_F060 	!WORD	_A010+22		
	!BYTE	$26			; LA	_A012+45
_F061 	!WORD	_A012+45		
	!BYTE	$7A			; SAW	_A010+25
_F062 	!WORD	_A010+25		
	!BYTE	$26			; LA	_A012+51
_F063 	!WORD	_A012+51		
	!BYTE	$7A			; SAW	_A010+28
_F064 	!WORD	_A010+28		
	!BYTE	$26			; LA	_D036+1
_F065 	!WORD	_D036+1		
	!BYTE	$7A			; SAW	_A011+1
_F066 	!WORD	_A011+1		
	!BYTE	$26			; LA	_D032+0
_F067 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_A011+4
_F068 	!WORD	_A011+4		
	!BYTE	$26			; LA	_A012+4
_F069 	!WORD	_A012+4		
	!BYTE	$7A			; SAW	_A011+7
_F070 	!WORD	_A011+7		
	!BYTE	$26			; LA	_A012+10
_F071 	!WORD	_A012+10		
	!BYTE	$7A			; SAW	_A011+13
_F072 	!WORD	_A011+13		
	!BYTE	$26			; LA	_A012+16
_F073 	!WORD	_A012+16		
	!BYTE	$7A			; SAW	_A011+18
_F074 	!WORD	_A011+18		
	!BYTE	$26			; LA	_A012+22
_F075 	!WORD	_A012+22		
	!BYTE	$7A			; SAW	_A011+23
_F076 	!WORD	_A011+23		
	!BYTE	$26			; LA	_A012+28
_F077 	!WORD	_A012+28		
	!BYTE	$7A			; SAW	_A011+28
_F078 	!WORD	_A011+28		
	!BYTE	$26			; LA	_A012+34
_F079 	!WORD	_A012+34		
	!BYTE	$7A			; SAW	_A011+33
_F080 	!WORD	_A011+33		
	!BYTE	$26			; LA	_A012+40
_F081 	!WORD	_A012+40		
	!BYTE	$7A			; SAW	_A011+38
_F082 	!WORD	_A011+38		
	!BYTE	$26			; LA	_A012+46
_F083 	!WORD	_A012+46		
	!BYTE	$7A			; SAW	_A011+43
_F084 	!WORD	_A011+43		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: MEMSET
	!BYTE	$CD,$C5,$CD,$D3,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	17			; ESD INDEX
	; DCI STRING: TILEDRAW
	!BYTE	$D4,$C9,$CC,$C5,$C4,$D2,$C1,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A001		
	; DCI STRING: TILEXORDRAW
	!BYTE	$D4,$C9,$CC,$C5,$D8,$CF,$D2,$C4,$D2,$C1,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A003		
	; DCI STRING: TILEORDRAW
	!BYTE	$D4,$C9,$CC,$C5,$CF,$D2,$C4,$D2,$C1,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A005		
	; DCI STRING: TILEANDDRAW
	!BYTE	$D4,$C9,$CC,$C5,$C1,$CE,$C4,$C4,$D2,$C1,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A007		
	; DCI STRING: TILEDRAWSTR
	!BYTE	$D4,$C9,$CC,$C5,$C4,$D2,$C1,$D7,$D3,$D4,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A009		
	; DCI STRING: TILEFROMTEXT
	!BYTE	$D4,$C9,$CC,$C5,$C6,$D2,$CF,$CD,$D4,$C5,$D8,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: TILEMODE
	!BYTE	$D4,$C9,$CC,$C5,$CD,$CF,$C4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: TILECLEAR
	!BYTE	$D4,$C9,$CC,$C5,$C3,$CC,$C5,$C1,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: TILESHOW
	!BYTE	$D4,$C9,$CC,$C5,$D3,$C8,$CF,$57
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: TILESWAP
	!BYTE	$D4,$C9,$CC,$C5,$D3,$D7,$C1,$50
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: TILEDRAWBUF
	!BYTE	$D4,$C9,$CC,$C5,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	!BYTE	$00			; END OF ESD
