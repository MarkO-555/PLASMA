; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/jit.pla: 0001: //
; libsrc/apple/jit.pla: 0002: // PLASMA JIT bytecode compiler
; libsrc/apple/jit.pla: 0003: //
; libsrc/apple/jit.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/jit.pla: 0004: 
; libsrc/apple/jit.pla: 0005: //
; libsrc/apple/jit.pla: 0006: // Indirect interpreter DEFinition entrypoint
; libsrc/apple/jit.pla: 0007: //
; libsrc/apple/jit.pla: 0008: struc t_defentry
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/apple/jit.pla: 0009:     byte interpjsr
					; interpjsr = 0
; libsrc/apple/jit.pla: 0010:     word interpaddr
					; interpaddr = 1
; libsrc/apple/jit.pla: 0011:     word bytecodeaddr
					; bytecodeaddr = 3
; libsrc/apple/jit.pla: 0012:     byte callcount
					; callcount = 5
; libsrc/apple/jit.pla: 0013:     byte bytecodesize
					; bytecodesize = 6
; libsrc/apple/jit.pla: 0014: end
					; t_defentry = 7
; libsrc/apple/jit.pla: 0015: //
; libsrc/apple/jit.pla: 0016: // JIT compiler constants
; libsrc/apple/jit.pla: 0017: //
; libsrc/apple/jit.pla: 0018: const jitcomp     = $03E2
					; jitcomp = 994
; libsrc/apple/jit.pla: 0019: const jitcodeptr  = $03E4
					; jitcodeptr = 996
; libsrc/apple/jit.pla: 0020: const codemax     = $BEE0
					; codemax = 48864
; libsrc/apple/jit.pla: 0021: const estkh8      = $C000
					; estkh8 = 49152
; libsrc/apple/jit.pla: 0022: const estkh       = $00C0
					; estkh = 192
; libsrc/apple/jit.pla: 0023: const estkl8      = $D000
					; estkl8 = 53248
; libsrc/apple/jit.pla: 0024: const estkl       = $00D0
					; estkl = 208
; libsrc/apple/jit.pla: 0025: const ifpl8       = $E000
					; ifpl8 = 57344
; libsrc/apple/jit.pla: 0026: const ifph8       = $E100
					; ifph8 = 57600
; libsrc/apple/jit.pla: 0027: const jmptmp      = $00E6
					; jmptmp = 230
; libsrc/apple/jit.pla: 0028: const tmpl8       = $E700
					; tmpl8 = 59136
; libsrc/apple/jit.pla: 0029: const tmph8       = $E800
					; tmph8 = 59392
; libsrc/apple/jit.pla: 0030: //
; libsrc/apple/jit.pla: 0031: // Bytecode interpreter entrypoints
; libsrc/apple/jit.pla: 0032: //
; libsrc/apple/jit.pla: 0033: const indirectentry = $03DC
					; indirectentry = 988
; libsrc/apple/jit.pla: 0034: const directentry   = $03D0
					; directentry = 976
; libsrc/apple/jit.pla: 0035: //
; libsrc/apple/jit.pla: 0036: // Copy bytecode DEF to main memory
; libsrc/apple/jit.pla: 0037: //
; libsrc/apple/jit.pla: 0038: def defcpy(dst, defptr)#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; dst -> [0]
					; defptr -> [2]
_C000 					; defcpy()
; libsrc/apple/jit.pla: 0039:     *$003C   = defptr=>bytecodeaddr
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/jit.pla: 0040:     *$003E   = *$003C + defptr->bytecodesize
; libsrc/apple/jit.pla: 0041:     *$0042   = dst
; libsrc/apple/jit.pla: 0042:     call($C311, 0, 0, 0, $04) // CALL XMOVE with carry clear (AUX->MAIN) and ints disabled
; libsrc/apple/jit.pla: 0043: end
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$62			; LW
	!BYTE	$7E,$3C,$00		; DAW	60
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$7A,$3E,$00		; SAW	62
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A,$42,$00		; SAW	66
	!BYTE	$2C,$11,$C3		; CW	49937
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F000 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/jit.pla: 0044: include "libsrc/jitcore.pla"
; libsrc/jitcore.pla: 0001: //
; libsrc/jitcore.pla: 0002: // TOS caching values
; libsrc/jitcore.pla: 0003: //
; libsrc/jitcore.pla: 0004: const TOS_DIRTY   = 1
					; TOS_DIRTY = 1
; libsrc/jitcore.pla: 0005: const TOS_CLEAN   = 2
					; TOS_CLEAN = 2
; libsrc/jitcore.pla: 0006: //
; libsrc/jitcore.pla: 0007: // Y unknown value
; libsrc/jitcore.pla: 0008: //
; libsrc/jitcore.pla: 0009: const UNKNOWN     = -1
					; UNKNOWN = -1
; libsrc/jitcore.pla: 0010: //
; libsrc/jitcore.pla: 0011: // Resolve virtual X with real X
; libsrc/jitcore.pla: 0012: //
; libsrc/jitcore.pla: 0013: def resolveX(codeptr, VX)#2
					; codeptr -> [0]
					; VX -> [2]
_C001 					; resolveX()
; libsrc/jitcore.pla: 0014:     while VX > 0
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; libsrc/jitcore.pla: 0015:         ^codeptr = $E8; codeptr++ // INX
	!BYTE	$2A,$E8			; CB	232
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0016:         VX--
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0017:     loop
	!BYTE	$76,$02			; SLW	[2]
_B003 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; libsrc/jitcore.pla: 0018:     while VX < 0
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B004 
; libsrc/jitcore.pla: 0019:         ^codeptr = $CA; codeptr++ // DEX
	!BYTE	$2A,$CA			; CB	202
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0020:         VX++
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0021:     loop
	!BYTE	$76,$02			; SLW	[2]
_B006 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B004
	!WORD	_B004-*
_B005 
; libsrc/jitcore.pla: 0022:     return codeptr, 0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/jitcore.pla: 0023: end
; libsrc/jitcore.pla: 0024: //
; libsrc/jitcore.pla: 0025: // JIT compiler entry
; libsrc/jitcore.pla: 0026: //
; libsrc/jitcore.pla: 0027: def compiler(defptr)#0
					; defptr -> [0]
_C002 					; compiler()
; libsrc/jitcore.pla: 0028:     word codeptr, isdata[], addrxlate, bytecode, i, case, dest, VX, VY
					; codeptr -> [2]
					; isdata -> [4]
					; addrxlate -> [4]
					; bytecode -> [6]
					; i -> [8]
					; case -> [10]
					; dest -> [12]
					; VX -> [14]
					; VY -> [16]
; libsrc/jitcore.pla: 0029:     byte opcode, j, A_IS_TOSL
					; opcode -> [18]
					; j -> [19]
					; A_IS_TOSL -> [20]
; libsrc/jitcore.pla: 0030: 
; libsrc/jitcore.pla: 0031:     defptr=>interpaddr = indirectentry // assume compile will fail
	!BYTE	$58,$15,$01		; ENTER	21,1
; libsrc/jitcore.pla: 0032:     addrxlate = heapmark // heapalloc(512 + defptr->bytecodesize)
; libsrc/jitcore.pla: 0033:     if isult(heapavail, 512 + defptr->bytecodesize) // 256 * sizeof(word) address xlate
; libsrc/jitcore.pla: 0034:         //
; libsrc/jitcore.pla: 0035:         // Not enough heap available
; libsrc/jitcore.pla: 0036:         //
; libsrc/jitcore.pla: 0037:         //puts("Not enough free heap\n")
; libsrc/jitcore.pla: 0038:         return
	!BYTE	$2C,$DC,$03		; CW	988
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$54			; CALL	_X012
_F001 	!WORD	0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$54			; CALL	_X016
_F002 	!WORD	0		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X026
_F003 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$5A,$15			; LEAVE	21
; libsrc/jitcore.pla: 0039:     fin
_B007 
_B008 
; libsrc/jitcore.pla: 0040:     //
; libsrc/jitcore.pla: 0041:     // Copy bytecode def from AUX to heap for compiling
; libsrc/jitcore.pla: 0042:     //
; libsrc/jitcore.pla: 0043:     bytecode = addrxlate + 512 // def bytecode
; libsrc/jitcore.pla: 0044:     defcpy(bytecode, defptr)
; libsrc/jitcore.pla: 0045:     //puts("JITC:$"); puth(defptr=>bytecodeaddr); puts("=>$"); puth(bytecode)
; libsrc/jitcore.pla: 0046:     //puts(",$"); puth(defptr->bytecodesize); putln
; libsrc/jitcore.pla: 0047:     //
; libsrc/jitcore.pla: 0048:     // Find all branch targets and optimization fences. Tag the opcode with the LSB set
; libsrc/jitcore.pla: 0049:     //
; libsrc/jitcore.pla: 0050:     // All PLASMA ops are even (LSB clear), so this will flag when to fence optimizations
; libsrc/jitcore.pla: 0051:     // During compiling.
; libsrc/jitcore.pla: 0052:     //
; libsrc/jitcore.pla: 0053:     //isdata = addrxlate     // Use this buffer
; libsrc/jitcore.pla: 0054:     memset(isdata, 0, 256) // Clear isdata buffer
; libsrc/jitcore.pla: 0055:     i = 0
; libsrc/jitcore.pla: 0056:     while i < defptr->bytecodesize
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$82			; ADD 
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C000
_F004 	!WORD	_C000		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$00			; CN	0
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$54			; CALL	_X017
_F005 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
_B009 
; libsrc/jitcore.pla: 0057:         if not ^(isdata+i)
; libsrc/jitcore.pla: 0058:             //puth(bytecode+i); putc(':'); putb(^(bytecode+i) & $FE); putln; getc
; libsrc/jitcore.pla: 0059:             when ^(bytecode+i) & $FE
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B012
	!WORD	_B012-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$3C,$FE			; ANDI	254
	!BYTE	$52			; SEL
	!WORD	_B015-*
; libsrc/jitcore.pla: 0060:                 //
; libsrc/jitcore.pla: 0061:                 // Double byte operands
; libsrc/jitcore.pla: 0062:                 //
; libsrc/jitcore.pla: 0063:                 is $26 // LA
_B016 
; libsrc/jitcore.pla: 0064:                 is $2C // CW
_B017 
; libsrc/jitcore.pla: 0065:                 is $54 // CALL
_B018 
; libsrc/jitcore.pla: 0066:                 is $58 // ENTER
_B019 
; libsrc/jitcore.pla: 0067:                 is $68 // LAB
_B020 
; libsrc/jitcore.pla: 0068:                 is $6A // LAW
_B021 
; libsrc/jitcore.pla: 0069:                 is $78 // SAB
_B022 
; libsrc/jitcore.pla: 0070:                 is $7A // SAW
_B023 
; libsrc/jitcore.pla: 0071:                 is $7C // DAB
_B024 
; libsrc/jitcore.pla: 0072:                 is $7E // DAW
_B025 
; libsrc/jitcore.pla: 0073:                 is $B4 // ADDAB
_B026 
; libsrc/jitcore.pla: 0074:                 is $B6 // ADDAW
_B027 
; libsrc/jitcore.pla: 0075:                 is $BC // IDXAB
_B028 
; libsrc/jitcore.pla: 0076:                 is $BE // IDXAW
_B029 
; libsrc/jitcore.pla: 0077:                     i = i + 2
; libsrc/jitcore.pla: 0078:                     break
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
; libsrc/jitcore.pla: 0079:                 //
; libsrc/jitcore.pla: 0080:                 // Multi-byte operands
; libsrc/jitcore.pla: 0081:                 //
; libsrc/jitcore.pla: 0082:                 is $2E // CS
_B030 
; libsrc/jitcore.pla: 0083:                     i = i + ^(bytecode+i+1)
; libsrc/jitcore.pla: 0084:                 //
; libsrc/jitcore.pla: 0085:                 // Single byte operands
; libsrc/jitcore.pla: 0086:                 //
; libsrc/jitcore.pla: 0087:                 is $2A // CB
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$76,$08			; SLW	[8]
_B031 
; libsrc/jitcore.pla: 0088:                 is $28 // LLA
_B032 
; libsrc/jitcore.pla: 0089:                 is $38 // ADDI
_B033 
; libsrc/jitcore.pla: 0090:                 is $3A // SUBI
_B034 
; libsrc/jitcore.pla: 0091:                 is $3C // ANDI
_B035 
; libsrc/jitcore.pla: 0092:                 is $3E // ORI
_B036 
; libsrc/jitcore.pla: 0093:                 is $5A // LEAVE
_B037 
; libsrc/jitcore.pla: 0094:                 is $5E // CFFB
_B038 
; libsrc/jitcore.pla: 0095:                 is $64 // LLB
_B039 
; libsrc/jitcore.pla: 0096:                 is $66 // LLW
_B040 
; libsrc/jitcore.pla: 0097:                 is $6C // DLB
_B041 
; libsrc/jitcore.pla: 0098:                 is $6E // DLW
_B042 
; libsrc/jitcore.pla: 0099:                 is $74 // SLB
_B043 
; libsrc/jitcore.pla: 0100:                 is $76 // SLW
_B044 
; libsrc/jitcore.pla: 0101:                 is $B0 // ADDLB
_B045 
; libsrc/jitcore.pla: 0102:                 is $B2 // ADDLW
_B046 
; libsrc/jitcore.pla: 0103:                 is $B8 // IDXLB
_B047 
; libsrc/jitcore.pla: 0104:                 is $BA // IDXLW
_B048 
; libsrc/jitcore.pla: 0105:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0106:                     break
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
; libsrc/jitcore.pla: 0107:                 //
; libsrc/jitcore.pla: 0108:                 // Branches
; libsrc/jitcore.pla: 0109:                 //
; libsrc/jitcore.pla: 0110:                 is $50 // BRNCH
_B049 
; libsrc/jitcore.pla: 0111:                 is $22 // BREQ
_B050 
; libsrc/jitcore.pla: 0112:                 is $24 // BRNE
_B051 
; libsrc/jitcore.pla: 0113:                 is $4C // BRFLS
_B052 
; libsrc/jitcore.pla: 0114:                 is $4E // BRTRU
_B053 
; libsrc/jitcore.pla: 0115:                 is $A0 // BRGT
_B054 
; libsrc/jitcore.pla: 0116:                 is $A2 // BRLT
_B055 
; libsrc/jitcore.pla: 0117:                 is $A4 // INCBRLE
_B056 
; libsrc/jitcore.pla: 0118:                 is $A6 // ADDBRLE
_B057 
; libsrc/jitcore.pla: 0119:                 is $A8 // DECBRGE
_B058 
; libsrc/jitcore.pla: 0120:                 is $AA // SUBBRGE
_B059 
; libsrc/jitcore.pla: 0121:                 is $AC // BRAND
_B060 
; libsrc/jitcore.pla: 0122:                 is $AE // BROR
_B061 
; libsrc/jitcore.pla: 0123:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0124:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 0125:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0126:                     ^(bytecode+dest) = ^(bytecode+dest) | 1 // Flag as branch dest
; libsrc/jitcore.pla: 0127:                     break
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0C			; ADDLW	[12]
	!BYTE	$60			; LB
	!BYTE	$3E,$01			; ORI	1
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0C			; ADDLW	[12]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
; libsrc/jitcore.pla: 0128:                 //
; libsrc/jitcore.pla: 0129:                 // SELect/caseblock
; libsrc/jitcore.pla: 0130:                 //
; libsrc/jitcore.pla: 0131:                 is $52 // SEL
_B062 
; libsrc/jitcore.pla: 0132:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0133:                     case = i + *(bytecode+i)
; libsrc/jitcore.pla: 0134:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0135:                     ^(isdata+case) = TRUE // Flag as data
; libsrc/jitcore.pla: 0136:                     j = ^(bytecode+case)
; libsrc/jitcore.pla: 0137:                     case++
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$20			; MINUS ONE
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$70			; SB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0138:                     repeat
	!BYTE	$76,$0A			; SLW	[10]
_B064 
; libsrc/jitcore.pla: 0139:                         *(isdata+case)   = TRUE // Flag as data
; libsrc/jitcore.pla: 0140:                         case             = case + 2
; libsrc/jitcore.pla: 0141:                         dest             = case + *(bytecode+case)
; libsrc/jitcore.pla: 0142:                         ^(bytecode+dest) = ^(bytecode+dest) | 1 // Flag as branch dest
; libsrc/jitcore.pla: 0143:                         *(isdata+case)   = TRUE // Flag as data
; libsrc/jitcore.pla: 0144:                         case             = case + 2
; libsrc/jitcore.pla: 0145:                         j--
	!BYTE	$20			; MINUS ONE
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$72			; SW
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0C			; ADDLW	[12]
	!BYTE	$60			; LB
	!BYTE	$3E,$01			; ORI	1
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0C			; ADDLW	[12]
	!BYTE	$70			; SB
	!BYTE	$20			; MINUS ONE
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$72			; SW
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0146:                     until not j
	!BYTE	$74,$13			; SLB	[19]
_B065 
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$4E			; BRTRU	_B064
	!WORD	_B064-*
_B063 
; libsrc/jitcore.pla: 0147:                     break
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
; libsrc/jitcore.pla: 0148:             wend
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B015 
	!BYTE	$2F			; CASEBLOCK
	!WORD	$0022
	!WORD	_B050-*
	!WORD	$0024
	!WORD	_B051-*
	!WORD	$0026
	!WORD	_B016-*
	!WORD	$0028
	!WORD	_B032-*
	!WORD	$002A
	!WORD	_B031-*
	!WORD	$002C
	!WORD	_B017-*
	!WORD	$002E
	!WORD	_B030-*
	!WORD	$0038
	!WORD	_B033-*
	!WORD	$003A
	!WORD	_B034-*
	!WORD	$003C
	!WORD	_B035-*
	!WORD	$003E
	!WORD	_B036-*
	!WORD	$004C
	!WORD	_B052-*
	!WORD	$004E
	!WORD	_B053-*
	!WORD	$0050
	!WORD	_B049-*
	!WORD	$0052
	!WORD	_B062-*
	!WORD	$0054
	!WORD	_B018-*
	!WORD	$0058
	!WORD	_B019-*
	!WORD	$005A
	!WORD	_B037-*
	!WORD	$005E
	!WORD	_B038-*
	!WORD	$0064
	!WORD	_B039-*
	!WORD	$0066
	!WORD	_B040-*
	!WORD	$0068
	!WORD	_B020-*
	!WORD	$006A
	!WORD	_B021-*
	!WORD	$006C
	!WORD	_B041-*
	!WORD	$006E
	!WORD	_B042-*
	!WORD	$0074
	!WORD	_B043-*
	!WORD	$0076
	!WORD	_B044-*
	!WORD	$0078
	!WORD	_B022-*
	!WORD	$007A
	!WORD	_B023-*
	!WORD	$007C
	!WORD	_B024-*
	!WORD	$007E
	!WORD	_B025-*
	!WORD	$00A0
	!WORD	_B054-*
	!WORD	$00A2
	!WORD	_B055-*
	!WORD	$00A4
	!WORD	_B056-*
	!WORD	$00A6
	!WORD	_B057-*
	!WORD	$00A8
	!WORD	_B058-*
	!WORD	$00AA
	!WORD	_B059-*
	!WORD	$00AC
	!WORD	_B060-*
	!WORD	$00AE
	!WORD	_B061-*
	!WORD	$00B0
	!WORD	_B045-*
	!WORD	$00B2
	!WORD	_B046-*
	!WORD	$00B4
	!WORD	_B026-*
	!WORD	$00B6
	!WORD	_B027-*
	!WORD	$00B8
	!WORD	_B047-*
	!WORD	$00BA
	!WORD	_B048-*
	!WORD	$00BC
	!WORD	_B028-*
	!WORD	$00BE
	!WORD	_B029-*
_B014 
; libsrc/jitcore.pla: 0149:         fin
_B012 
_B013 
; libsrc/jitcore.pla: 0150:         i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0151:     loop
	!BYTE	$76,$08			; SLW	[8]
_B011 
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B009
	!WORD	_B009-*
_B010 
; libsrc/jitcore.pla: 0152:     //
; libsrc/jitcore.pla: 0153:     // Compile the bytecodes
; libsrc/jitcore.pla: 0154:     //
; libsrc/jitcore.pla: 0155:     memset(addrxlate, 0, 512) // Clear xlate buffer
; libsrc/jitcore.pla: 0156:     //puts("Bytecode:   $"); puth(bytecode); putln; getc
; libsrc/jitcore.pla: 0157:     codeptr   = *jitcodeptr
; libsrc/jitcore.pla: 0158:     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0159:     VY        = UNKNOWN // Virtual Y register
; libsrc/jitcore.pla: 0160:     VX        = 0       // Virtual X register
; libsrc/jitcore.pla: 0161:     i         = 0
; libsrc/jitcore.pla: 0162:     if ^bytecode == $58
; libsrc/jitcore.pla: 0163:         //putc('$'); puth(codeptr);//puts(":[0] ENTER "); puti(^(bytecode+1)); putc(',');puti(^(bytecode+2)); putln
; libsrc/jitcore.pla: 0164:         //
; libsrc/jitcore.pla: 0165:         // Call into VM
; libsrc/jitcore.pla: 0166:         //
; libsrc/jitcore.pla: 0167:         codeptr->0 = $20           // JSR INTERP
; libsrc/jitcore.pla: 0168:         codeptr=>1 = directentry
; libsrc/jitcore.pla: 0169:         codeptr->3 = $58           // ENTER CODE
; libsrc/jitcore.pla: 0170:         codeptr=>4 = *(bytecode+1) // ENTER FRAME SIZE & ARG COUNT
; libsrc/jitcore.pla: 0171:         codeptr->6 = $C0           // NATV CODE
; libsrc/jitcore.pla: 0172:         codeptr    = codeptr + 7
; libsrc/jitcore.pla: 0173:         i          = 3
; libsrc/jitcore.pla: 0174:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$00			; CN	0
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$54			; CALL	_X017
_F006 	!WORD	0		
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$60			; LB
	!BYTE	$2A,$58			; CB	88
	!BYTE	$24			; BRNE	_B066
	!WORD	_B066-*
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2A,$58			; CB	88
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$06			; CN	3
	!BYTE	$76,$08			; SLW	[8]
_B066 
_B067 
; libsrc/jitcore.pla: 0175:     while isule(codeptr, codemax)
	!BYTE	$50			; BRNCH	_B070
	!WORD	_B070-*
_B068 
; libsrc/jitcore.pla: 0176:         //putc('$'); puth(codeptr); putc(':')
; libsrc/jitcore.pla: 0177:         //putc('['); puti(i); //puts("] ")
; libsrc/jitcore.pla: 0178:         opcode = ^(bytecode+i)
; libsrc/jitcore.pla: 0179:         if opcode & 1
; libsrc/jitcore.pla: 0180:             //
; libsrc/jitcore.pla: 0181:             // Optimization fence. Sync A and X registers
; libsrc/jitcore.pla: 0182:             //
; libsrc/jitcore.pla: 0183:             codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 0184:             if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0185:                 *codeptr = estkl8+$95//+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 0186:                 codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0187:             fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$6C,$12			; DLB	[18]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B071
	!WORD	_B071-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F007 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B073
	!WORD	_B073-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B073 
_B074 
; libsrc/jitcore.pla: 0188:             VY        = UNKNOWN
; libsrc/jitcore.pla: 0189:             A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0190:             opcode    = opcode & $FE
; libsrc/jitcore.pla: 0191:         fin
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$3C,$FE			; ANDI	254
	!BYTE	$74,$12			; SLB	[18]
_B071 
_B072 
; libsrc/jitcore.pla: 0192:         //
; libsrc/jitcore.pla: 0193:         // Update bytecode->native code address translation.
; libsrc/jitcore.pla: 0194:         //
; libsrc/jitcore.pla: 0195:         // Here's how it works:
; libsrc/jitcore.pla: 0196:         //
; libsrc/jitcore.pla: 0197:         //  The code buffer is above address $8000 so MSBit set.
; libsrc/jitcore.pla: 0198:         //  When we compile a bytecode, update the destination address in
; libsrc/jitcore.pla: 0199:         //  the address xlate buffer with actual address (MSBit set). But, if a branch
; libsrc/jitcore.pla: 0200:         //  opcode jumps to a bytecode address that hasn't been compiled yet, add the
; libsrc/jitcore.pla: 0201:         //  address offset in the code buffer to the list of addresses needing resolution.
; libsrc/jitcore.pla: 0202:         //  The offset will be less than $8000, so MSBit clear. This is how we know if
; libsrc/jitcore.pla: 0203:         //  an address has been resolved or is a list of addresses needing resolution.
; libsrc/jitcore.pla: 0204:         //  Before updating the address xlate buffer with the known address as we
; libsrc/jitcore.pla: 0205:         //  compile, look for existing resolution list and traverse it if there.
; libsrc/jitcore.pla: 0206:         //
; libsrc/jitcore.pla: 0207:         if addrxlate=>[i]
; libsrc/jitcore.pla: 0208:             //
; libsrc/jitcore.pla: 0209:             // Address list awaiting resolution
; libsrc/jitcore.pla: 0210:             //
; libsrc/jitcore.pla: 0211:             dest = addrxlate=>[i] + *jitcodeptr
; libsrc/jitcore.pla: 0212:             repeat
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$08			; IDXLW	[8]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B075
	!WORD	_B075-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$08			; IDXLW	[8]
	!BYTE	$62			; LW
	!BYTE	$B6,$E4,$03		; ADDAW	996
	!BYTE	$76,$0C			; SLW	[12]
_B078 
; libsrc/jitcore.pla: 0213:                 case  = *dest
; libsrc/jitcore.pla: 0214:                 *dest = codeptr
; libsrc/jitcore.pla: 0215:                 dest  = case + *jitcodeptr
; libsrc/jitcore.pla: 0216:             until not case
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$62			; LW
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$72			; SW
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$B6,$E4,$03		; ADDAW	996
	!BYTE	$76,$0C			; SLW	[12]
_B079 
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$4E			; BRTRU	_B078
	!WORD	_B078-*
_B077 
; libsrc/jitcore.pla: 0217:         fin
_B075 
_B076 
; libsrc/jitcore.pla: 0218:         //
; libsrc/jitcore.pla: 0219:         // Update address translate buffer with bytecode->native address
; libsrc/jitcore.pla: 0220:         //
; libsrc/jitcore.pla: 0221:         addrxlate=>[i] = codeptr
; libsrc/jitcore.pla: 0222:         //
; libsrc/jitcore.pla: 0223:         // Compile this bad boy...
; libsrc/jitcore.pla: 0224:         //
; libsrc/jitcore.pla: 0225:         if opcode < $20 // CONSTANT NYBBLE
; libsrc/jitcore.pla: 0226:             //puts("CN $"); putb(opcode/2)
; libsrc/jitcore.pla: 0227:             if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0228:                 *codeptr = estkl8+$95+(VX<<8)       // STA ESTKL,X
; libsrc/jitcore.pla: 0229:                 codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0230:             fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$08			; IDXLW	[8]
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$20			; CB	32
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B080
	!WORD	_B080-*
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B082
	!WORD	_B082-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B082 
_B083 
; libsrc/jitcore.pla: 0231:             VX--                                    // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0232:             if VY <> 0
; libsrc/jitcore.pla: 0233:                 *codeptr = $00A0                    // LDY #$00
; libsrc/jitcore.pla: 0234:                 codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0235:                 VY       = 0
; libsrc/jitcore.pla: 0236:             fin
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B084
	!WORD	_B084-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B084 
_B085 
; libsrc/jitcore.pla: 0237:             *codeptr  = estkh8+$94+(VX<<8)          // STY ESTKH,X
; libsrc/jitcore.pla: 0238:             codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0239:             if opcode == 0
; libsrc/jitcore.pla: 0240:                 ^codeptr = $98; codeptr++           // TYA -> LDA #$00
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$4E			; BRTRU	_B086
	!WORD	_B086-*
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0241:             else
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B087
	!WORD	_B087-*
_B086 
; libsrc/jitcore.pla: 0242:                 *codeptr = $A9+(opcode/2<<8)        // LDA #(CN/2)
; libsrc/jitcore.pla: 0243:                 codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0244:             fin
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B087 
; libsrc/jitcore.pla: 0245:             A_IS_TOSL = TOS_DIRTY                   // STA ESTKL,X
; libsrc/jitcore.pla: 0246:         else
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B081
	!WORD	_B081-*
_B080 
; libsrc/jitcore.pla: 0247:             when opcode
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$52			; SEL
	!WORD	_B089-*
; libsrc/jitcore.pla: 0248:                 is $20 // MINUS ONE
_B090 
; libsrc/jitcore.pla: 0249:                     //puts("MINUS_ONE")
; libsrc/jitcore.pla: 0250:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0251:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 0252:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0253:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B091
	!WORD	_B091-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B091 
_B092 
; libsrc/jitcore.pla: 0254:                     VX--                              // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0255:                     codeptr=>0 = $FFA9                // LDA #$FF
; libsrc/jitcore.pla: 0256:                     codeptr=>2 = estkh8+$95+(VX<<8)   // STA ESTKH,X
; libsrc/jitcore.pla: 0257:                     codeptr    = codeptr + 4
; libsrc/jitcore.pla: 0258:                     A_IS_TOSL  = TOS_DIRTY            // STA ESTKL,X
; libsrc/jitcore.pla: 0259:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$5E,$A9			; CFFB	65449
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0260:                 is $22 // BREQ
_B093 
; libsrc/jitcore.pla: 0261:                 is $24 // BRNE
_B094 
; libsrc/jitcore.pla: 0262:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0263:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 0264:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0265:                     codeptr, VX = resolveX(codeptr, VX + 2)   // INX; INX
; libsrc/jitcore.pla: 0266:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0267:                         *codeptr = estkl8+$B5-$0200//+(VX<<8) // LDA ESTKL-2,X
; libsrc/jitcore.pla: 0268:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0269:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$54			; CALL	_C001
_F008 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B095
	!WORD	_B095-*
	!BYTE	$2C,$B5,$CE		; CW	52917
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B095 
_B096 
; libsrc/jitcore.pla: 0270:                     if opcode == $22
; libsrc/jitcore.pla: 0271:                         //puts("BREQ "); puti(dest)
; libsrc/jitcore.pla: 0272:                         codeptr=>2  = $09D0                   // BNE +9
; libsrc/jitcore.pla: 0273:                         codeptr=>8  = $03D0                   // BNE +3
; libsrc/jitcore.pla: 0274:                     else
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$22			; CB	34
	!BYTE	$24			; BRNE	_B097
	!WORD	_B097-*
	!BYTE	$2C,$D0,$09		; CW	2512
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B098
	!WORD	_B098-*
_B097 
; libsrc/jitcore.pla: 0275:                         //puts("BRNE "); puti(dest)
; libsrc/jitcore.pla: 0276:                         codeptr=>2  = $06D0                   // BNE +6
; libsrc/jitcore.pla: 0277:                         codeptr=>8  = $03F0                   // BEQ +3
; libsrc/jitcore.pla: 0278:                     fin
	!BYTE	$2C,$D0,$06		; CW	1744
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$F0,$03		; CW	1008
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
_B098 
; libsrc/jitcore.pla: 0279:                     codeptr=>0  = estkl8+$D5-$0100//+(VX<<8)  // CMP ESTKL-1,X
; libsrc/jitcore.pla: 0280:                     codeptr=>4  = estkh8+$B5-$0200//+(VX<<8)  // LDA ESTKH-2,X
; libsrc/jitcore.pla: 0281:                     codeptr=>6  = estkh8+$D5-$0100//+(VX<<8)  // CMP ESTKH-1,X
; libsrc/jitcore.pla: 0282:                     codeptr->10 = $4C                         // JMP abs
; libsrc/jitcore.pla: 0283:                     codeptr=>11 = addrxlate=>[dest]
; libsrc/jitcore.pla: 0284:                     if not (codeptr->12 & $80) // Unresolved address list
; libsrc/jitcore.pla: 0285:                         addrxlate=>[dest] = codeptr + 11 - *jitcodeptr
; libsrc/jitcore.pla: 0286:                     fin
	!BYTE	$2C,$D5,$CF		; CW	53205
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$BE		; CW	48821
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$D5,$BF		; CW	49109
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B099
	!WORD	_B099-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B099 
_B100 
; libsrc/jitcore.pla: 0287:                     codeptr   = codeptr + 13
; libsrc/jitcore.pla: 0288:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0289:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0290:                 is $26 // LA
_B101 
; libsrc/jitcore.pla: 0291:                 is $2C // CW
_B102 
; libsrc/jitcore.pla: 0292:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 0293:                     i    = i + 2
; libsrc/jitcore.pla: 0294:                     //puts("LA/CW $"); puth(dest)
; libsrc/jitcore.pla: 0295:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0296:                         *codeptr = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 0297:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0298:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B103
	!WORD	_B103-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B103 
_B104 
; libsrc/jitcore.pla: 0299:                     VX--                               // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0300:                     codeptr=>0 = $A9+(dest&$FF00)      // LDA #<VAL
; libsrc/jitcore.pla: 0301:                     codeptr=>2 = estkh8+$95+(VX<<8)    // STA ESTKH,X
; libsrc/jitcore.pla: 0302:                     codeptr=>4 = $A9+(dest<<8)         // LDA #>VAL
; libsrc/jitcore.pla: 0303:                     codeptr    = codeptr + 6
; libsrc/jitcore.pla: 0304:                     A_IS_TOSL = TOS_DIRTY              // STA ESTKL,X
; libsrc/jitcore.pla: 0305:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$5E,$00			; CFFB	65280
	!BYTE	$94			; AND 
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0306:                 is $28 // LLA
_B105 
; libsrc/jitcore.pla: 0307:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0308:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0309:                     //puts("LLA "); puti(^(bytecode+i))
; libsrc/jitcore.pla: 0310:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0311:                         *codeptr = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 0312:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0313:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B106
	!WORD	_B106-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B106 
_B107 
; libsrc/jitcore.pla: 0314:                     VX--                               // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0315:                     if VY == j
; libsrc/jitcore.pla: 0316:                         ^codeptr = $98; codeptr++      // TYA -> LDA #imm
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$24			; BRNE	_B108
	!WORD	_B108-*
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0317:                     else
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B109
	!WORD	_B109-*
_B108 
; libsrc/jitcore.pla: 0318:                         *codeptr = $A9+(j<<8)          // LDA #imm
; libsrc/jitcore.pla: 0319:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0320:                     fin
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B109 
; libsrc/jitcore.pla: 0321:                     codeptr->0 = $18                   // CLC
; libsrc/jitcore.pla: 0322:                     codeptr=>1 = ifpl8+$65             // ADC IFPL
; libsrc/jitcore.pla: 0323:                     codeptr=>3 = estkl8+$95+(VX<<8)    // STA ESTKL,X
; libsrc/jitcore.pla: 0324:                     if VY == 0
; libsrc/jitcore.pla: 0325:                         codeptr->5 = $98               // TYA -> LDA #00
; libsrc/jitcore.pla: 0326:                         codeptr    = codeptr + 6
; libsrc/jitcore.pla: 0327:                     else
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$65,$E0		; CW	57445
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4E			; BRTRU	_B110
	!WORD	_B110-*
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B111
	!WORD	_B111-*
_B110 
; libsrc/jitcore.pla: 0328:                         codeptr=>5 = $00A9             // LDA #$00
; libsrc/jitcore.pla: 0329:                         codeptr    = codeptr + 7
; libsrc/jitcore.pla: 0330:                     fin
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
_B111 
; libsrc/jitcore.pla: 0331:                     codeptr=>0 = ifph8+$65             // ADC IFPH
; libsrc/jitcore.pla: 0332:                     codeptr=>2 = estkh8+$95+(VX<<8)    // STA ESTKH,X
; libsrc/jitcore.pla: 0333:                     codeptr    = codeptr + 4
; libsrc/jitcore.pla: 0334:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 0335:                     break
	!BYTE	$2C,$65,$E1		; CW	57701
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0336:                 is $2A // CB
_B112 
; libsrc/jitcore.pla: 0337:                 is $5E // CFFB
_B113 
; libsrc/jitcore.pla: 0338:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0339:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0340:                         *codeptr = estkl8+$95+(VX<<8)        // STA ESTKL,X
; libsrc/jitcore.pla: 0341:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0342:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B114
	!WORD	_B114-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B114 
_B115 
; libsrc/jitcore.pla: 0343:                     VX--                                     // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0344:                     if opcode == $2A
; libsrc/jitcore.pla: 0345:                         //puts("CB $"); putb(^(bytecode+i))
; libsrc/jitcore.pla: 0346:                         if VY <> 0
; libsrc/jitcore.pla: 0347:                             *codeptr = $00A0                 // LDY #$00
; libsrc/jitcore.pla: 0348:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0349:                             VY       = 0
; libsrc/jitcore.pla: 0350:                         fin
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$2A			; CB	42
	!BYTE	$24			; BRNE	_B116
	!WORD	_B116-*
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B118
	!WORD	_B118-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B118 
_B119 
; libsrc/jitcore.pla: 0351:                         codeptr=>0 = estkh8+$94+(VX<<8)      // STY ESTKH,X
; libsrc/jitcore.pla: 0352:                         codeptr    = codeptr + 2
; libsrc/jitcore.pla: 0353:                     else
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B117
	!WORD	_B117-*
_B116 
; libsrc/jitcore.pla: 0354:                         //puts("CFFB $FF"); putb(^(bytecode+i))
; libsrc/jitcore.pla: 0355:                         codeptr=>0 = $FFA9                   // LDA #$FF
; libsrc/jitcore.pla: 0356:                         codeptr=>2 = estkh8+$95+(VX<<8)      // STA ESTKH,X
; libsrc/jitcore.pla: 0357:                         codeptr    = codeptr + 4
; libsrc/jitcore.pla: 0358:                     fin
	!BYTE	$5E,$A9			; CFFB	65449
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$02			; SLW	[2]
_B117 
; libsrc/jitcore.pla: 0359:                     *codeptr  = $A9+(^(bytecode+i)<<8)       // LDA #imm
; libsrc/jitcore.pla: 0360:                     codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0361:                     A_IS_TOSL = TOS_DIRTY                    // STA ESTKL,X
; libsrc/jitcore.pla: 0362:                     break
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0363:                 is $2E // CS
_B120 
; libsrc/jitcore.pla: 0364:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0365:                     j    = ^(bytecode+i)
; libsrc/jitcore.pla: 0366:                     dest = codeptr + 10 + j
; libsrc/jitcore.pla: 0367:                     //puts("CS "); //puts(bytecode+i); //puts("-->"); puti(dest)
; libsrc/jitcore.pla: 0368:                     if isule(dest, codemax)
; libsrc/jitcore.pla: 0369:                         if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0370:                             *codeptr = estkl8+$95+(VX<<8)         // STA ESTKL,X
; libsrc/jitcore.pla: 0371:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0372:                         fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$B0,$13			; ADDLB	[19]
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$2C,$E0,$BE		; CW	48864
	!BYTE	$54			; CALL	_X027
_F009 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B121
	!WORD	_B121-*
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B123
	!WORD	_B123-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B123 
_B124 
; libsrc/jitcore.pla: 0373:                         VX--                                      // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0374:                         codeptr=>0 = $A9+((codeptr+9)&$FF00)      // LDA #>STRING
; libsrc/jitcore.pla: 0375:                         codeptr=>2 = estkh8+$95+(VX<<8)           // STA ESTKH,X
; libsrc/jitcore.pla: 0376:                         codeptr=>4 = $A9+((codeptr+9)<<8)         // LDA #<STRING
; libsrc/jitcore.pla: 0377:                         codeptr->6 = $4C                          // JMP abs
; libsrc/jitcore.pla: 0378:                         dest       = codeptr + 10 + j
; libsrc/jitcore.pla: 0379:                         codeptr=>7 = dest
; libsrc/jitcore.pla: 0380:                         strcpy(codeptr + 9, bytecode + i)
; libsrc/jitcore.pla: 0381:                         i = i + j
; libsrc/jitcore.pla: 0382:                     fin
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$5E,$00			; CFFB	65280
	!BYTE	$94			; AND 
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2A,$A9			; CB	169
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$B0,$13			; ADDLB	[19]
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$54			; CALL	_X019
_F010 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B0,$13			; ADDLB	[19]
	!BYTE	$76,$08			; SLW	[8]
_B121 
_B122 
; libsrc/jitcore.pla: 0383:                     codeptr   = dest
; libsrc/jitcore.pla: 0384:                     A_IS_TOSL = TOS_DIRTY                         // STA ESTKL,X
; libsrc/jitcore.pla: 0385:                     break
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0386:                 is $32 // DROP2
_B125 
; libsrc/jitcore.pla: 0387:                     //puts("DROP2")
; libsrc/jitcore.pla: 0388:                     VX++              // INX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0389:                 is $30 // DROP
	!BYTE	$76,$0E			; SLW	[14]
_B126 
; libsrc/jitcore.pla: 0390:                     //puts("DROP")
; libsrc/jitcore.pla: 0391:                     VX++              // INX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0392:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0393:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0394:                 is $34 // DUP
_B127 
; libsrc/jitcore.pla: 0395:                     //puts("DUP")
; libsrc/jitcore.pla: 0396:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0397:                         *codeptr = estkl8+$B5+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 0398:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0399:                     elsif A_IS_TOSL & TOS_DIRTY
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B128
	!WORD	_B128-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B129
	!WORD	_B129-*
_B128 
; libsrc/jitcore.pla: 0400:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 0401:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0402:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B130
	!WORD	_B130-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B130 
_B129 
; libsrc/jitcore.pla: 0403:                     codeptr=>0 = estkh8+$B4+(VX<<8)   // LDY ESTKH,X
; libsrc/jitcore.pla: 0404:                     VX--                              // DEX
	!BYTE	$2C,$B4,$C0		; CW	49332
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0405:                     codeptr=>2 = estkh8+$94+(VX<<8)   // STY ESTKH,X
; libsrc/jitcore.pla: 0406:                     codeptr    = codeptr + 4
; libsrc/jitcore.pla: 0407:                     VY         = UNKNOWN
; libsrc/jitcore.pla: 0408:                     A_IS_TOSL  = TOS_DIRTY            // STA ESTKL,X
; libsrc/jitcore.pla: 0409:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0410:                 //is $36
; libsrc/jitcore.pla: 0411:                     //puts("DIVMOD")
; libsrc/jitcore.pla: 0412:                     //
; libsrc/jitcore.pla: 0413:                     // Should never happen
; libsrc/jitcore.pla: 0414:                     //
; libsrc/jitcore.pla: 0415:                     //break
; libsrc/jitcore.pla: 0416:                 is $38 // ADDI
_B131 
; libsrc/jitcore.pla: 0417:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0418:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0419:                     //puts("ADDI $"); putb(^(bytecode+i))
; libsrc/jitcore.pla: 0420:                 is $8C // INCR
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
_B132 
; libsrc/jitcore.pla: 0421:                     if opcode == $8C
; libsrc/jitcore.pla: 0422:                         //puts("INCR")
; libsrc/jitcore.pla: 0423:                         j = 1
; libsrc/jitcore.pla: 0424:                     fin
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$8C			; CB	140
	!BYTE	$24			; BRNE	_B133
	!WORD	_B133-*
	!BYTE	$02			; CN	1
	!BYTE	$74,$13			; SLB	[19]
_B133 
_B134 
; libsrc/jitcore.pla: 0425:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0426:                         *codeptr = estkl8+$B5+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 0427:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0428:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B135
	!WORD	_B135-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B135 
_B136 
; libsrc/jitcore.pla: 0429:                     codeptr->0 = $18                  // CLC
; libsrc/jitcore.pla: 0430:                     codeptr=>1 = $69+(j<<8)           // ADC #imm
; libsrc/jitcore.pla: 0431:                     codeptr=>3 = $0290                // BCC +2
; libsrc/jitcore.pla: 0432:                     codeptr=>5 = estkh8+$F6+(VX<<8)   // INC ESTKH,X
; libsrc/jitcore.pla: 0433:                     codeptr    = codeptr + 7
; libsrc/jitcore.pla: 0434:                     A_IS_TOSL  = TOS_DIRTY            // STA ESTKL,X
; libsrc/jitcore.pla: 0435:                     break
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2A,$69			; CB	105
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$90,$02		; CW	656
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$C0		; CW	49398
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0436:                 is $3A // SUBI
_B137 
; libsrc/jitcore.pla: 0437:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0438:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0439:                     //puts("SUBI $"); putb(^(bytecode+i))
; libsrc/jitcore.pla: 0440:                 is $8E // DECR
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
_B138 
; libsrc/jitcore.pla: 0441:                     if opcode == $8E
; libsrc/jitcore.pla: 0442:                         //puts("DECR")
; libsrc/jitcore.pla: 0443:                         j = 1
; libsrc/jitcore.pla: 0444:                     fin
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$8E			; CB	142
	!BYTE	$24			; BRNE	_B139
	!WORD	_B139-*
	!BYTE	$02			; CN	1
	!BYTE	$74,$13			; SLB	[19]
_B139 
_B140 
; libsrc/jitcore.pla: 0445:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0446:                         *codeptr = estkl8+$B5+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 0447:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0448:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B141
	!WORD	_B141-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B141 
_B142 
; libsrc/jitcore.pla: 0449:                     codeptr->0 = $38                  // SEC
; libsrc/jitcore.pla: 0450:                     codeptr=>1 = $E9+(j<<8)           // SBC #imm
; libsrc/jitcore.pla: 0451:                     codeptr=>3 = $02B0                // BCS +2
; libsrc/jitcore.pla: 0452:                     codeptr=>5 = estkh8+$D6+(VX<<8)   // DEC ESTKH,X
; libsrc/jitcore.pla: 0453:                     codeptr    = codeptr + 7
; libsrc/jitcore.pla: 0454:                     A_IS_TOSL  = TOS_DIRTY            // STA ESTKL,X
; libsrc/jitcore.pla: 0455:                     break
	!BYTE	$2A,$38			; CB	56
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2A,$E9			; CB	233
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$B0,$02		; CW	688
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$D6,$C0		; CW	49366
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0456:                 is $3C // ANDI
_B143 
; libsrc/jitcore.pla: 0457:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0458:                     //puts("ANDI $"); putb(^(bytecode+i))
; libsrc/jitcore.pla: 0459:                     if VY <> 0
; libsrc/jitcore.pla: 0460:                         *codeptr = $00A0                     // LDY #$00
; libsrc/jitcore.pla: 0461:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0462:                         VY       = 0
; libsrc/jitcore.pla: 0463:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B144
	!WORD	_B144-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B144 
_B145 
; libsrc/jitcore.pla: 0464:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0465:                         *codeptr = estkl8+$B5+(VX<<8)        // LDA ESTKL,X
; libsrc/jitcore.pla: 0466:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0467:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B146
	!WORD	_B146-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B146 
_B147 
; libsrc/jitcore.pla: 0468:                     codeptr=>0 = $29+(^(bytecode+i)<<8)      // AND #imm
; libsrc/jitcore.pla: 0469:                     codeptr=>2 = estkh8+$94+(VX<<8)          // STY ESTKH,X
; libsrc/jitcore.pla: 0470:                     codeptr    = codeptr + 4
; libsrc/jitcore.pla: 0471:                     A_IS_TOSL  = TOS_DIRTY                   // STA ESTKL,X
; libsrc/jitcore.pla: 0472:                     break
	!BYTE	$2A,$29			; CB	41
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0473:                 is $3E // ORI
_B148 
; libsrc/jitcore.pla: 0474:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0475:                     //puts("ORI $"); putb(^(bytecode+i))
; libsrc/jitcore.pla: 0476:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0477:                         *codeptr = estkl8+$B5+(VX<<8)       // LDA ESTKL,X
; libsrc/jitcore.pla: 0478:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0479:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B149
	!WORD	_B149-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B149 
_B150 
; libsrc/jitcore.pla: 0480:                     *codeptr  = $09+(^(bytecode+i)<<8)      // ORA #imm
; libsrc/jitcore.pla: 0481:                     codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0482:                     A_IS_TOSL = TOS_DIRTY                   // STA ESTKL,X
; libsrc/jitcore.pla: 0483:                     break
	!BYTE	$12			; CN	9
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0484:                 is $40 // ISEQ
_B151 
; libsrc/jitcore.pla: 0485:                 is $42 // ISNE
_B152 
; libsrc/jitcore.pla: 0486:                     if VY <> 0
; libsrc/jitcore.pla: 0487:                         *codeptr = $00A0                   // LDY #$00
; libsrc/jitcore.pla: 0488:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0489:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B153
	!WORD	_B153-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B153 
_B154 
; libsrc/jitcore.pla: 0490:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0491:                         *codeptr = estkl8+$B5+(VX<<8)      // LDA ESTKL,X
; libsrc/jitcore.pla: 0492:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0493:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B155
	!WORD	_B155-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B155 
_B156 
; libsrc/jitcore.pla: 0494:                     if opcode == $40
; libsrc/jitcore.pla: 0495:                         //puts("ISEQ")
; libsrc/jitcore.pla: 0496:                         codeptr=>2  = $07D0                // BNE +7
; libsrc/jitcore.pla: 0497:                         codeptr=>8  = $01D0                // BNE +1
; libsrc/jitcore.pla: 0498:                     else
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$40			; CB	64
	!BYTE	$24			; BRNE	_B157
	!WORD	_B157-*
	!BYTE	$2C,$D0,$07		; CW	2000
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$D0,$01		; CW	464
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B158
	!WORD	_B158-*
_B157 
; libsrc/jitcore.pla: 0499:                         //puts("ISNE")
; libsrc/jitcore.pla: 0500:                         codeptr=>2  = $06D0                // BNE +6
; libsrc/jitcore.pla: 0501:                         codeptr=>8  = $01F0                // BEQ +1
; libsrc/jitcore.pla: 0502:                     fin
	!BYTE	$2C,$D0,$06		; CW	1744
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$F0,$01		; CW	496
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
_B158 
; libsrc/jitcore.pla: 0503:                     codeptr=>0  = estkl8+$D5+$0100+(VX<<8) // CMP ESTKL+1,X
; libsrc/jitcore.pla: 0504:                     codeptr=>4  = estkh8+$B5+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 0505:                     codeptr=>6  = estkh8+$D5+$0100+(VX<<8) // CMP ESTKH+1
; libsrc/jitcore.pla: 0506:                     codeptr=>10 = $9888                    // DEY; TYA
; libsrc/jitcore.pla: 0507:                     codeptr=>12 = estkh8+$94+$0100+(VX<<8) // STY ESTKH+1,X
; libsrc/jitcore.pla: 0508:                     codeptr     = codeptr + 14
; libsrc/jitcore.pla: 0509:                     VX++                                   // INX
	!BYTE	$2C,$D5,$D1		; CW	53717
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$D5,$C1		; CW	49621
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$88,$98		; CW	39048
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$94,$C1		; CW	49556
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0510:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 0511:                     A_IS_TOSL   = TOS_DIRTY                // STA ESTKL,X
; libsrc/jitcore.pla: 0512:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0513:                 is $44 // ISGT
_B159 
; libsrc/jitcore.pla: 0514:                 is $4A // ISLE
_B160 
; libsrc/jitcore.pla: 0515:                     if VY <> 0
; libsrc/jitcore.pla: 0516:                         *codeptr = $00A0                   // LDY #$00
; libsrc/jitcore.pla: 0517:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0518:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B161
	!WORD	_B161-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B161 
_B162 
; libsrc/jitcore.pla: 0519:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0520:                         *codeptr = estkl8+$B5+(VX<<8)      // LDA ESTKL,X
; libsrc/jitcore.pla: 0521:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0522:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B163
	!WORD	_B163-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B163 
_B164 
; libsrc/jitcore.pla: 0523:                     codeptr=>0  = estkl8+$D5+$0100+(VX<<8) // CMP ESTKL+1,X
; libsrc/jitcore.pla: 0524:                     codeptr=>2  = estkh8+$B5+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 0525:                     codeptr=>4  = estkh8+$F5+$0100+(VX<<8) // SBC ESTKH+1
; libsrc/jitcore.pla: 0526:                     codeptr=>6  = $0250                    // BVC +2
; libsrc/jitcore.pla: 0527:                     codeptr=>8  = $8049                    // EOR #$80
; libsrc/jitcore.pla: 0528:                     if opcode == $44
; libsrc/jitcore.pla: 0529:                         //puts("ISGT")
; libsrc/jitcore.pla: 0530:                         codeptr=>10 = $0110                // BPL +1
; libsrc/jitcore.pla: 0531:                     else
	!BYTE	$2C,$D5,$D1		; CW	53717
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C1		; CW	49653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$50,$02		; CW	592
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$49,$80		; CW	32841
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$44			; CB	68
	!BYTE	$24			; BRNE	_B165
	!WORD	_B165-*
	!BYTE	$2C,$10,$01		; CW	272
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B166
	!WORD	_B166-*
_B165 
; libsrc/jitcore.pla: 0532:                         //puts("ISLE")
; libsrc/jitcore.pla: 0533:                         codeptr=>10 = $0130                // BMI +1
; libsrc/jitcore.pla: 0534:                     fin
	!BYTE	$2C,$30,$01		; CW	304
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
_B166 
; libsrc/jitcore.pla: 0535:                     codeptr=>12 = $9888                    // DEY TYA
; libsrc/jitcore.pla: 0536:                     codeptr=>14 = estkh8+$94+$0100+(VX<<8) // STY ESTKH+1,X
; libsrc/jitcore.pla: 0537:                     codeptr     = codeptr + 16
; libsrc/jitcore.pla: 0538:                     VX++                                   // INX
	!BYTE	$2C,$88,$98		; CW	39048
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$2C,$94,$C1		; CW	49556
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0539:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 0540:                     A_IS_TOSL   = TOS_DIRTY                // STA ESTKL,X
; libsrc/jitcore.pla: 0541:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0542:                 is $46 // ISLT
_B167 
; libsrc/jitcore.pla: 0543:                 is $48 // ISGE
_B168 
; libsrc/jitcore.pla: 0544:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0545:                         *codeptr = estkl8+$95+(VX<<8)      // STA ESTKL,X
; libsrc/jitcore.pla: 0546:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0547:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B169
	!WORD	_B169-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B169 
_B170 
; libsrc/jitcore.pla: 0548:                     if VY <> 0
; libsrc/jitcore.pla: 0549:                         *codeptr = $00A0                   // LDY #$00
; libsrc/jitcore.pla: 0550:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0551:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B171
	!WORD	_B171-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B171 
_B172 
; libsrc/jitcore.pla: 0552:                     codeptr=>0  = estkl8+$B5+$0100+(VX<<8) // LDA ESTKL+1,X
; libsrc/jitcore.pla: 0553:                     codeptr=>2  = estkl8+$D5+(VX<<8)       // CMP ESTKL,X
; libsrc/jitcore.pla: 0554:                     codeptr=>4  = estkh8+$B5+$0100+(VX<<8) // LDA ESTKH+1,X
; libsrc/jitcore.pla: 0555:                     codeptr=>6  = estkh8+$F5+(VX<<8)       // SBC ESTKH
; libsrc/jitcore.pla: 0556:                     codeptr=>8  = $0250                    // BVC +2
; libsrc/jitcore.pla: 0557:                     codeptr=>10 = $8049                    // EOR #$80
; libsrc/jitcore.pla: 0558:                     if opcode == $46
; libsrc/jitcore.pla: 0559:                         //puts("ISLT")
; libsrc/jitcore.pla: 0560:                         codeptr=>12 = $0110                // BPL +1
; libsrc/jitcore.pla: 0561:                     else
	!BYTE	$2C,$B5,$D1		; CW	53685
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$D5,$D0		; CW	53461
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C1		; CW	49589
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C0		; CW	49397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$50,$02		; CW	592
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$49,$80		; CW	32841
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$46			; CB	70
	!BYTE	$24			; BRNE	_B173
	!WORD	_B173-*
	!BYTE	$2C,$10,$01		; CW	272
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B174
	!WORD	_B174-*
_B173 
; libsrc/jitcore.pla: 0562:                         //puts("ISGE")
; libsrc/jitcore.pla: 0563:                         codeptr=>12 = $0130                // BMI +1
; libsrc/jitcore.pla: 0564:                     fin
	!BYTE	$2C,$30,$01		; CW	304
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
_B174 
; libsrc/jitcore.pla: 0565:                     codeptr=>14 = $9888                    // DEY; TYA
; libsrc/jitcore.pla: 0566:                     codeptr=>16 = estkh8+$94+$0100+(VX<<8) // STY ESTKH+1,X
; libsrc/jitcore.pla: 0567:                     codeptr     = codeptr + 18
; libsrc/jitcore.pla: 0568:                     VX++                                   // INX
	!BYTE	$2C,$88,$98		; CW	39048
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$72			; SW
	!BYTE	$2C,$94,$C1		; CW	49556
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0569:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 0570:                     A_IS_TOSL   = TOS_DIRTY                // STA ESTKL,X
; libsrc/jitcore.pla: 0571:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0572:                 is $4C // BRFLS
_B175 
; libsrc/jitcore.pla: 0573:                 is $4E // BRTRU
_B176 
; libsrc/jitcore.pla: 0574:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0575:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 0576:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0577:                     codeptr, VX = resolveX(codeptr, VX + 1)      // INX
; libsrc/jitcore.pla: 0578:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0579:                         *codeptr = estkl8+$B5-$0100//+(VX<<8)    // LDA ESTKL-1,X
; libsrc/jitcore.pla: 0580:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0581:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C001
_F011 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B177
	!WORD	_B177-*
	!BYTE	$2C,$B5,$CF		; CW	53173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B177 
_B178 
; libsrc/jitcore.pla: 0582:                     codeptr=>0 = estkh8+$15-$0100//+(VX<<8)      // ORA ESTKH-1,X
; libsrc/jitcore.pla: 0583:                     if opcode == $4C
; libsrc/jitcore.pla: 0584:                         //puts("BRFLS "); puti(dest)
; libsrc/jitcore.pla: 0585:                         codeptr=>2 = $03D0                       // BNE +3
; libsrc/jitcore.pla: 0586:                     else
	!BYTE	$2C,$15,$BF		; CW	48917
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$24			; BRNE	_B179
	!WORD	_B179-*
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B180
	!WORD	_B180-*
_B179 
; libsrc/jitcore.pla: 0587:                         //puts("BRTRU "); puti(dest)
; libsrc/jitcore.pla: 0588:                         codeptr=>2 = $03F0                       // BEQ +3
; libsrc/jitcore.pla: 0589:                     fin
	!BYTE	$2C,$F0,$03		; CW	1008
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
_B180 
; libsrc/jitcore.pla: 0590:                     codeptr->4 = $4C                             // JMP abs
; libsrc/jitcore.pla: 0591:                     codeptr=>5 = addrxlate=>[dest]
; libsrc/jitcore.pla: 0592:                     if not (codeptr->6 & $80) // Unresolved address list
; libsrc/jitcore.pla: 0593:                         addrxlate=>[dest] = codeptr + 5 - *jitcodeptr
; libsrc/jitcore.pla: 0594:                     fin
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B181
	!WORD	_B181-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B181 
_B182 
; libsrc/jitcore.pla: 0595:                     codeptr   = codeptr + 7
; libsrc/jitcore.pla: 0596:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0597:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0598:                 is $50 // BRNCH
_B183 
; libsrc/jitcore.pla: 0599:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0600:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 0601:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0602:                     //puts("BRNCH "); puti(dest)
; libsrc/jitcore.pla: 0603:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 0604:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0605:                         *codeptr = estkl8+$95//+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 0606:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0607:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F012 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B184
	!WORD	_B184-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B184 
_B185 
; libsrc/jitcore.pla: 0608:                     codeptr->0 = $4C                    // JMP abs
; libsrc/jitcore.pla: 0609:                     codeptr=>1 = addrxlate=>[dest]
; libsrc/jitcore.pla: 0610:                     if not (codeptr->2 & $80) // Unresolved address list
; libsrc/jitcore.pla: 0611:                         addrxlate=>[dest] = codeptr + 1 - *jitcodeptr
; libsrc/jitcore.pla: 0612:                     fin
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B186
	!WORD	_B186-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B186 
_B187 
; libsrc/jitcore.pla: 0613:                     codeptr   = codeptr + 3
; libsrc/jitcore.pla: 0614:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0615:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0616:                 is $52 // SEL
_B188 
; libsrc/jitcore.pla: 0617:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0618:                     case = i + *(bytecode+i)
; libsrc/jitcore.pla: 0619:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0620:                     //puts("SEL "); puti(case); putln
; libsrc/jitcore.pla: 0621:                     j = ^(bytecode+case)
; libsrc/jitcore.pla: 0622:                     dest = codeptr + 9 + case * 11)
; libsrc/jitcore.pla: 0623:                     if isule(dest, codemax)
; libsrc/jitcore.pla: 0624:                         ^(bytecode+case) = $FE // Flag as NOP
; libsrc/jitcore.pla: 0625:                         case++
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$16			; CN	11
	!BYTE	$86			; MUL
	!BYTE	$82			; ADD 
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$2C,$E0,$BE		; CW	48864
	!BYTE	$54			; CALL	_X027
_F013 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B189
	!WORD	_B189-*
	!BYTE	$2A,$FE			; CB	254
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$70			; SB
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0626:                         if not A_IS_TOSL
; libsrc/jitcore.pla: 0627:                             *codeptr = estkl8+$B5+(VX<<8)                // LDA ESTKL,X
; libsrc/jitcore.pla: 0628:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0629:                         fin
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B191
	!WORD	_B191-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B191 
_B192 
; libsrc/jitcore.pla: 0630:                         codeptr=>0 = estkh8+$B4+(VX<<8)                  // LDY ESTKH,X
; libsrc/jitcore.pla: 0631:                         codeptr, VX = resolveX(codeptr + 2, VX + 1)      // INX
; libsrc/jitcore.pla: 0632:                         repeat
	!BYTE	$2C,$B4,$C0		; CW	49332
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C001
_F014 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
_B194 
; libsrc/jitcore.pla: 0633:                             dest = *(bytecode+case)
; libsrc/jitcore.pla: 0634:                             //puts("    $"); puth(dest)
; libsrc/jitcore.pla: 0635:                             codeptr=>0 = $C9+(dest<<8)                   // CMP #imm
; libsrc/jitcore.pla: 0636:                             codeptr=>2 = $07D0                           // BNE +7
; libsrc/jitcore.pla: 0637:                             codeptr=>4 = $C0+(dest&$FF00)                // CPY #imm
; libsrc/jitcore.pla: 0638:                             codeptr=>6 = $03D0                           // BNE +3
; libsrc/jitcore.pla: 0639:                             *(bytecode+case) = $FEFE
; libsrc/jitcore.pla: 0640:                             case = case + 2
; libsrc/jitcore.pla: 0641:                             dest = case + *(bytecode+case)
; libsrc/jitcore.pla: 0642:                             //puts("-->"); puti(dest); putln
; libsrc/jitcore.pla: 0643:                             codeptr->8 = $4C                             // JMP abs
; libsrc/jitcore.pla: 0644:                             codeptr=>9 = addrxlate=>[dest]
; libsrc/jitcore.pla: 0645:                             if not (codeptr->10 & $80) // Unresolved address list
; libsrc/jitcore.pla: 0646:                                 addrxlate=>[dest] = codeptr + 9 - *jitcodeptr
; libsrc/jitcore.pla: 0647:                             fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$C9			; CB	201
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$D0,$07		; CW	2000
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$5E,$00			; CFFB	65280
	!BYTE	$94			; AND 
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$FE,$FE		; CW	65278
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$72			; SW
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B196
	!WORD	_B196-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B196 
_B197 
; libsrc/jitcore.pla: 0648:                             codeptr          = codeptr + 11
; libsrc/jitcore.pla: 0649:                             *(bytecode+case) = $FEFE
; libsrc/jitcore.pla: 0650:                             case = case + 2
; libsrc/jitcore.pla: 0651:                             j--
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2C,$FE,$FE		; CW	65278
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$72			; SW
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0652:                         until not j
	!BYTE	$74,$13			; SLB	[19]
_B195 
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$4E			; BRTRU	_B194
	!WORD	_B194-*
_B193 
; libsrc/jitcore.pla: 0653:                         codeptr->0 = $4C                                 // JMP abs
; libsrc/jitcore.pla: 0654:                         codeptr=>1 = addrxlate=>[case]
; libsrc/jitcore.pla: 0655:                         if not (codeptr->2 & $80) // Unresolved address list
; libsrc/jitcore.pla: 0656:                             addrxlate=>[case] = codeptr + 1 - *jitcodeptr
; libsrc/jitcore.pla: 0657:                         fin
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0A			; IDXLW	[10]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B198
	!WORD	_B198-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0A			; IDXLW	[10]
	!BYTE	$72			; SW
_B198 
_B199 
; libsrc/jitcore.pla: 0658:                         codeptr = codeptr + 3
; libsrc/jitcore.pla: 0659:                     else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B190
	!WORD	_B190-*
_B189 
; libsrc/jitcore.pla: 0660:                         codeptr = dest
; libsrc/jitcore.pla: 0661:                     fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$76,$02			; SLW	[2]
_B190 
; libsrc/jitcore.pla: 0662:                     VY        = UNKNOWN
; libsrc/jitcore.pla: 0663:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0664:                     break
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0665:                 is $54 // CALL
_B200 
; libsrc/jitcore.pla: 0666:                     //puts("CALL $"); puth(*(bytecode+i))
; libsrc/jitcore.pla: 0667:                     //
; libsrc/jitcore.pla: 0668:                     // Call address
; libsrc/jitcore.pla: 0669:                     //
; libsrc/jitcore.pla: 0670:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 0671:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0672:                         *codeptr = estkl8+$95//+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 0673:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0674:                     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F015 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B201
	!WORD	_B201-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B201 
_B202 
; libsrc/jitcore.pla: 0675:                     codeptr->0 = $20                    // JSR abs
; libsrc/jitcore.pla: 0676:                     codeptr=>1 = *(bytecode+i+1)
; libsrc/jitcore.pla: 0677:                     codeptr    = codeptr + 3
; libsrc/jitcore.pla: 0678:                     VY         = UNKNOWN
; libsrc/jitcore.pla: 0679:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 0680:                     i          = i + 2
; libsrc/jitcore.pla: 0681:                     break
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0682:                 is $56 // ICAL
_B203 
; libsrc/jitcore.pla: 0683:                     //puts("ICAL")
; libsrc/jitcore.pla: 0684:                     //
; libsrc/jitcore.pla: 0685:                     // Pull address off stack
; libsrc/jitcore.pla: 0686:                     //
; libsrc/jitcore.pla: 0687:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0688:                         *codeptr = estkl8+$B5+(VX<<8)                // LDA ESTKL,X
; libsrc/jitcore.pla: 0689:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0690:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B204
	!WORD	_B204-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B204 
_B205 
; libsrc/jitcore.pla: 0691:                     codeptr=>0 = tmpl8+$85                           // STA $E7:TMPL
; libsrc/jitcore.pla: 0692:                     codeptr=>2 = estkh8+$B5+(VX<<8)                  // LDA ESTKH,X
; libsrc/jitcore.pla: 0693:                     codeptr=>4 = tmph8+$85                           // STA $E8:TMPH
; libsrc/jitcore.pla: 0694:                     codeptr, VX = resolveX(codeptr + 6, VX + 1)      // INX
; libsrc/jitcore.pla: 0695:                     //
; libsrc/jitcore.pla: 0696:                     // Call through TMP
; libsrc/jitcore.pla: 0697:                     //
; libsrc/jitcore.pla: 0698:                     codeptr->0 = $20                             // JSR abs
; libsrc/jitcore.pla: 0699:                     codeptr=>1 = jmptmp                          // $E6:JMPTMP
; libsrc/jitcore.pla: 0700:                     codeptr    = codeptr + 3
; libsrc/jitcore.pla: 0701:                     VY         = UNKNOWN
; libsrc/jitcore.pla: 0702:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 0703:                    break
	!BYTE	$2C,$85,$E7		; CW	59269
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$85,$E8		; CW	59525
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C001
_F016 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2A,$E6			; CB	230
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0704:                 is $5A // LEAVE
_B206 
; libsrc/jitcore.pla: 0705:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0706:                     //puts("LEAVE "); puti(^(bytecode+i))
; libsrc/jitcore.pla: 0707:                     //
; libsrc/jitcore.pla: 0708:                     // Call into VM
; libsrc/jitcore.pla: 0709:                     //
; libsrc/jitcore.pla: 0710:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 0711:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0712:                         *codeptr = estkl8+$95//+(VX<<8)        // STA ESTKL,X
; libsrc/jitcore.pla: 0713:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0714:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F017 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B207
	!WORD	_B207-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B207 
_B208 
; libsrc/jitcore.pla: 0715:                     codeptr->0 = $20                           // JSR abs
; libsrc/jitcore.pla: 0716:                     codeptr=>1 = directentry                   // INTERP
; libsrc/jitcore.pla: 0717:                     codeptr=>3 = $5A + (^(bytecode+i)<<8)      // LEAVE CODE AND OPERAND
; libsrc/jitcore.pla: 0718:                     codeptr    = codeptr + 5
; libsrc/jitcore.pla: 0719:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 0720:                     break
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2A,$5A			; CB	90
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0721:                 is $5C // RET
_B209 
; libsrc/jitcore.pla: 0722:                     //puts("RET")
; libsrc/jitcore.pla: 0723:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 0724:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0725:                         *codeptr = estkl8+$95//+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 0726:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0727:                     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F018 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B210
	!WORD	_B210-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B210 
_B211 
; libsrc/jitcore.pla: 0728:                     ^codeptr  = $60; codeptr++          // RTS
	!BYTE	$2A,$60			; CB	96
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0729:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0730:                    break
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0731:                 is $60 // LB
_B212 
; libsrc/jitcore.pla: 0732:                     //puts("LB")
; libsrc/jitcore.pla: 0733:                     if VY <> 0
; libsrc/jitcore.pla: 0734:                         *codeptr = $00A0                  // LDY #$00
; libsrc/jitcore.pla: 0735:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0736:                         VY       = 0
; libsrc/jitcore.pla: 0737:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B213
	!WORD	_B213-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B213 
_B214 
; libsrc/jitcore.pla: 0738:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0739:                         *codeptr = estkl8+$B5+(VX<<8)     // LDA ESTKL,X
; libsrc/jitcore.pla: 0740:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0741:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B215
	!WORD	_B215-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B215 
_B216 
; libsrc/jitcore.pla: 0742:                     codeptr=>0 = estkh8+$95-$0100+(VX<<8) // STA ESTKH-1,X
; libsrc/jitcore.pla: 0743:                     codeptr=>2 = estkh8+$A1-$0100+(VX<<8) // LDA (ESTKH-1,X)
; libsrc/jitcore.pla: 0744:                     codeptr=>4 = estkh8+$94+(VX<<8)       // STY ESTKH,X
; libsrc/jitcore.pla: 0745:                     codeptr    = codeptr + 6
; libsrc/jitcore.pla: 0746:                     A_IS_TOSL  = TOS_DIRTY                // STA ESTKL,X
; libsrc/jitcore.pla: 0747:                     break
	!BYTE	$2C,$95,$BF		; CW	49045
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$A1,$BF		; CW	49057
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0748:                 is $62 // LW
_B217 
; libsrc/jitcore.pla: 0749:                     //puts("LW")
; libsrc/jitcore.pla: 0750:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0751:                         *codeptr = estkl8+$B5+(VX<<8)      // LDA ESTKL,X
; libsrc/jitcore.pla: 0752:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0753:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B218
	!WORD	_B218-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B218 
_B219 
; libsrc/jitcore.pla: 0754:                     codeptr=>0  = estkh8+$95-$0100+(VX<<8) // STA ESTKH-1,X
; libsrc/jitcore.pla: 0755:                     codeptr=>2  = estkh8+$A1-$0100+(VX<<8) // LDA (ESTKH-1,X)
; libsrc/jitcore.pla: 0756:                     codeptr=>4  = estkl8+$95+(VX<<8)       // STA ESTKL,X
; libsrc/jitcore.pla: 0757:                     codeptr=>6  = estkh8+$F6-$0100+(VX<<8) // INC ESTKH-1,X
; libsrc/jitcore.pla: 0758:                     codeptr=>8  = $02D0                    // BNE +2
; libsrc/jitcore.pla: 0759:                     codeptr=>10 = estkh8+$F6+(VX<<8)       // INC ESTKH,X
; libsrc/jitcore.pla: 0760:                     codeptr=>12 = estkh8+$A1-$0100+(VX<<8) // LDA (ESTKH-1,X)
; libsrc/jitcore.pla: 0761:                     codeptr=>14 = estkh8+$95+(VX<<8)       // STA ESTKH,X
; libsrc/jitcore.pla: 0762:                     codeptr     = codeptr + 16
; libsrc/jitcore.pla: 0763:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 0764:                     break
	!BYTE	$2C,$95,$BF		; CW	49045
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$A1,$BF		; CW	49057
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$BF		; CW	49142
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$D0,$02		; CW	720
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$C0		; CW	49398
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$A1,$BF		; CW	49057
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0765:                 is $64 // LLB
_B220 
; libsrc/jitcore.pla: 0766:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0767:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0768:                     //puts("LLB "); puti(j)
; libsrc/jitcore.pla: 0769:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0770:                         *codeptr = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 0771:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0772:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B221
	!WORD	_B221-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B221 
_B222 
; libsrc/jitcore.pla: 0773:                     VX--                               // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0774:                     if VY <> j
; libsrc/jitcore.pla: 0775:                         *codeptr = $A0+(j<<8)          // LDY #imm
; libsrc/jitcore.pla: 0776:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0777:                     fin
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B223
	!WORD	_B223-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B223 
_B224 
; libsrc/jitcore.pla: 0778:                     *codeptr = ifpl8+$B1               // LDA (IFP),Y
; libsrc/jitcore.pla: 0779:                     codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0780:                     if j <> 0
; libsrc/jitcore.pla: 0781:                         *codeptr = $00A0               // LDY #$00
; libsrc/jitcore.pla: 0782:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0783:                     fin
	!BYTE	$2C,$B1,$E0		; CW	57521
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$4C			; BRFLS	_B225
	!WORD	_B225-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B225 
_B226 
; libsrc/jitcore.pla: 0784:                     *codeptr  = estkh8+$94+(VX<<8)     // STY ESTKH,X
; libsrc/jitcore.pla: 0785:                     codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0786:                     VY        = 0
; libsrc/jitcore.pla: 0787:                     A_IS_TOSL = TOS_DIRTY              // STA ESTKL,X
; libsrc/jitcore.pla: 0788:                     break
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0789:                 is $66 // LLW
_B227 
; libsrc/jitcore.pla: 0790:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0791:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0792:                     //puts("LLW "); puti(j)
; libsrc/jitcore.pla: 0793:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0794:                         *codeptr = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 0795:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0796:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B228
	!WORD	_B228-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B228 
_B229 
; libsrc/jitcore.pla: 0797:                     VX--                               // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0798:                     if VY <> j
; libsrc/jitcore.pla: 0799:                         *codeptr = $A0+((j+1)<<8)      // LDY #imm
; libsrc/jitcore.pla: 0800:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0801:                         VY       = j
; libsrc/jitcore.pla: 0802:                     else
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B230
	!WORD	_B230-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$8C			; INCR
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$50			; BRNCH	_B231
	!WORD	_B231-*
_B230 
; libsrc/jitcore.pla: 0803:                         ^codeptr = $C8; codeptr++      // INY
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0804:                     fin
	!BYTE	$76,$02			; SLW	[2]
_B231 
; libsrc/jitcore.pla: 0805:                     codeptr=>0 = ifpl8+$B1             // LDA (IFP),Y
; libsrc/jitcore.pla: 0806:                     codeptr=>2 = estkh8+$95+(VX<<8)    // STA ESTKH,X
; libsrc/jitcore.pla: 0807:                     codeptr->4 = $88                   // DEY
; libsrc/jitcore.pla: 0808:                     codeptr=>5 = ifpl8+$B1             // LDA (IFP),Y
; libsrc/jitcore.pla: 0809:                     codeptr    = codeptr + 7
; libsrc/jitcore.pla: 0810:                     A_IS_TOSL  = TOS_DIRTY             // STA ESTKL,X
; libsrc/jitcore.pla: 0811:                     break
	!BYTE	$2C,$B1,$E0		; CW	57521
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2A,$88			; CB	136
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$2C,$B1,$E0		; CW	57521
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0812:                 is $68 // LAB
_B232 
; libsrc/jitcore.pla: 0813:                 is $6A // LAW
_B233 
; libsrc/jitcore.pla: 0814:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 0815:                     i    = i + 2
; libsrc/jitcore.pla: 0816:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0817:                         *codeptr = estkl8+$95+(VX<<8)   // STA ESTKL,X
; libsrc/jitcore.pla: 0818:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0819:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B234
	!WORD	_B234-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B234 
_B235 
; libsrc/jitcore.pla: 0820:                     VX--                                // DEX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/jitcore.pla: 0821:                     if opcode == $68
; libsrc/jitcore.pla: 0822:                         //puts("LAB $"); puth(dest)
; libsrc/jitcore.pla: 0823:                         if VY <> 0
; libsrc/jitcore.pla: 0824:                             *codeptr = $00A0            // LDY #$00
; libsrc/jitcore.pla: 0825:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0826:                             VY       = 0
; libsrc/jitcore.pla: 0827:                         fin
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$68			; CB	104
	!BYTE	$24			; BRNE	_B236
	!WORD	_B236-*
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B238
	!WORD	_B238-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B238 
_B239 
; libsrc/jitcore.pla: 0828:                         *codeptr = estkh8+$94+(VX<<8)   // STY ESTKH,X
; libsrc/jitcore.pla: 0829:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0830:                     else
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B237
	!WORD	_B237-*
_B236 
; libsrc/jitcore.pla: 0831:                         //puts("LAW $"); puth(dest)
; libsrc/jitcore.pla: 0832:                         codeptr->0 = $AD                // LDA abs+1
; libsrc/jitcore.pla: 0833:                         codeptr=>1 = dest+1
; libsrc/jitcore.pla: 0834:                         codeptr=>3 = estkh8+$95+(VX<<8) // STA ESTKH,X
; libsrc/jitcore.pla: 0835:                         codeptr    = codeptr + 5
; libsrc/jitcore.pla: 0836:                     fin
	!BYTE	$2A,$AD			; CB	173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$76,$02			; SLW	[2]
_B237 
; libsrc/jitcore.pla: 0837:                     codeptr->0 = $AD                    // LDA abs
; libsrc/jitcore.pla: 0838:                     codeptr=>1 = dest
; libsrc/jitcore.pla: 0839:                     codeptr    = codeptr + 3
; libsrc/jitcore.pla: 0840:                     A_IS_TOSL  = TOS_DIRTY              // STA ESTKL,X
; libsrc/jitcore.pla: 0841:                     break
	!BYTE	$2A,$AD			; CB	173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0842:                 is $6C // DLB
_B240 
; libsrc/jitcore.pla: 0843:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0844:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0845:                     //puts("DLB "); puti(j)
; libsrc/jitcore.pla: 0846:                    if not A_IS_TOSL
; libsrc/jitcore.pla: 0847:                         *codeptr  = estkl8+$B5+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 0848:                         codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0849:                         A_IS_TOSL = TOS_CLEAN
; libsrc/jitcore.pla: 0850:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B241
	!WORD	_B241-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$04			; CN	2
	!BYTE	$74,$14			; SLB	[20]
_B241 
_B242 
; libsrc/jitcore.pla: 0851:                     if VY <> j
; libsrc/jitcore.pla: 0852:                         *codeptr = $A0+(j<<8)          // LDY #imm
; libsrc/jitcore.pla: 0853:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0854:                         VY       = j
; libsrc/jitcore.pla: 0855:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B243
	!WORD	_B243-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$76,$10			; SLW	[16]
_B243 
_B244 
; libsrc/jitcore.pla: 0856:                     *codeptr = ifpl8+$91               // STA (IFP),Y
; libsrc/jitcore.pla: 0857:                     codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0858:                     if VY <> 0
; libsrc/jitcore.pla: 0859:                         *codeptr = $00A0               // LDY #$00
; libsrc/jitcore.pla: 0860:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0861:                         VY       = 0
; libsrc/jitcore.pla: 0862:                     fin
	!BYTE	$2C,$91,$E0		; CW	57489
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B245
	!WORD	_B245-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B245 
_B246 
; libsrc/jitcore.pla: 0863:                     *codeptr = estkh8+$94+(VX<<8)      // STY ESTKH,X
; libsrc/jitcore.pla: 0864:                     codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0865:                  break
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0866:                 is $6E // DLW
_B247 
; libsrc/jitcore.pla: 0867:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0868:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0869:                     //puts("DLW "); puti(j)
; libsrc/jitcore.pla: 0870:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 0871:                         *codeptr = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 0872:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0873:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B248
	!WORD	_B248-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B248 
_B249 
; libsrc/jitcore.pla: 0874:                     if VY <> j
; libsrc/jitcore.pla: 0875:                         *codeptr = $A0+((j+1)<<8)      // LDY #imm
; libsrc/jitcore.pla: 0876:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0877:                         VY       = j
; libsrc/jitcore.pla: 0878:                     else
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B250
	!WORD	_B250-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$8C			; INCR
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$50			; BRNCH	_B251
	!WORD	_B251-*
_B250 
; libsrc/jitcore.pla: 0879:                         ^codeptr = $C8; codeptr++      // INY
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0880:                     fin
	!BYTE	$76,$02			; SLW	[2]
_B251 
; libsrc/jitcore.pla: 0881:                     codeptr=>0 = estkh8+$B5+(VX<<8)    // LDA ESTKH,X
; libsrc/jitcore.pla: 0882:                     codeptr=>2 = ifpl8+$91             // STA (IFP),Y
; libsrc/jitcore.pla: 0883:                     codeptr->4 = $88                   // DEY
; libsrc/jitcore.pla: 0884:                     codeptr=>5 = estkl8+$B5+(VX<<8)    // LDA ESTKL,X
; libsrc/jitcore.pla: 0885:                     codeptr=>7 = ifpl8+$91             // STA (IFP),Y
; libsrc/jitcore.pla: 0886:                     codeptr    = codeptr + 9
; libsrc/jitcore.pla: 0887:                     A_IS_TOSL  = TOS_CLEAN
; libsrc/jitcore.pla: 0888:                     break
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$91,$E0		; CW	57489
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2A,$88			; CB	136
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$91,$E0		; CW	57489
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$04			; CN	2
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0889:                 is $70 // SB
_B252 
; libsrc/jitcore.pla: 0890:                 is $72 // SW
_B253 
; libsrc/jitcore.pla: 0891:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0892:                         *codeptr = estkl8+$B5+(VX<<8)          // LDA ESTKL,X
; libsrc/jitcore.pla: 0893:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0894:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B254
	!WORD	_B254-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B254 
_B255 
; libsrc/jitcore.pla: 0895:                     codeptr=>0 = estkh8+$95-$0100+(VX<<8)      // STA ESTKH-1,X
; libsrc/jitcore.pla: 0896:                     codeptr=>2 = estkl8+$B5+$0100+(VX<<8)      // LDA ESTKL+1,X
; libsrc/jitcore.pla: 0897:                     codeptr=>4 = estkh8+$81-$0100+(VX<<8)      // STA (ESTKH-1,X)
; libsrc/jitcore.pla: 0898:                     if opcode == $70
; libsrc/jitcore.pla: 0899:                         //puts("SB")
; libsrc/jitcore.pla: 0900:                         codeptr     = codeptr + 6
; libsrc/jitcore.pla: 0901:                     else
	!BYTE	$2C,$95,$BF		; CW	49045
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$D1		; CW	53685
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$81,$BF		; CW	49025
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$70			; CB	112
	!BYTE	$24			; BRNE	_B256
	!WORD	_B256-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B257
	!WORD	_B257-*
_B256 
; libsrc/jitcore.pla: 0902:                         //puts("SW")
; libsrc/jitcore.pla: 0903:                         codeptr=>6  = estkh8+$B5+$0100+(VX<<8) // LDA ESTKH+1,X
; libsrc/jitcore.pla: 0904:                         codeptr=>8  = estkh8+$F6-$0100+(VX<<8) // INC ESTKH-1,X
; libsrc/jitcore.pla: 0905:                         codeptr=>10 = $02D0                    // BNE +2
; libsrc/jitcore.pla: 0906:                         codeptr=>12 = estkh8+$F6+(VX<<8)       // INC ESTKH,X
; libsrc/jitcore.pla: 0907:                         codeptr=>14 = estkh8+$81-$0100+(VX<<8) // STA (ESTKH-1,X)
; libsrc/jitcore.pla: 0908:                         codeptr     = codeptr + 16
; libsrc/jitcore.pla: 0909:                     fin
	!BYTE	$2C,$B5,$C1		; CW	49589
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$BF		; CW	49142
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$D0,$02		; CW	720
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$C0		; CW	49398
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$2C,$81,$BF		; CW	49025
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$76,$02			; SLW	[2]
_B257 
; libsrc/jitcore.pla: 0910:                     VX        = VX + 2                         // INX; INX
; libsrc/jitcore.pla: 0911:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0912:                     break
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0913:                 is $74 // SLB
_B258 
; libsrc/jitcore.pla: 0914:                 is $76 // SLW
_B259 
; libsrc/jitcore.pla: 0915:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0916:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 0917:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0918:                         *codeptr  = estkl8+$B5+(VX<<8)  // LDA ESTKL,X
; libsrc/jitcore.pla: 0919:                         codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0920:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B260
	!WORD	_B260-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B260 
_B261 
; libsrc/jitcore.pla: 0921:                     if VY <> j
; libsrc/jitcore.pla: 0922:                         *codeptr = $A0+(j<<8)           // LDY #imm
; libsrc/jitcore.pla: 0923:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0924:                         VY       = j
; libsrc/jitcore.pla: 0925:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B262
	!WORD	_B262-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$76,$10			; SLW	[16]
_B262 
_B263 
; libsrc/jitcore.pla: 0926:                     codeptr=>0 = ifpl8+$91              // STA (IFP),Y
; libsrc/jitcore.pla: 0927:                     if opcode == $74
; libsrc/jitcore.pla: 0928:                         //puts("SLB "); puti(j)
; libsrc/jitcore.pla: 0929:                         codeptr    = codeptr + 2
; libsrc/jitcore.pla: 0930:                     else
	!BYTE	$2C,$91,$E0		; CW	57489
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$74			; CB	116
	!BYTE	$24			; BRNE	_B264
	!WORD	_B264-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B265
	!WORD	_B265-*
_B264 
; libsrc/jitcore.pla: 0931:                         //puts("SLW "); puti(j)
; libsrc/jitcore.pla: 0932:                         codeptr->2 = $C8                // INY
; libsrc/jitcore.pla: 0933:                         codeptr=>3 = estkh8+$B5+(VX<<8) // LDA ESTKH,X
; libsrc/jitcore.pla: 0934:                         codeptr=>5 = ifpl8+$91          // STA (IFP),Y
; libsrc/jitcore.pla: 0935:                         codeptr    = codeptr + 7
; libsrc/jitcore.pla: 0936:                         VY++
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$91,$E0		; CW	57489
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0937:                     fin
	!BYTE	$76,$10			; SLW	[16]
_B265 
; libsrc/jitcore.pla: 0938:                     VX++                                // INX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0939:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 0940:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0941:                 is $78 // SAB
_B266 
; libsrc/jitcore.pla: 0942:                 is $7A // SAW
_B267 
; libsrc/jitcore.pla: 0943:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 0944:                     i    = i + 2
; libsrc/jitcore.pla: 0945:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0946:                         *codeptr = estkl8+$B5+(VX<<8)   // LDA ESTKL,X
; libsrc/jitcore.pla: 0947:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0948:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B268
	!WORD	_B268-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B268 
_B269 
; libsrc/jitcore.pla: 0949:                     codeptr->0 = $8D                    // STA abs
; libsrc/jitcore.pla: 0950:                     codeptr=>1 = dest
; libsrc/jitcore.pla: 0951:                     if opcode ==  $78
; libsrc/jitcore.pla: 0952:                         //puts("SAB $"); puth(dest)
; libsrc/jitcore.pla: 0953:                         codeptr    = codeptr + 3
; libsrc/jitcore.pla: 0954:                     else
	!BYTE	$2A,$8D			; CB	141
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$78			; CB	120
	!BYTE	$24			; BRNE	_B270
	!WORD	_B270-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B271
	!WORD	_B271-*
_B270 
; libsrc/jitcore.pla: 0955:                         //puts("SAW $"); puth(dest)
; libsrc/jitcore.pla: 0956:                         codeptr=>3 = estkh8+$B5+(VX<<8) // LDA ESTKH,X
; libsrc/jitcore.pla: 0957:                         codeptr->5 = $8D                // STA abs+1
; libsrc/jitcore.pla: 0958:                         codeptr=>6 = dest+1
; libsrc/jitcore.pla: 0959:                         codeptr    = codeptr + 8
; libsrc/jitcore.pla: 0960:                     fin
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2A,$8D			; CB	141
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$76,$02			; SLW	[2]
_B271 
; libsrc/jitcore.pla: 0961:                     VX++                                // INX
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 0962:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 0963:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0964:                 is $7C // DAB
_B272 
; libsrc/jitcore.pla: 0965:                 is $7E // DAW
_B273 
; libsrc/jitcore.pla: 0966:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 0967:                     i    = i + 2
; libsrc/jitcore.pla: 0968:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0969:                         *codeptr  = estkl8+$B5+(VX<<8)  // LDA ESTKL,X
; libsrc/jitcore.pla: 0970:                         codeptr   = codeptr + 2
; libsrc/jitcore.pla: 0971:                         A_IS_TOSL = TOS_CLEAN
; libsrc/jitcore.pla: 0972:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B274
	!WORD	_B274-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$04			; CN	2
	!BYTE	$74,$14			; SLB	[20]
_B274 
_B275 
; libsrc/jitcore.pla: 0973:                     codeptr->0 = $8D                    // STA abs
; libsrc/jitcore.pla: 0974:                     codeptr=>1 = dest
; libsrc/jitcore.pla: 0975:                     if opcode == $7C
; libsrc/jitcore.pla: 0976:                         //puts("DAB $"); puth(dest)
; libsrc/jitcore.pla: 0977:                         codeptr    = codeptr + 3
; libsrc/jitcore.pla: 0978:                         if VY <> 0
; libsrc/jitcore.pla: 0979:                             *codeptr = $00A0            // LDY #$00
; libsrc/jitcore.pla: 0980:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0981:                             VY       = 0
; libsrc/jitcore.pla: 0982:                         fin
	!BYTE	$2A,$8D			; CB	141
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$7C			; CB	124
	!BYTE	$24			; BRNE	_B276
	!WORD	_B276-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B278
	!WORD	_B278-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B278 
_B279 
; libsrc/jitcore.pla: 0983:                         *codeptr = estkh8+$94+(VX<<8)   // STY ESTKH,X
; libsrc/jitcore.pla: 0984:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0985:                     else
	!BYTE	$2C,$94,$C0		; CW	49300
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B277
	!WORD	_B277-*
_B276 
; libsrc/jitcore.pla: 0986:                         //puts("DAW $"); puth(dest)
; libsrc/jitcore.pla: 0987:                         codeptr=>3 = estkh8+$B4+(VX<<8) // LDY ESTKH,X
; libsrc/jitcore.pla: 0988:                         codeptr->5 = $8C                // STY abs+1
; libsrc/jitcore.pla: 0989:                         codeptr=>6 = dest+1
; libsrc/jitcore.pla: 0990:                         codeptr    = codeptr + 8
; libsrc/jitcore.pla: 0991:                         VY         = UNKNOWN
; libsrc/jitcore.pla: 0992:                     fin
	!BYTE	$2C,$B4,$C0		; CW	49332
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2A,$8C			; CB	140
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
_B277 
; libsrc/jitcore.pla: 0993:                     break
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 0994:                 is $80 // NOT
_B280 
; libsrc/jitcore.pla: 0995:                     //puts("NOT")
; libsrc/jitcore.pla: 0996:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 0997:                         *codeptr = estkl8+$B5+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 0998:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 0999:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B281
	!WORD	_B281-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B281 
_B282 
; libsrc/jitcore.pla: 1000:                     codeptr=>0 = estkh8+$15+(VX<<8)   // ORA ESTKH,X
; libsrc/jitcore.pla: 1001:                     codeptr=>2 = $02F0                // BEQ +2
; libsrc/jitcore.pla: 1002:                     codeptr=>4 = $FFA9                // LDA #$FF
; libsrc/jitcore.pla: 1003:                     codeptr=>6 = $FF49                // EOR #$FF
; libsrc/jitcore.pla: 1004:                     codeptr=>8 = estkh8+$95+(VX<<8)   // STA ESTKH,X
; libsrc/jitcore.pla: 1005:                     codeptr    = codeptr + 10
; libsrc/jitcore.pla: 1006:                     A_IS_TOSL  = TOS_DIRTY            // STA ESTKL,X
; libsrc/jitcore.pla: 1007:                     break
	!BYTE	$2C,$15,$C0		; CW	49173
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$F0,$02		; CW	752
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$5E,$A9			; CFFB	65449
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$5E,$49			; CFFB	65353
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1008:                 is $82 // ADD
_B283 
; libsrc/jitcore.pla: 1009:                     //puts("ADD")
; libsrc/jitcore.pla: 1010:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1011:                         *codeptr = estkl8+$B5+(VX<<8)     // LDA ESTKL,X
; libsrc/jitcore.pla: 1012:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1013:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B284
	!WORD	_B284-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B284 
_B285 
; libsrc/jitcore.pla: 1014:                     codeptr->0 = $18                      // CLC
; libsrc/jitcore.pla: 1015:                     codeptr=>1 = estkl8+$75+$0100+(VX<<8) // ADC ESTKL+1,X
; libsrc/jitcore.pla: 1016:                     codeptr=>3 = estkl8+$95+$0100+(VX<<8) // STA ESTKL+1,X
; libsrc/jitcore.pla: 1017:                     codeptr=>5 = estkh8+$B5+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 1018:                     codeptr=>7 = estkh8+$75+$0100+(VX<<8) // ADC ESTKH+1,X
; libsrc/jitcore.pla: 1019:                     codeptr=>9 = estkh8+$95+$0100+(VX<<8) // STA ESTKH+1,X
; libsrc/jitcore.pla: 1020:                     codeptr    = codeptr + 11
; libsrc/jitcore.pla: 1021:                     VX++                                  // INX
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$D1		; CW	53621
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D1		; CW	53653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$75,$C1		; CW	49525
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C1		; CW	49557
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1022:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 1023:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1024:                 is $84 // SUB
_B286 
; libsrc/jitcore.pla: 1025:                     //puts("SUB")
; libsrc/jitcore.pla: 1026:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1027:                         *codeptr = estkl8+$95+(VX<<8)      // STA ESTKL,X
; libsrc/jitcore.pla: 1028:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1029:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B287
	!WORD	_B287-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B287 
_B288 
; libsrc/jitcore.pla: 1030:                     codeptr=>0  = estkl8+$B5+$0100+(VX<<8) // LDA ESTKL+1,X
; libsrc/jitcore.pla: 1031:                     codeptr->2  = $38                      // SEC
; libsrc/jitcore.pla: 1032:                     codeptr=>3  = estkl8+$F5+(VX<<8)       // SBC ESTKL,X
; libsrc/jitcore.pla: 1033:                     codeptr=>5  = estkl8+$95+$0100+(VX<<8) // STA ESTKL+1,X
; libsrc/jitcore.pla: 1034:                     codeptr=>7  = estkh8+$B5+$0100+(VX<<8) // LDA ESTKH+1,X
; libsrc/jitcore.pla: 1035:                     codeptr=>9  = estkh8+$F5+(VX<<8)       // SBC ESTKH,X
; libsrc/jitcore.pla: 1036:                     codeptr=>11 = estkh8+$95+$0100+(VX<<8) // STA ESTKH+1,X
; libsrc/jitcore.pla: 1037:                     codeptr     = codeptr + 13
; libsrc/jitcore.pla: 1038:                     VX++                                   // INX
	!BYTE	$2C,$B5,$D1		; CW	53685
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2A,$38			; CB	56
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2C,$F5,$D0		; CW	53493
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D1		; CW	53653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C1		; CW	49589
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C0		; CW	49397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C1		; CW	49557
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1039:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1040:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1041:                 is $86 // MUL
_B289 
; libsrc/jitcore.pla: 1042:                 is $88 // DIV
_B290 
; libsrc/jitcore.pla: 1043:                 is $8A // MOD
_B291 
; libsrc/jitcore.pla: 1044:                 is $9A // SHL
_B292 
; libsrc/jitcore.pla: 1045:                 is $9C // SHR
_B293 
; libsrc/jitcore.pla: 1046:                     //puts("MUL,DIV,MOD,SHL,SHR")
; libsrc/jitcore.pla: 1047:                     //  when opcode
; libsrc/jitcore.pla: 1048:                     //        is $86
; libsrc/jitcore.pla: 1049:                     //            //puts("MUL")
; libsrc/jitcore.pla: 1050:                     //        is $88
; libsrc/jitcore.pla: 1051:                     //            //puts("DIV")
; libsrc/jitcore.pla: 1052:                     //        is $8A
; libsrc/jitcore.pla: 1053:                     //            //puts("MOD")
; libsrc/jitcore.pla: 1054:                     //         is $9A
; libsrc/jitcore.pla: 1055:                     //            //puts("SHL")
; libsrc/jitcore.pla: 1056:                     //        is $9C
; libsrc/jitcore.pla: 1057:                     //            //puts("SHR")
; libsrc/jitcore.pla: 1058:                     //  wend
; libsrc/jitcore.pla: 1059:                     //
; libsrc/jitcore.pla: 1060:                     // Call into VM
; libsrc/jitcore.pla: 1061:                     //
; libsrc/jitcore.pla: 1062:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 1063:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1064:                         *codeptr = estkl8+$95//+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1065:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1066:                     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F019 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B294
	!WORD	_B294-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B294 
_B295 
; libsrc/jitcore.pla: 1067:                     codeptr->0 = $20               // JSR INTERP
; libsrc/jitcore.pla: 1068:                     codeptr=>1 = directentry       // INTERP
; libsrc/jitcore.pla: 1069:                     codeptr=>3 = $C000+opcode      // OPCODE; NATV CODE
; libsrc/jitcore.pla: 1070:                     codeptr    = codeptr + 5
; libsrc/jitcore.pla: 1071:                     VY         = UNKNOWN
; libsrc/jitcore.pla: 1072:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 1073:                     break
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$00,$C0		; CW	49152
	!BYTE	$B0,$12			; ADDLB	[18]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1074:                 is $90 // NEG
_B296 
; libsrc/jitcore.pla: 1075:                     //puts("NEG")
; libsrc/jitcore.pla: 1076:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1077:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1078:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1079:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B297
	!WORD	_B297-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B297 
_B298 
; libsrc/jitcore.pla: 1080:                     if VY <> 0
; libsrc/jitcore.pla: 1081:                         *codeptr = $00A0              // LDY #$00
; libsrc/jitcore.pla: 1082:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1083:                         VY       = 0
; libsrc/jitcore.pla: 1084:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B299
	!WORD	_B299-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
_B299 
_B300 
; libsrc/jitcore.pla: 1085:                     codeptr=>0 = $3898                // TYA -> LDA #$00; SEC
; libsrc/jitcore.pla: 1086:                     codeptr=>2 = estkl8+$F5+(VX<<8)   // SBC ESTKL,X
; libsrc/jitcore.pla: 1087:                     codeptr=>4 = estkl8+$95+(VX<<8)   // STA ESTKL,X
; libsrc/jitcore.pla: 1088:                     codeptr->6 = $98                  // TYA -> LDA #00
; libsrc/jitcore.pla: 1089:                     codeptr=>7 = estkh8+$F5+(VX<<8)   // SBC ESTKH,X
; libsrc/jitcore.pla: 1090:                     codeptr=>9 = estkh8+$95+(VX<<8)   // STA ESTKH,X
; libsrc/jitcore.pla: 1091:                     codeptr    = codeptr + 11
; libsrc/jitcore.pla: 1092:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 1093:                     break
	!BYTE	$2C,$98,$38		; CW	14488
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$D0		; CW	53493
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
	!BYTE	$2C,$F5,$C0		; CW	49397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1094:                 is $92 // COMP
_B301 
; libsrc/jitcore.pla: 1095:                     //puts("COMP")
; libsrc/jitcore.pla: 1096:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1097:                         *codeptr = estkl8+$B5+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 1098:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1099:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B302
	!WORD	_B302-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B302 
_B303 
; libsrc/jitcore.pla: 1100:                     codeptr=>0 = $FF49                // EOR #$FF
; libsrc/jitcore.pla: 1101:                     codeptr=>2 = estkl8+$95+(VX<<8)   // STA ESTKL,X
; libsrc/jitcore.pla: 1102:                     codeptr=>4 = estkh8+$B5+(VX<<8)   // LDA ESTKH,X
; libsrc/jitcore.pla: 1103:                     codeptr=>6 = $FF49                // EOR #$FF
; libsrc/jitcore.pla: 1104:                     codeptr=>8 = estkh8+$95+(VX<<8)   // STA ESTKH,X
; libsrc/jitcore.pla: 1105:                     codeptr    = codeptr + 10
; libsrc/jitcore.pla: 1106:                     A_IS_TOSL  = FALSE
; libsrc/jitcore.pla: 1107:                     break
	!BYTE	$5E,$49			; CFFB	65353
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$5E,$49			; CFFB	65353
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1108:                 is $94 // AND
_B304 
; libsrc/jitcore.pla: 1109:                 is $96 // OR
_B305 
; libsrc/jitcore.pla: 1110:                 is $98 // XOR
_B306 
; libsrc/jitcore.pla: 1111:                     when opcode
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$52			; SEL
	!WORD	_B308-*
; libsrc/jitcore.pla: 1112:                         is $94
_B309 
; libsrc/jitcore.pla: 1113:                             //puts("AND")
; libsrc/jitcore.pla: 1114:                             j = $35
; libsrc/jitcore.pla: 1115:                             break
	!BYTE	$2A,$35			; CB	53
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$50			; BRNCH	_B307
	!WORD	_B307-*
; libsrc/jitcore.pla: 1116:                         is $96
_B310 
; libsrc/jitcore.pla: 1117:                             //puts("OR")
; libsrc/jitcore.pla: 1118:                             j = $15
; libsrc/jitcore.pla: 1119:                             break
	!BYTE	$2A,$15			; CB	21
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$50			; BRNCH	_B307
	!WORD	_B307-*
; libsrc/jitcore.pla: 1120:                         is $98
_B311 
; libsrc/jitcore.pla: 1121:                             //puts("XOR")
; libsrc/jitcore.pla: 1122:                             j = $55
; libsrc/jitcore.pla: 1123:                     wend
	!BYTE	$2A,$55			; CB	85
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$50			; BRNCH	_B307
	!WORD	_B307-*
_B308 
	!BYTE	$03			; CASEBLOCK
	!WORD	$0094
	!WORD	_B309-*
	!WORD	$0096
	!WORD	_B310-*
	!WORD	$0098
	!WORD	_B311-*
_B307 
; libsrc/jitcore.pla: 1124:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1125:                         *codeptr = estkl8+$B5+(VX<<8)      // LDA ESTKL,X
; libsrc/jitcore.pla: 1126:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1127:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B312
	!WORD	_B312-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B312 
_B313 
; libsrc/jitcore.pla: 1128:                     codeptr->0  = j                        // OP
; libsrc/jitcore.pla: 1129:                     codeptr->1  = estkl+$01+VX             //     ESTKL+1,X
; libsrc/jitcore.pla: 1130:                     codeptr=>2  = estkl8+$95+$0100+(VX<<8) // STA ESTKL+1,X
; libsrc/jitcore.pla: 1131:                     codeptr=>4  = estkh8+$B5+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 1132:                     codeptr->6  = j                        // OP
; libsrc/jitcore.pla: 1133:                     codeptr->7  = estkh+$01+VX             //     ESTKH+1,X
; libsrc/jitcore.pla: 1134:                     codeptr=>8  = estkh8+$95+$0100+(VX<<8) // STA ESTKH+1,X
; libsrc/jitcore.pla: 1135:                     codeptr     = codeptr + 10
; libsrc/jitcore.pla: 1136:                     VX++                                   // INX
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2A,$D1			; CB	209
	!BYTE	$B2,$0E			; ADDLW	[14]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$2C,$95,$D1		; CW	53653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
	!BYTE	$2A,$C1			; CB	193
	!BYTE	$B2,$0E			; ADDLW	[14]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$70			; SB
	!BYTE	$2C,$95,$C1		; CW	49557
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1137:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1138:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1139:                 is $9E // IDXW
_B314 
; libsrc/jitcore.pla: 1140:                     //puts("IDXW")
; libsrc/jitcore.pla: 1141:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1142:                         *codeptr = estkl8+$B5+(VX<<8)      // LDA ESTKL,X
; libsrc/jitcore.pla: 1143:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1144:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B315
	!WORD	_B315-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B315 
_B316 
; libsrc/jitcore.pla: 1145:                     codeptr->0  = $0A                      // ASL
; libsrc/jitcore.pla: 1146:                     codeptr=>1  = estkh8+$36+(VX<<8)       // ROL ESTKH,X
; libsrc/jitcore.pla: 1147:                     codeptr->3  = $18                      // CLC
; libsrc/jitcore.pla: 1148:                     codeptr=>4  = estkl8+$75+$0100+(VX<<8) // ADC ESTKL+1,X
; libsrc/jitcore.pla: 1149:                     codeptr=>6  = estkl8+$95+$0100+(VX<<8) // STA ESTKL+1,X
; libsrc/jitcore.pla: 1150:                     codeptr=>8  = estkh8+$B5+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 1151:                     codeptr=>10 = estkh8+$75+$0100+(VX<<8) // ADC ESTKH+1,X
; libsrc/jitcore.pla: 1152:                     codeptr=>12 = estkh8+$95+$0100+(VX<<8) // STA ESTKH+1,X
; libsrc/jitcore.pla: 1153:                     codeptr     = codeptr + 14
; libsrc/jitcore.pla: 1154:                     VX++                                   // INX
	!BYTE	$14			; CN	10
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$36,$C0		; CW	49206
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$D1		; CW	53621
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D1		; CW	53653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$75,$C1		; CW	49525
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C1		; CW	49557
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1155:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1156:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1157:                 is $A0 // BRGT - FOR/NEXT SPECIFIC TEST & BRANCH
_B317 
; libsrc/jitcore.pla: 1158:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1159:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 1160:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1161:                     //puts("BRGT "); puti(dest)
; libsrc/jitcore.pla: 1162:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 1163:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1164:                         *codeptr = estkl8+$95//+(VX<<8)      // STA ESTKL,X
; libsrc/jitcore.pla: 1165:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1166:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F020 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B318
	!WORD	_B318-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B318 
_B319 
; libsrc/jitcore.pla: 1167:                     codeptr=>0  = estkl8+$B5+$0100//+(VX<<8) // LDA ESTKL+1,X
; libsrc/jitcore.pla: 1168:                     codeptr=>2  = estkl8+$D5//+(VX<<8)       // CMP ESTKL,X
; libsrc/jitcore.pla: 1169:                     codeptr=>4  = estkh8+$B5+$0100//+(VX<<8) // LDA ESTKH+1,X
; libsrc/jitcore.pla: 1170:                     codeptr=>6  = estkh8+$F5//+(VX<<8)       // SBC ESTKH
; libsrc/jitcore.pla: 1171:                     codeptr=>8  = $0250                      // BVC +2
; libsrc/jitcore.pla: 1172:                     codeptr=>10 = $8049                      // EOR #$80
; libsrc/jitcore.pla: 1173:                     codeptr=>12 = $0310                      // BPL +3
; libsrc/jitcore.pla: 1174:                     codeptr->14 = $4C                        // JMP abs
; libsrc/jitcore.pla: 1175:                     codeptr=>15 = addrxlate=>[dest]
; libsrc/jitcore.pla: 1176:                     if not (codeptr->16 & $80) // Unresolved address list
; libsrc/jitcore.pla: 1177:                         addrxlate=>[dest] = codeptr + 15 - *jitcodeptr
; libsrc/jitcore.pla: 1178:                     fin
	!BYTE	$2C,$B5,$D1		; CW	53685
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$D5,$D0		; CW	53461
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C1		; CW	49589
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C0		; CW	49397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$50,$02		; CW	592
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$49,$80		; CW	32841
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$10,$03		; CW	784
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B320
	!WORD	_B320-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B320 
_B321 
; libsrc/jitcore.pla: 1179:                     codeptr   = codeptr + 17
; libsrc/jitcore.pla: 1180:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 1181:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1182:                 is $A2 // BRLT - FOR/NEXT SPECIFIC TEST & BRANCH
_B322 
; libsrc/jitcore.pla: 1183:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1184:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 1185:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1186:                     //puts("BRLT "); puti(dest)
; libsrc/jitcore.pla: 1187:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 1188:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1189:                         *codeptr = estkl8+$B5//+(VX<<8)      // LDA ESTKL,X
; libsrc/jitcore.pla: 1190:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1191:                     elsif A_IS_TOSL & TOS_DIRTY
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F021 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B323
	!WORD	_B323-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B324
	!WORD	_B324-*
_B323 
; libsrc/jitcore.pla: 1192:                         *codeptr = estkl8+$95//+(VX<<8)      // STA ESTKL,X
; libsrc/jitcore.pla: 1193:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1194:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B325
	!WORD	_B325-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B325 
_B324 
; libsrc/jitcore.pla: 1195:                     codeptr=>0  = estkl8+$D5+$0100//+(VX<<8) // CMP ESTKL+1,X
; libsrc/jitcore.pla: 1196:                     codeptr=>2  = estkh8+$B5//+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 1197:                     codeptr=>4  = estkh8+$F5+$0100//+(VX<<8) // SBC ESTKH+1
; libsrc/jitcore.pla: 1198:                     codeptr=>6  = $0250                      // BVC +2
; libsrc/jitcore.pla: 1199:                     codeptr=>8  = $8049                      // EOR #$80
; libsrc/jitcore.pla: 1200:                     codeptr=>10 = $0310                      // BPL +3
; libsrc/jitcore.pla: 1201:                     codeptr->12 = $4C                        // JMP abs
; libsrc/jitcore.pla: 1202:                     codeptr=>13 = addrxlate=>[dest]
; libsrc/jitcore.pla: 1203:                     if not (codeptr->14 & $80) // Unresolved address list
; libsrc/jitcore.pla: 1204:                         addrxlate=>[dest] = codeptr + 13 - *jitcodeptr
; libsrc/jitcore.pla: 1205:                     fin
	!BYTE	$2C,$D5,$D1		; CW	53717
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C1		; CW	49653
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$50,$02		; CW	592
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$49,$80		; CW	32841
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$10,$03		; CW	784
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B326
	!WORD	_B326-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B326 
_B327 
; libsrc/jitcore.pla: 1206:                     codeptr   = codeptr + 15
; libsrc/jitcore.pla: 1207:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 1208:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1209:                 is $A4 // INCBRLE - FOR/NEXT SPECIFIC INC & TEST & BRANCH
_B328 
; libsrc/jitcore.pla: 1210:                 is $A6 // ADDBRLE - FOR/NEXT SPECIFIC ADD & TEST & BRANCH
_B329 
; libsrc/jitcore.pla: 1211:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1212:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 1213:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1214:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1215:                         *codeptr = estkl8+$B5+(VX<<8)                     // LDA ESTKL,X
; libsrc/jitcore.pla: 1216:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1217:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B330
	!WORD	_B330-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B330 
_B331 
; libsrc/jitcore.pla: 1218:                     if opcode == $A4
; libsrc/jitcore.pla: 1219:                         //
; libsrc/jitcore.pla: 1220:                         // INCR
; libsrc/jitcore.pla: 1221:                         //
; libsrc/jitcore.pla: 1222:                         //puts("INCBRLE "); puti(dest)
; libsrc/jitcore.pla: 1223:                         codeptr->0 = $18                                  // CLC
; libsrc/jitcore.pla: 1224:                         codeptr=>1 = $0169                                // ADC #$01
; libsrc/jitcore.pla: 1225:                         codeptr=>3 = estkl8+$95+(VX<<8)                   // STA ESTKL,X
; libsrc/jitcore.pla: 1226:                         codeptr=>5 = $0290                                // BCC +2
; libsrc/jitcore.pla: 1227:                         codeptr=>7 = estkh8+$F6+(VX<<8)                   // INC ESTKH,X
; libsrc/jitcore.pla: 1228:                         codeptr, VX = resolveX(codeptr + 9, VX)
; libsrc/jitcore.pla: 1229:                     else
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$A4			; CB	164
	!BYTE	$24			; BRNE	_B332
	!WORD	_B332-*
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$69,$01		; CW	361
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$90,$02		; CW	656
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$C0		; CW	49398
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F022 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B333
	!WORD	_B333-*
_B332 
; libsrc/jitcore.pla: 1230:                         //
; libsrc/jitcore.pla: 1231:                         // ADD
; libsrc/jitcore.pla: 1232:                         //
; libsrc/jitcore.pla: 1233:                         //puts("ADDBRLE "); puti(dest)
; libsrc/jitcore.pla: 1234:                         codeptr->0 = $18                                  // CLC
; libsrc/jitcore.pla: 1235:                         codeptr=>1 = estkl8+$75+$0100+(VX<<8)             // ADC ESTKL+1,X
; libsrc/jitcore.pla: 1236:                         codeptr=>3 = estkl8+$95+$0100+(VX<<8)             // STA ESTKL+1,X
; libsrc/jitcore.pla: 1237:                         codeptr=>5 = estkh8+$B5+(VX<<8)                   // LDA ESTKH,X
; libsrc/jitcore.pla: 1238:                         codeptr=>7 = estkh8+$75+$0100+(VX<<8)             // ADC ESTKH+1,X
; libsrc/jitcore.pla: 1239:                         codeptr=>9 = estkh8+$95+$0100+(VX<<8)             // STA ESTKH+1,X
; libsrc/jitcore.pla: 1240:                         codeptr, VX = resolveX(codeptr + 11, VX + 1)      // INX
; libsrc/jitcore.pla: 1241:                     fin
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$D1		; CW	53621
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D1		; CW	53653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$75,$C1		; CW	49525
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C1		; CW	49557
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C001
_F023 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
_B333 
; libsrc/jitcore.pla: 1242:                     //
; libsrc/jitcore.pla: 1243:                     // BRLE
; libsrc/jitcore.pla: 1244:                     //
; libsrc/jitcore.pla: 1245:                     codeptr=>0  = estkl8+$B5+$0100//+(VX<<8) // LDA ESTKL+1,X
; libsrc/jitcore.pla: 1246:                     codeptr=>2  = estkl8+$D5//+(VX<<8)       // CMP ESTKL,X
; libsrc/jitcore.pla: 1247:                     codeptr=>4  = estkh8+$B5+$0100//+(VX<<8) // LDA ESTKH+1,X
; libsrc/jitcore.pla: 1248:                     codeptr=>6  = estkh8+$F5//+(VX<<8)       // SBC ESTKH
; libsrc/jitcore.pla: 1249:                     codeptr=>8  = $0250                      // BVC +2
; libsrc/jitcore.pla: 1250:                     codeptr=>10 = $8049                      // EOR #$80
; libsrc/jitcore.pla: 1251:                     codeptr=>12 = $0330                      // BMI +3
; libsrc/jitcore.pla: 1252:                     codeptr->14 = $4C                        // JMP abs
; libsrc/jitcore.pla: 1253:                     codeptr=>15 = addrxlate=>[dest]
; libsrc/jitcore.pla: 1254:                     if not (codeptr->16 & $80) // Unresolved address list
; libsrc/jitcore.pla: 1255:                         addrxlate=>[dest] = codeptr + 15 - *jitcodeptr
; libsrc/jitcore.pla: 1256:                     fin
	!BYTE	$2C,$B5,$D1		; CW	53685
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$D5,$D0		; CW	53461
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C1		; CW	49589
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C0		; CW	49397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$50,$02		; CW	592
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$49,$80		; CW	32841
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$30,$03		; CW	816
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B334
	!WORD	_B334-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B334 
_B335 
; libsrc/jitcore.pla: 1257:                     codeptr     = codeptr + 17
; libsrc/jitcore.pla: 1258:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1259:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1260:                 is $A8 // DECBRGR - FOR/NEXT SPECIFIC DEC & TEST & BRANCH
_B336 
; libsrc/jitcore.pla: 1261:                 is $AA // SUBBRGE - FOR/NEXT SPECIFIC SUB & TEST & BRANCH
_B337 
; libsrc/jitcore.pla: 1262:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1263:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 1264:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1265:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1266:                         *codeptr = estkl8+$95+(VX<<8)                     // STA ESTKL,X
; libsrc/jitcore.pla: 1267:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1268:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B338
	!WORD	_B338-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B338 
_B339 
; libsrc/jitcore.pla: 1269:                     if opcode == $A8
; libsrc/jitcore.pla: 1270:                         //
; libsrc/jitcore.pla: 1271:                         // DECR
; libsrc/jitcore.pla: 1272:                         //
; libsrc/jitcore.pla: 1273:                         //puts("DECBRGE "); puti(dest)
; libsrc/jitcore.pla: 1274:                         if not A_IS_TOSL
; libsrc/jitcore.pla: 1275:                             *codeptr = estkl8+$B5+(VX<<8)                 // LDA ESTKL,X
; libsrc/jitcore.pla: 1276:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1277:                         fin
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$A8			; CB	168
	!BYTE	$24			; BRNE	_B340
	!WORD	_B340-*
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B342
	!WORD	_B342-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B342 
_B343 
; libsrc/jitcore.pla: 1278:                         codeptr->0 = $38                                  // SEC
; libsrc/jitcore.pla: 1279:                         codeptr=>1 = $01E9                                // SBC #$01
; libsrc/jitcore.pla: 1280:                         codeptr=>3 = estkl8+$95+(VX<<8)                   // STA ESTKL,X
; libsrc/jitcore.pla: 1281:                         codeptr=>5 = $02B0                                // BCS +2
; libsrc/jitcore.pla: 1282:                         codeptr=>7 = estkh8+$D6+(VX<<8)                   // DEC ESTKH,X
; libsrc/jitcore.pla: 1283:                         codeptr, VX = resolveX(codeptr + 9, VX)
; libsrc/jitcore.pla: 1284:                     else
	!BYTE	$2A,$38			; CB	56
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$E9,$01		; CW	489
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$B0,$02		; CW	688
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$D6,$C0		; CW	49366
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F024 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B341
	!WORD	_B341-*
_B340 
; libsrc/jitcore.pla: 1285:                         //
; libsrc/jitcore.pla: 1286:                         // SUB
; libsrc/jitcore.pla: 1287:                         //
; libsrc/jitcore.pla: 1288:                         //puts("SUBBRGE "); puti(dest)
; libsrc/jitcore.pla: 1289:                         if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1290:                             *codeptr = estkl8+$95+(VX<<8)                 // STA ESTKL,X
; libsrc/jitcore.pla: 1291:                             codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1292:                         fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B344
	!WORD	_B344-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B344 
_B345 
; libsrc/jitcore.pla: 1293:                         codeptr=>0  = estkl8+$B5+$0100+(VX<<8)            // LDA ESTKL+1,X
; libsrc/jitcore.pla: 1294:                         codeptr->2  = $38                                 // SEC
; libsrc/jitcore.pla: 1295:                         codeptr=>3  = estkl8+$F5+(VX<<8)                  // SBC ESTKL,X
; libsrc/jitcore.pla: 1296:                         codeptr=>5  = estkl8+$95+$0100+(VX<<8)            // STA ESTKL+1,X
; libsrc/jitcore.pla: 1297:                         codeptr=>7  = estkh8+$B5+$0100+(VX<<8)            // LDA ESTKH+1,X
; libsrc/jitcore.pla: 1298:                         codeptr=>9  = estkh8+$F5+(VX<<8)                  // SBC ESTKH,X
; libsrc/jitcore.pla: 1299:                         codeptr=>11 = estkh8+$95+$0100+(VX<<8)            // STA ESTKH+1,X
; libsrc/jitcore.pla: 1300:                         codeptr, VX = resolveX(codeptr + 13, VX + 1)      // INX
; libsrc/jitcore.pla: 1301:                         *codeptr    = estkl8+$B5//+(VX<<8)                // LDA ESTKL,X
; libsrc/jitcore.pla: 1302:                         codeptr     = codeptr + 2
; libsrc/jitcore.pla: 1303:                     fin
	!BYTE	$2C,$B5,$D1		; CW	53685
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2A,$38			; CB	56
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2C,$F5,$D0		; CW	53493
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D1		; CW	53653
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C1		; CW	49589
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C0		; CW	49397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C1		; CW	49557
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C001
_F025 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B341 
; libsrc/jitcore.pla: 1304:                     //
; libsrc/jitcore.pla: 1305:                     // BRGE
; libsrc/jitcore.pla: 1306:                     //
; libsrc/jitcore.pla: 1307:                     codeptr=>0  = estkl8+$D5+$0100//+(VX<<8) // CMP ESTKL+1,X
; libsrc/jitcore.pla: 1308:                     codeptr=>2  = estkh8+$B5//+(VX<<8)       // LDA ESTKH,X
; libsrc/jitcore.pla: 1309:                     codeptr=>4  = estkh8+$F5+$0100//+(VX<<8) // SBC ESTKH+1,X
; libsrc/jitcore.pla: 1310:                     codeptr=>6  = $0250                      // BVC +2
; libsrc/jitcore.pla: 1311:                     codeptr=>8  = $8049                      // EOR #$80
; libsrc/jitcore.pla: 1312:                     codeptr=>10 = $0330                      // BMI +3
; libsrc/jitcore.pla: 1313:                     codeptr->12 = $4C                        // JMP abs
; libsrc/jitcore.pla: 1314:                     codeptr=>13 = addrxlate=>[dest]
; libsrc/jitcore.pla: 1315:                     if not (codeptr->14 & $80) // Unresolved address list
; libsrc/jitcore.pla: 1316:                         addrxlate=>[dest] = codeptr + 13 - *jitcodeptr
; libsrc/jitcore.pla: 1317:                     fin
	!BYTE	$2C,$D5,$D1		; CW	53717
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$F5,$C1		; CW	49653
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$50,$02		; CW	592
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$49,$80		; CW	32841
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$30,$03		; CW	816
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B346
	!WORD	_B346-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B346 
_B347 
; libsrc/jitcore.pla: 1318:                     codeptr     = codeptr + 15
; libsrc/jitcore.pla: 1319:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1320:                     break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1321:                 is $AC // BRAND - LOGICAL AND SPECIFIC BRANCH
_B348 
; libsrc/jitcore.pla: 1322:                 is $AE // BROR - LOGICAL OR SPECIFIC BRANCH
_B349 
; libsrc/jitcore.pla: 1323:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1324:                     dest = i + *(bytecode+i)
; libsrc/jitcore.pla: 1325:                     i++
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1326:                     codeptr, VX = resolveX(codeptr, VX)
; libsrc/jitcore.pla: 1327:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1328:                         *codeptr = estkl8+$B5//+(VX<<8) // LDA ESTKL,X
; libsrc/jitcore.pla: 1329:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1330:                     elsif A_IS_TOSL & TOS_DIRTY
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C001
_F026 	!WORD	_C001		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B350
	!WORD	_B350-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B351
	!WORD	_B351-*
_B350 
; libsrc/jitcore.pla: 1331:                         *codeptr = estkl8+$95//+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1332:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1333:                     fin
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B352
	!WORD	_B352-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B352 
_B351 
; libsrc/jitcore.pla: 1334:                     codeptr=>0 = estkh8+$15//+(VX<<8)   // ORA ESTKH,X
; libsrc/jitcore.pla: 1335:                     if opcode == $AC
; libsrc/jitcore.pla: 1336:                         //puts("BRAND "); puti(dest)
; libsrc/jitcore.pla: 1337:                         codeptr=>2 = $03D0              // BNE +3
; libsrc/jitcore.pla: 1338:                     else
	!BYTE	$2C,$15,$C0		; CW	49173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$24			; BRNE	_B353
	!WORD	_B353-*
	!BYTE	$2C,$D0,$03		; CW	976
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B354
	!WORD	_B354-*
_B353 
; libsrc/jitcore.pla: 1339:                         //puts("BROR "); puti(dest)
; libsrc/jitcore.pla: 1340:                         codeptr=>2 = $03F0              // BEQ +3
; libsrc/jitcore.pla: 1341:                     fin
	!BYTE	$2C,$F0,$03		; CW	1008
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
_B354 
; libsrc/jitcore.pla: 1342:                     codeptr->4 = $4C                    // JMP abs
; libsrc/jitcore.pla: 1343:                     codeptr=>5 = addrxlate=>[dest]
; libsrc/jitcore.pla: 1344:                     if not (codeptr->6 & $80) // Unresolved address list
; libsrc/jitcore.pla: 1345:                         addrxlate=>[dest] = codeptr + 5 - *jitcodeptr
; libsrc/jitcore.pla: 1346:                     fin
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B355
	!WORD	_B355-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$84			; SUB 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$BA,$0C			; IDXLW	[12]
	!BYTE	$72			; SW
_B355 
_B356 
; libsrc/jitcore.pla: 1347:                     codeptr   = codeptr + 7
; libsrc/jitcore.pla: 1348:                     VX++                                // INX
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1349:                     A_IS_TOSL = FALSE
; libsrc/jitcore.pla: 1350:                     break
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1351:                 is $B0 // ADDLB
_B357 
; libsrc/jitcore.pla: 1352:                 is $B2 // ADDLW
_B358 
; libsrc/jitcore.pla: 1353:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1354:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 1355:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1356:                         *codeptr = estkl8+$B5+(VX<<8)    // LDA ESTKL,X
; libsrc/jitcore.pla: 1357:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1358:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B359
	!WORD	_B359-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B359 
_B360 
; libsrc/jitcore.pla: 1359:                     if VY <> j
; libsrc/jitcore.pla: 1360:                         *codeptr = $A0+(j<<8)            // LDY #imm
; libsrc/jitcore.pla: 1361:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1362:                         VY       = j
; libsrc/jitcore.pla: 1363:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B361
	!WORD	_B361-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$76,$10			; SLW	[16]
_B361 
_B362 
; libsrc/jitcore.pla: 1364:                     codeptr->0 = $18                     // CLC
; libsrc/jitcore.pla: 1365:                     codeptr=>1 = ifpl8+$71               // ADC (IFP),Y
; libsrc/jitcore.pla: 1366:                     if opcode == $B0
; libsrc/jitcore.pla: 1367:                         //puts("ADDLB "); puti(j)
; libsrc/jitcore.pla: 1368:                         codeptr=>3  = $0290              // BCC +2
; libsrc/jitcore.pla: 1369:                         codeptr=>5  = estkh8+$F6+(VX<<8) // INC ESTKH,X
; libsrc/jitcore.pla: 1370:                         codeptr     = codeptr + 7
; libsrc/jitcore.pla: 1371:                         A_IS_TOSL   = TOS_DIRTY          // STA ESTKL,X
; libsrc/jitcore.pla: 1372:                     else
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$71,$E0		; CW	57457
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$B0			; CB	176
	!BYTE	$24			; BRNE	_B363
	!WORD	_B363-*
	!BYTE	$2C,$90,$02		; CW	656
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$C0		; CW	49398
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B364
	!WORD	_B364-*
_B363 
; libsrc/jitcore.pla: 1373:                         //puts("ADDLW "); puti(j)
; libsrc/jitcore.pla: 1374:                         codeptr=>3  = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1375:                         codeptr=>5  = estkh8+$B5+(VX<<8) // LDA ESTKH,X
; libsrc/jitcore.pla: 1376:                         codeptr->7  = $C8                // INY
; libsrc/jitcore.pla: 1377:                         codeptr=>8  = ifpl8+$71          // ADC (IFP),Y
; libsrc/jitcore.pla: 1378:                         codeptr=>10 = estkh8+$95+(VX<<8) // STA ESTKH,X
; libsrc/jitcore.pla: 1379:                         codeptr     = codeptr + 12
; libsrc/jitcore.pla: 1380:                         VY++
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$70			; SB
	!BYTE	$2C,$71,$E0		; CW	57457
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1381:                         A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1382:                     fin
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
_B364 
; libsrc/jitcore.pla: 1383:                     break
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1384:                 is $B4 // ADDAB
_B365 
; libsrc/jitcore.pla: 1385:                 is $B6 // ADDAW
_B366 
; libsrc/jitcore.pla: 1386:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 1387:                     i    = i + 2
; libsrc/jitcore.pla: 1388:                     if not A_IS_TOSL
; libsrc/jitcore.pla: 1389:                         *codeptr = estkl8+$B5+(VX<<8)    // LDA ESTKL,X
; libsrc/jitcore.pla: 1390:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1391:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$4E			; BRTRU	_B367
	!WORD	_B367-*
	!BYTE	$2C,$B5,$D0		; CW	53429
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B367 
_B368 
; libsrc/jitcore.pla: 1392:                     codeptr=>0 = $6D18                   // CLC; ADC abs
; libsrc/jitcore.pla: 1393:                     codeptr=>2 = dest
; libsrc/jitcore.pla: 1394:                     if opcode == $B4
; libsrc/jitcore.pla: 1395:                         //puts("ADDAB $"); puth(dest)
; libsrc/jitcore.pla: 1396:                         codeptr=>4  = $0290              // BCC +2
; libsrc/jitcore.pla: 1397:                         codeptr=>6  = estkh8+$F6+(VX<<8) // INC ESTKH,X
; libsrc/jitcore.pla: 1398:                         codeptr     = codeptr + 8
; libsrc/jitcore.pla: 1399:                         A_IS_TOSL   = TOS_DIRTY          // STA ESTKL,X
; libsrc/jitcore.pla: 1400:                     else
	!BYTE	$2C,$18,$6D		; CW	27928
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$64,$12			; LLB	[18]
	!BYTE	$2A,$B4			; CB	180
	!BYTE	$24			; BRNE	_B369
	!WORD	_B369-*
	!BYTE	$2C,$90,$02		; CW	656
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$F6,$C0		; CW	49398
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B370
	!WORD	_B370-*
_B369 
; libsrc/jitcore.pla: 1401:                         //puts("ADDAW $"); puth(dest)
; libsrc/jitcore.pla: 1402:                         codeptr=>4  = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1403:                         codeptr=>6  = estkh8+$B5+(VX<<8) // LDA ESTKH,X
; libsrc/jitcore.pla: 1404:                         codeptr->8  = $6D                // ADC abs
; libsrc/jitcore.pla: 1405:                         codeptr=>9  = dest+1
; libsrc/jitcore.pla: 1406:                         codeptr=>11 = estkh8+$95+(VX<<8) // STA ESTKH,X
; libsrc/jitcore.pla: 1407:                         codeptr     = codeptr + 13
; libsrc/jitcore.pla: 1408:                         A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1409:                     fin
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$B5,$C0		; CW	49333
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2A,$6D			; CB	109
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
_B370 
; libsrc/jitcore.pla: 1410:                     break
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1411:                 is $B8 // IDXLB
_B371 
; libsrc/jitcore.pla: 1412:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1413:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 1414:                     //puts("IDXLB "); puti(j)
; libsrc/jitcore.pla: 1415:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1416:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1417:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1418:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B372
	!WORD	_B372-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B372 
_B373 
; libsrc/jitcore.pla: 1419:                     if VY <> j
; libsrc/jitcore.pla: 1420:                         *codeptr = $A0+(j<<8)         // LDY #imm
; libsrc/jitcore.pla: 1421:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1422:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B374
	!WORD	_B374-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B374 
_B375 
; libsrc/jitcore.pla: 1423:                     *codeptr = ifpl8+$B1              // LDA (IFP),Y
; libsrc/jitcore.pla: 1424:                     codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1425:                     if j <> 0
; libsrc/jitcore.pla: 1426:                         *codeptr = $00A0              // LDY #$00
; libsrc/jitcore.pla: 1427:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1428:                     fin
	!BYTE	$2C,$B1,$E0		; CW	57521
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$4C			; BRFLS	_B376
	!WORD	_B376-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B376 
_B377 
; libsrc/jitcore.pla: 1429:                     codeptr->0  = $0A                 // ASL
; libsrc/jitcore.pla: 1430:                     codeptr=>1  = $0290               // BCC +2
; libsrc/jitcore.pla: 1431:                     codeptr=>3  = $18C8               // INY; CLC
; libsrc/jitcore.pla: 1432:                     codeptr=>5  = estkl8+$75+(VX<<8)  // ADC ESTKL,X
; libsrc/jitcore.pla: 1433:                     codeptr=>7  = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 1434:                     codeptr->9  = $98                 // TYA
; libsrc/jitcore.pla: 1435:                     codeptr=>10 = estkh8+$75+(VX<<8)  // ADC ESTKH,X
; libsrc/jitcore.pla: 1436:                     codeptr=>12 = estkh8+$95+(VX<<8)  // STA ESTKH,X
; libsrc/jitcore.pla: 1437:                     codeptr     = codeptr + 14
; libsrc/jitcore.pla: 1438:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 1439:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1440:                     break
	!BYTE	$14			; CN	10
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$2C,$90,$02		; CW	656
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$2C,$C8,$18		; CW	6344
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2C,$75,$D0		; CW	53365
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$C0		; CW	49269
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1441:                 is $BA // IDXLW
_B378 
; libsrc/jitcore.pla: 1442:                     i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1443:                     j = ^(bytecode+i)
; libsrc/jitcore.pla: 1444:                     //puts("IDXLW "); puti(j)
; libsrc/jitcore.pla: 1445:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1446:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1447:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1448:                     fin
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$60			; LB
	!BYTE	$74,$13			; SLB	[19]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B379
	!WORD	_B379-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B379 
_B380 
; libsrc/jitcore.pla: 1449:                     if VY <> j
; libsrc/jitcore.pla: 1450:                         *codeptr = $A0+(j<<8)         // LDY #imm
; libsrc/jitcore.pla: 1451:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1452:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$22			; BREQ	_B381
	!WORD	_B381-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$64,$13			; LLB	[19]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B381 
_B382 
; libsrc/jitcore.pla: 1453:                     codeptr=>0  = ifpl8+$B1           // LDA (IFP),Y
; libsrc/jitcore.pla: 1454:                     codeptr->2  = $0A                 // ASL
; libsrc/jitcore.pla: 1455:                     codeptr=>3  = tmpl8+$85           // STA $E7:TMPL
; libsrc/jitcore.pla: 1456:                     codeptr->5  = $C8                 // INY
; libsrc/jitcore.pla: 1457:                     codeptr=>6  = ifpl8+$B1           // LDA (IFP),Y
; libsrc/jitcore.pla: 1458:                     codeptr=>8  = $A82A               // ROL; TAY
; libsrc/jitcore.pla: 1459:                     codeptr=>10 = tmpl8+$A5           // LDA $E7:TMPL
; libsrc/jitcore.pla: 1460:                     codeptr->12 = $18                 // CLC
; libsrc/jitcore.pla: 1461:                     codeptr=>13 = estkl8+$75+(VX<<8)  // ADC ESTKL,X
; libsrc/jitcore.pla: 1462:                     codeptr=>15 = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 1463:                     codeptr->17 = $98                 // TYA
; libsrc/jitcore.pla: 1464:                     codeptr=>18 = estkh8+$75+(VX<<8)  // ADC ESTKH,X
; libsrc/jitcore.pla: 1465:                     codeptr=>20 = estkh8+$95+(VX<<8)  // STA ESTKH,X
; libsrc/jitcore.pla: 1466:                     codeptr     = codeptr + 22
; libsrc/jitcore.pla: 1467:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 1468:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1469:                     break
	!BYTE	$2C,$B1,$E0		; CW	57521
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$14			; CN	10
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2C,$85,$E7		; CW	59269
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$2C,$B1,$E0		; CW	57521
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$2A,$A8		; CW	43050
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$A5,$E7		; CW	59301
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$D0		; CW	53365
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$72			; SW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$C0		; CW	49269
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$16			; ADDI	22
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1470:                 is $BC // IDXAB
_B383 
; libsrc/jitcore.pla: 1471:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 1472:                     i    = i + 2
; libsrc/jitcore.pla: 1473:                     //puts("IDXAB $"); puth(*(bytecode+i))
; libsrc/jitcore.pla: 1474:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1475:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1476:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1477:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B384
	!WORD	_B384-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B384 
_B385 
; libsrc/jitcore.pla: 1478:                     if VY <> 0
; libsrc/jitcore.pla: 1479:                         *codeptr = $00A0              // LDY #$00
; libsrc/jitcore.pla: 1480:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1481:                     fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4C			; BRFLS	_B386
	!WORD	_B386-*
	!BYTE	$2A,$A0			; CB	160
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B386 
_B387 
; libsrc/jitcore.pla: 1482:                     codeptr->0  = $AD                 // LDA abs
; libsrc/jitcore.pla: 1483:                     codeptr=>1  = dest
; libsrc/jitcore.pla: 1484:                     codeptr->3  = $0A                 // ASL
; libsrc/jitcore.pla: 1485:                     codeptr=>4  = $0290               // BCC +2
; libsrc/jitcore.pla: 1486:                     codeptr=>6  = $18C8               // INY; CLC
; libsrc/jitcore.pla: 1487:                     codeptr=>8  = estkl8+$75+(VX<<8)  // ADC ESTKL,X
; libsrc/jitcore.pla: 1488:                     codeptr=>10 = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 1489:                     codeptr->12 = $98                 // TYA
; libsrc/jitcore.pla: 1490:                     codeptr=>13 = estkh8+$75+(VX<<8)  // ADC ESTKH,X
; libsrc/jitcore.pla: 1491:                     codeptr=>15 = estkh8+$95+(VX<<8)  // STA ESTKH,X
; libsrc/jitcore.pla: 1492:                     codeptr     = codeptr + 17
; libsrc/jitcore.pla: 1493:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 1494:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1495:                     break
	!BYTE	$2A,$AD			; CB	173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$14			; CN	10
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2C,$90,$02		; CW	656
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2C,$C8,$18		; CW	6344
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$2C,$75,$D0		; CW	53365
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$C0		; CW	49269
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1496:                 is $BE // IDXAW
_B388 
; libsrc/jitcore.pla: 1497:                     dest = *(bytecode+i+1)
; libsrc/jitcore.pla: 1498:                     i    = i + 2
; libsrc/jitcore.pla: 1499:                     //puts("IDXAW $"); puth(dest)
; libsrc/jitcore.pla: 1500:                     if A_IS_TOSL & TOS_DIRTY
; libsrc/jitcore.pla: 1501:                         *codeptr = estkl8+$95+(VX<<8) // STA ESTKL,X
; libsrc/jitcore.pla: 1502:                         codeptr  = codeptr + 2
; libsrc/jitcore.pla: 1503:                     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$14			; LLB	[20]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B389
	!WORD	_B389-*
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$02			; SLW	[2]
_B389 
_B390 
; libsrc/jitcore.pla: 1504:                     codeptr->0  = $AD                 // LDA abs
; libsrc/jitcore.pla: 1505:                     codeptr=>1  = dest
; libsrc/jitcore.pla: 1506:                     codeptr->3  = $0A                 // ASL
; libsrc/jitcore.pla: 1507:                     codeptr=>4  = tmpl8+$85           // STA $E7:TMPL
; libsrc/jitcore.pla: 1508:                     codeptr->6  = $AD                 // LDA abs+1
; libsrc/jitcore.pla: 1509:                     codeptr=>7  = dest+1
; libsrc/jitcore.pla: 1510:                     codeptr=>9  = $A82A               // ROL; TAY
; libsrc/jitcore.pla: 1511:                     codeptr=>11 = tmpl8+$A5           // LDA $E7:TMPL
; libsrc/jitcore.pla: 1512:                     codeptr->13 = $18                 // CLC
; libsrc/jitcore.pla: 1513:                     codeptr=>14 = estkl8+$75+(VX<<8)  // ADC ESTKL,X
; libsrc/jitcore.pla: 1514:                     codeptr=>16 = estkl8+$95+(VX<<8)  // STA ESTKL,X
; libsrc/jitcore.pla: 1515:                     codeptr->18 = $98                 // TYA
; libsrc/jitcore.pla: 1516:                     codeptr=>19 = estkh8+$75+(VX<<8)  // ADC ESTKH,X
; libsrc/jitcore.pla: 1517:                     codeptr=>21 = estkh8+$95+(VX<<8)  // STA ESTKH,X
; libsrc/jitcore.pla: 1518:                     codeptr     = codeptr + 23
; libsrc/jitcore.pla: 1519:                     VY          = UNKNOWN
; libsrc/jitcore.pla: 1520:                     A_IS_TOSL   = FALSE
; libsrc/jitcore.pla: 1521:                     break
	!BYTE	$2A,$AD			; CB	173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$14			; CN	10
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2C,$85,$E7		; CW	59269
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$2A,$AD			; CB	173
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$72			; SW
	!BYTE	$2C,$2A,$A8		; CW	43050
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$72			; SW
	!BYTE	$2C,$A5,$E7		; CW	59301
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$72			; SW
	!BYTE	$2A,$18			; CB	24
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$D0		; CW	53365
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$D0		; CW	53397
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$72			; SW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$70			; SB
	!BYTE	$2C,$75,$C0		; CW	49269
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$13			; ADDI	19
	!BYTE	$72			; SW
	!BYTE	$2C,$95,$C0		; CW	49301
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$15			; ADDI	21
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$17			; ADDI	23
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$74,$14			; SLB	[20]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1522:                 is $FE // NOPed out earlier by SELect
_B391 
; libsrc/jitcore.pla: 1523:                     break
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
; libsrc/jitcore.pla: 1524:                 otherwise
_B089 
	!BYTE	$4F			; CASEBLOCK
	!WORD	$0020
	!WORD	_B090-*
	!WORD	$0022
	!WORD	_B093-*
	!WORD	$0024
	!WORD	_B094-*
	!WORD	$0026
	!WORD	_B101-*
	!WORD	$0028
	!WORD	_B105-*
	!WORD	$002A
	!WORD	_B112-*
	!WORD	$002C
	!WORD	_B102-*
	!WORD	$002E
	!WORD	_B120-*
	!WORD	$0030
	!WORD	_B126-*
	!WORD	$0032
	!WORD	_B125-*
	!WORD	$0034
	!WORD	_B127-*
	!WORD	$0038
	!WORD	_B131-*
	!WORD	$003A
	!WORD	_B137-*
	!WORD	$003C
	!WORD	_B143-*
	!WORD	$003E
	!WORD	_B148-*
	!WORD	$0040
	!WORD	_B151-*
	!WORD	$0042
	!WORD	_B152-*
	!WORD	$0044
	!WORD	_B159-*
	!WORD	$0046
	!WORD	_B167-*
	!WORD	$0048
	!WORD	_B168-*
	!WORD	$004A
	!WORD	_B160-*
	!WORD	$004C
	!WORD	_B175-*
	!WORD	$004E
	!WORD	_B176-*
	!WORD	$0050
	!WORD	_B183-*
	!WORD	$0052
	!WORD	_B188-*
	!WORD	$0054
	!WORD	_B200-*
	!WORD	$0056
	!WORD	_B203-*
	!WORD	$005A
	!WORD	_B206-*
	!WORD	$005C
	!WORD	_B209-*
	!WORD	$005E
	!WORD	_B113-*
	!WORD	$0060
	!WORD	_B212-*
	!WORD	$0062
	!WORD	_B217-*
	!WORD	$0064
	!WORD	_B220-*
	!WORD	$0066
	!WORD	_B227-*
	!WORD	$0068
	!WORD	_B232-*
	!WORD	$006A
	!WORD	_B233-*
	!WORD	$006C
	!WORD	_B240-*
	!WORD	$006E
	!WORD	_B247-*
	!WORD	$0070
	!WORD	_B252-*
	!WORD	$0072
	!WORD	_B253-*
	!WORD	$0074
	!WORD	_B258-*
	!WORD	$0076
	!WORD	_B259-*
	!WORD	$0078
	!WORD	_B266-*
	!WORD	$007A
	!WORD	_B267-*
	!WORD	$007C
	!WORD	_B272-*
	!WORD	$007E
	!WORD	_B273-*
	!WORD	$0080
	!WORD	_B280-*
	!WORD	$0082
	!WORD	_B283-*
	!WORD	$0084
	!WORD	_B286-*
	!WORD	$0086
	!WORD	_B289-*
	!WORD	$0088
	!WORD	_B290-*
	!WORD	$008A
	!WORD	_B291-*
	!WORD	$008C
	!WORD	_B132-*
	!WORD	$008E
	!WORD	_B138-*
	!WORD	$0090
	!WORD	_B296-*
	!WORD	$0092
	!WORD	_B301-*
	!WORD	$0094
	!WORD	_B304-*
	!WORD	$0096
	!WORD	_B305-*
	!WORD	$0098
	!WORD	_B306-*
	!WORD	$009A
	!WORD	_B292-*
	!WORD	$009C
	!WORD	_B293-*
	!WORD	$009E
	!WORD	_B314-*
	!WORD	$00A0
	!WORD	_B317-*
	!WORD	$00A2
	!WORD	_B322-*
	!WORD	$00A4
	!WORD	_B328-*
	!WORD	$00A6
	!WORD	_B329-*
	!WORD	$00A8
	!WORD	_B336-*
	!WORD	$00AA
	!WORD	_B337-*
	!WORD	$00AC
	!WORD	_B348-*
	!WORD	$00AE
	!WORD	_B349-*
	!WORD	$00B0
	!WORD	_B357-*
	!WORD	$00B2
	!WORD	_B358-*
	!WORD	$00B4
	!WORD	_B365-*
	!WORD	$00B6
	!WORD	_B366-*
	!WORD	$00B8
	!WORD	_B371-*
	!WORD	$00BA
	!WORD	_B378-*
	!WORD	$00BC
	!WORD	_B383-*
	!WORD	$00BE
	!WORD	_B388-*
	!WORD	$00FE
	!WORD	_B391-*
; libsrc/jitcore.pla: 1525:                     //puts("???: $"); puth(^(bytecode+i)); putln
; libsrc/jitcore.pla: 1526:             wend
_B088 
; libsrc/jitcore.pla: 1527:         fin
_B081 
; libsrc/jitcore.pla: 1528:         //putln
; libsrc/jitcore.pla: 1529:         i++
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/jitcore.pla: 1530:         if i >= defptr->bytecodesize
; libsrc/jitcore.pla: 1531:             //
; libsrc/jitcore.pla: 1532:             // Done compiling. Update DEF entry with JMP to compiled code
; libsrc/jitcore.pla: 1533:             //
; libsrc/jitcore.pla: 1534:             defptr->interpjsr  = $4C // JMP
; libsrc/jitcore.pla: 1535:             defptr=>interpaddr = *jitcodeptr
; libsrc/jitcore.pla: 1536:             *jitcodeptr        = codeptr
; libsrc/jitcore.pla: 1537:             //puts("Done compiling: $"); puth(defptr=>interpaddr)
; libsrc/jitcore.pla: 1538:             //puts("->$"); puth(*jitcodeptr); putln
; libsrc/jitcore.pla: 1539:             //getc
; libsrc/jitcore.pla: 1540:             return
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B392
	!WORD	_B392-*
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$6A,$E4,$03		; LAW	996
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A,$E4,$03		; SAW	996
	!BYTE	$5A,$15			; LEAVE	21
; libsrc/jitcore.pla: 1541:         fin
_B392 
_B393 
; libsrc/jitcore.pla: 1542:     loop
_B070 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2C,$E0,$BE		; CW	48864
	!BYTE	$54			; CALL	_X027
_F027 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B068
	!WORD	_B068-*
_B069 
; libsrc/jitcore.pla: 1543:     //
; libsrc/jitcore.pla: 1544:     // If we got here we ran out of code buffer space.
; libsrc/jitcore.pla: 1545:     //
; libsrc/jitcore.pla: 1546:     //puts("Ran out of code buffer\n")
; libsrc/jitcore.pla: 1547:     //getc
; libsrc/jitcore.pla: 1548: end
	!BYTE	$5A,$15			; LEAVE	21
; libsrc/apple/jit.pla: 0044: 
; libsrc/apple/jit.pla: 0045: //
; libsrc/apple/jit.pla: 0046: // Install JIT compiler
; libsrc/apple/jit.pla: 0047: //
; libsrc/apple/jit.pla: 0048: if *jitcomp
_INIT 
; libsrc/apple/jit.pla: 0049:     return 0
	!BYTE	$6A,$E2,$03		; LAW	994
	!BYTE	$4C			; BRFLS	_B394
	!WORD	_B394-*
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/jit.pla: 0050: fin
_B394 
_B395 
; libsrc/apple/jit.pla: 0051: *jitcomp        = @compiler
; libsrc/apple/jit.pla: 0052: cmdsys.jitcount = 36
; libsrc/apple/jit.pla: 0053: cmdsys.jitsize  = 96
; libsrc/apple/jit.pla: 0054: puts("JITC enabled\n")
	!BYTE	$26			; LA	_C002+0
_F028 	!WORD	_C002+0		
	!BYTE	$7A,$E2,$03		; SAW	994
	!BYTE	$2A,$24			; CB	36
	!BYTE	$78			; SAB	_X000+17
_F029 	!WORD	0+17		
	!BYTE	$2A,$60			; CB	96
	!BYTE	$78			; SAB	_X000+18
_F030 	!WORD	0+18		
	!BYTE	$2E			; CS
	!BYTE	$0D
	!BYTE	$4A,$49,$54,$43,$20,$65,$6E,$61
	!BYTE	$62,$6C,$65,$64,$0D
	!BYTE	$54			; CALL	_X004
_F031 	!WORD	0		
; libsrc/apple/jit.pla: 0055: return modkeep
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$5C			; RET
; libsrc/apple/jit.pla: 0056: done
_SYSFLAGS	=	0
_DEFCNT	=	4
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	16			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	26			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	27			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	27			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	27			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: HEAPMARK
	!BYTE	$C8,$C5,$C1,$D0,$CD,$C1,$D2,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	12			; ESD INDEX
	; DCI STRING: HEAPAVAIL
	!BYTE	$C8,$C5,$C1,$D0,$C1,$D6,$C1,$C9,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	16			; ESD INDEX
	; DCI STRING: MEMSET
	!BYTE	$CD,$C5,$CD,$D3,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	17			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: ISULT
	!BYTE	$C9,$D3,$D5,$CC,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	26			; ESD INDEX
	; DCI STRING: ISULE
	!BYTE	$C9,$D3,$D5,$CC,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	27			; ESD INDEX
	!BYTE	$00			; END OF ESD
