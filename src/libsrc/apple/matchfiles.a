; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/matchfiles.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/matchfiles.pla: 0001: 
; libsrc/apple/matchfiles.pla: 0002: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X028
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X029
; inc/fileio.plh: 0080: end
; libsrc/apple/matchfiles.pla: 0002: 
; libsrc/apple/matchfiles.pla: 0003: 
; libsrc/apple/matchfiles.pla: 0004: var dirbuf
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D030 	!FILL	2			; dirbuf
; libsrc/apple/matchfiles.pla: 0005: //
; libsrc/apple/matchfiles.pla: 0006: // Match next section of source and expression
; libsrc/apple/matchfiles.pla: 0007: //
; libsrc/apple/matchfiles.pla: 0008: def matchNext(src, srcofst, exp, expofst)
_SUBSEG 				; BYTECODE STARTS
					; src -> [0]
					; srcofst -> [2]
					; exp -> [4]
					; expofst -> [6]
_C000 					; matchNext()
; libsrc/apple/matchfiles.pla: 0009:     if ^exp >= expofst
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/matchfiles.pla: 0010:         when exp->[expofst]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$60			; LB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$60			; LB
	!BYTE	$52			; SEL
	!WORD	_B004-*
; libsrc/apple/matchfiles.pla: 0011:             is '*' // Multi-char wildcard
_B005 
; libsrc/apple/matchfiles.pla: 0012:                 if matchNext(src, srcofst, exp, expofst + 1) // Match zero wild chars
; libsrc/apple/matchfiles.pla: 0013:                     return TRUE
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C000
_F000 	!WORD	_C000		
	!BYTE	$4C			; BRFLS	_B006
	!WORD	_B006-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0014:                 elsif ^src >= srcofst and matchNext(src, srcofst + 1, exp, expofst) // Match more wild chars
	!BYTE	$50			; BRNCH	_B007
	!WORD	_B007-*
_B006 
; libsrc/apple/matchfiles.pla: 0015:                     return TRUE
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B008
	!WORD	_B008-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_C000
_F001 	!WORD	_C000		
_B008 
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0016:                 fin
_B009 
_B007 
; libsrc/apple/matchfiles.pla: 0017:             is '?' // Single char wildcard
_B010 
; libsrc/apple/matchfiles.pla: 0018:                 if ^src >= srcofst
; libsrc/apple/matchfiles.pla: 0019:                     return matchNext(src, srcofst + 1, exp, expofst + 1)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C000
_F002 	!WORD	_C000		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0020:                 fin
_B011 
_B012 
; libsrc/apple/matchfiles.pla: 0021:                 return FALSE
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0022:             otherwise // verbatim match
	!BYTE	$50			; BRNCH	_B013
	!WORD	_B013-*
_B004 
	!BYTE	$02			; CASEBLOCK
	!WORD	$002A
	!WORD	_B005-*
	!WORD	$003F
	!WORD	_B010-*
_B013 
; libsrc/apple/matchfiles.pla: 0023:                 if ^src >= srcofst and src->[srcofst] == exp->[expofst]
; libsrc/apple/matchfiles.pla: 0024:                     return matchNext(src, srcofst + 1, exp, expofst + 1)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B014
	!WORD	_B014-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$60			; LB
	!BYTE	$40			; ISEQ
_B014 
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C000
_F003 	!WORD	_C000		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0025:                 fin
_B015 
_B016 
; libsrc/apple/matchfiles.pla: 0026:                 return FALSE
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0027:         wend
_B003 
; libsrc/apple/matchfiles.pla: 0028:     fin
_B001 
_B002 
; libsrc/apple/matchfiles.pla: 0029:     return ^src < srcofst and ^exp < expofst // Return TRUE if at the end of both
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$46			; ISLT
	!BYTE	$AC			; BRAND	_B017
	!WORD	_B017-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$60			; LB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$46			; ISLT
_B017 
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/matchfiles.pla: 0030: end
; libsrc/apple/matchfiles.pla: 0031: //
; libsrc/apple/matchfiles.pla: 0032: // Start off matching process
; libsrc/apple/matchfiles.pla: 0033: //
; libsrc/apple/matchfiles.pla: 0034: export def matchName(src, exp)#1
					; src -> [0]
					; exp -> [2]
_C001 					; matchName()
; libsrc/apple/matchfiles.pla: 0035:     //
; libsrc/apple/matchfiles.pla: 0036:     // Match on empty wildcard name (same as '*')
; libsrc/apple/matchfiles.pla: 0037:     //
; libsrc/apple/matchfiles.pla: 0038:     if not ^exp
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/matchfiles.pla: 0039:         return TRUE
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B018
	!WORD	_B018-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/matchfiles.pla: 0040:     fin
_B018 
_B019 
; libsrc/apple/matchfiles.pla: 0041:     return matchNext(src, 1, exp, 1)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$02			; CN	1
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_C000
_F004 	!WORD	_C000		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/matchfiles.pla: 0042: end
; libsrc/apple/matchfiles.pla: 0043: export def matchList(pathstr, exp)#2
					; pathstr -> [0]
					; exp -> [2]
_C002 					; matchList()
; libsrc/apple/matchfiles.pla: 0044:     byte refnum
					; refnum -> [4]
; libsrc/apple/matchfiles.pla: 0045:     char[64] curpath
					; curpath -> [5]
; libsrc/apple/matchfiles.pla: 0046:     var firstblk, entrylen, entriesblk, i, entry, entrylist, entryptr, entrycnt
					; firstblk -> [69]
					; entrylen -> [71]
					; entriesblk -> [73]
					; i -> [75]
					; entry -> [77]
					; entrylist -> [79]
					; entryptr -> [81]
					; entrycnt -> [83]
; libsrc/apple/matchfiles.pla: 0047: 
; libsrc/apple/matchfiles.pla: 0048:     if not dirbuf
	!BYTE	$58,$55,$02		; ENTER	85,2
; libsrc/apple/matchfiles.pla: 0049:         dirbuf = heapallocalign(512, 8, 0)
; libsrc/apple/matchfiles.pla: 0050:     fin
	!BYTE	$6A			; LAW	_D030+0
_F005 	!WORD	_D030+0		
	!BYTE	$4E			; BRTRU	_B020
	!WORD	_B020-*
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$10			; CN	8
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X013
_F006 	!WORD	0		
	!BYTE	$7A			; SAW	_D030+0
_F007 	!WORD	_D030+0		
_B020 
_B021 
; libsrc/apple/matchfiles.pla: 0051:     if not ^pathstr
; libsrc/apple/matchfiles.pla: 0052:         fileio:getpfx(@curpath)
; libsrc/apple/matchfiles.pla: 0053:         pathstr = @curpath
; libsrc/apple/matchfiles.pla: 0054:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B022
	!WORD	_B022-*
	!BYTE	$28,$05			; LLA	[5]
	!BYTE	$6A			; LAW	_X028+0
_F008 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$28,$05			; LLA	[5]
	!BYTE	$76,$00			; SLW	[0]
_B022 
_B023 
; libsrc/apple/matchfiles.pla: 0055:     if pathstr->[^pathstr] <> '/' // Make sure path ends with a '/'
; libsrc/apple/matchfiles.pla: 0056:         ^pathstr++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B024
	!WORD	_B024-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
; libsrc/apple/matchfiles.pla: 0057:         pathstr->[^pathstr] = '/'
; libsrc/apple/matchfiles.pla: 0058:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$70			; SB
_B024 
_B025 
; libsrc/apple/matchfiles.pla: 0059:     entrylist = 0
; libsrc/apple/matchfiles.pla: 0060:     entrycnt  = 0
; libsrc/apple/matchfiles.pla: 0061:     firstblk  = 1
; libsrc/apple/matchfiles.pla: 0062:     refnum    = fileio:open(pathstr)
; libsrc/apple/matchfiles.pla: 0063:     while fileio:read(refnum, dirbuf, 512) == 512
	!BYTE	$00			; CN	0
	!BYTE	$76,$4F			; SLW	[79]
	!BYTE	$00			; CN	0
	!BYTE	$76,$53			; SLW	[83]
	!BYTE	$02			; CN	1
	!BYTE	$76,$45			; SLW	[69]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+14
_F009 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B028
	!WORD	_B028-*
_B026 
; libsrc/apple/matchfiles.pla: 0064:         //
; libsrc/apple/matchfiles.pla: 0065:         // Skip block pointers
; libsrc/apple/matchfiles.pla: 0066:         //
; libsrc/apple/matchfiles.pla: 0067:         entry = dirbuf + 4
; libsrc/apple/matchfiles.pla: 0068:         if firstblk
; libsrc/apple/matchfiles.pla: 0069:             //
; libsrc/apple/matchfiles.pla: 0070:             // Pull out revelant details from the first block
; libsrc/apple/matchfiles.pla: 0071:             //
; libsrc/apple/matchfiles.pla: 0072:             entrylen   = dirbuf->$23
; libsrc/apple/matchfiles.pla: 0073:             entriesblk = dirbuf->$24 - 1
; libsrc/apple/matchfiles.pla: 0074:             entry      = entry + entrylen
; libsrc/apple/matchfiles.pla: 0075:         fin
	!BYTE	$6A			; LAW	_D030+0
_F010 	!WORD	_D030+0		
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$4D			; SLW	[77]
	!BYTE	$66,$45			; LLW	[69]
	!BYTE	$4C			; BRFLS	_B029
	!WORD	_B029-*
	!BYTE	$6A			; LAW	_D030+0
_F011 	!WORD	_D030+0		
	!BYTE	$38,$23			; ADDI	35
	!BYTE	$60			; LB
	!BYTE	$76,$47			; SLW	[71]
	!BYTE	$6A			; LAW	_D030+0
_F012 	!WORD	_D030+0		
	!BYTE	$38,$24			; ADDI	36
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
	!BYTE	$76,$49			; SLW	[73]
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$B2,$47			; ADDLW	[71]
	!BYTE	$76,$4D			; SLW	[77]
_B029 
_B030 
; libsrc/apple/matchfiles.pla: 0076:         for i = firstblk to entriesblk
	!BYTE	$66,$49			; LLW	[73]
	!BYTE	$66,$45			; LLW	[69]
	!BYTE	$A0			; BRGT	_B031
	!WORD	_B031-*
_B032 
	!BYTE	$6E,$4B			; DLW	[75]
; libsrc/apple/matchfiles.pla: 0077:             //
; libsrc/apple/matchfiles.pla: 0078:             // Copy directory entry details
; libsrc/apple/matchfiles.pla: 0079:             //
; libsrc/apple/matchfiles.pla: 0080:             ^entry = ^entry & $0F
; libsrc/apple/matchfiles.pla: 0081:             if ^entry
; libsrc/apple/matchfiles.pla: 0082:                 //
; libsrc/apple/matchfiles.pla: 0083:                 // Match wildcard filename
; libsrc/apple/matchfiles.pla: 0084:                 //
; libsrc/apple/matchfiles.pla: 0085:                 if matchName(entry, exp)
; libsrc/apple/matchfiles.pla: 0086:                     entryptr = heapalloc(t_fileentry)
; libsrc/apple/matchfiles.pla: 0087:                     memcpy(entryptr, entry, t_fileentry)
; libsrc/apple/matchfiles.pla: 0088:                     entrycnt++
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$60			; LB
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$70			; SB
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C001
_F013 	!WORD	_C001		
	!BYTE	$4C			; BRFLS	_B036
	!WORD	_B036-*
	!BYTE	$2A,$27			; CB	39
	!BYTE	$54			; CALL	_X014
_F014 	!WORD	0		
	!BYTE	$6E,$51			; DLW	[81]
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$2A,$27			; CB	39
	!BYTE	$54			; CALL	_X018
_F015 	!WORD	0		
	!BYTE	$66,$53			; LLW	[83]
	!BYTE	$8C			; INCR
; libsrc/apple/matchfiles.pla: 0089:                     if not entrylist
; libsrc/apple/matchfiles.pla: 0090:                         entrylist = entryptr
; libsrc/apple/matchfiles.pla: 0091:                     fin
	!BYTE	$76,$53			; SLW	[83]
	!BYTE	$66,$4F			; LLW	[79]
	!BYTE	$4E			; BRTRU	_B038
	!WORD	_B038-*
	!BYTE	$66,$51			; LLW	[81]
	!BYTE	$76,$4F			; SLW	[79]
_B038 
_B039 
; libsrc/apple/matchfiles.pla: 0092:                 fin
_B036 
_B037 
; libsrc/apple/matchfiles.pla: 0093:             fin
_B034 
_B035 
; libsrc/apple/matchfiles.pla: 0094:             entry = entry + entrylen
; libsrc/apple/matchfiles.pla: 0095:         next
	!BYTE	$66,$4D			; LLW	[77]
	!BYTE	$B2,$47			; ADDLW	[71]
	!BYTE	$76,$4D			; SLW	[77]
_B033 
	!BYTE	$A4			; INCBRLE	_B032
	!WORD	_B032-*
_B031 
	!BYTE	$76,$4B			; SLW	[75]
	!BYTE	$30			; DROP 
; libsrc/apple/matchfiles.pla: 0096:         firstblk = 0
; libsrc/apple/matchfiles.pla: 0097:     loop
	!BYTE	$00			; CN	0
	!BYTE	$76,$45			; SLW	[69]
_B028 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$6A			; LAW	_D030+0
_F016 	!WORD	_D030+0		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$6A			; LAW	_X028+18
_F017 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$22			; BREQ	_B026
	!WORD	_B026-*
_B027 
; libsrc/apple/matchfiles.pla: 0098:     fileio:close(refnum)
; libsrc/apple/matchfiles.pla: 0099:     return entrylist, entrycnt
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$6A			; LAW	_X028+16
_F018 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$4F			; LLW	[79]
	!BYTE	$66,$53			; LLW	[83]
	!BYTE	$5A,$55			; LEAVE	85
; libsrc/apple/matchfiles.pla: 0100: end
; libsrc/apple/matchfiles.pla: 0101: //
; libsrc/apple/matchfiles.pla: 0102: // Is this a wildcard name?
; libsrc/apple/matchfiles.pla: 0103: //
; libsrc/apple/matchfiles.pla: 0104: export def isWildName(exp)#1
					; exp -> [0]
_C003 					; isWildName()
; libsrc/apple/matchfiles.pla: 0105:     byte i
					; i -> [2]
; libsrc/apple/matchfiles.pla: 0106: 
; libsrc/apple/matchfiles.pla: 0107:     if ^exp
	!BYTE	$58,$03,$01		; ENTER	3,1
; libsrc/apple/matchfiles.pla: 0108:         for i = 1 to ^exp
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B040
	!WORD	_B040-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B042
	!WORD	_B042-*
_B043 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/matchfiles.pla: 0109:             if exp->[i] == '*' or exp->[i] == '?'
; libsrc/apple/matchfiles.pla: 0110:                 return TRUE
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$2A,$2A			; CB	42
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B045
	!WORD	_B045-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$2A,$3F			; CB	63
	!BYTE	$40			; ISEQ
_B045 
	!BYTE	$4C			; BRFLS	_B046
	!WORD	_B046-*
	!BYTE	$32			; DROP2
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/matchfiles.pla: 0111:             fin
_B046 
_B047 
; libsrc/apple/matchfiles.pla: 0112:         next
_B044 
	!BYTE	$A4			; INCBRLE	_B043
	!WORD	_B043-*
_B042 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/matchfiles.pla: 0113:     fin
_B040 
_B041 
; libsrc/apple/matchfiles.pla: 0114:     return FALSE
	!BYTE	$00			; CN	0
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/matchfiles.pla: 0115: end
; libsrc/apple/matchfiles.pla: 0116: //
; libsrc/apple/matchfiles.pla: 0117: // Utility routine to separate filename from path
; libsrc/apple/matchfiles.pla: 0118: //
; libsrc/apple/matchfiles.pla: 0119: export def fileFromPath(filestr, pathstr)#0
					; filestr -> [0]
					; pathstr -> [2]
_C004 					; fileFromPath()
; libsrc/apple/matchfiles.pla: 0120:     byte i
					; i -> [4]
; libsrc/apple/matchfiles.pla: 0121: 
; libsrc/apple/matchfiles.pla: 0122:     for i = ^pathstr downto 1
	!BYTE	$58,$05,$02		; ENTER	5,2
	!BYTE	$02			; CN	1
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$A2			; BRLT	_B048
	!WORD	_B048-*
_B049 
	!BYTE	$6C,$04			; DLB	[4]
; libsrc/apple/matchfiles.pla: 0123:         if pathstr->[i] == '/'
; libsrc/apple/matchfiles.pla: 0124:             break
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$24			; BRNE	_B051
	!WORD	_B051-*
	!BYTE	$50			; BRNCH	_B048
	!WORD	_B048-*
; libsrc/apple/matchfiles.pla: 0125:         fin
_B051 
_B052 
; libsrc/apple/matchfiles.pla: 0126:     next
_B050 
	!BYTE	$A8			; DECBRGE	_B049
	!WORD	_B049-*
_B048 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/apple/matchfiles.pla: 0127:     ^filestr = ^pathstr - i
; libsrc/apple/matchfiles.pla: 0128:     memcpy(filestr + 1, pathstr + 1 + i, ^filestr)
; libsrc/apple/matchfiles.pla: 0129: end
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$84			; SUB 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F019 	!WORD	0		
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/matchfiles.pla: 0130: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	6
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	13			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: HEAPALLOCALIGN
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$C3,$C1,$CC,$C9,$C7,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	13			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	; DCI STRING: MATCHNAME
	!BYTE	$CD,$C1,$D4,$C3,$C8,$CE,$C1,$CD,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: MATCHLIST
	!BYTE	$CD,$C1,$D4,$C3,$C8,$CC,$C9,$D3,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: ISWILDNAME
	!BYTE	$C9,$D3,$D7,$C9,$CC,$C4,$CE,$C1,$CD,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: FILEFROMPATH
	!BYTE	$C6,$C9,$CC,$C5,$C6,$D2,$CF,$CD,$D0,$C1,$D4,$48
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	!BYTE	$00			; END OF ESD
