; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/mouse.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/mouse.pla: 0001: 
; libsrc/apple/mouse.pla: 0002: //
; libsrc/apple/mouse.pla: 0003: // Mouse driver interface
; libsrc/apple/mouse.pla: 0004: //
; libsrc/apple/mouse.pla: 0005: predef chkVbl, chkMouse, readMouse#3, setMouse(mode), clearMouse, posMouse(x, y), clampMouse(xMin, xMax, yMin, yMax), homeMouse, detachMouse
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/apple/mouse.pla: 0006: word = @chkVbl, @chkMouse, @readMouse, @setMouse, @clearMouse, @posMouse, @clampMouse, @homeMouse, @detachMouse
_F000 	!WORD	_P000
_F001 	!WORD	_P001
_F002 	!WORD	_P002
_F003 	!WORD	_P003
_F004 	!WORD	_P004
_F005 	!WORD	_P005
_F006 	!WORD	_P006
_F007 	!WORD	_P007
_F008 	!WORD	_P008
; libsrc/apple/mouse.pla: 0007: word rom
_D037 	!FILL	2			; rom
; libsrc/apple/mouse.pla: 0008: byte params[]
_D038 					; params[]
; libsrc/apple/mouse.pla: 0009: byte slot, index, page
_D039 	!FILL	1			; slot, index, page
_D040 	!FILL	1			; index, page
_D041 	!FILL	1			; page
; libsrc/apple/mouse.pla: 0010: word setMouseFW
_D042 	!FILL	2			; setMouseFW
; libsrc/apple/mouse.pla: 0011: byte vblDiv, vblInt, mouInt, bttnPrev
_D043 	!FILL	1			; vblDiv, vblInt, mouInt, bttnPrev
_D044 	!FILL	1			; vblInt, mouInt, bttnPrev
_D045 	!FILL	1			; mouInt, bttnPrev
_D046 	!FILL	1			; bttnPrev
; libsrc/apple/mouse.pla: 0012: asm equates
_A000 					; equates()
; libsrc/apple/mouse.pla: 0013:     !SOURCE "vmsrc/plvmzp.inc"
    !SOURCE "vmsrc/plvmzp.inc"
; libsrc/apple/mouse.pla: 0014: end
; libsrc/apple/mouse.pla: 0015: //
; libsrc/apple/mouse.pla: 0016: // Serve Mouse/VBL IRQ
; libsrc/apple/mouse.pla: 0017: //
; libsrc/apple/mouse.pla: 0018: asm serviceMouse#0
_A001 					; serviceMouse()
; libsrc/apple/mouse.pla: 0019: VBLINT  =       $400            ; DUMMY VALUES TO BE FIXED-UP
VBLINT  =       $400            ; DUMMY VALUES TO BE FIXED-UP
; libsrc/apple/mouse.pla: 0020: MOUINT  =       $401
MOUINT  =       $401
; libsrc/apple/mouse.pla: 0021: LASTBTTN=       $402
LASTBTTN=       $402
; libsrc/apple/mouse.pla: 0022:         CLD
        CLD
; libsrc/apple/mouse.pla: 0023:         JSR     $C400
        JSR     $C400
; libsrc/apple/mouse.pla: 0024:         BCC     +
        BCC     +
; libsrc/apple/mouse.pla: 0025:         RTS                     ; NOT MOUSE INT
        RTS                     ; NOT MOUSE INT
; libsrc/apple/mouse.pla: 0026: +       LDY     $0778+4         ; CHECK MOUSE INT CAUSE
+       LDY     $0778+4         ; CHECK MOUSE INT CAUSE
; libsrc/apple/mouse.pla: 0027:         TYA                     ; WAS IT VBL?
        TYA                     ; WAS IT VBL?
; libsrc/apple/mouse.pla: 0028:         AND     #$08
        AND     #$08
; libsrc/apple/mouse.pla: 0029:         BEQ     +               ; NOPE, MOVE OR BUTTON
        BEQ     +               ; NOPE, MOVE OR BUTTON
; libsrc/apple/mouse.pla: 0030: end
; libsrc/apple/mouse.pla: 0031: asm vblEvent
_A002 					; vblEvent()
; libsrc/apple/mouse.pla: 0032:         INC     VBLINT          ; INC VBL EVENT
        INC     VBLINT          ; INC VBL EVENT
; libsrc/apple/mouse.pla: 0033: +       TYA                     ; MOUSE MOVE OR BUTTON ACTIVE
+       TYA                     ; MOUSE MOVE OR BUTTON ACTIVE
; libsrc/apple/mouse.pla: 0034:         AND     #$82
        AND     #$82
; libsrc/apple/mouse.pla: 0035: end
; libsrc/apple/mouse.pla: 0036: asm bttnEvent
_A003 					; bttnEvent()
; libsrc/apple/mouse.pla: 0037:         EOR     LASTBTTN
        EOR     LASTBTTN
; libsrc/apple/mouse.pla: 0038:         BEQ     +
        BEQ     +
; libsrc/apple/mouse.pla: 0039: end
; libsrc/apple/mouse.pla: 0040: asm mouseEvent
_A004 					; mouseEvent()
; libsrc/apple/mouse.pla: 0041:         INC     MOUINT          ; INC MOUSE EVENT
        INC     MOUINT          ; INC MOUSE EVENT
; libsrc/apple/mouse.pla: 0042: +       TYA
+       TYA
; libsrc/apple/mouse.pla: 0043:         AND     #$80
        AND     #$80
; libsrc/apple/mouse.pla: 0044: end
; libsrc/apple/mouse.pla: 0045: asm updateBttn
_A005 					; updateBttn()
; libsrc/apple/mouse.pla: 0046:         STA     LASTBTTN
        STA     LASTBTTN
; libsrc/apple/mouse.pla: 0047: end
; libsrc/apple/mouse.pla: 0048: asm updateMouse
_A006 					; updateMouse()
; libsrc/apple/mouse.pla: 0049:         LDX     #$C4
        LDX     #$C4
; libsrc/apple/mouse.pla: 0050:         LDY     #$40
        LDY     #$40
; libsrc/apple/mouse.pla: 0051:         JMP     $C400           ; IIGS REQUIRES THIS HAPPEN IN IRQ
        JMP     $C400           ; IIGS REQUIRES THIS HAPPEN IN IRQ
; libsrc/apple/mouse.pla: 0052: end
; libsrc/apple/mouse.pla: 0053: asm serviceCYA#0
_A007 					; serviceCYA()
; libsrc/apple/mouse.pla: 0054:         CLC
        CLC
; libsrc/apple/mouse.pla: 0055:         RTS
        RTS
; libsrc/apple/mouse.pla: 0056: end
; libsrc/apple/mouse.pla: 0057: //
; libsrc/apple/mouse.pla: 0058: // Check for VBL (timer) and Mouse events (atomic read and reset)
; libsrc/apple/mouse.pla: 0059: //
; libsrc/apple/mouse.pla: 0060: asm chkEvt(addr)
_A008 					; chkEvt()
; libsrc/apple/mouse.pla: 0061:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/apple/mouse.pla: 0062:         STA     ESTKH-1,X
        STA     ESTKH-1,X
; libsrc/apple/mouse.pla: 0063:         SEI
        SEI
; libsrc/apple/mouse.pla: 0064:         LDA     (ESTKH-1,X)     ; READ INT COUNT
        LDA     (ESTKH-1,X)     ; READ INT COUNT
; libsrc/apple/mouse.pla: 0065:         TAY
        TAY
; libsrc/apple/mouse.pla: 0066:         LDA     #$00
        LDA     #$00
; libsrc/apple/mouse.pla: 0067:         STA     (ESTKH-1,X)     ; CLEAR INT COUNT
        STA     (ESTKH-1,X)     ; CLEAR INT COUNT
; libsrc/apple/mouse.pla: 0068:         CLI
        CLI
; libsrc/apple/mouse.pla: 0069:         STY     ESTKL,X         ; RETURN INT COUNT
        STY     ESTKL,X         ; RETURN INT COUNT
; libsrc/apple/mouse.pla: 0070:         STA     ESTKH,X
        STA     ESTKH,X
; libsrc/apple/mouse.pla: 0071:         RTS
        RTS
; libsrc/apple/mouse.pla: 0072: end
; libsrc/apple/mouse.pla: 0073: asm readMouse#3
_P002 					; readMouse#3()
_A009 					; readMouse()
; libsrc/apple/mouse.pla: 0074:         LDY     #$04
        LDY     #$04
; libsrc/apple/mouse.pla: 0075:         DEX
        DEX
; libsrc/apple/mouse.pla: 0076:         DEX
        DEX
; libsrc/apple/mouse.pla: 0077:         DEX
        DEX
; libsrc/apple/mouse.pla: 0078:         PHP
        PHP
; libsrc/apple/mouse.pla: 0079:         SEI
        SEI
; libsrc/apple/mouse.pla: 0080:         LDA     $0478,Y
        LDA     $0478,Y
; libsrc/apple/mouse.pla: 0081:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/apple/mouse.pla: 0082:         LDA     $0578,Y
        LDA     $0578,Y
; libsrc/apple/mouse.pla: 0083:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/apple/mouse.pla: 0084:         LDA     $04F8,Y
        LDA     $04F8,Y
; libsrc/apple/mouse.pla: 0085:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/apple/mouse.pla: 0086:         LDA     $05F8,Y
        LDA     $05F8,Y
; libsrc/apple/mouse.pla: 0087:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/apple/mouse.pla: 0088:         LDA     $0778,Y
        LDA     $0778,Y
; libsrc/apple/mouse.pla: 0089:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/mouse.pla: 0090:         LDA     #$00
        LDA     #$00
; libsrc/apple/mouse.pla: 0091:         STA     ESTKH,X
        STA     ESTKH,X
; libsrc/apple/mouse.pla: 0092:         PLP
        PLP
; libsrc/apple/mouse.pla: 0093:         RTS
        RTS
; libsrc/apple/mouse.pla: 0094: end
; libsrc/apple/mouse.pla: 0095: //
; libsrc/apple/mouse.pla: 0096: // Convert VBL interrupts into millisecond timer increment
; libsrc/apple/mouse.pla: 0097: //
; libsrc/apple/mouse.pla: 0098: def chkVblTimer
_SUBSEG 				; BYTECODE STARTS
_C000 					; chkVblTimer()
; libsrc/apple/mouse.pla: 0099:     byte count
					; count -> [0]
; libsrc/apple/mouse.pla: 0100:     word msec
					; msec -> [1]
; libsrc/apple/mouse.pla: 0101: 
; libsrc/apple/mouse.pla: 0102:     msec  = 0
	!BYTE	$58,$03,$00		; ENTER	3,0
; libsrc/apple/mouse.pla: 0103:     count = chkEvt(@vblInt)
; libsrc/apple/mouse.pla: 0104:     while count
	!BYTE	$00			; CN	0
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$26			; LA	_D044+0
_F009 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_A008
_F010 	!WORD	_A008		
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; libsrc/apple/mouse.pla: 0105:         if vblDiv & 2
; libsrc/apple/mouse.pla: 0106:             msec   = msec + 16
; libsrc/apple/mouse.pla: 0107:             vblDiv = 0
; libsrc/apple/mouse.pla: 0108:         else
	!BYTE	$68			; LAB	_D043+0
_F011 	!WORD	_D043+0		
	!BYTE	$3C,$02			; ANDI	2
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D043+0
_F012 	!WORD	_D043+0		
	!BYTE	$50			; BRNCH	_B005
	!WORD	_B005-*
_B004 
; libsrc/apple/mouse.pla: 0109:             msec = msec + 17
; libsrc/apple/mouse.pla: 0110:             vblDiv++
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$68			; LAB	_D043+0
_F013 	!WORD	_D043+0		
	!BYTE	$8C			; INCR
; libsrc/apple/mouse.pla: 0111:         fin
	!BYTE	$78			; SAB	_D043+0
_F014 	!WORD	_D043+0		
_B005 
; libsrc/apple/mouse.pla: 0112:         count--
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$8E			; DECR
; libsrc/apple/mouse.pla: 0113:     loop
	!BYTE	$74,$00			; SLB	[0]
_B003 
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; libsrc/apple/mouse.pla: 0114:     return msec
	!BYTE	$66,$01			; LLW	[1]
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/mouse.pla: 0115: end
; libsrc/apple/mouse.pla: 0116: //
; libsrc/apple/mouse.pla: 0117: // Check for VBL/Mouse interrupt events
; libsrc/apple/mouse.pla: 0118: //
; libsrc/apple/mouse.pla: 0119: def chkVbl
_P000 					; chkVbl()
_C001 					; chkVbl()
; libsrc/apple/mouse.pla: 0120:     return chkEvt(@vblInt)
	!BYTE	$26			; LA	_D044+0
_F015 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_A008
_F016 	!WORD	_A008		
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0121: end
; libsrc/apple/mouse.pla: 0122: def chkMouse
_P001 					; chkMouse()
_C002 					; chkMouse()
; libsrc/apple/mouse.pla: 0123:     return chkEvt(@mouInt)
	!BYTE	$26			; LA	_D045+0
_F017 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_A008
_F018 	!WORD	_A008		
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0124: end
; libsrc/apple/mouse.pla: 0125: //
; libsrc/apple/mouse.pla: 0126: // Mouse routines
; libsrc/apple/mouse.pla: 0127: //
; libsrc/apple/mouse.pla: 0128: def setMouse(mode)
					; mode -> [0]
_P003 					; setMouse(mode)()
_C003 					; setMouse()
; libsrc/apple/mouse.pla: 0129:     return call(setMouseFW, mode, slot, page, $04)
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$6A			; LAW	_D042+0
_F019 	!WORD	_D042+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$68			; LAB	_D039+0
_F020 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F021 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F022 	!WORD	0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/mouse.pla: 0130: end
; libsrc/apple/mouse.pla: 0131: def clearMouse
_P004 					; clearMouse()
_C004 					; clearMouse()
; libsrc/apple/mouse.pla: 0132:     return call(rom + rom->$15, $00, slot, page, $04) // clearMouseFW
	!BYTE	$6A			; LAW	_D037+0
_F023 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$15			; ADDI	21
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$00			; CN	0
	!BYTE	$68			; LAB	_D039+0
_F024 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F025 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F026 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0133: end
; libsrc/apple/mouse.pla: 0134: def posMouse(x, y)
					; x -> [0]
					; y -> [2]
_P005 					; posMouse(x, y)()
_C005 					; posMouse()
; libsrc/apple/mouse.pla: 0135:     //
; libsrc/apple/mouse.pla: 0136:     // Fill screen holes
; libsrc/apple/mouse.pla: 0137:     //
; libsrc/apple/mouse.pla: 0138:     ^($0478 + index) = x
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/mouse.pla: 0139:     ^($0578 + index) = x >> 8
; libsrc/apple/mouse.pla: 0140:     ^($04F8 + index) = y
; libsrc/apple/mouse.pla: 0141:     ^($05F8 + index) = y >> 8
; libsrc/apple/mouse.pla: 0142:     return call(rom + rom->$16, $00, slot, page, $04) // posMouseFW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2C,$78,$04		; CW	1144
	!BYTE	$B4			; ADDAB	_D040+0
_F027 	!WORD	_D040+0		
	!BYTE	$70			; SB
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$2C,$78,$05		; CW	1400
	!BYTE	$B4			; ADDAB	_D040+0
_F028 	!WORD	_D040+0		
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2C,$F8,$04		; CW	1272
	!BYTE	$B4			; ADDAB	_D040+0
_F029 	!WORD	_D040+0		
	!BYTE	$70			; SB
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$2C,$F8,$05		; CW	1528
	!BYTE	$B4			; ADDAB	_D040+0
_F030 	!WORD	_D040+0		
	!BYTE	$70			; SB
	!BYTE	$6A			; LAW	_D037+0
_F031 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$16			; ADDI	22
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$00			; CN	0
	!BYTE	$68			; LAB	_D039+0
_F032 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F033 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F034 	!WORD	0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/mouse.pla: 0143: end
; libsrc/apple/mouse.pla: 0144: def clampMouse(xMin, xMax, yMin, yMax)
					; xMin -> [0]
					; xMax -> [2]
					; yMin -> [4]
					; yMax -> [6]
_P006 					; clampMouse(xMin, xMax, yMin, yMax)()
_C006 					; clampMouse()
; libsrc/apple/mouse.pla: 0145:     ^$0478 = xMin
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/apple/mouse.pla: 0146:     ^$0578 = xMin >> 8
; libsrc/apple/mouse.pla: 0147:     ^$04F8 = xMax
; libsrc/apple/mouse.pla: 0148:     ^$05F8 = xMax >> 8
; libsrc/apple/mouse.pla: 0149:     call(rom + rom->$17, $00, slot, page, $04) // clampMouseFW
; libsrc/apple/mouse.pla: 0150:     ^$0478 = yMin
; libsrc/apple/mouse.pla: 0151:     ^$0578 = yMin >> 8
; libsrc/apple/mouse.pla: 0152:     ^$04F8 = yMax
; libsrc/apple/mouse.pla: 0153:     ^$05F8 = yMax >> 8
; libsrc/apple/mouse.pla: 0154:     return call(rom + rom->$17, $01, slot, page, $04)) // clampMouseFW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78,$78,$04		; SAB	1144
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$78,$78,$05		; SAB	1400
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$78,$F8,$04		; SAB	1272
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$78,$F8,$05		; SAB	1528
	!BYTE	$6A			; LAW	_D037+0
_F035 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$17			; ADDI	23
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$00			; CN	0
	!BYTE	$68			; LAB	_D039+0
_F036 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F037 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F038 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$78,$78,$04		; SAB	1144
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$78,$78,$05		; SAB	1400
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$78,$F8,$04		; SAB	1272
	!BYTE	$64,$07			; LLB	[7]
	!BYTE	$78,$F8,$05		; SAB	1528
	!BYTE	$6A			; LAW	_D037+0
_F039 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$17			; ADDI	23
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$02			; CN	1
	!BYTE	$68			; LAB	_D039+0
_F040 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F041 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F042 	!WORD	0		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/apple/mouse.pla: 0155: end
; libsrc/apple/mouse.pla: 0156: def homeMouse
_P007 					; homeMouse()
_C007 					; homeMouse()
; libsrc/apple/mouse.pla: 0157:     return call(rom + rom->$18, $00, slot, page, $04) // homeMouseFW
	!BYTE	$6A			; LAW	_D037+0
_F043 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$18			; ADDI	24
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$00			; CN	0
	!BYTE	$68			; LAB	_D039+0
_F044 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F045 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F046 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0158: end
; libsrc/apple/mouse.pla: 0159: //
; libsrc/apple/mouse.pla: 0160: // Detach mouse from interrupts
; libsrc/apple/mouse.pla: 0161: //
; libsrc/apple/mouse.pla: 0162: def detachMouse
_P008 					; detachMouse()
_C008 					; detachMouse()
; libsrc/apple/mouse.pla: 0163:     setMouse(0)
; libsrc/apple/mouse.pla: 0164:     params.0 = 1
; libsrc/apple/mouse.pla: 0165:     params.1 = 0
; libsrc/apple/mouse.pla: 0166:     return syscall($41, @params)
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C003
_F047 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D038+0
_F048 	!WORD	_D038+0		
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D038+1
_F049 	!WORD	_D038+1		
	!BYTE	$2A,$41			; CB	65
	!BYTE	$26			; LA	_D038+0
_F050 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X011
_F051 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0167: end
; libsrc/apple/mouse.pla: 0168: //
; libsrc/apple/mouse.pla: 0169: // Identify Mouse card/slot and initialize
; libsrc/apple/mouse.pla: 0170: //
; libsrc/apple/mouse.pla: 0171: for rom = $C100 to $C700 step $0100
_INIT 
	!BYTE	$2C,$00,$C7		; CW	50944
	!BYTE	$2C,$00,$C1		; CW	49408
_B007 
	!BYTE	$7E			; DAW	_D037+0
_F052 	!WORD	_D037+0		
; libsrc/apple/mouse.pla: 0172:     if rom->5 == $38 and rom->7 == $18 and rom->11 == $01 and rom->12 == $20
; libsrc/apple/mouse.pla: 0173:         puts("Found Mouse in slot #"); putc('0' + ((rom >> 8) & $07)); putln
	!BYTE	$6A			; LAW	_D037+0
_F053 	!WORD	_D037+0		
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$2A,$38			; CB	56
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B009
	!WORD	_B009-*
	!BYTE	$6A			; LAW	_D037+0
_F054 	!WORD	_D037+0		
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$2A,$18			; CB	24
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B010
	!WORD	_B010-*
	!BYTE	$6A			; LAW	_D037+0
_F055 	!WORD	_D037+0		
	!BYTE	$38,$0B			; ADDI	11
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B011
	!WORD	_B011-*
	!BYTE	$6A			; LAW	_D037+0
_F056 	!WORD	_D037+0		
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$40			; ISEQ
_B011 
_B010 
_B009 
	!BYTE	$4C			; BRFLS	_B012
	!WORD	_B012-*
	!BYTE	$2E			; CS
	!BYTE	$15
	!BYTE	$46,$6F,$75,$6E,$64,$20,$4D,$6F
	!BYTE	$75,$73,$65,$20,$69,$6E,$20,$73
	!BYTE	$6C,$6F,$74,$20,$23
	!BYTE	$54			; CALL	_X004
_F057 	!WORD	0		
; libsrc/apple/mouse.pla: 0174:         //
; libsrc/apple/mouse.pla: 0175:         // Hook mouse IRQ handler into ProDOS IRQ chain
; libsrc/apple/mouse.pla: 0176:         //
; libsrc/apple/mouse.pla: 0177:         params.0 = 2
; libsrc/apple/mouse.pla: 0178:         params.1 = 0
; libsrc/apple/mouse.pla: 0179:         params:2 = @serviceMouse
; libsrc/apple/mouse.pla: 0180:         syscall($40, @params)
; libsrc/apple/mouse.pla: 0181:         //
; libsrc/apple/mouse.pla: 0182:         // Hook CYA IRQ handler into ProDOS IRQ chain
; libsrc/apple/mouse.pla: 0183:         //
; libsrc/apple/mouse.pla: 0184:         params.0 = 2
; libsrc/apple/mouse.pla: 0185:         params.1 = 3
; libsrc/apple/mouse.pla: 0186:         params:2 = @serviceCYA
; libsrc/apple/mouse.pla: 0187:         syscall($40, @params)
; libsrc/apple/mouse.pla: 0188:         //
; libsrc/apple/mouse.pla: 0189:         // Set values
; libsrc/apple/mouse.pla: 0190:         //
; libsrc/apple/mouse.pla: 0191:         slot           = rom >> 8
; libsrc/apple/mouse.pla: 0192:         index          = slot & $07
; libsrc/apple/mouse.pla: 0193:         page           = index << 4
; libsrc/apple/mouse.pla: 0194:         setMouseFW     = rom + rom->$12
; libsrc/apple/mouse.pla: 0195:         //
; libsrc/apple/mouse.pla: 0196:         // Fix-up IRQ routine
; libsrc/apple/mouse.pla: 0197:         //
; libsrc/apple/mouse.pla: 0198:         serviceMouse:2 = rom + rom->$13 // serveMouseFW
; libsrc/apple/mouse.pla: 0199:         serviceMouse:8 = $0778+index
; libsrc/apple/mouse.pla: 0200:         vblEvent:1     = @vblInt
; libsrc/apple/mouse.pla: 0201:         bttnEvent:1    = @bttnPrev
; libsrc/apple/mouse.pla: 0202:         mouseEvent:1   = @mouInt
; libsrc/apple/mouse.pla: 0203:         updateBttn:1   = @bttnPrev
; libsrc/apple/mouse.pla: 0204:         updateMouse.1  = slot
; libsrc/apple/mouse.pla: 0205:         updateMouse.3  = page
; libsrc/apple/mouse.pla: 0206:         updateMouse:5  = rom + rom->$14 // readMouseFW
; libsrc/apple/mouse.pla: 0207:         readMouse.1    = index
; libsrc/apple/mouse.pla: 0208:         call(rom + rom->$19, $00, slot, page, $04) // initMouseFW
; libsrc/apple/mouse.pla: 0209:         return modkeep
	!BYTE	$2A,$30			; CB	48
	!BYTE	$68			; LAB	_D037+1
_F058 	!WORD	_D037+1		
	!BYTE	$3C,$07			; ANDI	7
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X002
_F059 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F060 	!WORD	0		
	!BYTE	$04			; CN	2
	!BYTE	$78			; SAB	_D038+0
_F061 	!WORD	_D038+0		
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D038+1
_F062 	!WORD	_D038+1		
	!BYTE	$26			; LA	_A001+0
_F063 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_D038+2
_F064 	!WORD	_D038+2		
	!BYTE	$2A,$40			; CB	64
	!BYTE	$26			; LA	_D038+0
_F065 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X011
_F066 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$04			; CN	2
	!BYTE	$78			; SAB	_D038+0
_F067 	!WORD	_D038+0		
	!BYTE	$06			; CN	3
	!BYTE	$78			; SAB	_D038+1
_F068 	!WORD	_D038+1		
	!BYTE	$26			; LA	_A007+0
_F069 	!WORD	_A007+0		
	!BYTE	$7A			; SAW	_D038+2
_F070 	!WORD	_D038+2		
	!BYTE	$2A,$40			; CB	64
	!BYTE	$26			; LA	_D038+0
_F071 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X011
_F072 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D037+1
_F073 	!WORD	_D037+1		
	!BYTE	$7C			; DAB	_D039+0
_F074 	!WORD	_D039+0		
	!BYTE	$3C,$07			; ANDI	7
	!BYTE	$7C			; DAB	_D040+0
_F075 	!WORD	_D040+0		
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$78			; SAB	_D041+0
_F076 	!WORD	_D041+0		
	!BYTE	$6A			; LAW	_D037+0
_F077 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$12			; ADDI	18
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$7A			; SAW	_D042+0
_F078 	!WORD	_D042+0		
	!BYTE	$6A			; LAW	_D037+0
_F079 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$13			; ADDI	19
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$7A			; SAW	_A001+2
_F080 	!WORD	_A001+2		
	!BYTE	$2C,$78,$07		; CW	1912
	!BYTE	$B4			; ADDAB	_D040+0
_F081 	!WORD	_D040+0		
	!BYTE	$7A			; SAW	_A001+8
_F082 	!WORD	_A001+8		
	!BYTE	$26			; LA	_D044+0
_F083 	!WORD	_D044+0		
	!BYTE	$7A			; SAW	_A002+1
_F084 	!WORD	_A002+1		
	!BYTE	$26			; LA	_D046+0
_F085 	!WORD	_D046+0		
	!BYTE	$7A			; SAW	_A003+1
_F086 	!WORD	_A003+1		
	!BYTE	$26			; LA	_D045+0
_F087 	!WORD	_D045+0		
	!BYTE	$7A			; SAW	_A004+1
_F088 	!WORD	_A004+1		
	!BYTE	$26			; LA	_D046+0
_F089 	!WORD	_D046+0		
	!BYTE	$7A			; SAW	_A005+1
_F090 	!WORD	_A005+1		
	!BYTE	$68			; LAB	_D039+0
_F091 	!WORD	_D039+0		
	!BYTE	$78			; SAB	_A006+1
_F092 	!WORD	_A006+1		
	!BYTE	$68			; LAB	_D041+0
_F093 	!WORD	_D041+0		
	!BYTE	$78			; SAB	_A006+3
_F094 	!WORD	_A006+3		
	!BYTE	$6A			; LAW	_D037+0
_F095 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$14			; ADDI	20
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$7A			; SAW	_A006+5
_F096 	!WORD	_A006+5		
	!BYTE	$68			; LAB	_D040+0
_F097 	!WORD	_D040+0		
	!BYTE	$78			; SAB	_A009+1
_F098 	!WORD	_A009+1		
	!BYTE	$6A			; LAW	_D037+0
_F099 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$38,$19			; ADDI	25
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$00			; CN	0
	!BYTE	$68			; LAB	_D039+0
_F100 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D041+0
_F101 	!WORD	_D041+0		
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X010
_F102 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$32			; DROP2
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0210:     fin
_B012 
_B013 
; libsrc/apple/mouse.pla: 0211: next
_B008 
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$A6			; ADDBRLE	_B007
	!WORD	_B007-*
_B006 
	!BYTE	$7A			; SAW	_D037+0
_F103 	!WORD	_D037+0		
	!BYTE	$30			; DROP 
; libsrc/apple/mouse.pla: 0212: //
; libsrc/apple/mouse.pla: 0213: // Not found
; libsrc/apple/mouse.pla: 0214: //
; libsrc/apple/mouse.pla: 0215: return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; libsrc/apple/mouse.pla: 0216: done
_SYSFLAGS	=	0
_DEFCNT	=	10
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: SYSCALL
	!BYTE	$D3,$D9,$D3,$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	11			; ESD INDEX
	!BYTE	$00			; END OF ESD
