; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/portio.pla: 0001: //
; libsrc/apple/portio.pla: 0002: // Game port I/O library based on the wiring library
; libsrc/apple/portio.pla: 0003: //
; libsrc/apple/portio.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/portio.pla: 0004: 
; libsrc/apple/portio.pla: 0005: 
; libsrc/apple/portio.pla: 0006: const ANN0   = $C058
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; ANN0 = 49240
; libsrc/apple/portio.pla: 0007: const ANN1   = $C05A
					; ANN1 = 49242
; libsrc/apple/portio.pla: 0008: const ANN2   = $C05C
					; ANN2 = 49244
; libsrc/apple/portio.pla: 0009: const ANN3   = $C05E
					; ANN3 = 49246
; libsrc/apple/portio.pla: 0010: const OFF    = 0
					; OFF = 0
; libsrc/apple/portio.pla: 0011: const ON     = 1
					; ON = 1
; libsrc/apple/portio.pla: 0012: const STROBE = $C040
					; STROBE = 49216
; libsrc/apple/portio.pla: 0013: const FLAG0  = $C060
					; FLAG0 = 49248
; libsrc/apple/portio.pla: 0014: const FLAG1  = $C061
					; FLAG1 = 49249
; libsrc/apple/portio.pla: 0015: const FLAG2  = $C062
					; FLAG2 = 49250
; libsrc/apple/portio.pla: 0016: const FLAG3  = $C063
					; FLAG3 = 49251
; libsrc/apple/portio.pla: 0017: const PREAD  = $FB1E
					; PREAD = 64286
; libsrc/apple/portio.pla: 0018: const WAIT   = $FCA8
					; WAIT = 64680
; libsrc/apple/portio.pla: 0019: 
; libsrc/apple/portio.pla: 0020: export def digitalRead(pin)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; pin -> [0]
_C000 					; digitalRead()
; libsrc/apple/portio.pla: 0021:   return FLAG0[pin&3] > 127
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$2C,$60,$C0		; CW	49248
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$7F			; CB	127
	!BYTE	$44			; ISGT
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/portio.pla: 0022: end
; libsrc/apple/portio.pla: 0023: 
; libsrc/apple/portio.pla: 0024: export def portRead
_C001 					; portRead()
; libsrc/apple/portio.pla: 0025:   return (^FLAG0>>7)&1|(^FLAG1>>6)&2|(^FLAG2>>5)&4|(^FLAG3>>4)&8
	!BYTE	$68,$60,$C0		; LAB	49248
	!BYTE	$0E			; CN	7
	!BYTE	$9C			; SHR
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$68,$61,$C0		; LAB	49249
	!BYTE	$0C			; CN	6
	!BYTE	$9C			; SHR
	!BYTE	$3C,$02			; ANDI	2
	!BYTE	$68,$62,$C0		; LAB	49250
	!BYTE	$0A			; CN	5
	!BYTE	$9C			; SHR
	!BYTE	$3C,$04			; ANDI	4
	!BYTE	$68,$63,$C0		; LAB	49251
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$96			; OR 
	!BYTE	$96			; OR 
	!BYTE	$96			; OR 
	!BYTE	$5C			; RET
; libsrc/apple/portio.pla: 0026: end
; libsrc/apple/portio.pla: 0027: 
; libsrc/apple/portio.pla: 0028: export def digitalWrite(pin, val)#0
					; pin -> [0]
					; val -> [2]
_C002 					; digitalWrite()
; libsrc/apple/portio.pla: 0029:   ANN0[((pin&3)<<1)+(val&1)]
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/portio.pla: 0030: end
	!BYTE	$2C,$58,$C0		; CW	49240
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$82			; ADD 
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/portio.pla: 0031: 
; libsrc/apple/portio.pla: 0032: export def portWrite(val)#0
					; val -> [0]
_C003 					; portWrite()
; libsrc/apple/portio.pla: 0033:   ANN0[val&1]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/portio.pla: 0034:   ANN1[(val>>1)&1]
; libsrc/apple/portio.pla: 0035:   ANN2[(val>>2)&1]
; libsrc/apple/portio.pla: 0036:   ANN3[(val>>3)&1]
; libsrc/apple/portio.pla: 0037: end
	!BYTE	$2C,$58,$C0		; CW	49240
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$2C,$5A,$C0		; CW	49242
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$2C,$5C,$C0		; CW	49244
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$04			; CN	2
	!BYTE	$9C			; SHR
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$2C,$5E,$C0		; CW	49246
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$06			; CN	3
	!BYTE	$9C			; SHR
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/portio.pla: 0038: 
; libsrc/apple/portio.pla: 0039: export def analogRead(pin)
					; pin -> [0]
_C004 					; analogRead()
; libsrc/apple/portio.pla: 0040:   return call(PREAD,0,pin&3,0,0).2
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$2C,$1E,$FB		; CW	64286
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F000 	!WORD	0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/portio.pla: 0041: end
; libsrc/apple/portio.pla: 0042: 
; libsrc/apple/portio.pla: 0043: export def delay(time)#0
					; time -> [0]
_C005 					; delay()
; libsrc/apple/portio.pla: 0044:   call(WAIT,time,0,0,0)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/portio.pla: 0045: end
	!BYTE	$2C,$A8,$FC		; CW	64680
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F001 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/portio.pla: 0046: 
; libsrc/apple/portio.pla: 0047: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: DIGITALREAD
	!BYTE	$C4,$C9,$C7,$C9,$D4,$C1,$CC,$D2,$C5,$C1,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: PORTREAD
	!BYTE	$D0,$CF,$D2,$D4,$D2,$C5,$C1,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: DIGITALWRITE
	!BYTE	$C4,$C9,$C7,$C9,$D4,$C1,$CC,$D7,$D2,$C9,$D4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: PORTWRITE
	!BYTE	$D0,$CF,$D2,$D4,$D7,$D2,$C9,$D4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: ANALOGREAD
	!BYTE	$C1,$CE,$C1,$CC,$CF,$C7,$D2,$C5,$C1,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: DELAY
	!BYTE	$C4,$C5,$CC,$C1,$59
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	!BYTE	$00			; END OF ESD
