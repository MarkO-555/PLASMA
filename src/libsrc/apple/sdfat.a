; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/sdfat.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/sdfat.pla: 0001: 
; libsrc/apple/sdfat.pla: 0002: include "inc/spiport.plh"
; inc/spiport.plh: 0001: import spiport
	; DCI STRING: SPIPORT
	!BYTE	$D3,$D0,$C9,$D0,$CF,$D2,$54
					; SPIPORT -> X028
; inc/spiport.plh: 0002:     //
; inc/spiport.plh: 0003:     // Wiring constants for Arduino
; inc/spiport.plh: 0004:     //
; inc/spiport.plh: 0005:     const PINHIGH   = 1
					; PINHIGH = 1
; inc/spiport.plh: 0006:     const PINLOW    = 0
					; PINLOW = 0
; inc/spiport.plh: 0007:     const PINOUTPUT = 1
					; PINOUTPUT = 1
; inc/spiport.plh: 0008:     const PININPUT  = 0
					; PININPUT = 0
; inc/spiport.plh: 0009:     const PINPULLUP = 2
					; PINPULLUP = 2
; inc/spiport.plh: 0010:     //
; inc/spiport.plh: 0011:     // SPI commands to Wiring functions on Arduino
; inc/spiport.plh: 0012:     //
; inc/spiport.plh: 0013:     const CMDPINMODE  = 3
					; CMDPINMODE = 3
; inc/spiport.plh: 0014:     const CMDDIGREAD  = 4
					; CMDDIGREAD = 4
; inc/spiport.plh: 0015:     const CMDDIGWRITE = 5
					; CMDDIGWRITE = 5
; inc/spiport.plh: 0016:     const CMDANAREAD  = 6
					; CMDANAREAD = 6
; inc/spiport.plh: 0017:     const CMDANAWRITE = 7
					; CMDANAWRITE = 7
; inc/spiport.plh: 0018:     //
; inc/spiport.plh: 0019:     // SPI commands to serial functions on Arduino
; inc/spiport.plh: 0020:     //
; inc/spiport.plh: 0021:     const CMDSERMODE  = 8
					; CMDSERMODE = 8
; inc/spiport.plh: 0022:     const CMDSERAVAIL = 9
					; CMDSERAVAIL = 9
; inc/spiport.plh: 0023:     const CMDSERREAD  = 10
					; CMDSERREAD = 10
; inc/spiport.plh: 0024:     const CMDSERWRITE = 11
					; CMDSERWRITE = 11
; inc/spiport.plh: 0025:     predef spiXferByte(outbyte), spiSend(data), spiRecv, spiWriteBuf(buf, len), spiReadBuf(buf, len)
					; SPIXFERBYTE -> X029
					; SPISEND -> X030
					; SPIRECV -> X031
					; SPIWRITEBUF -> X032
					; SPIREADBUF -> X033
; inc/spiport.plh: 0026:     predef spiDelay(time), spiReady
					; SPIDELAY -> X034
					; SPIREADY -> X035
; inc/spiport.plh: 0027: end
; libsrc/apple/sdfat.pla: 0002: 
; libsrc/apple/sdfat.pla: 0003: 
; libsrc/apple/sdfat.pla: 0004: //
; libsrc/apple/sdfat.pla: 0005: // FAT I/O object
; libsrc/apple/sdfat.pla: 0006: //
; libsrc/apple/sdfat.pla: 0007: predef cwd(pathname), chdir(path), mkdir(path), rmdir(path), rename(newpath), remove, exists(path)
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/apple/sdfat.pla: 0008: predef openFirst(filename), openNext(filename), open(path, mode)
; libsrc/apple/sdfat.pla: 0009: predef close, read(buf, len), write(buf, len), sync, rewind, seek, seekOfs, pos
; libsrc/apple/sdfat.pla: 0010: predef size, truncate, isDir, isFile
; libsrc/apple/sdfat.pla: 0011: //
; libsrc/apple/sdfat.pla: 0012: // SD card FAT filesystem interface
; libsrc/apple/sdfat.pla: 0013: //
; libsrc/apple/sdfat.pla: 0014: export byte[] sdFAT
_D058 					; sdFAT
; libsrc/apple/sdfat.pla: 0015: word[] = @cwd, @chdir, @mkdir, @rmdir, @rename, @remove, @exists, @openFirst, @openNext, @open
_F000 	!WORD	_P000
_F001 	!WORD	_P001
_F002 	!WORD	_P002
_F003 	!WORD	_P003
_F004 	!WORD	_P004
_F005 	!WORD	_P005
_F006 	!WORD	_P006
_F007 	!WORD	_P007
_F008 	!WORD	_P008
_F009 	!WORD	_P009
; libsrc/apple/sdfat.pla: 0016: word[] = @close, @read, @write, @sync, @rewind, @seek, @seekOfs, @pos
_F010 	!WORD	_P010
_F011 	!WORD	_P011
_F012 	!WORD	_P012
_F013 	!WORD	_P013
_F014 	!WORD	_P014
_F015 	!WORD	_P015
_F016 	!WORD	_P016
_F017 	!WORD	_P017
; libsrc/apple/sdfat.pla: 0017: word[] = @size, @truncate, @isDir, @isFile
_F018 	!WORD	_P018
_F019 	!WORD	_P019
_F020 	!WORD	_P020
_F021 	!WORD	_P021
; libsrc/apple/sdfat.pla: 0018: //
; libsrc/apple/sdfat.pla: 0019: // Directory related functions
; libsrc/apple/sdfat.pla: 0020: //
; libsrc/apple/sdfat.pla: 0021: def cwd(pathname)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; pathname -> [0]
_P000 					; cwd(pathname)()
_C000 					; cwd()
; libsrc/apple/sdfat.pla: 0022:     byte namelen
					; namelen -> [2]
; libsrc/apple/sdfat.pla: 0023: 
; libsrc/apple/sdfat.pla: 0024:     namelen = 0
	!BYTE	$58,$03,$01		; ENTER	3,1
; libsrc/apple/sdfat.pla: 0025:     spiSend(15) // CWD
; libsrc/apple/sdfat.pla: 0026:     namelen = spiRecv
; libsrc/apple/sdfat.pla: 0027:     if namelen
; libsrc/apple/sdfat.pla: 0028:         spiReadBuf(pathname+1, namelen)
; libsrc/apple/sdfat.pla: 0029:     fin
	!BYTE	$00			; CN	0
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$1E			; CN	15
	!BYTE	$54			; CALL	_X030
_F022 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F023 	!WORD	0		
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_X033
_F024 	!WORD	0		
	!BYTE	$30			; DROP 
_B001 
_B002 
; libsrc/apple/sdfat.pla: 0030:     ^pathname = namelen
; libsrc/apple/sdfat.pla: 0031:     return namelen
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/apple/sdfat.pla: 0032: end
; libsrc/apple/sdfat.pla: 0033: 
; libsrc/apple/sdfat.pla: 0034: def chdir(path)
					; path -> [0]
_P001 					; chdir(path)()
_C001 					; chdir()
; libsrc/apple/sdfat.pla: 0035:     spiWriteBuf(path + 1, ^path)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/sdfat.pla: 0036:     spiSend(16) // CHGDIR
; libsrc/apple/sdfat.pla: 0037:     return spiRecv
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X032
_F025 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$10			; CB	16
	!BYTE	$54			; CALL	_X030
_F026 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F027 	!WORD	0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0038: end
; libsrc/apple/sdfat.pla: 0039: 
; libsrc/apple/sdfat.pla: 0040: def mkdir(path)
					; path -> [0]
_P002 					; mkdir(path)()
_C002 					; mkdir()
; libsrc/apple/sdfat.pla: 0041:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0042: end
; libsrc/apple/sdfat.pla: 0043: 
; libsrc/apple/sdfat.pla: 0044: def rmdir(path)
					; path -> [0]
_P003 					; rmdir(path)()
_C003 					; rmdir()
; libsrc/apple/sdfat.pla: 0045:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0046: end
; libsrc/apple/sdfat.pla: 0047: 
; libsrc/apple/sdfat.pla: 0048: def rename(newpath)
					; newpath -> [0]
_P004 					; rename(newpath)()
_C004 					; rename()
; libsrc/apple/sdfat.pla: 0049:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0050: end
; libsrc/apple/sdfat.pla: 0051: 
; libsrc/apple/sdfat.pla: 0052: def remove
_P005 					; remove()
_C005 					; remove()
; libsrc/apple/sdfat.pla: 0053:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0054: end
; libsrc/apple/sdfat.pla: 0055: 
; libsrc/apple/sdfat.pla: 0056: def exists(path)
					; path -> [0]
_P006 					; exists(path)()
_C006 					; exists()
; libsrc/apple/sdfat.pla: 0057:     return 0
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0058: end
; libsrc/apple/sdfat.pla: 0059: 
; libsrc/apple/sdfat.pla: 0060: def openDir(cmd, filename)
					; cmd -> [0]
					; filename -> [2]
_C007 					; openDir()
; libsrc/apple/sdfat.pla: 0061:     byte namelen
					; namelen -> [4]
; libsrc/apple/sdfat.pla: 0062: 
; libsrc/apple/sdfat.pla: 0063:     namelen = 0
	!BYTE	$58,$05,$02		; ENTER	5,2
; libsrc/apple/sdfat.pla: 0064:     spiSend(cmd)
; libsrc/apple/sdfat.pla: 0065:     namelen = spiRecv
; libsrc/apple/sdfat.pla: 0066:     if namelen == $FF
; libsrc/apple/sdfat.pla: 0067:         namelen = 0
; libsrc/apple/sdfat.pla: 0068:     fin
	!BYTE	$00			; CN	0
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X030
_F028 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F029 	!WORD	0		
	!BYTE	$6C,$04			; DLB	[4]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$24			; BRNE	_B003
	!WORD	_B003-*
	!BYTE	$00			; CN	0
	!BYTE	$74,$04			; SLB	[4]
_B003 
_B004 
; libsrc/apple/sdfat.pla: 0069:     if namelen
; libsrc/apple/sdfat.pla: 0070:         spiReadBuf(filename+1, namelen)
; libsrc/apple/sdfat.pla: 0071:     fin
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$54			; CALL	_X033
_F030 	!WORD	0		
	!BYTE	$30			; DROP 
_B005 
_B006 
; libsrc/apple/sdfat.pla: 0072:     ^filename = namelen
; libsrc/apple/sdfat.pla: 0073:     return namelen
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/apple/sdfat.pla: 0074: end
; libsrc/apple/sdfat.pla: 0075: def openFirst(filename) // return filename in buffer
					; filename -> [0]
_P007 					; openFirst(filename) // return filename in buffer()
_C008 					; openFirst()
; libsrc/apple/sdfat.pla: 0076:     return openDir(22, filename) // OPENFIRST
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$2A,$16			; CB	22
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C007
_F031 	!WORD	_C007		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0077: end
; libsrc/apple/sdfat.pla: 0078: 
; libsrc/apple/sdfat.pla: 0079: def openNext(filename) // return filename i buffer
					; filename -> [0]
_P008 					; openNext(filename) // return filename i buffer()
_C009 					; openNext()
; libsrc/apple/sdfat.pla: 0080:     return openDir(23, filename) // OPENNEXT
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$2A,$17			; CB	23
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C007
_F032 	!WORD	_C007		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/sdfat.pla: 0081: end
; libsrc/apple/sdfat.pla: 0082: 
; libsrc/apple/sdfat.pla: 0083: //
; libsrc/apple/sdfat.pla: 0084: // File related functions
; libsrc/apple/sdfat.pla: 0085: //
; libsrc/apple/sdfat.pla: 0086: def open(path, mode)
					; path -> [0]
					; mode -> [2]
_P009 					; open(path, mode)()
_C010 					; open()
; libsrc/apple/sdfat.pla: 0087:     spiWriteBuf(path + 1, ^path) // send filename
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/sdfat.pla: 0088:     spiSend(21) // OPEN
; libsrc/apple/sdfat.pla: 0089:     spiSend(mode)
; libsrc/apple/sdfat.pla: 0090:     return spiRecv // status
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X032
_F033 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$15			; CB	21
	!BYTE	$54			; CALL	_X030
_F034 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X030
_F035 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F036 	!WORD	0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/sdfat.pla: 0091: end
; libsrc/apple/sdfat.pla: 0092: 
; libsrc/apple/sdfat.pla: 0093: def close
_P010 					; close()
_C011 					; close()
; libsrc/apple/sdfat.pla: 0094:     return spiSend(24) // CLOSE
	!BYTE	$2A,$18			; CB	24
	!BYTE	$54			; CALL	_X030
_F037 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0095: end
; libsrc/apple/sdfat.pla: 0096: 
; libsrc/apple/sdfat.pla: 0097: def read(buf, len)
					; buf -> [0]
					; len -> [2]
_P011 					; read(buf, len)()
_C012 					; read()
; libsrc/apple/sdfat.pla: 0098:     if len > 512
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/sdfat.pla: 0099:         len = 512
; libsrc/apple/sdfat.pla: 0100:     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$76,$02			; SLW	[2]
_B007 
_B008 
; libsrc/apple/sdfat.pla: 0101:     spiSend(25) // READ
; libsrc/apple/sdfat.pla: 0102:     spiSend(len >> 8); spiSend(len)
; libsrc/apple/sdfat.pla: 0103:     len = (spiRecv << 8) | spiRecv
; libsrc/apple/sdfat.pla: 0104:     if len > 0
; libsrc/apple/sdfat.pla: 0105:         spiReadBuf(buf, len)
; libsrc/apple/sdfat.pla: 0106:     fin
	!BYTE	$2A,$19			; CB	25
	!BYTE	$54			; CALL	_X030
_F038 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$54			; CALL	_X030
_F039 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X030
_F040 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F041 	!WORD	0		
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$54			; CALL	_X031
_F042 	!WORD	0		
	!BYTE	$96			; OR 
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X033
_F043 	!WORD	0		
	!BYTE	$30			; DROP 
_B009 
_B010 
; libsrc/apple/sdfat.pla: 0107:     return len
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/sdfat.pla: 0108: end
; libsrc/apple/sdfat.pla: 0109: 
; libsrc/apple/sdfat.pla: 0110: def write(buf, len)
					; buf -> [0]
					; len -> [2]
_P012 					; write(buf, len)()
_C013 					; write()
; libsrc/apple/sdfat.pla: 0111:     if len > 512
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/sdfat.pla: 0112:         len = 512
; libsrc/apple/sdfat.pla: 0113:     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$76,$02			; SLW	[2]
_B011 
_B012 
; libsrc/apple/sdfat.pla: 0114:     spiWriteBuf(buf, len)
; libsrc/apple/sdfat.pla: 0115:     spiSend(26) // WRITE
; libsrc/apple/sdfat.pla: 0116:     spiSend(len >> 8); spiSend(len)
; libsrc/apple/sdfat.pla: 0117:     len = (spiRecv << 8) | spiRecv
; libsrc/apple/sdfat.pla: 0118:     return len
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X032
_F044 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$54			; CALL	_X030
_F045 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$54			; CALL	_X030
_F046 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X030
_F047 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F048 	!WORD	0		
	!BYTE	$10			; CN	8
	!BYTE	$9A			; SHL
	!BYTE	$54			; CALL	_X031
_F049 	!WORD	0		
	!BYTE	$96			; OR 
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/sdfat.pla: 0119: end
; libsrc/apple/sdfat.pla: 0120: 
; libsrc/apple/sdfat.pla: 0121: def sync
_P013 					; sync()
_C014 					; sync()
; libsrc/apple/sdfat.pla: 0122:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0123: end
; libsrc/apple/sdfat.pla: 0124: 
; libsrc/apple/sdfat.pla: 0125: def rewind
_P014 					; rewind()
_C015 					; rewind()
; libsrc/apple/sdfat.pla: 0126:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0127: end
; libsrc/apple/sdfat.pla: 0128: 
; libsrc/apple/sdfat.pla: 0129: def seek
_P015 					; seek()
_C016 					; seek()
; libsrc/apple/sdfat.pla: 0130:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0131: end
; libsrc/apple/sdfat.pla: 0132: 
; libsrc/apple/sdfat.pla: 0133: def seekOfs
_P016 					; seekOfs()
_C017 					; seekOfs()
; libsrc/apple/sdfat.pla: 0134:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0135: end
; libsrc/apple/sdfat.pla: 0136: 
; libsrc/apple/sdfat.pla: 0137: def pos
_P017 					; pos()
_C018 					; pos()
; libsrc/apple/sdfat.pla: 0138:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0139: end
; libsrc/apple/sdfat.pla: 0140: 
; libsrc/apple/sdfat.pla: 0141: def size
_P018 					; size()
_C019 					; size()
; libsrc/apple/sdfat.pla: 0142:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0143: end
; libsrc/apple/sdfat.pla: 0144: 
; libsrc/apple/sdfat.pla: 0145: def truncate
_P019 					; truncate()
_C020 					; truncate()
; libsrc/apple/sdfat.pla: 0146:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0147: end
; libsrc/apple/sdfat.pla: 0148: 
; libsrc/apple/sdfat.pla: 0149: def isDir
_P020 					; isDir()
_C021 					; isDir()
; libsrc/apple/sdfat.pla: 0150:     spiSend(35) // ISDIR
; libsrc/apple/sdfat.pla: 0151:     return spiRecv
	!BYTE	$2A,$23			; CB	35
	!BYTE	$54			; CALL	_X030
_F050 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X031
_F051 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0152: end
; libsrc/apple/sdfat.pla: 0153: 
; libsrc/apple/sdfat.pla: 0154: def isFile
_P021 					; isFile()
_C022 					; isFile()
; libsrc/apple/sdfat.pla: 0155:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0156: end
; libsrc/apple/sdfat.pla: 0157: 
; libsrc/apple/sdfat.pla: 0158: //
; libsrc/apple/sdfat.pla: 0159: // Init SD card FAT filesystem
; libsrc/apple/sdfat.pla: 0160: //
; libsrc/apple/sdfat.pla: 0161: spiSend(14) // SDINIT
_INIT 
; libsrc/apple/sdfat.pla: 0162: return spiReady <> 0 // Is Arduino READY?
	!BYTE	$1C			; CN	14
	!BYTE	$54			; CALL	_X030
_F052 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X035
_F053 	!WORD	0		
	!BYTE	$5C			; RET
; libsrc/apple/sdfat.pla: 0163: done
_SYSFLAGS	=	0
_DEFCNT	=	24
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C012		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C013		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C014		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C015		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C016		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C017		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C018		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C019		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C020		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C021		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C022		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	35			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: SPISEND
	!BYTE	$D3,$D0,$C9,$D3,$C5,$CE,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: SPIRECV
	!BYTE	$D3,$D0,$C9,$D2,$C5,$C3,$56
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	; DCI STRING: SPIWRITEBUF
	!BYTE	$D3,$D0,$C9,$D7,$D2,$C9,$D4,$C5,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: SPIREADBUF
	!BYTE	$D3,$D0,$C9,$D2,$C5,$C1,$C4,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	; DCI STRING: SPIREADY
	!BYTE	$D3,$D0,$C9,$D2,$C5,$C1,$C4,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	35			; ESD INDEX
	; DCI STRING: SDFAT
	!BYTE	$D3,$C4,$C6,$C1,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_D058		
	!BYTE	$00			; END OF ESD
