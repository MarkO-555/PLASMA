; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/spiport.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/spiport.pla: 0001: 
; libsrc/apple/spiport.pla: 0002: //
; libsrc/apple/spiport.pla: 0003: // Bit banged spi over gameport
; libsrc/apple/spiport.pla: 0004: //
; libsrc/apple/spiport.pla: 0005: const SPI_SLAVE_READY = '@'
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; SPI_SLAVE_READY = 64
; libsrc/apple/spiport.pla: 0006: const SPI_SLAVE_ERROR = '!'
					; SPI_SLAVE_ERROR = 33
; libsrc/apple/spiport.pla: 0007: const SPI_SLAVE_BUSY  = $FF
					; SPI_SLAVE_BUSY = 255
; libsrc/apple/spiport.pla: 0008: 
; libsrc/apple/spiport.pla: 0009: word spiReadWriteByte, spiWriteBytes, spiReadBytes
_D028 	!FILL	2			; spiReadWriteByte, spiWriteBytes, spiReadBytes
_D029 	!FILL	2			; spiWriteBytes, spiReadBytes
_D030 	!FILL	2			; spiReadBytes
; libsrc/apple/spiport.pla: 0010: 
; libsrc/apple/spiport.pla: 0011: asm spiInc
_A000 					; spiInc()
; libsrc/apple/spiport.pla: 0012: !SOURCE "vmsrc/plvmzp.inc"
!SOURCE "vmsrc/plvmzp.inc"
; libsrc/apple/spiport.pla: 0013: !CPU    65C02
!CPU    65C02
; libsrc/apple/spiport.pla: 0014: end
; libsrc/apple/spiport.pla: 0015: 
; libsrc/apple/spiport.pla: 0016: asm spiXferByteStd(outbyte)
_A001 					; spiXferByteStd()
; libsrc/apple/spiport.pla: 0017:     PHP             ; DISABLE INTS
    PHP             ; DISABLE INTS
; libsrc/apple/spiport.pla: 0018:     SEI
    SEI
; libsrc/apple/spiport.pla: 0019:     STA $C05A       ; ENABLE SLAVE
    STA $C05A       ; ENABLE SLAVE
; libsrc/apple/spiport.pla: 0020:     LDY #0          ; ASSUME MSB IS ZERO
    LDY #0          ; ASSUME MSB IS ZERO
; libsrc/apple/spiport.pla: 0021:     LDA ESTKL,X     ; GET ARGUMENT
    LDA ESTKL,X     ; GET ARGUMENT
; libsrc/apple/spiport.pla: 0022:     BPL +           ; CHECK MSB
    BPL +           ; CHECK MSB
; libsrc/apple/spiport.pla: 0023:     INY             ; IT'S A ONE
    INY             ; IT'S A ONE
; libsrc/apple/spiport.pla: 0024: +   STA $C058,Y     ; WRITE BIT 7
+   STA $C058,Y     ; WRITE BIT 7
; libsrc/apple/spiport.pla: 0025:     STA $C040       ; CLOCK
    STA $C040       ; CLOCK
; libsrc/apple/spiport.pla: 0026:     LDY #0          ; DOING THIS HERE GIVES TIME FOR OUTPUT TO BECOME STABLE - NOT REALLY NEEDED
    LDY #0          ; DOING THIS HERE GIVES TIME FOR OUTPUT TO BECOME STABLE - NOT REALLY NEEDED
; libsrc/apple/spiport.pla: 0027:     ASL $C061       ; READ BIT 7 INTO CARRY
    ASL $C061       ; READ BIT 7 INTO CARRY
; libsrc/apple/spiport.pla: 0028:     ROL             ; ROTATE INTO ACC
    ROL             ; ROTATE INTO ACC
; libsrc/apple/spiport.pla: 0029:     BPL +           ; REPEAT FOR ALL BITS
    BPL +           ; REPEAT FOR ALL BITS
; libsrc/apple/spiport.pla: 0030:     INY
    INY
; libsrc/apple/spiport.pla: 0031: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0032:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0033:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0034:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0035:     ROL
    ROL
; libsrc/apple/spiport.pla: 0036:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0037:     INY
    INY
; libsrc/apple/spiport.pla: 0038: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0039:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0040:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0041:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0042:     ROL
    ROL
; libsrc/apple/spiport.pla: 0043:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0044:     INY
    INY
; libsrc/apple/spiport.pla: 0045: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0046:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0047:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0048:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0049:     ROL
    ROL
; libsrc/apple/spiport.pla: 0050:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0051:     INY
    INY
; libsrc/apple/spiport.pla: 0052: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0053:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0054:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0055:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0056:     ROL
    ROL
; libsrc/apple/spiport.pla: 0057:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0058:     INY
    INY
; libsrc/apple/spiport.pla: 0059: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0060:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0061:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0062:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0063:     ROL
    ROL
; libsrc/apple/spiport.pla: 0064:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0065:     INY
    INY
; libsrc/apple/spiport.pla: 0066: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0067:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0068:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0069:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0070:     ROL
    ROL
; libsrc/apple/spiport.pla: 0071:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0072:     INY
    INY
; libsrc/apple/spiport.pla: 0073: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0074:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0075:     NOP
    NOP
; libsrc/apple/spiport.pla: 0076:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0077:     STA $C05B       ; DISABLE SLAVE
    STA $C05B       ; DISABLE SLAVE
; libsrc/apple/spiport.pla: 0078:     ROL
    ROL
; libsrc/apple/spiport.pla: 0079:     STA ESTKL,X     ; SAVE RETURN PARAMETER
    STA ESTKL,X     ; SAVE RETURN PARAMETER
; libsrc/apple/spiport.pla: 0080:     PLP
    PLP
; libsrc/apple/spiport.pla: 0081:     RTS
    RTS
; libsrc/apple/spiport.pla: 0082: end
; libsrc/apple/spiport.pla: 0083: 
; libsrc/apple/spiport.pla: 0084: asm spiXferByteGS(outbyte)
_A002 					; spiXferByteGS()
; libsrc/apple/spiport.pla: 0085:     PHP             ; DISABLE INTS
    PHP             ; DISABLE INTS
; libsrc/apple/spiport.pla: 0086:     SEI
    SEI
; libsrc/apple/spiport.pla: 0087:     LDA $C036       ; SET 1 MHZ
    LDA $C036       ; SET 1 MHZ
; libsrc/apple/spiport.pla: 0088:     PHA
    PHA
; libsrc/apple/spiport.pla: 0089:     AND #$7F
    AND #$7F
; libsrc/apple/spiport.pla: 0090:     STA $C036
    STA $C036
; libsrc/apple/spiport.pla: 0091:     STA $C05A       ; ENABLE SLAVE
    STA $C05A       ; ENABLE SLAVE
; libsrc/apple/spiport.pla: 0092:     LDY #0          ; ASSUME MSB IS ZERO
    LDY #0          ; ASSUME MSB IS ZERO
; libsrc/apple/spiport.pla: 0093:     LDA ESTKL,X     ; GET ARGUMENT
    LDA ESTKL,X     ; GET ARGUMENT
; libsrc/apple/spiport.pla: 0094:     BPL +           ; CHECK MSB
    BPL +           ; CHECK MSB
; libsrc/apple/spiport.pla: 0095:     INY             ; IT'S A ONE
    INY             ; IT'S A ONE
; libsrc/apple/spiport.pla: 0096: +   STA $C058,Y     ; WRITE BIT 7
+   STA $C058,Y     ; WRITE BIT 7
; libsrc/apple/spiport.pla: 0097:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0098:     LDY #0          ; DOING THIS HERE GIVES TIME FOR OUTPUT TO BECOME STABLE - NOT REALLY NEEDED
    LDY #0          ; DOING THIS HERE GIVES TIME FOR OUTPUT TO BECOME STABLE - NOT REALLY NEEDED
; libsrc/apple/spiport.pla: 0099:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0100:     ASL $C061       ; READ BIT 7 INTO CARRY
    ASL $C061       ; READ BIT 7 INTO CARRY
; libsrc/apple/spiport.pla: 0101:     ROL             ; ROTATE INTO ACC
    ROL             ; ROTATE INTO ACC
; libsrc/apple/spiport.pla: 0102:     BPL +           ; REPEAT FOR ALL BITS
    BPL +           ; REPEAT FOR ALL BITS
; libsrc/apple/spiport.pla: 0103:     INY
    INY
; libsrc/apple/spiport.pla: 0104: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0105:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0106:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0107:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0108:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0109:     ROL
    ROL
; libsrc/apple/spiport.pla: 0110:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0111:     INY
    INY
; libsrc/apple/spiport.pla: 0112: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0113:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0114:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0115:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0116:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0117:     ROL
    ROL
; libsrc/apple/spiport.pla: 0118:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0119:     INY
    INY
; libsrc/apple/spiport.pla: 0120: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0121:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0122:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0123:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0124:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0125:     ROL
    ROL
; libsrc/apple/spiport.pla: 0126:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0127:     INY
    INY
; libsrc/apple/spiport.pla: 0128: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0129:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0130:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0131:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0132:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0133:     ROL
    ROL
; libsrc/apple/spiport.pla: 0134:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0135:     INY
    INY
; libsrc/apple/spiport.pla: 0136: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0137:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0138:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0139:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0140:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0141:     ROL
    ROL
; libsrc/apple/spiport.pla: 0142:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0143:     INY
    INY
; libsrc/apple/spiport.pla: 0144: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0145:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0146:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0147:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0148:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0149:     ROL
    ROL
; libsrc/apple/spiport.pla: 0150:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0151:     INY
    INY
; libsrc/apple/spiport.pla: 0152: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0153:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0154:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0155:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0156:     STA $C05B       ; DISABLE SLAVE
    STA $C05B       ; DISABLE SLAVE
; libsrc/apple/spiport.pla: 0157:     ROL
    ROL
; libsrc/apple/spiport.pla: 0158:     STA ESTKL,X     ; SAVE RETURN PARAMETER
    STA ESTKL,X     ; SAVE RETURN PARAMETER
; libsrc/apple/spiport.pla: 0159:     PLA
    PLA
; libsrc/apple/spiport.pla: 0160:     STA $C036
    STA $C036
; libsrc/apple/spiport.pla: 0161:     PLP
    PLP
; libsrc/apple/spiport.pla: 0162:     RTS
    RTS
; libsrc/apple/spiport.pla: 0163: end
; libsrc/apple/spiport.pla: 0164: asm spiReadBytesStd(buf, len)
_A003 					; spiReadBytesStd()
; libsrc/apple/spiport.pla: 0165:     PHP             ; DISABLE INTS
    PHP             ; DISABLE INTS
; libsrc/apple/spiport.pla: 0166:     SEI
    SEI
; libsrc/apple/spiport.pla: 0167:     LDA ESTKL+1,X
    LDA ESTKL+1,X
; libsrc/apple/spiport.pla: 0168:     STA DSTL
    STA DSTL
; libsrc/apple/spiport.pla: 0169:     LDA ESTKH+1,X
    LDA ESTKH+1,X
; libsrc/apple/spiport.pla: 0170:     STA DSTH
    STA DSTH
; libsrc/apple/spiport.pla: 0171:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/apple/spiport.pla: 0172:     BEQ +
    BEQ +
; libsrc/apple/spiport.pla: 0173:     INC ESTKH,X
    INC ESTKH,X
; libsrc/apple/spiport.pla: 0174: +   LDY #$00
+   LDY #$00
; libsrc/apple/spiport.pla: 0175: -   STA $C05A       ; ENABLE SLAVE
-   STA $C05A       ; ENABLE SLAVE
; libsrc/apple/spiport.pla: 0176:     STA $C040       ; CLOCK
    STA $C040       ; CLOCK
; libsrc/apple/spiport.pla: 0177:     NOP
    NOP
; libsrc/apple/spiport.pla: 0178:     ASL $C061       ; SHIFT IN ALL BITS STARTING WITH MSB
    ASL $C061       ; SHIFT IN ALL BITS STARTING WITH MSB
; libsrc/apple/spiport.pla: 0179:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0180:     ROL
    ROL
; libsrc/apple/spiport.pla: 0181:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0182:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0183:     ROL
    ROL
; libsrc/apple/spiport.pla: 0184:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0185:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0186:     ROL
    ROL
; libsrc/apple/spiport.pla: 0187:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0188:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0189:     ROL
    ROL
; libsrc/apple/spiport.pla: 0190:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0191:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0192:     ROL
    ROL
; libsrc/apple/spiport.pla: 0193:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0194:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0195:     ROL
    ROL
; libsrc/apple/spiport.pla: 0196:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0197:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0198:     ROL
    ROL
; libsrc/apple/spiport.pla: 0199:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0200:     STA $C05B       ; DISABLE SLAVE
    STA $C05B       ; DISABLE SLAVE
; libsrc/apple/spiport.pla: 0201:     ROL
    ROL
; libsrc/apple/spiport.pla: 0202:     STA (DST),Y     ; SAVE TO BUFFER
    STA (DST),Y     ; SAVE TO BUFFER
; libsrc/apple/spiport.pla: 0203:     INY
    INY
; libsrc/apple/spiport.pla: 0204:     BNE +
    BNE +
; libsrc/apple/spiport.pla: 0205:     INC DSTH
    INC DSTH
; libsrc/apple/spiport.pla: 0206: +   DEC ESTKL,X
+   DEC ESTKL,X
; libsrc/apple/spiport.pla: 0207:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0208:     DEC ESTKH,X
    DEC ESTKH,X
; libsrc/apple/spiport.pla: 0209:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0210:     INX             ; REMOVE AN ARGUMENT
    INX             ; REMOVE AN ARGUMENT
; libsrc/apple/spiport.pla: 0211:     PLP
    PLP
; libsrc/apple/spiport.pla: 0212:     RTS
    RTS
; libsrc/apple/spiport.pla: 0213: end
; libsrc/apple/spiport.pla: 0214: 
; libsrc/apple/spiport.pla: 0215: asm spiReadBytesGS(buf, len)
_A004 					; spiReadBytesGS()
; libsrc/apple/spiport.pla: 0216:     PHP             ; DISABLE INTS
    PHP             ; DISABLE INTS
; libsrc/apple/spiport.pla: 0217:     SEI
    SEI
; libsrc/apple/spiport.pla: 0218:     LDA $C036       ; SET 1 MHZ
    LDA $C036       ; SET 1 MHZ
; libsrc/apple/spiport.pla: 0219:     PHA
    PHA
; libsrc/apple/spiport.pla: 0220:     AND #$7F
    AND #$7F
; libsrc/apple/spiport.pla: 0221:     STA $C036
    STA $C036
; libsrc/apple/spiport.pla: 0222:     LDA ESTKL+1,X
    LDA ESTKL+1,X
; libsrc/apple/spiport.pla: 0223:     STA DSTL
    STA DSTL
; libsrc/apple/spiport.pla: 0224:     LDA ESTKH+1,X
    LDA ESTKH+1,X
; libsrc/apple/spiport.pla: 0225:     STA DSTH
    STA DSTH
; libsrc/apple/spiport.pla: 0226:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/apple/spiport.pla: 0227:     BEQ +
    BEQ +
; libsrc/apple/spiport.pla: 0228:     INC ESTKH,X
    INC ESTKH,X
; libsrc/apple/spiport.pla: 0229: +   LDY #$00
+   LDY #$00
; libsrc/apple/spiport.pla: 0230: -   STA $C05A       ; ENABLE SLAVE
-   STA $C05A       ; ENABLE SLAVE
; libsrc/apple/spiport.pla: 0231:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0232:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0233:     ASL $C061       ; SHIFT IN ALL BITS STARTING WITH MSB
    ASL $C061       ; SHIFT IN ALL BITS STARTING WITH MSB
; libsrc/apple/spiport.pla: 0234:     ROL
    ROL
; libsrc/apple/spiport.pla: 0235:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0236:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0237:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0238:     ROL
    ROL
; libsrc/apple/spiport.pla: 0239:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0240:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0241:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0242:     ROL
    ROL
; libsrc/apple/spiport.pla: 0243:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0244:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0245:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0246:     ROL
    ROL
; libsrc/apple/spiport.pla: 0247:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0248:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0249:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0250:     ROL
    ROL
; libsrc/apple/spiport.pla: 0251:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0252:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0253:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0254:     ROL
    ROL
; libsrc/apple/spiport.pla: 0255:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0256:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0257:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0258:     ROL
    ROL
; libsrc/apple/spiport.pla: 0259:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0260:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0261:     ASL $C061
    ASL $C061
; libsrc/apple/spiport.pla: 0262:     STA $C05B       ; DISABLE SLAVE
    STA $C05B       ; DISABLE SLAVE
; libsrc/apple/spiport.pla: 0263:     ROL
    ROL
; libsrc/apple/spiport.pla: 0264:     STA (DST),Y     ; SAVE TO BUFFER
    STA (DST),Y     ; SAVE TO BUFFER
; libsrc/apple/spiport.pla: 0265:     INY
    INY
; libsrc/apple/spiport.pla: 0266:     BNE +
    BNE +
; libsrc/apple/spiport.pla: 0267:     INC DSTH
    INC DSTH
; libsrc/apple/spiport.pla: 0268: +   DEC ESTKL,X
+   DEC ESTKL,X
; libsrc/apple/spiport.pla: 0269:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0270:     DEC ESTKH,X
    DEC ESTKH,X
; libsrc/apple/spiport.pla: 0271:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0272:     INX             ; REMOVE AN ARGUMENT
    INX             ; REMOVE AN ARGUMENT
; libsrc/apple/spiport.pla: 0273:     PLA
    PLA
; libsrc/apple/spiport.pla: 0274:     STA $C036
    STA $C036
; libsrc/apple/spiport.pla: 0275:     PLP
    PLP
; libsrc/apple/spiport.pla: 0276:     RTS
    RTS
; libsrc/apple/spiport.pla: 0277: end
; libsrc/apple/spiport.pla: 0278: 
; libsrc/apple/spiport.pla: 0279: asm spiWriteBytesStd(buf, len)
_A005 					; spiWriteBytesStd()
; libsrc/apple/spiport.pla: 0280:     PHP             ; DISABLE INTS
    PHP             ; DISABLE INTS
; libsrc/apple/spiport.pla: 0281:     SEI
    SEI
; libsrc/apple/spiport.pla: 0282:     LDA ESTKL+1,X
    LDA ESTKL+1,X
; libsrc/apple/spiport.pla: 0283:     STA SRCL
    STA SRCL
; libsrc/apple/spiport.pla: 0284:     LDA ESTKH+1,X
    LDA ESTKH+1,X
; libsrc/apple/spiport.pla: 0285:     STA SRCH
    STA SRCH
; libsrc/apple/spiport.pla: 0286:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/apple/spiport.pla: 0287:     BEQ +
    BEQ +
; libsrc/apple/spiport.pla: 0288:     INC ESTKH,X
    INC ESTKH,X
; libsrc/apple/spiport.pla: 0289: +
+
; libsrc/apple/spiport.pla: 0290: -   STA $C05A       ; ENABLE SLAVE
-   STA $C05A       ; ENABLE SLAVE
; libsrc/apple/spiport.pla: 0291:     LDY #0          ; ASSUME MSB IS ZERO
    LDY #0          ; ASSUME MSB IS ZERO
; libsrc/apple/spiport.pla: 0292:     LDA (SRC),Y     ; GET BYTE
    LDA (SRC),Y     ; GET BYTE
; libsrc/apple/spiport.pla: 0293:     BPL +           ; CHECK MSB
    BPL +           ; CHECK MSB
; libsrc/apple/spiport.pla: 0294:     INY             ; IT'S A ONE
    INY             ; IT'S A ONE
; libsrc/apple/spiport.pla: 0295: +   STA $C058,Y     ; WRITE BIT 7
+   STA $C058,Y     ; WRITE BIT 7
; libsrc/apple/spiport.pla: 0296:     STA $C040       ; CLOCK
    STA $C040       ; CLOCK
; libsrc/apple/spiport.pla: 0297:     LDY #0          ; DOING THIS HERE GIVES TIME FOR OUTPUT TO BECOME STABLE
    LDY #0          ; DOING THIS HERE GIVES TIME FOR OUTPUT TO BECOME STABLE
; libsrc/apple/spiport.pla: 0298:     ASL             ; ROTATE NEXT BIT TO SEND
    ASL             ; ROTATE NEXT BIT TO SEND
; libsrc/apple/spiport.pla: 0299:     BPL +           ; REPEAT FOR ALL BITS
    BPL +           ; REPEAT FOR ALL BITS
; libsrc/apple/spiport.pla: 0300:     INY
    INY
; libsrc/apple/spiport.pla: 0301: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0302:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0303:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0304:     ASL
    ASL
; libsrc/apple/spiport.pla: 0305:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0306:     INY
    INY
; libsrc/apple/spiport.pla: 0307: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0308:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0309:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0310:     ASL
    ASL
; libsrc/apple/spiport.pla: 0311:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0312:     INY
    INY
; libsrc/apple/spiport.pla: 0313: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0314:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0315:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0316:     ASL
    ASL
; libsrc/apple/spiport.pla: 0317:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0318:     INY
    INY
; libsrc/apple/spiport.pla: 0319: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0320:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0321:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0322:     ASL
    ASL
; libsrc/apple/spiport.pla: 0323:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0324:     INY
    INY
; libsrc/apple/spiport.pla: 0325: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0326:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0327:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0328:     ASL
    ASL
; libsrc/apple/spiport.pla: 0329:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0330:     INY
    INY
; libsrc/apple/spiport.pla: 0331: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0332:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0333:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0334:     ASL
    ASL
; libsrc/apple/spiport.pla: 0335:     BPL +
    BPL +
; libsrc/apple/spiport.pla: 0336:     INY
    INY
; libsrc/apple/spiport.pla: 0337: +   STA $C058,Y
+   STA $C058,Y
; libsrc/apple/spiport.pla: 0338:     STA $C040
    STA $C040
; libsrc/apple/spiport.pla: 0339:     STA $C05B       ; DISABLE SLAVE
    STA $C05B       ; DISABLE SLAVE
; libsrc/apple/spiport.pla: 0340:     INC SRCL
    INC SRCL
; libsrc/apple/spiport.pla: 0341:     BNE +
    BNE +
; libsrc/apple/spiport.pla: 0342:     INC SRCH
    INC SRCH
; libsrc/apple/spiport.pla: 0343: +   DEC ESTKL,X
+   DEC ESTKL,X
; libsrc/apple/spiport.pla: 0344:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0345:     DEC ESTKH,X
    DEC ESTKH,X
; libsrc/apple/spiport.pla: 0346:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0347:     INX             ; REMOVE AN ARGUMENT
    INX             ; REMOVE AN ARGUMENT
; libsrc/apple/spiport.pla: 0348:     PLP
    PLP
; libsrc/apple/spiport.pla: 0349:     RTS
    RTS
; libsrc/apple/spiport.pla: 0350: end
; libsrc/apple/spiport.pla: 0351: 
; libsrc/apple/spiport.pla: 0352: asm spiWriteBytesGS(buf, len)
_A006 					; spiWriteBytesGS()
; libsrc/apple/spiport.pla: 0353:     PHP             ; DISABLE INTS
    PHP             ; DISABLE INTS
; libsrc/apple/spiport.pla: 0354:     SEI
    SEI
; libsrc/apple/spiport.pla: 0355:     LDA $C036       ; SET 1 MHZ
    LDA $C036       ; SET 1 MHZ
; libsrc/apple/spiport.pla: 0356:     PHA
    PHA
; libsrc/apple/spiport.pla: 0357:     AND #$7F
    AND #$7F
; libsrc/apple/spiport.pla: 0358:     STA $C036
    STA $C036
; libsrc/apple/spiport.pla: 0359:     LDA ESTKL+1,X
    LDA ESTKL+1,X
; libsrc/apple/spiport.pla: 0360:     STA SRCL
    STA SRCL
; libsrc/apple/spiport.pla: 0361:     LDA ESTKH+1,X
    LDA ESTKH+1,X
; libsrc/apple/spiport.pla: 0362:     STA SRCH
    STA SRCH
; libsrc/apple/spiport.pla: 0363:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/apple/spiport.pla: 0364:     BEQ +
    BEQ +
; libsrc/apple/spiport.pla: 0365:     INC ESTKH,X
    INC ESTKH,X
; libsrc/apple/spiport.pla: 0366: +
+
; libsrc/apple/spiport.pla: 0367: --  STA $C05A       ; ENABLE SLAVE
--  STA $C05A       ; ENABLE SLAVE
; libsrc/apple/spiport.pla: 0368:     PHX
    PHX
; libsrc/apple/spiport.pla: 0369:     LDX #8
    LDX #8
; libsrc/apple/spiport.pla: 0370:     LDY #0          ; ASSUME MSB IS ZERO
    LDY #0          ; ASSUME MSB IS ZERO
; libsrc/apple/spiport.pla: 0371:     LDA (SRC),Y     ; GET BYTE
    LDA (SRC),Y     ; GET BYTE
; libsrc/apple/spiport.pla: 0372: -   ASL
-   ASL
; libsrc/apple/spiport.pla: 0373:     BCC +           ; CHECK MSB
    BCC +           ; CHECK MSB
; libsrc/apple/spiport.pla: 0374:     INY             ; IT'S A ONE
    INY             ; IT'S A ONE
; libsrc/apple/spiport.pla: 0375: +   STA $C058,Y     ; WRITE BIT 7
+   STA $C058,Y     ; WRITE BIT 7
; libsrc/apple/spiport.pla: 0376:     STA $C05C       ; CLOCK FALLING EDGE
    STA $C05C       ; CLOCK FALLING EDGE
; libsrc/apple/spiport.pla: 0377:     STA $C05D       ; CLOCK RISING EDGE
    STA $C05D       ; CLOCK RISING EDGE
; libsrc/apple/spiport.pla: 0378:     LDY #0
    LDY #0
; libsrc/apple/spiport.pla: 0379:     DEX
    DEX
; libsrc/apple/spiport.pla: 0380:     BNE -
    BNE -
; libsrc/apple/spiport.pla: 0381:     STA $C05B       ; DISABLE SLAVE
    STA $C05B       ; DISABLE SLAVE
; libsrc/apple/spiport.pla: 0382:     INC SRCL
    INC SRCL
; libsrc/apple/spiport.pla: 0383:     BNE +
    BNE +
; libsrc/apple/spiport.pla: 0384:     INC SRCH
    INC SRCH
; libsrc/apple/spiport.pla: 0385: +   PLX
+   PLX
; libsrc/apple/spiport.pla: 0386:     DEC ESTKL,X
    DEC ESTKL,X
; libsrc/apple/spiport.pla: 0387:     BNE --
    BNE --
; libsrc/apple/spiport.pla: 0388:     DEC ESTKH,X
    DEC ESTKH,X
; libsrc/apple/spiport.pla: 0389:     BNE --
    BNE --
; libsrc/apple/spiport.pla: 0390:     INX             ; REMOVE AN ARGUMENT
    INX             ; REMOVE AN ARGUMENT
; libsrc/apple/spiport.pla: 0391:     PLA
    PLA
; libsrc/apple/spiport.pla: 0392:     STA $C036
    STA $C036
; libsrc/apple/spiport.pla: 0393:     PLP
    PLP
; libsrc/apple/spiport.pla: 0394:     RTS
    RTS
; libsrc/apple/spiport.pla: 0395: end
; libsrc/apple/spiport.pla: 0396: 
; libsrc/apple/spiport.pla: 0397: export def spiXferByte(outbyte)
_SUBSEG 				; BYTECODE STARTS
					; outbyte -> [0]
_C000 					; spiXferByte()
; libsrc/apple/spiport.pla: 0398:     return (spiReadWriteByte)(outbyte)
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D028+0
_F000 	!WORD	_D028+0		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/spiport.pla: 0399: end
; libsrc/apple/spiport.pla: 0400: 
; libsrc/apple/spiport.pla: 0401: export def spiDelay(time)
					; time -> [0]
_C001 					; spiDelay()
; libsrc/apple/spiport.pla: 0402:     return call($FCA8, time, 0, 0, 0) // DELAY
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$2C,$A8,$FC		; CW	64680
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F001 	!WORD	0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/spiport.pla: 0403: end
; libsrc/apple/spiport.pla: 0404: 
; libsrc/apple/spiport.pla: 0405: export def spiSend(data)
					; data -> [0]
_C002 					; spiSend()
; libsrc/apple/spiport.pla: 0406:     byte timeout, status
					; timeout -> [2]
					; status -> [3]
; libsrc/apple/spiport.pla: 0407: 
; libsrc/apple/spiport.pla: 0408:     for timeout = 1 to 100 step 10
	!BYTE	$58,$04,$01		; ENTER	4,1
	!BYTE	$2A,$64			; CB	100
	!BYTE	$02			; CN	1
_B002 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/apple/spiport.pla: 0409:         status = (spiReadWriteByte)(data)
; libsrc/apple/spiport.pla: 0410:         if status <> SPI_SLAVE_BUSY
; libsrc/apple/spiport.pla: 0411:             return status
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D028+0
_F002 	!WORD	_D028+0		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$03			; DLB	[3]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$22			; BREQ	_B004
	!WORD	_B004-*
	!BYTE	$32			; DROP2
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/spiport.pla: 0412:         fin
_B004 
_B005 
; libsrc/apple/spiport.pla: 0413:         spiDelay(timeout)
; libsrc/apple/spiport.pla: 0414:     next
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_C001
_F003 	!WORD	_C001		
	!BYTE	$30			; DROP 
_B003 
	!BYTE	$14			; CN	10
	!BYTE	$A6			; ADDBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/apple/spiport.pla: 0415:     putc(status);putc('0'+data/10);putc('0'+data%10)
; libsrc/apple/spiport.pla: 0416:     return status
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$54			; CALL	_X002
_F004 	!WORD	0		
	!BYTE	$2A,$30			; CB	48
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X002
_F005 	!WORD	0		
	!BYTE	$2A,$30			; CB	48
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$8A			; MOD
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X002
_F006 	!WORD	0		
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/spiport.pla: 0417: end
; libsrc/apple/spiport.pla: 0418: 
; libsrc/apple/spiport.pla: 0419: export def spiRecv
_C003 					; spiRecv()
; libsrc/apple/spiport.pla: 0420:     return spiSend(0)
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C002
_F007 	!WORD	_C002		
	!BYTE	$5C			; RET
; libsrc/apple/spiport.pla: 0421: end
; libsrc/apple/spiport.pla: 0422: 
; libsrc/apple/spiport.pla: 0423: export def spiWriteBuf(buf, len)
					; buf -> [0]
					; len -> [2]
_C004 					; spiWriteBuf()
; libsrc/apple/spiport.pla: 0424:     spiSend(13)        // CMD_BUF_WRITE
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/spiport.pla: 0425:     spiSend(len >> 8); spiSend(len)
; libsrc/apple/spiport.pla: 0426:    return (spiWriteBytes)(buf, len)
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_C002
_F008 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$54			; CALL	_C002
_F009 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C002
_F010 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D029+0
_F011 	!WORD	_D029+0		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/spiport.pla: 0427: end
; libsrc/apple/spiport.pla: 0428: 
; libsrc/apple/spiport.pla: 0429: export def spiReadBuf(buf, len)
					; buf -> [0]
					; len -> [2]
_C005 					; spiReadBuf()
; libsrc/apple/spiport.pla: 0430:     spiSend(12)        // CMD_BUF_READ
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/spiport.pla: 0431:     spiSend(len >> 8); spiSend(len)
; libsrc/apple/spiport.pla: 0432:     return (spiReadBytes)(buf, len)
	!BYTE	$18			; CN	12
	!BYTE	$54			; CALL	_C002
_F012 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$54			; CALL	_C002
_F013 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C002
_F014 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D030+0
_F015 	!WORD	_D030+0		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/spiport.pla: 0433: end
; libsrc/apple/spiport.pla: 0434: 
; libsrc/apple/spiport.pla: 0435: export def spiReady
_C006 					; spiReady()
; libsrc/apple/spiport.pla: 0436:     byte timeout
					; timeout -> [0]
; libsrc/apple/spiport.pla: 0437: 
; libsrc/apple/spiport.pla: 0438:     timeout = 0xFF
	!BYTE	$58,$01,$00		; ENTER	1,0
; libsrc/apple/spiport.pla: 0439:     while (spiReadWriteByte)(0) <> SPI_SLAVE_READY and timeout // WAIT FOR READY
	!BYTE	$00			; CN	0
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B006 
; libsrc/apple/spiport.pla: 0440:         timeout--
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$8E			; DECR
; libsrc/apple/spiport.pla: 0441:         spiDelay(10)
; libsrc/apple/spiport.pla: 0442:     loop
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_C001
_F016 	!WORD	_C001		
	!BYTE	$30			; DROP 
_B008 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D028+0
_F017 	!WORD	_D028+0		
	!BYTE	$56			; ICAL
	!BYTE	$2A,$40			; CB	64
	!BYTE	$42			; ISNE
	!BYTE	$AC			; BRAND	_B009
	!WORD	_B009-*
	!BYTE	$64,$00			; LLB	[0]
_B009 
	!BYTE	$4E			; BRTRU	_B006
	!WORD	_B006-*
_B007 
; libsrc/apple/spiport.pla: 0443:     return timeout
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$5A,$01			; LEAVE	1
; libsrc/apple/spiport.pla: 0444: end
; libsrc/apple/spiport.pla: 0445: 
; libsrc/apple/spiport.pla: 0446: export def spiReset
_C007 					; spiReset()
; libsrc/apple/spiport.pla: 0447:     ^$C05B // DISABLE SLAVE SELECT
; libsrc/apple/spiport.pla: 0448:     ^$C05D // CLOCK RAISE (GS ONLY)
; libsrc/apple/spiport.pla: 0449:     return spiReady
	!BYTE	$68,$5B,$C0		; LAB	49243
	!BYTE	$30			; DROP 
	!BYTE	$68,$5D,$C0		; LAB	49245
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_C006
_F018 	!WORD	_C006		
	!BYTE	$5C			; RET
; libsrc/apple/spiport.pla: 0450: end
; libsrc/apple/spiport.pla: 0451: 
; libsrc/apple/spiport.pla: 0452: if call($FE1F, 0, 0, 0, 1).3 & 1 // GS ID ROUTINE
_INIT 
; libsrc/apple/spiport.pla: 0453:     spiReadWriteByte = @spiXferByteStd
; libsrc/apple/spiport.pla: 0454:     spiReadBytes     = @spiReadBytesStd
; libsrc/apple/spiport.pla: 0455:     spiWriteBytes    = @spiWriteBytesStd
; libsrc/apple/spiport.pla: 0456: else
	!BYTE	$2C,$1F,$FE		; CW	65055
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X010
_F019 	!WORD	0		
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$60			; LB
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$26			; LA	_A001+0
_F020 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_D028+0
_F021 	!WORD	_D028+0		
	!BYTE	$26			; LA	_A003+0
_F022 	!WORD	_A003+0		
	!BYTE	$7A			; SAW	_D030+0
_F023 	!WORD	_D030+0		
	!BYTE	$26			; LA	_A005+0
_F024 	!WORD	_A005+0		
	!BYTE	$7A			; SAW	_D029+0
_F025 	!WORD	_D029+0		
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
_B010 
; libsrc/apple/spiport.pla: 0457:     spiReadWriteByte = @spiXferByteGS
; libsrc/apple/spiport.pla: 0458:     spiReadBytes     = @spiReadBytesGS
; libsrc/apple/spiport.pla: 0459:     spiWriteBytes    = @spiWriteBytesGS
; libsrc/apple/spiport.pla: 0460: fin
	!BYTE	$26			; LA	_A002+0
_F026 	!WORD	_A002+0		
	!BYTE	$7A			; SAW	_D028+0
_F027 	!WORD	_D028+0		
	!BYTE	$26			; LA	_A004+0
_F028 	!WORD	_A004+0		
	!BYTE	$7A			; SAW	_D030+0
_F029 	!WORD	_D030+0		
	!BYTE	$26			; LA	_A006+0
_F030 	!WORD	_A006+0		
	!BYTE	$7A			; SAW	_D029+0
_F031 	!WORD	_D029+0		
_B011 
; libsrc/apple/spiport.pla: 0461: return spiReset <> 0
	!BYTE	$54			; CALL	_C007
_F032 	!WORD	_C007		
	!BYTE	$5C			; RET
; libsrc/apple/spiport.pla: 0462: done
_SYSFLAGS	=	0
_DEFCNT	=	9
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: SPIXFERBYTE
	!BYTE	$D3,$D0,$C9,$D8,$C6,$C5,$D2,$C2,$D9,$D4,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: SPIDELAY
	!BYTE	$D3,$D0,$C9,$C4,$C5,$CC,$C1,$59
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: SPISEND
	!BYTE	$D3,$D0,$C9,$D3,$C5,$CE,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: SPIRECV
	!BYTE	$D3,$D0,$C9,$D2,$C5,$C3,$56
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: SPIWRITEBUF
	!BYTE	$D3,$D0,$C9,$D7,$D2,$C9,$D4,$C5,$C2,$D5,$46
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: SPIREADBUF
	!BYTE	$D3,$D0,$C9,$D2,$C5,$C1,$C4,$C2,$D5,$46
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	; DCI STRING: SPIREADY
	!BYTE	$D3,$D0,$C9,$D2,$C5,$C1,$C4,$59
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C006		
	; DCI STRING: SPIRESET
	!BYTE	$D3,$D0,$C9,$D2,$C5,$D3,$C5,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C007		
	!BYTE	$00			; END OF ESD
