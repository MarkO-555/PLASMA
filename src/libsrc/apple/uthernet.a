; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/apple/uthernet.pla: 0001: //
; libsrc/apple/uthernet.pla: 0002: // Original Uthernet ethernet card based on Cirrus Logic cs8900a
; libsrc/apple/uthernet.pla: 0003: //
; libsrc/apple/uthernet.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/apple/uthernet.pla: 0004: 
; libsrc/apple/uthernet.pla: 0005: //
; libsrc/apple/uthernet.pla: 0006: // Include dependency on S/W IP stack
; libsrc/apple/uthernet.pla: 0007: //
; libsrc/apple/uthernet.pla: 0008: import etherip
	; DCI STRING: ETHERIP
	!BYTE	$C5,$D4,$C8,$C5,$D2,$C9,$50
					; ETHERIP -> X028
; libsrc/apple/uthernet.pla: 0009:     predef setEtherDriver(MAC, getlen, readfrm, setlen, writefrm)#0
					; SETETHERDRIVER -> X029
; libsrc/apple/uthernet.pla: 0010: end
; libsrc/apple/uthernet.pla: 0011: //
; libsrc/apple/uthernet.pla: 0012: // Uthernet register offsets
; libsrc/apple/uthernet.pla: 0013: //
; libsrc/apple/uthernet.pla: 0014: const TX_DATA    = $00
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; TX_DATA = 0
; libsrc/apple/uthernet.pla: 0015: const RX_DATA    = $00
					; RX_DATA = 0
; libsrc/apple/uthernet.pla: 0016: const TX_CMD     = $04
					; TX_CMD = 4
; libsrc/apple/uthernet.pla: 0017: const TX_LEN     = $06
					; TX_LEN = 6
; libsrc/apple/uthernet.pla: 0018: const INT_STATUS = $08
					; INT_STATUS = 8
; libsrc/apple/uthernet.pla: 0019: const PREG_INDEX = $0A
					; PREG_INDEX = 10
; libsrc/apple/uthernet.pla: 0020: const PREG_DATA  = $0C
					; PREG_DATA = 12
; libsrc/apple/uthernet.pla: 0021: const AUTO_INC   = $8000
					; AUTO_INC = 32768
; libsrc/apple/uthernet.pla: 0022: //
; libsrc/apple/uthernet.pla: 0023: // Uthernet register addresses
; libsrc/apple/uthernet.pla: 0024: //
; libsrc/apple/uthernet.pla: 0025: byte rxdata_lo, rxdata_hi
_D030 	!FILL	1			; rxdata_lo, rxdata_hi
_D031 	!FILL	1			; rxdata_hi
; libsrc/apple/uthernet.pla: 0026: byte txcmd
_D032 	!FILL	1			; txcmd
; libsrc/apple/uthernet.pla: 0027: byte txlen
_D033 	!FILL	1			; txlen
; libsrc/apple/uthernet.pla: 0028: byte isq
_D034 	!FILL	1			; isq
; libsrc/apple/uthernet.pla: 0029: word rom[]
_D035 					; rom[]
; libsrc/apple/uthernet.pla: 0030: byte pregidx
_D036 	!FILL	1			; pregidx
; libsrc/apple/uthernet.pla: 0031: byte pregdata
_D037 	!FILL	1			; pregdata
; libsrc/apple/uthernet.pla: 0032: byte[] slot // Init time only
_D038 					; slot // Init time only
; libsrc/apple/uthernet.pla: 0033: //
; libsrc/apple/uthernet.pla: 0034: // Uthernet MAC address
; libsrc/apple/uthernet.pla: 0035: //
; libsrc/apple/uthernet.pla: 0036: byte[6] utherMAC = $00,$0A,$99,$1E,$02,$A0
_D039 					; utherMAC = $00,$0A,$99,$1E,$02,$A0
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$99
	!BYTE	$1E
	!BYTE	$02
	!BYTE	$A0
; libsrc/apple/uthernet.pla: 0037: //
; libsrc/apple/uthernet.pla: 0038: // Defines for ASM routines
; libsrc/apple/uthernet.pla: 0039: //
; libsrc/apple/uthernet.pla: 0040: asm equates
_A000 					; equates()
; libsrc/apple/uthernet.pla: 0041:         !SOURCE "vmsrc/plvmzp.inc"
        !SOURCE "vmsrc/plvmzp.inc"
; libsrc/apple/uthernet.pla: 0042: end
; libsrc/apple/uthernet.pla: 0043: //
; libsrc/apple/uthernet.pla: 0044: // Uthernet I/O functions
; libsrc/apple/uthernet.pla: 0045: //
; libsrc/apple/uthernet.pla: 0046: asm _pokeiow(val)#0
_A001 					; _pokeiow()
; libsrc/apple/uthernet.pla: 0047:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/apple/uthernet.pla: 0048: end
; libsrc/apple/uthernet.pla: 0049: asm _pokeiowl
_A002 					; _pokeiowl()
; libsrc/apple/uthernet.pla: 0050:         STA     $C000
        STA     $C000
; libsrc/apple/uthernet.pla: 0051:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/apple/uthernet.pla: 0052: end
; libsrc/apple/uthernet.pla: 0053: asm _pokeiowh
_A003 					; _pokeiowh()
; libsrc/apple/uthernet.pla: 0054:         STA     $C000
        STA     $C000
; libsrc/apple/uthernet.pla: 0055:         INX
        INX
; libsrc/apple/uthernet.pla: 0056:         RTS
        RTS
; libsrc/apple/uthernet.pla: 0057: end
; libsrc/apple/uthernet.pla: 0058: //
; libsrc/apple/uthernet.pla: 0059: // PEEK BYTE FROM I/O SPACE
; libsrc/apple/uthernet.pla: 0060: // _peekio()
; libsrc/apple/uthernet.pla: 0061: //
; libsrc/apple/uthernet.pla: 0062: asm _peekio#1
_A004 					; _peekio()
; libsrc/apple/uthernet.pla: 0063:         DEX
        DEX
; libsrc/apple/uthernet.pla: 0064: end
; libsrc/apple/uthernet.pla: 0065: asm _peekiol
_A005 					; _peekiol()
; libsrc/apple/uthernet.pla: 0066:         LDA     $C000
        LDA     $C000
; libsrc/apple/uthernet.pla: 0067:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/uthernet.pla: 0068:         LDA     #$00
        LDA     #$00
; libsrc/apple/uthernet.pla: 0069:         STA     ESTKH,X
        STA     ESTKH,X
; libsrc/apple/uthernet.pla: 0070:         RTS
        RTS
; libsrc/apple/uthernet.pla: 0071: end
; libsrc/apple/uthernet.pla: 0072: //
; libsrc/apple/uthernet.pla: 0073: // PEEK WORD FROM I/O SPACE
; libsrc/apple/uthernet.pla: 0074: // _peekiow()
; libsrc/apple/uthernet.pla: 0075: //
; libsrc/apple/uthernet.pla: 0076: asm _peekiow#1
_A006 					; _peekiow()
; libsrc/apple/uthernet.pla: 0077:         DEX
        DEX
; libsrc/apple/uthernet.pla: 0078: end
; libsrc/apple/uthernet.pla: 0079: asm _peekiowl
_A007 					; _peekiowl()
; libsrc/apple/uthernet.pla: 0080:         LDA     $C000
        LDA     $C000
; libsrc/apple/uthernet.pla: 0081:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/uthernet.pla: 0082: end
; libsrc/apple/uthernet.pla: 0083: asm _peekiowh
_A008 					; _peekiowh()
; libsrc/apple/uthernet.pla: 0084:         LDA     $C000
        LDA     $C000
; libsrc/apple/uthernet.pla: 0085:         STA     ESTKH,X
        STA     ESTKH,X
; libsrc/apple/uthernet.pla: 0086:         RTS
        RTS
; libsrc/apple/uthernet.pla: 0087: end
; libsrc/apple/uthernet.pla: 0088: //
; libsrc/apple/uthernet.pla: 0089: // WRITE FRAME DATA INTO I/O SPACE
; libsrc/apple/uthernet.pla: 0090: // pokefrm(BUF, LEN)
; libsrc/apple/uthernet.pla: 0091: //
; libsrc/apple/uthernet.pla: 0092: asm pokefrm(buf, len)#1
_A009 					; pokefrm()
; libsrc/apple/uthernet.pla: 0093:         LDY     #$00
        LDY     #$00
; libsrc/apple/uthernet.pla: 0094:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/uthernet.pla: 0095:         STA     SRCL
        STA     SRCL
; libsrc/apple/uthernet.pla: 0096:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/apple/uthernet.pla: 0097:         STA     SRCH
        STA     SRCH
; libsrc/apple/uthernet.pla: 0098:         LSR     ESTKH,X     ; CONVERT BYTE LEN TO WORD LEN
        LSR     ESTKH,X     ; CONVERT BYTE LEN TO WORD LEN
; libsrc/apple/uthernet.pla: 0099:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/apple/uthernet.pla: 0100:         ROR
        ROR
; libsrc/apple/uthernet.pla: 0101:         ADC     #$00
        ADC     #$00
; libsrc/apple/uthernet.pla: 0102:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/uthernet.pla: 0103:         BEQ     +
        BEQ     +
; libsrc/apple/uthernet.pla: 0104:         INC     ESTKH,X
        INC     ESTKH,X
; libsrc/apple/uthernet.pla: 0105: +       BCC     POKELP
+       BCC     POKELP
; libsrc/apple/uthernet.pla: 0106:         INC     ESTKH,X
        INC     ESTKH,X
; libsrc/apple/uthernet.pla: 0107: POKELP  LDA     (SRC),Y
POKELP  LDA     (SRC),Y
; libsrc/apple/uthernet.pla: 0108: end
; libsrc/apple/uthernet.pla: 0109: asm _pokefrml
_A010 					; _pokefrml()
; libsrc/apple/uthernet.pla: 0110:         STA     $C000
        STA     $C000
; libsrc/apple/uthernet.pla: 0111:         INY
        INY
; libsrc/apple/uthernet.pla: 0112:         LDA     (SRC),Y
        LDA     (SRC),Y
; libsrc/apple/uthernet.pla: 0113: end
; libsrc/apple/uthernet.pla: 0114: asm _pokefrmh
_A011 					; _pokefrmh()
; libsrc/apple/uthernet.pla: 0115:         STA     $C000
        STA     $C000
; libsrc/apple/uthernet.pla: 0116:         INY
        INY
; libsrc/apple/uthernet.pla: 0117:         BNE     +
        BNE     +
; libsrc/apple/uthernet.pla: 0118:         INC     SRCH
        INC     SRCH
; libsrc/apple/uthernet.pla: 0119: +       DEC     ESTKL,X
+       DEC     ESTKL,X
; libsrc/apple/uthernet.pla: 0120:         BNE     POKELP
        BNE     POKELP
; libsrc/apple/uthernet.pla: 0121:         DEC     ESTKH,X
        DEC     ESTKH,X
; libsrc/apple/uthernet.pla: 0122:         BNE     POKELP
        BNE     POKELP
; libsrc/apple/uthernet.pla: 0123:         INX
        INX
; libsrc/apple/uthernet.pla: 0124:         RTS
        RTS
; libsrc/apple/uthernet.pla: 0125: end
; libsrc/apple/uthernet.pla: 0126: //
; libsrc/apple/uthernet.pla: 0127: // READ FRAME DATA FROM I/O SPACE
; libsrc/apple/uthernet.pla: 0128: // peekfrm(BUF, LEN)
; libsrc/apple/uthernet.pla: 0129: //
; libsrc/apple/uthernet.pla: 0130: asm peekfrm(buf, len)#1
_A012 					; peekfrm()
; libsrc/apple/uthernet.pla: 0131:         LDY     #$00
        LDY     #$00
; libsrc/apple/uthernet.pla: 0132:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/apple/uthernet.pla: 0133:         STA     DSTL
        STA     DSTL
; libsrc/apple/uthernet.pla: 0134:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/apple/uthernet.pla: 0135:         STA     DSTH
        STA     DSTH
; libsrc/apple/uthernet.pla: 0136:         LSR     ESTKH,X     ; CONVERT BYTE LEN TO WORD LEN
        LSR     ESTKH,X     ; CONVERT BYTE LEN TO WORD LEN
; libsrc/apple/uthernet.pla: 0137:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/apple/uthernet.pla: 0138:         ROR
        ROR
; libsrc/apple/uthernet.pla: 0139:         ADC     #$00
        ADC     #$00
; libsrc/apple/uthernet.pla: 0140:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/apple/uthernet.pla: 0141:         BEQ     +
        BEQ     +
; libsrc/apple/uthernet.pla: 0142:         INC     ESTKH,X
        INC     ESTKH,X
; libsrc/apple/uthernet.pla: 0143: +       BCC     PEEKLP
+       BCC     PEEKLP
; libsrc/apple/uthernet.pla: 0144:         INC     ESTKH,X
        INC     ESTKH,X
; libsrc/apple/uthernet.pla: 0145: end
; libsrc/apple/uthernet.pla: 0146: asm _peekfrml
_A013 					; _peekfrml()
; libsrc/apple/uthernet.pla: 0147: PEEKLP  LDA     $C000
PEEKLP  LDA     $C000
; libsrc/apple/uthernet.pla: 0148:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/uthernet.pla: 0149:         INY
        INY
; libsrc/apple/uthernet.pla: 0150: end
; libsrc/apple/uthernet.pla: 0151: asm _peekfrmh
_A014 					; _peekfrmh()
; libsrc/apple/uthernet.pla: 0152:         LDA     $C000
        LDA     $C000
; libsrc/apple/uthernet.pla: 0153:         STA     (DST),Y
        STA     (DST),Y
; libsrc/apple/uthernet.pla: 0154:         INY
        INY
; libsrc/apple/uthernet.pla: 0155:         BNE     +
        BNE     +
; libsrc/apple/uthernet.pla: 0156:         INC     DSTH
        INC     DSTH
; libsrc/apple/uthernet.pla: 0157: +       DEC     ESTKL,X
+       DEC     ESTKL,X
; libsrc/apple/uthernet.pla: 0158:         BNE     PEEKLP
        BNE     PEEKLP
; libsrc/apple/uthernet.pla: 0159:         DEC     ESTKH,X
        DEC     ESTKH,X
; libsrc/apple/uthernet.pla: 0160:         BNE     PEEKLP
        BNE     PEEKLP
; libsrc/apple/uthernet.pla: 0161: EXPSW   INX
EXPSW   INX
; libsrc/apple/uthernet.pla: 0162:         RTS
        RTS
; libsrc/apple/uthernet.pla: 0163: end
; libsrc/apple/uthernet.pla: 0164: def pokeiow(io, data)#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; io -> [0]
					; data -> [2]
_C000 					; pokeiow()
; libsrc/apple/uthernet.pla: 0165:     _pokeiowl.1 = io
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/uthernet.pla: 0166:     _pokeiowh.1 = io+1
; libsrc/apple/uthernet.pla: 0167:     _pokeiow(data)
; libsrc/apple/uthernet.pla: 0168: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_A002+1
_F000 	!WORD	_A002+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$78			; SAB	_A003+1
_F001 	!WORD	_A003+1		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_A001
_F002 	!WORD	_A001		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/uthernet.pla: 0169: def peekio(io)#1
					; io -> [0]
_C001 					; peekio()
; libsrc/apple/uthernet.pla: 0170:     _peekiol.1 = io
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/uthernet.pla: 0171:     return _peekio()
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_A005+1
_F003 	!WORD	_A005+1		
	!BYTE	$54			; CALL	_A004
_F004 	!WORD	_A004		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/uthernet.pla: 0172: end
; libsrc/apple/uthernet.pla: 0173: def peekiow(io)#1
					; io -> [0]
_C002 					; peekiow()
; libsrc/apple/uthernet.pla: 0174:     _peekiowl.1 = io
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/uthernet.pla: 0175:     _peekiowh.1 = io+1
; libsrc/apple/uthernet.pla: 0176:     return _peekiow()
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$78			; SAB	_A007+1
_F005 	!WORD	_A007+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$78			; SAB	_A008+1
_F006 	!WORD	_A008+1		
	!BYTE	$54			; CALL	_A006
_F007 	!WORD	_A006		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/uthernet.pla: 0177: end
; libsrc/apple/uthernet.pla: 0178: def pokepreg(reg, data)#0
					; reg -> [0]
					; data -> [2]
_C003 					; pokepreg()
; libsrc/apple/uthernet.pla: 0179:     pokeiow(pregidx, reg)
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/apple/uthernet.pla: 0180:     pokeiow(pregdata, data)
; libsrc/apple/uthernet.pla: 0181: end
	!BYTE	$68			; LAB	_D036+0
_F008 	!WORD	_D036+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C000
_F009 	!WORD	_C000		
	!BYTE	$68			; LAB	_D037+0
_F010 	!WORD	_D037+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C000
_F011 	!WORD	_C000		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/apple/uthernet.pla: 0182: def peekpreg(reg)#1
					; reg -> [0]
_C004 					; peekpreg()
; libsrc/apple/uthernet.pla: 0183:     pokeiow(pregidx, reg)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/uthernet.pla: 0184:     return peekiow(pregdata)
	!BYTE	$68			; LAB	_D036+0
_F012 	!WORD	_D036+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C000
_F013 	!WORD	_C000		
	!BYTE	$68			; LAB	_D037+0
_F014 	!WORD	_D037+0		
	!BYTE	$54			; CALL	_C002
_F015 	!WORD	_C002		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/uthernet.pla: 0185: end
; libsrc/apple/uthernet.pla: 0186: //
; libsrc/apple/uthernet.pla: 0187: // Set the length of the next packet to send and wait for data space availability
; libsrc/apple/uthernet.pla: 0188: //
; libsrc/apple/uthernet.pla: 0189: def pokefrmlen(len)#1
					; len -> [0]
_C005 					; pokefrmlen()
; libsrc/apple/uthernet.pla: 0190:     pokeiow(txcmd, $C0)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/apple/uthernet.pla: 0191:     pokeiow(txlen, len)
; libsrc/apple/uthernet.pla: 0192:     repeat; until peekpreg($0138) & $0100
	!BYTE	$68			; LAB	_D032+0
_F016 	!WORD	_D032+0		
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$54			; CALL	_C000
_F017 	!WORD	_C000		
	!BYTE	$68			; LAB	_D033+0
_F018 	!WORD	_D033+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C000
_F019 	!WORD	_C000		
_B002 
_B003 
	!BYTE	$2C,$38,$01		; CW	312
	!BYTE	$54			; CALL	_C004
_F020 	!WORD	_C004		
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$94			; AND 
	!BYTE	$4C			; BRFLS	_B002
	!WORD	_B002-*
_B001 
; libsrc/apple/uthernet.pla: 0193:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/uthernet.pla: 0194: end
; libsrc/apple/uthernet.pla: 0195: //
; libsrc/apple/uthernet.pla: 0196: // Return the length of awaiting packet, 0 otherwise
; libsrc/apple/uthernet.pla: 0197: //
; libsrc/apple/uthernet.pla: 0198: def peekfrmlen#1
_C006 					; peekfrmlen()
; libsrc/apple/uthernet.pla: 0199:     word len
					; len -> [0]
; libsrc/apple/uthernet.pla: 0200:     len = 0
	!BYTE	$58,$02,$00		; ENTER	2,0
; libsrc/apple/uthernet.pla: 0201:     if peekiow(isq) & $3F == $04
; libsrc/apple/uthernet.pla: 0202:         if peekio(rxdata_hi) & $01
; libsrc/apple/uthernet.pla: 0203:             peekio(rxdata_lo)
; libsrc/apple/uthernet.pla: 0204:             len.1 = peekio(rxdata_hi)
; libsrc/apple/uthernet.pla: 0205:             len.0 = peekio(rxdata_lo)
; libsrc/apple/uthernet.pla: 0206:         else
	!BYTE	$00			; CN	0
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$68			; LAB	_D034+0
_F021 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_C002
_F022 	!WORD	_C002		
	!BYTE	$3C,$3F			; ANDI	63
	!BYTE	$08			; CN	4
	!BYTE	$24			; BRNE	_B004
	!WORD	_B004-*
	!BYTE	$68			; LAB	_D031+0
_F023 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_C001
_F024 	!WORD	_C001		
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B006
	!WORD	_B006-*
	!BYTE	$68			; LAB	_D030+0
_F025 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_C001
_F026 	!WORD	_C001		
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D031+0
_F027 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_C001
_F028 	!WORD	_C001		
	!BYTE	$74,$01			; SLB	[1]
	!BYTE	$68			; LAB	_D030+0
_F029 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_C001
_F030 	!WORD	_C001		
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$50			; BRNCH	_B007
	!WORD	_B007-*
_B006 
; libsrc/apple/uthernet.pla: 0207:             peekio(rxdata_lo)
; libsrc/apple/uthernet.pla: 0208:             pokepreg($0102, $0140) // Skip pkt
; libsrc/apple/uthernet.pla: 0209:         fin
	!BYTE	$68			; LAB	_D030+0
_F031 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_C001
_F032 	!WORD	_C001		
	!BYTE	$30			; DROP 
	!BYTE	$2C,$02,$01		; CW	258
	!BYTE	$2C,$40,$01		; CW	320
	!BYTE	$54			; CALL	_C003
_F033 	!WORD	_C003		
_B007 
; libsrc/apple/uthernet.pla: 0210:     fin
_B004 
_B005 
; libsrc/apple/uthernet.pla: 0211:     return len
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/apple/uthernet.pla: 0212: end
; libsrc/apple/uthernet.pla: 0213: //
; libsrc/apple/uthernet.pla: 0214: // Identify Uthernet card and initialize
; libsrc/apple/uthernet.pla: 0215: //
; libsrc/apple/uthernet.pla: 0216: for slot = $90 to $F0 step $10
_INIT 
	!BYTE	$2A,$F0			; CB	240
	!BYTE	$2A,$90			; CB	144
_B009 
	!BYTE	$7C			; DAB	_D038+0
_F034 	!WORD	_D038+0		
; libsrc/apple/uthernet.pla: 0217:     rom = ((slot & $70) << 4) | $C000
; libsrc/apple/uthernet.pla: 0218:     if rom=>$06 <> $3C86 or (slot == $0B or (rom->$05 <> $38 and rom->$07 <> $18)) // Skip slots with signature
; libsrc/apple/uthernet.pla: 0219:         if (peekiow(slot+TX_CMD) & $CC3F) == $0009
; libsrc/apple/uthernet.pla: 0220:             pokeiow(slot+PREG_INDEX, 0)
; libsrc/apple/uthernet.pla: 0221:             if peekiow(slot+PREG_DATA) == $630E
; libsrc/apple/uthernet.pla: 0222:                 pregidx     = slot + PREG_INDEX
; libsrc/apple/uthernet.pla: 0223:                 pregdata    = slot + PREG_DATA
; libsrc/apple/uthernet.pla: 0224:                 pokepreg($0114, $40)        // RESET
; libsrc/apple/uthernet.pla: 0225:                 rxdata_lo   = slot + RX_DATA
; libsrc/apple/uthernet.pla: 0226:                 rxdata_hi   = slot + RX_DATA + 1
; libsrc/apple/uthernet.pla: 0227:                 txcmd       = slot + TX_CMD
; libsrc/apple/uthernet.pla: 0228:                 txlen       = slot + TX_LEN
; libsrc/apple/uthernet.pla: 0229:                 isq         = slot + INT_STATUS
; libsrc/apple/uthernet.pla: 0230:                 _pokefrml.1 = slot + TX_DATA
; libsrc/apple/uthernet.pla: 0231:                 _pokefrmh.1 = slot + TX_DATA + 1
; libsrc/apple/uthernet.pla: 0232:                 _peekfrml.1 = slot + RX_DATA
; libsrc/apple/uthernet.pla: 0233:                 _peekfrmh.1 = slot + RX_DATA + 1
; libsrc/apple/uthernet.pla: 0234:                 pokepreg($0158, utherMAC:0) // MAC addr
; libsrc/apple/uthernet.pla: 0235:                 pokepreg($015A, utherMAC:2) // MAC addr
; libsrc/apple/uthernet.pla: 0236:                 pokepreg($015C, utherMAC:4) // MAC addr
; libsrc/apple/uthernet.pla: 0237:                 pokepreg($0102, $0100)      // Recv cfg
; libsrc/apple/uthernet.pla: 0238:                 pokepreg($0104, $0D00)      // Recv ctrl
; libsrc/apple/uthernet.pla: 0239:                 pokepreg($0106, $8200)      // Xmit cfg
; libsrc/apple/uthernet.pla: 0240:                 pokepreg($0112, $00C0)      // Line ctrl
; libsrc/apple/uthernet.pla: 0241:                 //
; libsrc/apple/uthernet.pla: 0242:                 // Install etherip driver
; libsrc/apple/uthernet.pla: 0243:                 //
; libsrc/apple/uthernet.pla: 0244:                 puts("Found Uthernet I in slot #"); putc('0' + ((slot - $80) >> 4)); putln
	!BYTE	$68			; LAB	_D038+0
_F035 	!WORD	_D038+0		
	!BYTE	$3C,$70			; ANDI	112
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$2C,$00,$C0		; CW	49152
	!BYTE	$96			; OR 
	!BYTE	$7E			; DAW	_D035+0
_F036 	!WORD	_D035+0		
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$62			; LW
	!BYTE	$2C,$86,$3C		; CW	15494
	!BYTE	$42			; ISNE
	!BYTE	$AE			; BROR	_B011
	!WORD	_B011-*
	!BYTE	$68			; LAB	_D038+0
_F037 	!WORD	_D038+0		
	!BYTE	$16			; CN	11
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B012
	!WORD	_B012-*
	!BYTE	$6A			; LAW	_D035+0
_F038 	!WORD	_D035+0		
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$2A,$38			; CB	56
	!BYTE	$42			; ISNE
	!BYTE	$AC			; BRAND	_B013
	!WORD	_B013-*
	!BYTE	$6A			; LAW	_D035+0
_F039 	!WORD	_D035+0		
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$2A,$18			; CB	24
	!BYTE	$42			; ISNE
_B013 
_B012 
_B011 
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$68			; LAB	_D038+0
_F040 	!WORD	_D038+0		
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$54			; CALL	_C002
_F041 	!WORD	_C002		
	!BYTE	$2C,$3F,$CC		; CW	52287
	!BYTE	$94			; AND 
	!BYTE	$12			; CN	9
	!BYTE	$24			; BRNE	_B016
	!WORD	_B016-*
	!BYTE	$68			; LAB	_D038+0
_F042 	!WORD	_D038+0		
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C000
_F043 	!WORD	_C000		
	!BYTE	$68			; LAB	_D038+0
_F044 	!WORD	_D038+0		
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$54			; CALL	_C002
_F045 	!WORD	_C002		
	!BYTE	$2C,$0E,$63		; CW	25358
	!BYTE	$24			; BRNE	_B018
	!WORD	_B018-*
	!BYTE	$68			; LAB	_D038+0
_F046 	!WORD	_D038+0		
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$78			; SAB	_D036+0
_F047 	!WORD	_D036+0		
	!BYTE	$68			; LAB	_D038+0
_F048 	!WORD	_D038+0		
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$78			; SAB	_D037+0
_F049 	!WORD	_D037+0		
	!BYTE	$2C,$14,$01		; CW	276
	!BYTE	$2A,$40			; CB	64
	!BYTE	$54			; CALL	_C003
_F050 	!WORD	_C003		
	!BYTE	$68			; LAB	_D038+0
_F051 	!WORD	_D038+0		
	!BYTE	$78			; SAB	_D030+0
_F052 	!WORD	_D030+0		
	!BYTE	$68			; LAB	_D038+0
_F053 	!WORD	_D038+0		
	!BYTE	$8C			; INCR
	!BYTE	$78			; SAB	_D031+0
_F054 	!WORD	_D031+0		
	!BYTE	$68			; LAB	_D038+0
_F055 	!WORD	_D038+0		
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$78			; SAB	_D032+0
_F056 	!WORD	_D032+0		
	!BYTE	$68			; LAB	_D038+0
_F057 	!WORD	_D038+0		
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$78			; SAB	_D033+0
_F058 	!WORD	_D033+0		
	!BYTE	$68			; LAB	_D038+0
_F059 	!WORD	_D038+0		
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$78			; SAB	_D034+0
_F060 	!WORD	_D034+0		
	!BYTE	$68			; LAB	_D038+0
_F061 	!WORD	_D038+0		
	!BYTE	$78			; SAB	_A010+1
_F062 	!WORD	_A010+1		
	!BYTE	$68			; LAB	_D038+0
_F063 	!WORD	_D038+0		
	!BYTE	$8C			; INCR
	!BYTE	$78			; SAB	_A011+1
_F064 	!WORD	_A011+1		
	!BYTE	$68			; LAB	_D038+0
_F065 	!WORD	_D038+0		
	!BYTE	$78			; SAB	_A013+1
_F066 	!WORD	_A013+1		
	!BYTE	$68			; LAB	_D038+0
_F067 	!WORD	_D038+0		
	!BYTE	$8C			; INCR
	!BYTE	$78			; SAB	_A014+1
_F068 	!WORD	_A014+1		
	!BYTE	$2C,$58,$01		; CW	344
	!BYTE	$6A			; LAW	_D039+0
_F069 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_C003
_F070 	!WORD	_C003		
	!BYTE	$2C,$5A,$01		; CW	346
	!BYTE	$6A			; LAW	_D039+2
_F071 	!WORD	_D039+2		
	!BYTE	$54			; CALL	_C003
_F072 	!WORD	_C003		
	!BYTE	$2C,$5C,$01		; CW	348
	!BYTE	$6A			; LAW	_D039+4
_F073 	!WORD	_D039+4		
	!BYTE	$54			; CALL	_C003
_F074 	!WORD	_C003		
	!BYTE	$2C,$02,$01		; CW	258
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$54			; CALL	_C003
_F075 	!WORD	_C003		
	!BYTE	$2C,$04,$01		; CW	260
	!BYTE	$2C,$00,$0D		; CW	3328
	!BYTE	$54			; CALL	_C003
_F076 	!WORD	_C003		
	!BYTE	$2C,$06,$01		; CW	262
	!BYTE	$2C,$00,$82		; CW	33280
	!BYTE	$54			; CALL	_C003
_F077 	!WORD	_C003		
	!BYTE	$2C,$12,$01		; CW	274
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$54			; CALL	_C003
_F078 	!WORD	_C003		
	!BYTE	$2E			; CS
	!BYTE	$1A
	!BYTE	$46,$6F,$75,$6E,$64,$20,$55,$74
	!BYTE	$68,$65,$72,$6E,$65,$74,$20,$49
	!BYTE	$20,$69,$6E,$20,$73,$6C,$6F,$74
	!BYTE	$20,$23
	!BYTE	$54			; CALL	_X004
_F079 	!WORD	0		
; libsrc/apple/uthernet.pla: 0245:                 setEtherDriver(@utherMAC, @peekfrmlen, @peekfrm, @pokefrmlen, @pokefrm)
; libsrc/apple/uthernet.pla: 0246:                 return modkeep
	!BYTE	$2A,$30			; CB	48
	!BYTE	$68			; LAB	_D038+0
_F080 	!WORD	_D038+0		
	!BYTE	$3A,$80			; SUBI	128
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X002
_F081 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F082 	!WORD	0		
	!BYTE	$26			; LA	_D039+0
_F083 	!WORD	_D039+0		
	!BYTE	$26			; LA	_C006+0
_F084 	!WORD	_C006+0		
	!BYTE	$26			; LA	_A012+0
_F085 	!WORD	_A012+0		
	!BYTE	$26			; LA	_C005+0
_F086 	!WORD	_C005+0		
	!BYTE	$26			; LA	_A009+0
_F087 	!WORD	_A009+0		
	!BYTE	$54			; CALL	_X029
_F088 	!WORD	0		
	!BYTE	$32			; DROP2
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$5C			; RET
; libsrc/apple/uthernet.pla: 0247:             fin
_B018 
_B019 
; libsrc/apple/uthernet.pla: 0248:         fin
_B016 
_B017 
; libsrc/apple/uthernet.pla: 0249:     fin
_B014 
_B015 
; libsrc/apple/uthernet.pla: 0250: next
_B010 
	!BYTE	$2A,$10			; CB	16
	!BYTE	$A6			; ADDBRLE	_B009
	!WORD	_B009-*
_B008 
	!BYTE	$78			; SAB	_D038+0
_F089 	!WORD	_D038+0		
	!BYTE	$30			; DROP 
; libsrc/apple/uthernet.pla: 0251: //
; libsrc/apple/uthernet.pla: 0252: // Not found
; libsrc/apple/uthernet.pla: 0253: //
; libsrc/apple/uthernet.pla: 0254: return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; libsrc/apple/uthernet.pla: 0255: done
_SYSFLAGS	=	0
_DEFCNT	=	8
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: SETETHERDRIVER
	!BYTE	$D3,$C5,$D4,$C5,$D4,$C8,$C5,$D2,$C4,$D2,$C9,$D6,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	!BYTE	$00			; END OF ESD
