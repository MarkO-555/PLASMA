; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/fiber.pla: 0001: //
; libsrc/fiber.pla: 0002: // Cooperative multi-threading (fiber) scheduler
; libsrc/fiber.pla: 0003: //
; libsrc/fiber.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/fiber.pla: 0004: 
; libsrc/fiber.pla: 0005: //
; libsrc/fiber.pla: 0006: // Maximum number of fibers
; libsrc/fiber.pla: 0007: //
; libsrc/fiber.pla: 0008: const MAX_FIBERS    = 32
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; MAX_FIBERS = 32
; libsrc/fiber.pla: 0009: //
; libsrc/fiber.pla: 0010: // Fiber states
; libsrc/fiber.pla: 0011: //
; libsrc/fiber.pla: 0012: const FIBER_UNAVAIL = 0
					; FIBER_UNAVAIL = 0
; libsrc/fiber.pla: 0013: const FIBER_FREE    = 1
					; FIBER_FREE = 1
; libsrc/fiber.pla: 0014: const FIBER_HALT    = 2
					; FIBER_HALT = 2
; libsrc/fiber.pla: 0015: const FIBER_RUN     = 3
					; FIBER_RUN = 3
; libsrc/fiber.pla: 0016: byte fbrMax
_D028 	!FILL	1			; fbrMax
; libsrc/fiber.pla: 0017: byte fbrState[MAX_FIBERS]
_D029 	!FILL	32			; fbrState[MAX_FIBERS]
; libsrc/fiber.pla: 0018: byte fbrNext[MAX_FIBERS]
_D030 	!FILL	32			; fbrNext[MAX_FIBERS]
; libsrc/fiber.pla: 0019: word fbrVMState[MAX_FIBERS]
_D031 	!FILL	64			; fbrVMState[MAX_FIBERS]
; libsrc/fiber.pla: 0020: word fbrPool
_D032 	!FILL	2			; fbrPool
; libsrc/fiber.pla: 0021: byte fbrRunning = 0
_D033 					; fbrRunning = 0
	!BYTE	$00
; libsrc/fiber.pla: 0022: export byte fbrCount = 0
_D034 					; fbrCount = 0
	!BYTE	$00
; libsrc/fiber.pla: 0023: //
; libsrc/fiber.pla: 0024: // Zero Page VM state and 6502 stack
; libsrc/fiber.pla: 0025: //
; libsrc/fiber.pla: 0026: struc t_vm
; libsrc/fiber.pla: 0027:     byte estkhi[$10]
					; estkhi = 0
; libsrc/fiber.pla: 0028:     byte estklo[$10]
					; estklo = 16
; libsrc/fiber.pla: 0029:     word ifp
					; ifp = 32
; libsrc/fiber.pla: 0030:     word pp
					; pp = 34
; libsrc/fiber.pla: 0031:     byte hwsp
					; hwsp = 36
; libsrc/fiber.pla: 0032:     byte esp
					; esp = 37
; libsrc/fiber.pla: 0033:     byte jmptmp
					; jmptmp = 38
; libsrc/fiber.pla: 0034:     byte fill[8]
					; fill = 39
; libsrc/fiber.pla: 0035:     byte dropop
					; dropop = 47
; libsrc/fiber.pla: 0036:     byte nextop[$10]
					; nextop = 48
; libsrc/fiber.pla: 0037:     byte hwstk[$C0]
					; hwstk = 64
; libsrc/fiber.pla: 0038: end
					; t_vm = 256
; libsrc/fiber.pla: 0039: //
; libsrc/fiber.pla: 0040: // Save current VM state and restore another
; libsrc/fiber.pla: 0041: //
; libsrc/fiber.pla: 0042: asm fbrSwap(saveVM, restoreVM)#0
_A000 					; fbrSwap()
; libsrc/fiber.pla: 0043:     !SOURCE "vmsrc/plvmzp.inc"
    !SOURCE "vmsrc/plvmzp.inc"
; libsrc/fiber.pla: 0044:     HWSP = IPY
    HWSP = IPY
; libsrc/fiber.pla: 0045:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/fiber.pla: 0046:     STA SRCL
    STA SRCL
; libsrc/fiber.pla: 0047:     LDA ESTKH,X
    LDA ESTKH,X
; libsrc/fiber.pla: 0048:     STA SRCH
    STA SRCH
; libsrc/fiber.pla: 0049:     INX
    INX
; libsrc/fiber.pla: 0050:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/fiber.pla: 0051:     STA DSTL
    STA DSTL
; libsrc/fiber.pla: 0052:     LDA ESTKH,X
    LDA ESTKH,X
; libsrc/fiber.pla: 0053:     STA DSTH
    STA DSTH
; libsrc/fiber.pla: 0054:     INX
    INX
; libsrc/fiber.pla: 0055:     STX ESP
    STX ESP
; libsrc/fiber.pla: 0056:     TSX
    TSX
; libsrc/fiber.pla: 0057:     STX HWSP
    STX HWSP
; libsrc/fiber.pla: 0058:     LDY #$26
    LDY #$26
; libsrc/fiber.pla: 0059: -   LDA ESTK,Y
-   LDA ESTK,Y
; libsrc/fiber.pla: 0060:     STA (DST),Y
    STA (DST),Y
; libsrc/fiber.pla: 0061:     LDA (SRC),Y
    LDA (SRC),Y
; libsrc/fiber.pla: 0062:     STA ESTK,Y
    STA ESTK,Y
; libsrc/fiber.pla: 0063:     DEY
    DEY
; libsrc/fiber.pla: 0064:     BPL -
    BPL -
; libsrc/fiber.pla: 0065:     TXA
    TXA
; libsrc/fiber.pla: 0066:     TAY
    TAY
; libsrc/fiber.pla: 0067: -   LDA $100,Y
-   LDA $100,Y
; libsrc/fiber.pla: 0068:     STA (DST),Y
    STA (DST),Y
; libsrc/fiber.pla: 0069:     INY
    INY
; libsrc/fiber.pla: 0070:     BNE -
    BNE -
; libsrc/fiber.pla: 0071:     LDY HWSP
    LDY HWSP
; libsrc/fiber.pla: 0072: -   LDA (SRC),Y
-   LDA (SRC),Y
; libsrc/fiber.pla: 0073:     STA $100,Y
    STA $100,Y
; libsrc/fiber.pla: 0074:     INY
    INY
; libsrc/fiber.pla: 0075:     BNE -
    BNE -
; libsrc/fiber.pla: 0076:     LDX HWSP
    LDX HWSP
; libsrc/fiber.pla: 0077:     TXS
    TXS
; libsrc/fiber.pla: 0078:     LDX ESP
    LDX ESP
; libsrc/fiber.pla: 0079:     RTS
    RTS
; libsrc/fiber.pla: 0080: end
; libsrc/fiber.pla: 0081: //
; libsrc/fiber.pla: 0082: // Load Zero Page VM state and 6502 stack
; libsrc/fiber.pla: 0083: //
; libsrc/fiber.pla: 0084: asm fbrLoad(loadVM)#0
_A001 					; fbrLoad()
; libsrc/fiber.pla: 0085:     LDA ESTKL,X
    LDA ESTKL,X
; libsrc/fiber.pla: 0086:     STA SRCL
    STA SRCL
; libsrc/fiber.pla: 0087:     LDA ESTKH,X
    LDA ESTKH,X
; libsrc/fiber.pla: 0088:     STA SRCH
    STA SRCH
; libsrc/fiber.pla: 0089:     LDY #$26
    LDY #$26
; libsrc/fiber.pla: 0090: -   LDA (SRC),Y
-   LDA (SRC),Y
; libsrc/fiber.pla: 0091:     STA ESTK,Y
    STA ESTK,Y
; libsrc/fiber.pla: 0092:     DEY
    DEY
; libsrc/fiber.pla: 0093:     BPL -
    BPL -
; libsrc/fiber.pla: 0094:     LDY HWSP
    LDY HWSP
; libsrc/fiber.pla: 0095: -   LDA (SRC),Y
-   LDA (SRC),Y
; libsrc/fiber.pla: 0096:     STA $100,Y
    STA $100,Y
; libsrc/fiber.pla: 0097:     INY
    INY
; libsrc/fiber.pla: 0098:     BNE -
    BNE -
; libsrc/fiber.pla: 0099:     LDX HWSP
    LDX HWSP
; libsrc/fiber.pla: 0100:     TXS
    TXS
; libsrc/fiber.pla: 0101:     LDX ESP
    LDX ESP
; libsrc/fiber.pla: 0102:     RTS
    RTS
; libsrc/fiber.pla: 0103: end
; libsrc/fiber.pla: 0104: //
; libsrc/fiber.pla: 0105: // Initialize fiber pool
; libsrc/fiber.pla: 0106: //
; libsrc/fiber.pla: 0107: export def fbrInit(numPool)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; numPool -> [0]
_C000 					; fbrInit()
; libsrc/fiber.pla: 0108:     byte i
					; i -> [2]
; libsrc/fiber.pla: 0109:     word pool
					; pool -> [3]
; libsrc/fiber.pla: 0110: 
; libsrc/fiber.pla: 0111:     if numPool >= MAX_FIBERS
	!BYTE	$58,$05,$01		; ENTER	5,1
; libsrc/fiber.pla: 0112:         numPool = MAX_FIBERS
; libsrc/fiber.pla: 0113:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2A,$20			; CB	32
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$2A,$20			; CB	32
	!BYTE	$76,$00			; SLW	[0]
_B001 
_B002 
; libsrc/fiber.pla: 0114:     fbrMax = numPool - 1
; libsrc/fiber.pla: 0115:     //
; libsrc/fiber.pla: 0116:     // Allocate the fiber pool and initialize it to FREE
; libsrc/fiber.pla: 0117:     //
; libsrc/fiber.pla: 0118:     fbrPool = heapalloc(fbrMax * 512 + 256)
; libsrc/fiber.pla: 0119:     if fbrPool
; libsrc/fiber.pla: 0120:         //
; libsrc/fiber.pla: 0121:         // Each fiber gets 256 bytes of stack and 256 bytes
; libsrc/fiber.pla: 0122:         // for frame (local) data - except fiber 0 uses original frame data
; libsrc/fiber.pla: 0123:         //
; libsrc/fiber.pla: 0124:         pool = fbrPool + 256
; libsrc/fiber.pla: 0125:         for i = fbrMax downto 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
	!BYTE	$7C			; DAB	_D028+0
_F000 	!WORD	_D028+0		
	!BYTE	$12			; CN	9
	!BYTE	$9A			; SHL
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X014
_F001 	!WORD	0		
	!BYTE	$7E			; DAW	_D032+0
_F002 	!WORD	_D032+0		
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$6A			; LAW	_D032+0
_F003 	!WORD	_D032+0		
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$82			; ADD 
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$02			; CN	1
	!BYTE	$68			; LAB	_D028+0
_F004 	!WORD	_D028+0		
	!BYTE	$A2			; BRLT	_B005
	!WORD	_B005-*
_B006 
	!BYTE	$6C,$02			; DLB	[2]
; libsrc/fiber.pla: 0126:             if i < numPool
; libsrc/fiber.pla: 0127:                 fbrState[i]   = FIBER_FREE
; libsrc/fiber.pla: 0128:                 fbrVMState[i] = pool
; libsrc/fiber.pla: 0129:                 pool          = pool + 512
; libsrc/fiber.pla: 0130:             fin
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B008
	!WORD	_B008-*
	!BYTE	$02			; CN	1
	!BYTE	$26			; LA	_D029+0
_F005 	!WORD	_D029+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$26			; LA	_D031+0
_F006 	!WORD	_D031+0		
	!BYTE	$B8,$02			; IDXLB	[2]
	!BYTE	$72			; SW
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$82			; ADD 
	!BYTE	$76,$03			; SLW	[3]
_B008 
_B009 
; libsrc/fiber.pla: 0131:         next
_B007 
	!BYTE	$A8			; DECBRGE	_B006
	!WORD	_B006-*
_B005 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; libsrc/fiber.pla: 0132:         //
; libsrc/fiber.pla: 0133:         // Set fiber 0 to the RUNning fiber
; libsrc/fiber.pla: 0134:         //
; libsrc/fiber.pla: 0135:         fbrState   = FIBER_RUN
; libsrc/fiber.pla: 0136:         fbrVMState = fbrPool
; libsrc/fiber.pla: 0137:     else
	!BYTE	$06			; CN	3
	!BYTE	$78			; SAB	_D029+0
_F007 	!WORD	_D029+0		
	!BYTE	$6A			; LAW	_D032+0
_F008 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_D031+0
_F009 	!WORD	_D031+0		
	!BYTE	$50			; BRNCH	_B004
	!WORD	_B004-*
_B003 
; libsrc/fiber.pla: 0138:         return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/fiber.pla: 0139:     fin
_B004 
; libsrc/fiber.pla: 0140:     fbrCount = 1
; libsrc/fiber.pla: 0141:     return 0
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D034+0
_F010 	!WORD	_D034+0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$05			; LEAVE	5
; libsrc/fiber.pla: 0142: end
; libsrc/fiber.pla: 0143: //
; libsrc/fiber.pla: 0144: // Stop fiber and return it to FREE pool
; libsrc/fiber.pla: 0145: //
; libsrc/fiber.pla: 0146: export def fbrStop(fid)#0
					; fid -> [0]
_C001 					; fbrStop()
; libsrc/fiber.pla: 0147:     byte i
					; i -> [2]
; libsrc/fiber.pla: 0148: 
; libsrc/fiber.pla: 0149:     //
; libsrc/fiber.pla: 0150:     // Don't STOP fiber 0 (avoid deadlock)
; libsrc/fiber.pla: 0151:     //
; libsrc/fiber.pla: 0152:     if fid
	!BYTE	$58,$03,$01		; ENTER	3,1
; libsrc/fiber.pla: 0153:         //
; libsrc/fiber.pla: 0154:         // Remove fiber from RUN list and tag as free
; libsrc/fiber.pla: 0155:         //
; libsrc/fiber.pla: 0156:         fbrCount--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$68			; LAB	_D034+0
_F011 	!WORD	_D034+0		
	!BYTE	$8E			; DECR
; libsrc/fiber.pla: 0157:         fbrState[fid] = FIBER_FREE
; libsrc/fiber.pla: 0158:         i = 0
; libsrc/fiber.pla: 0159:         while fbrNext[i] <> fid
	!BYTE	$78			; SAB	_D034+0
_F012 	!WORD	_D034+0		
	!BYTE	$02			; CN	1
	!BYTE	$26			; LA	_D029+0
_F013 	!WORD	_D029+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$70			; SB
	!BYTE	$00			; CN	0
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B012 
; libsrc/fiber.pla: 0160:             i = fbrNext[i]
; libsrc/fiber.pla: 0161:         loop
	!BYTE	$26			; LA	_D030+0
_F014 	!WORD	_D030+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$74,$02			; SLB	[2]
_B014 
	!BYTE	$26			; LA	_D030+0
_F015 	!WORD	_D030+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$24			; BRNE	_B012
	!WORD	_B012-*
_B013 
; libsrc/fiber.pla: 0162:         fbrNext[i] = fbrNext[fid]
; libsrc/fiber.pla: 0163:         if fid == fbrRunning
; libsrc/fiber.pla: 0164:             fbrRunning = fbrNext[fbrRunning]
; libsrc/fiber.pla: 0165:             fbrLoad(fbrVMState[fbrRunning]) // This doesn't actually return here - returns to next fiber
; libsrc/fiber.pla: 0166:         fin
	!BYTE	$26			; LA	_D030+0
_F016 	!WORD	_D030+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$60			; LB
	!BYTE	$26			; LA	_D030+0
_F017 	!WORD	_D030+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$68			; LAB	_D033+0
_F018 	!WORD	_D033+0		
	!BYTE	$24			; BRNE	_B015
	!WORD	_B015-*
	!BYTE	$26			; LA	_D030+0
_F019 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F020 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$78			; SAB	_D033+0
_F021 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D031+0
_F022 	!WORD	_D031+0		
	!BYTE	$BC			; IDXAB	_D033+0
_F023 	!WORD	_D033+0		
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_A001
_F024 	!WORD	_A001		
_B015 
_B016 
; libsrc/fiber.pla: 0167:     fin
_B010 
_B011 
; libsrc/fiber.pla: 0168: end
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/fiber.pla: 0169: //
; libsrc/fiber.pla: 0170: // Stop current fiber
; libsrc/fiber.pla: 0171: //
; libsrc/fiber.pla: 0172: export def fbrExit#0
_C002 					; fbrExit()
; libsrc/fiber.pla: 0173:     //
; libsrc/fiber.pla: 0174:     // Stop running fiber
; libsrc/fiber.pla: 0175:     //
; libsrc/fiber.pla: 0176:     fbrStop(fbrRunning)
; libsrc/fiber.pla: 0177: end
	!BYTE	$68			; LAB	_D033+0
_F025 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_C001
_F026 	!WORD	_C001		
	!BYTE	$5C			; RET
; libsrc/fiber.pla: 0178: //
; libsrc/fiber.pla: 0179: // Start a fiber RUNning
; libsrc/fiber.pla: 0180: //
; libsrc/fiber.pla: 0181: export def fbrStart(defaddr, param)
					; defaddr -> [0]
					; param -> [2]
_C003 					; fbrStart()
; libsrc/fiber.pla: 0182:     byte i
					; i -> [4]
; libsrc/fiber.pla: 0183:     word vmstate
					; vmstate -> [5]
; libsrc/fiber.pla: 0184: 
; libsrc/fiber.pla: 0185:     for i = fbrMax downto 1
	!BYTE	$58,$07,$02		; ENTER	7,2
	!BYTE	$02			; CN	1
	!BYTE	$68			; LAB	_D028+0
_F027 	!WORD	_D028+0		
	!BYTE	$A2			; BRLT	_B017
	!WORD	_B017-*
_B018 
	!BYTE	$6C,$04			; DLB	[4]
; libsrc/fiber.pla: 0186:         if fbrState[i] == FIBER_FREE
; libsrc/fiber.pla: 0187:             //
; libsrc/fiber.pla: 0188:             // Allocate fiber from pool
; libsrc/fiber.pla: 0189:             //
; libsrc/fiber.pla: 0190:             fbrState[i]         = FIBER_RUN
; libsrc/fiber.pla: 0191:             vmstate             = fbrVMState[i]
; libsrc/fiber.pla: 0192:             vmstate=>ifp        = vmstate + 512
; libsrc/fiber.pla: 0193:             vmstate=>pp         = vmstate + 512
; libsrc/fiber.pla: 0194:             //
; libsrc/fiber.pla: 0195:             // Set fiber parameters to fiber ID and passed-in value
; libsrc/fiber.pla: 0196:             //
; libsrc/fiber.pla: 0197:             vmstate->esp        = $0E
; libsrc/fiber.pla: 0198:             vmstate->estklo.$0F = i
; libsrc/fiber.pla: 0199:             vmstate->estkhi.$0F = 0
; libsrc/fiber.pla: 0200:             vmstate->estklo.$0E = param.0 // param lo byte
; libsrc/fiber.pla: 0201:             vmstate->estkhi.$0E = param.1 // param hi byte
; libsrc/fiber.pla: 0202:             //
; libsrc/fiber.pla: 0203:             // Initialize stack to point to fiber def and fbrExit
; libsrc/fiber.pla: 0204:             // This allows a fiber to return and it will fall into fbrExit
; libsrc/fiber.pla: 0205:             //
; libsrc/fiber.pla: 0206:             vmstate->jmptmp = $4C
; libsrc/fiber.pla: 0207:             vmstate->hwsp   = $FB
; libsrc/fiber.pla: 0208:             vmstate=>$FE    = @fbrExit - 1
; libsrc/fiber.pla: 0209:             vmstate=>$FC    = defaddr  - 1
; libsrc/fiber.pla: 0210:             //
; libsrc/fiber.pla: 0211:             // Link into RUN list
; libsrc/fiber.pla: 0212:             //
; libsrc/fiber.pla: 0213:             fbrNext[i]          = fbrNext[fbrRunning]
; libsrc/fiber.pla: 0214:             fbrNext[fbrRunning] = i
; libsrc/fiber.pla: 0215:             //
; libsrc/fiber.pla: 0216:             // Return fiber ID (index)
; libsrc/fiber.pla: 0217:             //
; libsrc/fiber.pla: 0218:             fbrCount++
	!BYTE	$26			; LA	_D029+0
_F028 	!WORD	_D029+0		
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$24			; BRNE	_B020
	!WORD	_B020-*
	!BYTE	$06			; CN	3
	!BYTE	$26			; LA	_D029+0
_F029 	!WORD	_D029+0		
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
	!BYTE	$26			; LA	_D031+0
_F030 	!WORD	_D031+0		
	!BYTE	$B8,$04			; IDXLB	[4]
	!BYTE	$62			; LW
	!BYTE	$6E,$05			; DLW	[5]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$82			; ADD 
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$20			; ADDI	32
	!BYTE	$72			; SW
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$82			; ADD 
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$22			; ADDI	34
	!BYTE	$72			; SW
	!BYTE	$1C			; CN	14
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$25			; ADDI	37
	!BYTE	$70			; SB
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$70			; SB
	!BYTE	$00			; CN	0
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$0F			; ADDI	15
	!BYTE	$70			; SB
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$70			; SB
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$0E			; ADDI	14
	!BYTE	$70			; SB
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$26			; ADDI	38
	!BYTE	$70			; SB
	!BYTE	$2A,$FB			; CB	251
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$24			; ADDI	36
	!BYTE	$70			; SB
	!BYTE	$26			; LA	_C002+0
_F031 	!WORD	_C002+0		
	!BYTE	$8E			; DECR
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$FE			; ADDI	254
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$38,$FC			; ADDI	252
	!BYTE	$72			; SW
	!BYTE	$26			; LA	_D030+0
_F032 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F033 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$26			; LA	_D030+0
_F034 	!WORD	_D030+0		
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$26			; LA	_D030+0
_F035 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F036 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$68			; LAB	_D034+0
_F037 	!WORD	_D034+0		
	!BYTE	$8C			; INCR
; libsrc/fiber.pla: 0219:             return i
	!BYTE	$78			; SAB	_D034+0
_F038 	!WORD	_D034+0		
	!BYTE	$32			; DROP2
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/fiber.pla: 0220:         fin
_B020 
_B021 
; libsrc/fiber.pla: 0221:     next
_B019 
	!BYTE	$A8			; DECBRGE	_B018
	!WORD	_B018-*
_B017 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/fiber.pla: 0222:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/fiber.pla: 0223: end
; libsrc/fiber.pla: 0224: //
; libsrc/fiber.pla: 0225: // Round-robin schedule RUNning fibers
; libsrc/fiber.pla: 0226: //
; libsrc/fiber.pla: 0227: export def fbrYield#0
_C004 					; fbrYield()
; libsrc/fiber.pla: 0228:     byte prev
					; prev -> [0]
; libsrc/fiber.pla: 0229: 
; libsrc/fiber.pla: 0230:     //
; libsrc/fiber.pla: 0231:     // Swap to text fiber if this isn't the only fiber RUNning
; libsrc/fiber.pla: 0232:     //
; libsrc/fiber.pla: 0233:     if fbrNext[fbrRunning] <> fbrRunning
	!BYTE	$58,$01,$00		; ENTER	1,0
; libsrc/fiber.pla: 0234:         prev       = fbrRunning
; libsrc/fiber.pla: 0235:         fbrRunning = fbrNext[fbrRunning]
; libsrc/fiber.pla: 0236:         fbrSwap(fbrVMState[prev], fbrVMState[fbrRunning])
; libsrc/fiber.pla: 0237:     fin
	!BYTE	$26			; LA	_D030+0
_F039 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F040 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$68			; LAB	_D033+0
_F041 	!WORD	_D033+0		
	!BYTE	$22			; BREQ	_B022
	!WORD	_B022-*
	!BYTE	$68			; LAB	_D033+0
_F042 	!WORD	_D033+0		
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$26			; LA	_D030+0
_F043 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F044 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$78			; SAB	_D033+0
_F045 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D031+0
_F046 	!WORD	_D031+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$26			; LA	_D031+0
_F047 	!WORD	_D031+0		
	!BYTE	$BC			; IDXAB	_D033+0
_F048 	!WORD	_D033+0		
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_A000
_F049 	!WORD	_A000		
_B022 
_B023 
; libsrc/fiber.pla: 0238: end
	!BYTE	$5A,$01			; LEAVE	1
; libsrc/fiber.pla: 0239: //
; libsrc/fiber.pla: 0240: // HALT current fiber and await a RESUME
; libsrc/fiber.pla: 0241: //
; libsrc/fiber.pla: 0242: export def fbrHalt#0
_C005 					; fbrHalt()
; libsrc/fiber.pla: 0243:     byte i
					; i -> [0]
; libsrc/fiber.pla: 0244: 
; libsrc/fiber.pla: 0245:     //
; libsrc/fiber.pla: 0246:     // Cannot HALT fiber 0 (avoid deadlock)
; libsrc/fiber.pla: 0247:     //
; libsrc/fiber.pla: 0248:     if fbrRunning
	!BYTE	$58,$01,$00		; ENTER	1,0
; libsrc/fiber.pla: 0249:         //
; libsrc/fiber.pla: 0250:         // Remove fiber from RUN list
; libsrc/fiber.pla: 0251:         //
; libsrc/fiber.pla: 0252:         i = 0
; libsrc/fiber.pla: 0253:         while fbrNext[i] <> fbrRunning
	!BYTE	$68			; LAB	_D033+0
_F050 	!WORD	_D033+0		
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$00			; CN	0
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$50			; BRNCH	_B028
	!WORD	_B028-*
_B026 
; libsrc/fiber.pla: 0254:             i = fbrNext[i]
; libsrc/fiber.pla: 0255:         loop
	!BYTE	$26			; LA	_D030+0
_F051 	!WORD	_D030+0		
	!BYTE	$B0,$00			; ADDLB	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$00			; SLB	[0]
_B028 
	!BYTE	$26			; LA	_D030+0
_F052 	!WORD	_D030+0		
	!BYTE	$B0,$00			; ADDLB	[0]
	!BYTE	$60			; LB
	!BYTE	$68			; LAB	_D033+0
_F053 	!WORD	_D033+0		
	!BYTE	$24			; BRNE	_B026
	!WORD	_B026-*
_B027 
; libsrc/fiber.pla: 0256:         fbrState[fbrRunning] = FIBER_HALT
; libsrc/fiber.pla: 0257:         fbrNext[i]           = fbrNext[fbrRunning]
; libsrc/fiber.pla: 0258:         i                    = fbrRunning
; libsrc/fiber.pla: 0259:         fbrRunning           = fbrNext[fbrRunning]
; libsrc/fiber.pla: 0260:         fbrSwap(fbrVMState[i], fbrVMState[fbrRunning])
; libsrc/fiber.pla: 0261:     fin
	!BYTE	$04			; CN	2
	!BYTE	$26			; LA	_D029+0
_F054 	!WORD	_D029+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F055 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$26			; LA	_D030+0
_F056 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F057 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$26			; LA	_D030+0
_F058 	!WORD	_D030+0		
	!BYTE	$B0,$00			; ADDLB	[0]
	!BYTE	$70			; SB
	!BYTE	$68			; LAB	_D033+0
_F059 	!WORD	_D033+0		
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$26			; LA	_D030+0
_F060 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F061 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$78			; SAB	_D033+0
_F062 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D031+0
_F063 	!WORD	_D031+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$26			; LA	_D031+0
_F064 	!WORD	_D031+0		
	!BYTE	$BC			; IDXAB	_D033+0
_F065 	!WORD	_D033+0		
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_A000
_F066 	!WORD	_A000		
_B024 
_B025 
; libsrc/fiber.pla: 0262: end
	!BYTE	$5A,$01			; LEAVE	1
; libsrc/fiber.pla: 0263: //
; libsrc/fiber.pla: 0264: // Restore HALTed fiber to RUN list
; libsrc/fiber.pla: 0265: //
; libsrc/fiber.pla: 0266: export def fbrResume(fid)#0
					; fid -> [0]
_C006 					; fbrResume()
; libsrc/fiber.pla: 0267:     if fbrState[fid] == FIBER_HALT
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fiber.pla: 0268:         //
; libsrc/fiber.pla: 0269:         // Insert HALTed fiber back into RUN list
; libsrc/fiber.pla: 0270:         //
; libsrc/fiber.pla: 0271:         fbrState[fid]       = FIBER_RUN
; libsrc/fiber.pla: 0272:         fbrNext[fid]        = fbrNext[fbrRunning]
; libsrc/fiber.pla: 0273:         fbrNext[fbrRunning] = fid
; libsrc/fiber.pla: 0274:     fin
	!BYTE	$26			; LA	_D029+0
_F067 	!WORD	_D029+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$24			; BRNE	_B029
	!WORD	_B029-*
	!BYTE	$06			; CN	3
	!BYTE	$26			; LA	_D029+0
_F068 	!WORD	_D029+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$70			; SB
	!BYTE	$26			; LA	_D030+0
_F069 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F070 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$26			; LA	_D030+0
_F071 	!WORD	_D030+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D030+0
_F072 	!WORD	_D030+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F073 	!WORD	_D033+0		
	!BYTE	$70			; SB
_B029 
_B030 
; libsrc/fiber.pla: 0275: end
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fiber.pla: 0276: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	8
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: FBRCOUNT
	!BYTE	$C6,$C2,$D2,$C3,$CF,$D5,$CE,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_D034		
	; DCI STRING: FBRINIT
	!BYTE	$C6,$C2,$D2,$C9,$CE,$C9,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: FBRSTOP
	!BYTE	$C6,$C2,$D2,$D3,$D4,$CF,$50
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	; DCI STRING: FBREXIT
	!BYTE	$C6,$C2,$D2,$C5,$D8,$C9,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C002		
	; DCI STRING: FBRSTART
	!BYTE	$C6,$C2,$D2,$D3,$D4,$C1,$D2,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: FBRYIELD
	!BYTE	$C6,$C2,$D2,$D9,$C9,$C5,$CC,$44
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: FBRHALT
	!BYTE	$C6,$C2,$D2,$C8,$C1,$CC,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	; DCI STRING: FBRRESUME
	!BYTE	$C6,$C2,$D2,$D2,$C5,$D3,$D5,$CD,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C006		
	!BYTE	$00			; END OF ESD
