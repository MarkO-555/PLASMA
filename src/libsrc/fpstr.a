; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/fpstr.pla: 0001: //
; libsrc/fpstr.pla: 0002: // SANE Extended FP to String conversion library
; libsrc/fpstr.pla: 0003: //
; libsrc/fpstr.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/fpstr.pla: 0004: 
; libsrc/fpstr.pla: 0005: include "inc/sane.plh"
; inc/sane.plh: 0001: import sane
	; DCI STRING: SANE
	!BYTE	$D3,$C1,$CE,$45
					; SANE -> X028
; inc/sane.plh: 0002: //-----------------------------------------------------------
; inc/sane.plh: 0003: // Operation code masks.
; inc/sane.plh: 0004: //-----------------------------------------------------------
; inc/sane.plh: 0005: const FOADD     = $0000     // add
					; FOADD = 0
; inc/sane.plh: 0006: const FOSUB     = $0002     // subtract
					; FOSUB = 2
; inc/sane.plh: 0007: const FOMUL     = $0004     // multiply
					; FOMUL = 4
; inc/sane.plh: 0008: const FODIV     = $0006     // divide
					; FODIV = 6
; inc/sane.plh: 0009: const FOCMP     = $0008     // compare, no exception from unordered
					; FOCMP = 8
; inc/sane.plh: 0010: const FOCPX     = $000A     // compare, signal invalid if unordered
					; FOCPX = 10
; inc/sane.plh: 0011: const FOREM     = $000C     // remainder
					; FOREM = 12
; inc/sane.plh: 0012: const FOZ2X     = $000E     // convert to extended
					; FOZ2X = 14
; inc/sane.plh: 0013: const FOX2Z     = $0010     // convert from extended
					; FOX2Z = 16
; inc/sane.plh: 0014: const FOSQRT    = $0012     // square root
					; FOSQRT = 18
; inc/sane.plh: 0015: const FORTI     = $0014     // round to integral value
					; FORTI = 20
; inc/sane.plh: 0016: const FOTTI     = $0016     // truncate to integral value
					; FOTTI = 22
; inc/sane.plh: 0017: const FOSCALB   = $0018     // binary scale
					; FOSCALB = 24
; inc/sane.plh: 0018: const FOLOGB    = $001A     // binary log
					; FOLOGB = 26
; inc/sane.plh: 0019: const FOCLASS   = $001C     // classify
					; FOCLASS = 28
; inc/sane.plh: 0020: const FONEXT    = $001E     // next-after
					; FONEXT = 30
; inc/sane.plh: 0021: //
; inc/sane.plh: 0022: const FOSETENV  = $0001     // set environment
					; FOSETENV = 1
; inc/sane.plh: 0023: const FOGETENV  = $0003     // get environment
					; FOGETENV = 3
; inc/sane.plh: 0024: const FOSETHV   = $0005     // set halt vector
					; FOSETHV = 5
; inc/sane.plh: 0025: const FOGETHV   = $0007     // get halt vector
					; FOGETHV = 7
; inc/sane.plh: 0026: const FOD2B     = $0009     // convert decimal to binary
					; FOD2B = 9
; inc/sane.plh: 0027: const FOB2D     = $000B     // convert binary to decimal
					; FOB2D = 11
; inc/sane.plh: 0028: const FONEG     = $000D     // negate
					; FONEG = 13
; inc/sane.plh: 0029: const FOABS     = $000F     // absolute value
					; FOABS = 15
; inc/sane.plh: 0030: const FOCPYSGN  = $0011     // copy sign
					; FOCPYSGN = 17
; inc/sane.plh: 0031: // UNDEFINED    = $0013
; inc/sane.plh: 0032: const FOSETXCP  = $0015     // set exception
					; FOSETXCP = 21
; inc/sane.plh: 0033: const FOPROCENTRY = $0017   // procedure-entry
					; FOPROCENTRY = 23
; inc/sane.plh: 0034: const FOPROCEXIT = $0019    // procedure-exit
					; FOPROCEXIT = 25
; inc/sane.plh: 0035: const FOTESTXCP = $001B     // test exception
					; FOTESTXCP = 27
; inc/sane.plh: 0036: // UNDEFINED    = $001D
; inc/sane.plh: 0037: // UNDEFINED    = $001F
; inc/sane.plh: 0038: //-----------------------------------------------------------
; inc/sane.plh: 0039: // Operand format masks.
; inc/sane.plh: 0040: //-----------------------------------------------------------
; inc/sane.plh: 0041: const FFEXT     = $0000     // extended -- 80-bit float
					; FFEXT = 0
; inc/sane.plh: 0042: const FFDBL     = $0100     // double   -- 64-bit float
					; FFDBL = 256
; inc/sane.plh: 0043: const FFSGL     = $0200     // single   -- 32-bit float
					; FFSGL = 512
; inc/sane.plh: 0044: // UNDEFINED    = $0300
; inc/sane.plh: 0045: const FFINT     = $0400     // integer  -- 16-bit integer
					; FFINT = 1024
; inc/sane.plh: 0046: const FFCOMP    = $0500     // comp     -- 64-bit integer
					; FFCOMP = 1280
; inc/sane.plh: 0047: // UNDEFINED    = $0600
; inc/sane.plh: 0048: // UNDEFINED    = $0700
; inc/sane.plh: 0049: //-----------------------------------------------------------
; inc/sane.plh: 0050: // Class.
; inc/sane.plh: 0051: //-----------------------------------------------------------
; inc/sane.plh: 0052: const FCSNAN    = $FC       // -4: signaling NAN
					; FCSNAN = 252
; inc/sane.plh: 0053: const FCQNAN    = $FD       // -3: quiet NAN
					; FCQNAN = 253
; inc/sane.plh: 0054: const FCINF     = $FE       // -2: infinite
					; FCINF = 254
; inc/sane.plh: 0055: const FCZERO    = $FF       // -1: zero
					; FCZERO = 255
; inc/sane.plh: 0056: const FCNORM    = $00       //  0: normal
					; FCNORM = 0
; inc/sane.plh: 0057: const FCDENORM  = $01       //  1: denormal
					; FCDENORM = 1
; inc/sane.plh: 0058: //-----------------------------------------------------------
; inc/sane.plh: 0059: // Exceptions.
; inc/sane.plh: 0060: //-----------------------------------------------------------
; inc/sane.plh: 0061: const FBINVALID = $01
					; FBINVALID = 1
; inc/sane.plh: 0062: const FBUFLOW   = $02
					; FBUFLOW = 2
; inc/sane.plh: 0063: const FBOFLOW   = $04
					; FBOFLOW = 4
; inc/sane.plh: 0064: const FBDIVZER  = $08
					; FBDIVZER = 8
; inc/sane.plh: 0065: const FBINEXACT = $10
					; FBINEXACT = 16
; inc/sane.plh: 0066: //-----------------------------------------------------------
; inc/sane.plh: 0067: // Elementary function operation code masks.
; inc/sane.plh: 0068: //-----------------------------------------------------------
; inc/sane.plh: 0069: const FOLNX     = $0000     // base-e log
					; FOLNX = 0
; inc/sane.plh: 0070: const FOLOG2X   = $0002     // base-2 log
					; FOLOG2X = 2
; inc/sane.plh: 0071: const FOLN1X    = $0004     // ln (1 + x)
					; FOLN1X = 4
; inc/sane.plh: 0072: const FOLOG21X  = $0006     // log2 (1 + x)
					; FOLOG21X = 6
; inc/sane.plh: 0073: const FOEXPX    = $0008     // base-e exponential
					; FOEXPX = 8
; inc/sane.plh: 0074: const FOEXP2X   = $000A     // base-2 exponential
					; FOEXP2X = 10
; inc/sane.plh: 0075: const FOEXP1X   = $000C     // exp (x) - 1
					; FOEXP1X = 12
; inc/sane.plh: 0076: const FOEXP21X  = $000E     // exp2 (x) - 1
					; FOEXP21X = 14
; inc/sane.plh: 0077: const FOXPWRI   = $0010     // integer exponentiation
					; FOXPWRI = 16
; inc/sane.plh: 0078: const FOXPWRY   = $0012     // general exponentiation
					; FOXPWRY = 18
; inc/sane.plh: 0079: const FOCOMPND  = $0014     // compound
					; FOCOMPND = 20
; inc/sane.plh: 0080: const FOANNUIT  = $0016     // annuity
					; FOANNUIT = 22
; inc/sane.plh: 0081: const FOATANX   = $0018     // arctangent
					; FOATANX = 24
; inc/sane.plh: 0082: const FOSINX    = $001A     // sine
					; FOSINX = 26
; inc/sane.plh: 0083: const FOCOSX    = $001C     // cosine
					; FOCOSX = 28
; inc/sane.plh: 0084: const FOTANX    = $001E     // tangent
					; FOTANX = 30
; inc/sane.plh: 0085: const FORANDX   = $0020     // random
					; FORANDX = 32
; inc/sane.plh: 0086: //-----------------------------------------------------------
; inc/sane.plh: 0087: // NaN error codes.
; inc/sane.plh: 0088: //-----------------------------------------------------------
; inc/sane.plh: 0089: const NANSQRT   = 1         // Invalid square root such as sqrt(-1).
					; NANSQRT = 1
; inc/sane.plh: 0090: const NANADD    = 2         // Invalid addition such as +INF - +INF.
					; NANADD = 2
; inc/sane.plh: 0091: const NANDIV    = 4         // Invalid division such as 0/0.
					; NANDIV = 4
; inc/sane.plh: 0092: const NANMUL    = 8         // Invalid multiply such as 0 * INF.
					; NANMUL = 8
; inc/sane.plh: 0093: const NANREM    = 9         // Invalid remainder or mod such as x REM 0.
					; NANREM = 9
; inc/sane.plh: 0094: const NANASCBIN = 17        // Attempt to convert invalid ASCII string.
					; NANASCBIN = 17
; inc/sane.plh: 0095: const NANCOMP   = 20        // Result of converting comp NaN to floating.
					; NANCOMP = 20
; inc/sane.plh: 0096: const NANZERO   = 21        // Attempt to create a NaN with a zero code.
					; NANZERO = 21
; inc/sane.plh: 0097: const NANTRIG   = 33        // Invalid argument to trig routine.
					; NANTRIG = 33
; inc/sane.plh: 0098: const NANINVTRIG = 34       // Invalid argument to inverse trig routine.
					; NANINVTRIG = 34
; inc/sane.plh: 0099: const NANLOG    = 36        // Invalid argument to log routine.
					; NANLOG = 36
; inc/sane.plh: 0100: const NANPOWER  = 37        // Invalid argument to x^i or x^y routine.
					; NANPOWER = 37
; inc/sane.plh: 0101: const NANFINAN  = 38        // Invalid argument to financial function.
					; NANFINAN = 38
; inc/sane.plh: 0102: const NANINIT   = 255       // Uninitialized storage.
					; NANINIT = 255
; inc/sane.plh: 0103: //-----------------------------------------------------------
; inc/sane.plh: 0104: // Comparison results.
; inc/sane.plh: 0105: //-----------------------------------------------------------
; inc/sane.plh: 0106: const FCMPGT    = $4040     // Greater Than
					; FCMPGT = 16448
; inc/sane.plh: 0107: const FCMPLT    = $8080     // Less Than
					; FCMPLT = 32896
; inc/sane.plh: 0108: const FCMPEQ    = $0002     // EQual
					; FCMPEQ = 2
; inc/sane.plh: 0109: const FCMPUN    = $0101     // UNordered
					; FCMPUN = 257
; inc/sane.plh: 0110: //-----------------------------------------------------------
; inc/sane.plh: 0111: //
; inc/sane.plh: 0112: // Data types
; inc/sane.plh: 0113: //
; inc/sane.plh: 0114: struc t_single
; inc/sane.plh: 0115:     byte[3] s_mantissa
					; s_mantissa = 0
; inc/sane.plh: 0116:     byte    s_exponent
					; s_exponent = 3
; inc/sane.plh: 0117: end
					; t_single = 4
; inc/sane.plh: 0118: struc t_double
; inc/sane.plh: 0119:     byte[6] d_mantissa
					; d_mantissa = 0
; inc/sane.plh: 0120:     word    d_exponent
					; d_exponent = 6
; inc/sane.plh: 0121: end
					; t_double = 8
; inc/sane.plh: 0122: struc t_extended
; inc/sane.plh: 0123:     byte[8] x_mantissa
					; x_mantissa = 0
; inc/sane.plh: 0124:     word    x_exponent
					; x_exponent = 8
; inc/sane.plh: 0125: end
					; t_extended = 10
; inc/sane.plh: 0126: struc t_bigint
; inc/sane.plh: 0127:     byte[8] l_int
					; l_int = 0
; inc/sane.plh: 0128: end
					; t_bigint = 8
; inc/sane.plh: 0129: //
; inc/sane.plh: 0130: // SANE PLASMA interface
; inc/sane.plh: 0131: //
; inc/sane.plh: 0132: struc t_sane
; inc/sane.plh: 0133:     word initFP
					; initFP = 0
; inc/sane.plh: 0134:     word haltFP
					; haltFP = 2
; inc/sane.plh: 0135:     word op0FP
					; op0FP = 4
; inc/sane.plh: 0136:     word op1FP
					; op1FP = 6
; inc/sane.plh: 0137:     word op2FP
					; op2FP = 8
; inc/sane.plh: 0138:     word op3FP
					; op3FP = 10
; inc/sane.plh: 0139:     word op1ELEM
					; op1ELEM = 12
; inc/sane.plh: 0140:     word op2ELEM
					; op2ELEM = 14
; inc/sane.plh: 0141:     word op3ELEM
					; op3ELEM = 16
; inc/sane.plh: 0142:     word saveZP
					; saveZP = 18
; inc/sane.plh: 0143:     word restoreZP
					; restoreZP = 20
; inc/sane.plh: 0144: end
					; t_sane = 22
; inc/sane.plh: 0145: end
; libsrc/fpstr.pla: 0005: 
; libsrc/fpstr.pla: 0006: include "inc/fpstr.plh"
; inc/fpstr.plh: 0001: import fpstr
; inc/fpstr.plh: 0002: //
; inc/fpstr.plh: 0003: // String formatting bits
; inc/fpstr.plh: 0004: //
; inc/fpstr.plh: 0005: const FPSTR_FIXED = 1 // Fixed count of fractional digits
					; FPSTR_FIXED = 1
; inc/fpstr.plh: 0006: const FPSTR_FLOAT = 0 // Floating count of fractional digits
					; FPSTR_FLOAT = 0
; inc/fpstr.plh: 0007: const FPSTR_STRIP = 2 // Strip trailing fractional zeros
					; FPSTR_STRIP = 2
; inc/fpstr.plh: 0008: const FPSTR_EXP   = 4 // Force exponential format
					; FPSTR_EXP = 4
; inc/fpstr.plh: 0009: const FPSTR_FLEX  = 8 // Flexible switch to EXP format if over/underflow
					; FPSTR_FLEX = 8
; inc/fpstr.plh: 0010: //
; inc/fpstr.plh: 0011: // Parse string into decrecord, return SANE conversion output
; inc/fpstr.plh: 0012: //
; inc/fpstr.plh: 0013: predef str2ext(str, ext)#1
					; STR2EXT -> X029
; inc/fpstr.plh: 0014: //
; inc/fpstr.plh: 0015: // Convert extended FP to string using , return string
; inc/fpstr.plh: 0016: //
; inc/fpstr.plh: 0017: predef ext2str(ext, str, intdigits, fracdigits, format)#1
					; EXT2STR -> X030
; inc/fpstr.plh: 0018: end
; libsrc/fpstr.pla: 0006: 
; libsrc/fpstr.pla: 0007: //
; libsrc/fpstr.pla: 0008: // Structures for DEC2BIN, BIN2DEC
; libsrc/fpstr.pla: 0009: //
; libsrc/fpstr.pla: 0010: struc t_decrecord
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/fpstr.pla: 0011:     word sgn
					; sgn = 0
; libsrc/fpstr.pla: 0012:     word exp
					; exp = 2
; libsrc/fpstr.pla: 0013:     byte sig[29]
					; sig = 4
; libsrc/fpstr.pla: 0014: end
					; t_decrecord = 33
; libsrc/fpstr.pla: 0015: struc t_decformat
; libsrc/fpstr.pla: 0016:     word style
					; style = 0
; libsrc/fpstr.pla: 0017:     word digits
					; digits = 2
; libsrc/fpstr.pla: 0018: end
					; t_decformat = 4
; libsrc/fpstr.pla: 0019: //
; libsrc/fpstr.pla: 0020: // Parse string into decrecord, return SANE conversion output
; libsrc/fpstr.pla: 0021: //
; libsrc/fpstr.pla: 0022: export def str2ext(str, ext)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; str -> [0]
					; ext -> [2]
_P029 					; str2ext(str, ext)()
_C000 					; str2ext()
; libsrc/fpstr.pla: 0023:     byte i, d
					; i -> [4]
					; d -> [5]
; libsrc/fpstr.pla: 0024:     byte decrec[t_decrecord]
					; decrec -> [6]
; libsrc/fpstr.pla: 0025:     word sgnadj, expadj
					; sgnadj -> [39]
					; expadj -> [41]
; libsrc/fpstr.pla: 0026: 
; libsrc/fpstr.pla: 0027:     decrec:sgn  = 0
	!BYTE	$58,$2B,$02		; ENTER	43,2
; libsrc/fpstr.pla: 0028:     decrec:exp  = 0
; libsrc/fpstr.pla: 0029:     decrec.sig  = 0
; libsrc/fpstr.pla: 0030:     i           = 1
; libsrc/fpstr.pla: 0031:     //
; libsrc/fpstr.pla: 0032:     // Skip whitespace
; libsrc/fpstr.pla: 0033:     //
; libsrc/fpstr.pla: 0034:     while ^(str+i) <= ' ' and i <= ^str; i++; loop
	!BYTE	$00			; CN	0
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$00			; CN	0
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$02			; CN	1
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
	!BYTE	$74,$04			; SLB	[4]
_B003 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
	!BYTE	$AC			; BRAND	_B004
	!WORD	_B004-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
_B004 
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; libsrc/fpstr.pla: 0035:     //
; libsrc/fpstr.pla: 0036:     // Check for sign
; libsrc/fpstr.pla: 0037:     //
; libsrc/fpstr.pla: 0038:     if ^(str+i) == '-'
; libsrc/fpstr.pla: 0039:         decrec:sgn = 1
; libsrc/fpstr.pla: 0040:         i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$24			; BRNE	_B005
	!WORD	_B005-*
	!BYTE	$02			; CN	1
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0041:     elsif ^(str+i) == '+'
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B005 
; libsrc/fpstr.pla: 0042:         i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$24			; BRNE	_B007
	!WORD	_B007-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0043:     fin
	!BYTE	$74,$04			; SLB	[4]
_B007 
_B006 
; libsrc/fpstr.pla: 0044:     //
; libsrc/fpstr.pla: 0045:     // Skip leading zeros
; libsrc/fpstr.pla: 0046:     //
; libsrc/fpstr.pla: 0047:     while i <= ^str and ^(str+i) == '0'
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B008 
; libsrc/fpstr.pla: 0048:         i++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0049:     loop
	!BYTE	$74,$04			; SLB	[4]
_B010 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$AC			; BRAND	_B011
	!WORD	_B011-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B011 
	!BYTE	$4E			; BRTRU	_B008
	!WORD	_B008-*
_B009 
; libsrc/fpstr.pla: 0050:     //
; libsrc/fpstr.pla: 0051:     // Parse number
; libsrc/fpstr.pla: 0052:     //
; libsrc/fpstr.pla: 0053:     while i <= ^str
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B012 
; libsrc/fpstr.pla: 0054:         d = ^(str+i)
; libsrc/fpstr.pla: 0055:         if d >= '0' and d <= '9'
; libsrc/fpstr.pla: 0056:             //
; libsrc/fpstr.pla: 0057:             // Parse digit
; libsrc/fpstr.pla: 0058:             //
; libsrc/fpstr.pla: 0059:             decrec:sig++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$6C,$05			; DLB	[5]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B015
	!WORD	_B015-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B015 
	!BYTE	$4C			; BRFLS	_B016
	!WORD	_B016-*
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0060:             decrec.sig[decrec.sig] = d
; libsrc/fpstr.pla: 0061:         elsif d == '.'
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$28,$0A			; LLA	[10]
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B016 
; libsrc/fpstr.pla: 0062:             //
; libsrc/fpstr.pla: 0063:             // Parse decimal point
; libsrc/fpstr.pla: 0064:             //
; libsrc/fpstr.pla: 0065:             i++
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B018
	!WORD	_B018-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0066:             if !decrec:exp
; libsrc/fpstr.pla: 0067:                 //
; libsrc/fpstr.pla: 0068:                 // Skip leading zeros
; libsrc/fpstr.pla: 0069:                 //
; libsrc/fpstr.pla: 0070:                 while i <= ^str and ^(str+i) == '0'
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$4E			; BRTRU	_B019
	!WORD	_B019-*
	!BYTE	$50			; BRNCH	_B023
	!WORD	_B023-*
_B021 
; libsrc/fpstr.pla: 0071:                     decrec:exp--
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0072:                     i++
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0073:                 loop
	!BYTE	$74,$04			; SLB	[4]
_B023 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$AC			; BRAND	_B024
	!WORD	_B024-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B024 
	!BYTE	$4E			; BRTRU	_B021
	!WORD	_B021-*
_B022 
; libsrc/fpstr.pla: 0074:             fin
_B019 
_B020 
; libsrc/fpstr.pla: 0075:             while i <= ^str
	!BYTE	$50			; BRNCH	_B027
	!WORD	_B027-*
_B025 
; libsrc/fpstr.pla: 0076:                 d = ^(str+i)
; libsrc/fpstr.pla: 0077:                 if d >= '0' and d <= '9'
; libsrc/fpstr.pla: 0078:                     decrec.sig++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$6C,$05			; DLB	[5]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B028
	!WORD	_B028-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B028 
	!BYTE	$4C			; BRFLS	_B029
	!WORD	_B029-*
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0079:                     decrec.sig[decrec.sig] = d
; libsrc/fpstr.pla: 0080:                     decrec:exp--
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$28,$0A			; LLA	[10]
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$70			; SB
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0081:                 elsif d == 'E' or d == 'e'
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
_B029 
; libsrc/fpstr.pla: 0082:                     i--
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$45			; CB	69
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B031
	!WORD	_B031-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$65			; CB	101
	!BYTE	$40			; ISEQ
_B031 
	!BYTE	$4C			; BRFLS	_B032
	!WORD	_B032-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0083:                     break
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B026
	!WORD	_B026-*
; libsrc/fpstr.pla: 0084:                 else
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
_B032 
; libsrc/fpstr.pla: 0085:                     i = ^str
; libsrc/fpstr.pla: 0086:                 fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
_B030 
; libsrc/fpstr.pla: 0087:                 i++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0088:             loop
	!BYTE	$74,$04			; SLB	[4]
_B027 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$4E			; BRTRU	_B025
	!WORD	_B025-*
_B026 
; libsrc/fpstr.pla: 0089:         elsif d == 'E' or d == 'e'
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B018 
; libsrc/fpstr.pla: 0090:             //
; libsrc/fpstr.pla: 0091:             // Parse exponent
; libsrc/fpstr.pla: 0092:             //
; libsrc/fpstr.pla: 0093:             i++
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$45			; CB	69
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B033
	!WORD	_B033-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$65			; CB	101
	!BYTE	$40			; ISEQ
_B033 
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0094:             expadj = 0
; libsrc/fpstr.pla: 0095:             sgnadj = 1
; libsrc/fpstr.pla: 0096:             if ^(str+i) == '-'
; libsrc/fpstr.pla: 0097:                 sgnadj = -1
; libsrc/fpstr.pla: 0098:                 i++
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$00			; CN	0
	!BYTE	$76,$29			; SLW	[41]
	!BYTE	$02			; CN	1
	!BYTE	$76,$27			; SLW	[39]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$24			; BRNE	_B035
	!WORD	_B035-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$27			; SLW	[39]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0099:             elsif ^(str+i) == '+'
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B036
	!WORD	_B036-*
_B035 
; libsrc/fpstr.pla: 0100:                 i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$24			; BRNE	_B037
	!WORD	_B037-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0101:             fin
	!BYTE	$74,$04			; SLB	[4]
_B037 
_B036 
; libsrc/fpstr.pla: 0102:             while i <= ^str
	!BYTE	$50			; BRNCH	_B040
	!WORD	_B040-*
_B038 
; libsrc/fpstr.pla: 0103:                 d = ^(str+i)
; libsrc/fpstr.pla: 0104:                 i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0105:                 if d >= '0' and d <= '9'
; libsrc/fpstr.pla: 0106:                     expadj = expadj * 10 + (d - '0')
; libsrc/fpstr.pla: 0107:                 else
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B041
	!WORD	_B041-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B041 
	!BYTE	$4C			; BRFLS	_B042
	!WORD	_B042-*
	!BYTE	$66,$29			; LLW	[41]
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$3A,$30			; SUBI	48
	!BYTE	$82			; ADD 
	!BYTE	$76,$29			; SLW	[41]
	!BYTE	$50			; BRNCH	_B043
	!WORD	_B043-*
_B042 
; libsrc/fpstr.pla: 0108:                     i = ^str
; libsrc/fpstr.pla: 0109:                 fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
_B043 
; libsrc/fpstr.pla: 0110:             loop
_B040 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$4E			; BRTRU	_B038
	!WORD	_B038-*
_B039 
; libsrc/fpstr.pla: 0111:             decrec:exp = decrec:exp + (sgnadj * expadj)
; libsrc/fpstr.pla: 0112:         else
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$27			; LLW	[39]
	!BYTE	$66,$29			; LLW	[41]
	!BYTE	$86			; MUL
	!BYTE	$82			; ADD 
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B034 
; libsrc/fpstr.pla: 0113:             i = ^str
; libsrc/fpstr.pla: 0114:         fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
_B017 
; libsrc/fpstr.pla: 0115:         i++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0116:     loop
	!BYTE	$74,$04			; SLB	[4]
_B014 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$4E			; BRTRU	_B012
	!WORD	_B012-*
_B013 
; libsrc/fpstr.pla: 0117:     //
; libsrc/fpstr.pla: 0118:     // Strip trailing zeros from sig
; libsrc/fpstr.pla: 0119:     //
; libsrc/fpstr.pla: 0120:     while decrec.sig > 0 and decrec.sig[decrec.sig] == '0'
	!BYTE	$50			; BRNCH	_B046
	!WORD	_B046-*
_B044 
; libsrc/fpstr.pla: 0121:         decrec.sig--
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0122:         decrec:exp++
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0123:     loop
	!BYTE	$76,$08			; SLW	[8]
_B046 
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B047
	!WORD	_B047-*
	!BYTE	$28,$0A			; LLA	[10]
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B047 
	!BYTE	$4E			; BRTRU	_B044
	!WORD	_B044-*
_B045 
; libsrc/fpstr.pla: 0124:     //
; libsrc/fpstr.pla: 0125:     // Check for zero
; libsrc/fpstr.pla: 0126:     //
; libsrc/fpstr.pla: 0127:     if !decrec.sig
; libsrc/fpstr.pla: 0128:         decrec.sig   = 1
; libsrc/fpstr.pla: 0129:         decrec.sig.1 = '0'
; libsrc/fpstr.pla: 0130:         decrec:sgn   = 0
; libsrc/fpstr.pla: 0131:         decrec:exp   = 0
; libsrc/fpstr.pla: 0132:     fin
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$4E			; BRTRU	_B048
	!WORD	_B048-*
	!BYTE	$02			; CN	1
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$28,$0A			; LLA	[10]
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$00			; CN	0
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$76,$08			; SLW	[8]
_B048 
_B049 
; libsrc/fpstr.pla: 0133:     sane:saveZP()
; libsrc/fpstr.pla: 0134:     return sane:restoreZP(sane:op2FP(FFEXT|FOD2B, ext, @decrec))
	!BYTE	$6A			; LAW	_X028+18
_F000 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$12			; CN	9
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$6A			; LAW	_X028+8
_F001 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F002 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$2B			; LEAVE	43
; libsrc/fpstr.pla: 0135: end
; libsrc/fpstr.pla: 0136: //
; libsrc/fpstr.pla: 0137: // Convert extended FP to string using , return string
; libsrc/fpstr.pla: 0138: //
; libsrc/fpstr.pla: 0139: export def ext2str(ext, str, intdigits, fracdigits, format)
					; ext -> [0]
					; str -> [2]
					; intdigits -> [4]
					; fracdigits -> [6]
					; format -> [8]
_P030 					; ext2str(ext, str, intdigits, fracdigits, format)()
_C001 					; ext2str()
; libsrc/fpstr.pla: 0140:     byte d, numdigits
					; d -> [10]
					; numdigits -> [11]
; libsrc/fpstr.pla: 0141:     word istr, dp, tens
					; istr -> [12]
					; dp -> [14]
					; tens -> [16]
; libsrc/fpstr.pla: 0142:     byte decform[t_decformat]
					; decform -> [18]
; libsrc/fpstr.pla: 0143:     byte decrec[t_decrecord]
					; decrec -> [22]
; libsrc/fpstr.pla: 0144: 
; libsrc/fpstr.pla: 0145:     numdigits      = intdigits + fracdigits
	!BYTE	$58,$37,$05		; ENTER	55,5
; libsrc/fpstr.pla: 0146:     decform:style  = format & FPSTR_FIXED
; libsrc/fpstr.pla: 0147:     decform:digits = decform:style ?? fracdigits :: numdigits
; libsrc/fpstr.pla: 0148:     decrec:exp     = 0
; libsrc/fpstr.pla: 0149:     sane:saveZP()
; libsrc/fpstr.pla: 0150:     sane:restoreZP(sane:op3FP(FFEXT|FOB2D, @decrec, ext, @decform))
; libsrc/fpstr.pla: 0151:     ^(str+1) = decrec.sgn ?? '-' :: ' '
; libsrc/fpstr.pla: 0152:     if decrec.sig.1 == 'I'
; libsrc/fpstr.pla: 0153:         ^(str+2) = 'I'
; libsrc/fpstr.pla: 0154:         ^(str+3) = 'n'
; libsrc/fpstr.pla: 0155:         ^(str+4) = 'f'
; libsrc/fpstr.pla: 0156:         ^str     = 4
; libsrc/fpstr.pla: 0157:         return str
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$6E,$12			; DLW	[18]
	!BYTE	$4C			; BRFLS	_B050
	!WORD	_B050-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$50			; BRNCH	_B051
	!WORD	_B051-*
_B050 
	!BYTE	$64,$0B			; LLB	[11]
_B051 
	!BYTE	$76,$14			; SLW	[20]
	!BYTE	$00			; CN	0
	!BYTE	$76,$18			; SLW	[24]
	!BYTE	$6A			; LAW	_X028+18
_F003 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$16			; CN	11
	!BYTE	$28,$16			; LLA	[22]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$6A			; LAW	_X028+10
_F004 	!WORD	0+10		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F005 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$16			; LLB	[22]
	!BYTE	$4C			; BRFLS	_B052
	!WORD	_B052-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$50			; BRNCH	_B053
	!WORD	_B053-*
_B052 
	!BYTE	$2A,$20			; CB	32
_B053 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$49			; CB	73
	!BYTE	$24			; BRNE	_B054
	!WORD	_B054-*
	!BYTE	$2A,$49			; CB	73
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2A,$6E			; CB	110
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2A,$66			; CB	102
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$08			; CN	4
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$37			; LEAVE	55
; libsrc/fpstr.pla: 0158:     fin
_B054 
_B055 
; libsrc/fpstr.pla: 0159:     if decrec.sig.1 == 'N'
; libsrc/fpstr.pla: 0160:         ^(str+2) = 'N'
; libsrc/fpstr.pla: 0161:         ^(str+3) = 'a'
; libsrc/fpstr.pla: 0162:         ^(str+4) = 'N'
; libsrc/fpstr.pla: 0163:         ^str     = 4
; libsrc/fpstr.pla: 0164:         return str
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$4E			; CB	78
	!BYTE	$24			; BRNE	_B056
	!WORD	_B056-*
	!BYTE	$2A,$4E			; CB	78
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2A,$61			; CB	97
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2A,$4E			; CB	78
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$08			; CN	4
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$37			; LEAVE	55
; libsrc/fpstr.pla: 0165:     fin
_B056 
_B057 
; libsrc/fpstr.pla: 0166:     dp = decrec.sig + decrec:exp
; libsrc/fpstr.pla: 0167:     if format & FPSTR_EXP
; libsrc/fpstr.pla: 0168:         if format & FPSTR_STRIP
; libsrc/fpstr.pla: 0169:             //
; libsrc/fpstr.pla: 0170:             // Strip off trailing fractional zeros
; libsrc/fpstr.pla: 0171:             //
; libsrc/fpstr.pla: 0172:             while decrec.sig > 1 and decrec.sig[decrec.sig] == '0'
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$B2,$18			; ADDLW	[24]
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$04			; ANDI	4
	!BYTE	$4C			; BRFLS	_B058
	!WORD	_B058-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$02			; ANDI	2
	!BYTE	$4C			; BRFLS	_B060
	!WORD	_B060-*
	!BYTE	$50			; BRNCH	_B064
	!WORD	_B064-*
_B062 
; libsrc/fpstr.pla: 0173:                 decrec.sig--
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0174:                 decrec:exp++
	!BYTE	$74,$1A			; SLB	[26]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0175:             loop
	!BYTE	$76,$18			; SLW	[24]
_B064 
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B065
	!WORD	_B065-*
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$1A			; ADDLB	[26]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B065 
	!BYTE	$4E			; BRTRU	_B062
	!WORD	_B062-*
_B063 
; libsrc/fpstr.pla: 0176:         fin
_B060 
_B061 
; libsrc/fpstr.pla: 0177:         //
; libsrc/fpstr.pla: 0178:         // Copy over all significant digits
; libsrc/fpstr.pla: 0179:         //
; libsrc/fpstr.pla: 0180:         ^(str+2) = decrec.sig.1
; libsrc/fpstr.pla: 0181:         ^(str+3) = '.'
; libsrc/fpstr.pla: 0182:         istr = str + 3
; libsrc/fpstr.pla: 0183:         for d = 2 to decrec.sig
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$04			; CN	2
	!BYTE	$A0			; BRGT	_B066
	!WORD	_B066-*
_B067 
	!BYTE	$6C,$0A			; DLB	[10]
; libsrc/fpstr.pla: 0184:             istr++
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0185:             ^istr = decrec.sig[d]
; libsrc/fpstr.pla: 0186:         next
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$60			; LB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
_B068 
	!BYTE	$A4			; INCBRLE	_B067
	!WORD	_B067-*
_B066 
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$30			; DROP 
; libsrc/fpstr.pla: 0187:         if ^istr == '.'; istr--; fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$60			; LB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B069
	!WORD	_B069-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8E			; DECR
	!BYTE	$76,$0C			; SLW	[12]
_B069 
_B070 
; libsrc/fpstr.pla: 0188:         //
; libsrc/fpstr.pla: 0189:         // Print exponent as 4 digits with leading zeros
; libsrc/fpstr.pla: 0190:         //
; libsrc/fpstr.pla: 0191:         istr++
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0192:         ^istr = 'E'
; libsrc/fpstr.pla: 0193:         istr++
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$45			; CB	69
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0194:         dp--
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0195:         if dp < 0
; libsrc/fpstr.pla: 0196:             ^istr = '-'
; libsrc/fpstr.pla: 0197:             dp = -dp
; libsrc/fpstr.pla: 0198:         else
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B071
	!WORD	_B071-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$90			; NEG
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$50			; BRNCH	_B072
	!WORD	_B072-*
_B071 
; libsrc/fpstr.pla: 0199:             ^istr = '+'
; libsrc/fpstr.pla: 0200:         fin
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
_B072 
; libsrc/fpstr.pla: 0201:         tens = 1000
; libsrc/fpstr.pla: 0202:         while tens
	!BYTE	$2C,$E8,$03		; CW	1000
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$50			; BRNCH	_B075
	!WORD	_B075-*
_B073 
; libsrc/fpstr.pla: 0203:             istr++
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0204:             ^istr = (dp / tens) + '0'
; libsrc/fpstr.pla: 0205:             dp = dp % tens
; libsrc/fpstr.pla: 0206:             tens = tens / 10
; libsrc/fpstr.pla: 0207:         loop
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$88			; DIV
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$8A			; MOD
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$76,$10			; SLW	[16]
_B075 
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$4E			; BRTRU	_B073
	!WORD	_B073-*
_B074 
; libsrc/fpstr.pla: 0208:     else
	!BYTE	$50			; BRNCH	_B059
	!WORD	_B059-*
_B058 
; libsrc/fpstr.pla: 0209:         if format & FPSTR_STRIP and decrec:exp < 0
; libsrc/fpstr.pla: 0210:             //
; libsrc/fpstr.pla: 0211:             // Strip off trailing fractional zeros
; libsrc/fpstr.pla: 0212:             //
; libsrc/fpstr.pla: 0213:             while decrec.sig > dp and decrec.sig[decrec.sig] == '0'
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$02			; ANDI	2
	!BYTE	$AC			; BRAND	_B076
	!WORD	_B076-*
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
_B076 
	!BYTE	$4C			; BRFLS	_B077
	!WORD	_B077-*
	!BYTE	$50			; BRNCH	_B081
	!WORD	_B081-*
_B079 
; libsrc/fpstr.pla: 0214:                 decrec.sig--
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$8E			; DECR
; libsrc/fpstr.pla: 0215:                 decrec:exp++
	!BYTE	$74,$1A			; SLB	[26]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0216:             loop
	!BYTE	$76,$18			; SLW	[24]
_B081 
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B082
	!WORD	_B082-*
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$1A			; ADDLB	[26]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B082 
	!BYTE	$4E			; BRTRU	_B079
	!WORD	_B079-*
_B080 
; libsrc/fpstr.pla: 0217:         fin
_B077 
_B078 
; libsrc/fpstr.pla: 0218:         if decrec:sig == 1 | '0'<<8
; libsrc/fpstr.pla: 0219:             //
; libsrc/fpstr.pla: 0220:             // Case of zero or underflow
; libsrc/fpstr.pla: 0221:             //
; libsrc/fpstr.pla: 0222:             if decrec:exp == 0
; libsrc/fpstr.pla: 0223:                 //
; libsrc/fpstr.pla: 0224:                 // Zero
; libsrc/fpstr.pla: 0225:                 //
; libsrc/fpstr.pla: 0226:                 if format & FPSTR_FIXED
; libsrc/fpstr.pla: 0227:                     //
; libsrc/fpstr.pla: 0228:                     // Add trailing fractional zeros
; libsrc/fpstr.pla: 0229:                     //
; libsrc/fpstr.pla: 0230:                     dp = 1 - fracdigits
; libsrc/fpstr.pla: 0231:                 fin
	!BYTE	$66,$1A			; LLW	[26]
	!BYTE	$2C,$01,$30		; CW	12289
	!BYTE	$24			; BRNE	_B083
	!WORD	_B083-*
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$4E			; BRTRU	_B085
	!WORD	_B085-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B087
	!WORD	_B087-*
	!BYTE	$02			; CN	1
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$84			; SUB 
	!BYTE	$76,$0E			; SLW	[14]
_B087 
_B088 
; libsrc/fpstr.pla: 0232:             elsif format & FPSTR_FLEX
	!BYTE	$50			; BRNCH	_B086
	!WORD	_B086-*
_B085 
; libsrc/fpstr.pla: 0233:                 //
; libsrc/fpstr.pla: 0234:                 // Underflow
; libsrc/fpstr.pla: 0235:                 //
; libsrc/fpstr.pla: 0236:                 dp = -fracdigits - 1
; libsrc/fpstr.pla: 0237:             fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$4C			; BRFLS	_B089
	!WORD	_B089-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$90			; NEG
	!BYTE	$8E			; DECR
	!BYTE	$76,$0E			; SLW	[14]
_B089 
_B086 
; libsrc/fpstr.pla: 0238:         fin
_B083 
_B084 
; libsrc/fpstr.pla: 0239:         if format & FPSTR_FLEX and (dp < -fracdigits or dp > (format & FPSTR_FIXED ?? intdigits :: numdigits))
; libsrc/fpstr.pla: 0240:             //
; libsrc/fpstr.pla: 0241:             // Print as exponent if over/underflow fixed digits
; libsrc/fpstr.pla: 0242:             //
; libsrc/fpstr.pla: 0243:             if numdigits < 7; numdigits = 7; fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$AC			; BRAND	_B090
	!WORD	_B090-*
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$90			; NEG
	!BYTE	$46			; ISLT
	!BYTE	$AE			; BROR	_B091
	!WORD	_B091-*
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B092
	!WORD	_B092-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$50			; BRNCH	_B093
	!WORD	_B093-*
_B092 
	!BYTE	$64,$0B			; LLB	[11]
_B093 
	!BYTE	$44			; ISGT
_B091 
_B090 
	!BYTE	$4C			; BRFLS	_B094
	!WORD	_B094-*
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$0E			; CN	7
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B096
	!WORD	_B096-*
	!BYTE	$0E			; CN	7
	!BYTE	$74,$0B			; SLB	[11]
_B096 
_B097 
; libsrc/fpstr.pla: 0244:             return ext2str(ext, str, 1, numdigits - 7, FPSTR_EXP | (format & FPSTR_STRIP))
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$3A,$07			; SUBI	7
	!BYTE	$08			; CN	4
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$02			; ANDI	2
	!BYTE	$96			; OR 
	!BYTE	$54			; CALL	_C001
_F006 	!WORD	_C001		
	!BYTE	$5A,$37			; LEAVE	55
; libsrc/fpstr.pla: 0245:         fin
_B094 
_B095 
; libsrc/fpstr.pla: 0246:         //
; libsrc/fpstr.pla: 0247:         // Convert as floating point
; libsrc/fpstr.pla: 0248:         //
; libsrc/fpstr.pla: 0249:         if dp <= 0
; libsrc/fpstr.pla: 0250:             *(str+2) = '0'|('.'<<8)
; libsrc/fpstr.pla: 0251:             istr = str + 3
; libsrc/fpstr.pla: 0252:             while dp < 0
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B098
	!WORD	_B098-*
	!BYTE	$2C,$30,$2E		; CW	11824
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$50			; BRNCH	_B102
	!WORD	_B102-*
_B100 
; libsrc/fpstr.pla: 0253:                 dp++
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0254:                 istr++
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0255:                 ^istr = '0'
; libsrc/fpstr.pla: 0256:             loop
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
_B102 
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B100
	!WORD	_B100-*
_B101 
; libsrc/fpstr.pla: 0257:         else
	!BYTE	$50			; BRNCH	_B099
	!WORD	_B099-*
_B098 
; libsrc/fpstr.pla: 0258:             istr = str + 1
; libsrc/fpstr.pla: 0259:         fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$76,$0C			; SLW	[12]
_B099 
; libsrc/fpstr.pla: 0260:         for d = 1 to decrec.sig
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B103
	!WORD	_B103-*
_B104 
	!BYTE	$6C,$0A			; DLB	[10]
; libsrc/fpstr.pla: 0261:             istr++
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0262:             ^istr = decrec.sig[d]
; libsrc/fpstr.pla: 0263:             if d == dp
; libsrc/fpstr.pla: 0264:                 istr++
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$60			; LB
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$24			; BRNE	_B106
	!WORD	_B106-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
; libsrc/fpstr.pla: 0265:                 ^istr = '.'
; libsrc/fpstr.pla: 0266:             fin
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$70			; SB
_B106 
_B107 
; libsrc/fpstr.pla: 0267:         next
_B105 
	!BYTE	$A4			; INCBRLE	_B104
	!WORD	_B104-*
_B103 
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$30			; DROP 
; libsrc/fpstr.pla: 0268:         if ^istr == '.'; istr--; fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$60			; LB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B108
	!WORD	_B108-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8E			; DECR
	!BYTE	$76,$0C			; SLW	[12]
_B108 
_B109 
; libsrc/fpstr.pla: 0269:     fin
_B059 
; libsrc/fpstr.pla: 0270:     ^str = istr - str
; libsrc/fpstr.pla: 0271:     return str
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$84			; SUB 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$37			; LEAVE	55
; libsrc/fpstr.pla: 0272: end
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	3
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: SANE
	!BYTE	$D3,$C1,$CE,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	; DCI STRING: STR2EXT
	!BYTE	$D3,$D4,$D2,$B2,$C5,$D8,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: EXT2STR
	!BYTE	$C5,$D8,$D4,$B2,$D3,$D4,$52
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	!BYTE	$00			; END OF ESD
