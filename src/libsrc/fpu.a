; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/fpu.pla: 0001: //
; libsrc/fpu.pla: 0002: // SANE stack-based Floating Point Unit library
; libsrc/fpu.pla: 0003: //
; libsrc/fpu.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/fpu.pla: 0004: 
; libsrc/fpu.pla: 0005: include "inc/sane.plh"
; inc/sane.plh: 0001: import sane
	; DCI STRING: SANE
	!BYTE	$D3,$C1,$CE,$45
					; SANE -> X028
; inc/sane.plh: 0002: //-----------------------------------------------------------
; inc/sane.plh: 0003: // Operation code masks.
; inc/sane.plh: 0004: //-----------------------------------------------------------
; inc/sane.plh: 0005: const FOADD     = $0000     // add
					; FOADD = 0
; inc/sane.plh: 0006: const FOSUB     = $0002     // subtract
					; FOSUB = 2
; inc/sane.plh: 0007: const FOMUL     = $0004     // multiply
					; FOMUL = 4
; inc/sane.plh: 0008: const FODIV     = $0006     // divide
					; FODIV = 6
; inc/sane.plh: 0009: const FOCMP     = $0008     // compare, no exception from unordered
					; FOCMP = 8
; inc/sane.plh: 0010: const FOCPX     = $000A     // compare, signal invalid if unordered
					; FOCPX = 10
; inc/sane.plh: 0011: const FOREM     = $000C     // remainder
					; FOREM = 12
; inc/sane.plh: 0012: const FOZ2X     = $000E     // convert to extended
					; FOZ2X = 14
; inc/sane.plh: 0013: const FOX2Z     = $0010     // convert from extended
					; FOX2Z = 16
; inc/sane.plh: 0014: const FOSQRT    = $0012     // square root
					; FOSQRT = 18
; inc/sane.plh: 0015: const FORTI     = $0014     // round to integral value
					; FORTI = 20
; inc/sane.plh: 0016: const FOTTI     = $0016     // truncate to integral value
					; FOTTI = 22
; inc/sane.plh: 0017: const FOSCALB   = $0018     // binary scale
					; FOSCALB = 24
; inc/sane.plh: 0018: const FOLOGB    = $001A     // binary log
					; FOLOGB = 26
; inc/sane.plh: 0019: const FOCLASS   = $001C     // classify
					; FOCLASS = 28
; inc/sane.plh: 0020: const FONEXT    = $001E     // next-after
					; FONEXT = 30
; inc/sane.plh: 0021: //
; inc/sane.plh: 0022: const FOSETENV  = $0001     // set environment
					; FOSETENV = 1
; inc/sane.plh: 0023: const FOGETENV  = $0003     // get environment
					; FOGETENV = 3
; inc/sane.plh: 0024: const FOSETHV   = $0005     // set halt vector
					; FOSETHV = 5
; inc/sane.plh: 0025: const FOGETHV   = $0007     // get halt vector
					; FOGETHV = 7
; inc/sane.plh: 0026: const FOD2B     = $0009     // convert decimal to binary
					; FOD2B = 9
; inc/sane.plh: 0027: const FOB2D     = $000B     // convert binary to decimal
					; FOB2D = 11
; inc/sane.plh: 0028: const FONEG     = $000D     // negate
					; FONEG = 13
; inc/sane.plh: 0029: const FOABS     = $000F     // absolute value
					; FOABS = 15
; inc/sane.plh: 0030: const FOCPYSGN  = $0011     // copy sign
					; FOCPYSGN = 17
; inc/sane.plh: 0031: // UNDEFINED    = $0013
; inc/sane.plh: 0032: const FOSETXCP  = $0015     // set exception
					; FOSETXCP = 21
; inc/sane.plh: 0033: const FOPROCENTRY = $0017   // procedure-entry
					; FOPROCENTRY = 23
; inc/sane.plh: 0034: const FOPROCEXIT = $0019    // procedure-exit
					; FOPROCEXIT = 25
; inc/sane.plh: 0035: const FOTESTXCP = $001B     // test exception
					; FOTESTXCP = 27
; inc/sane.plh: 0036: // UNDEFINED    = $001D
; inc/sane.plh: 0037: // UNDEFINED    = $001F
; inc/sane.plh: 0038: //-----------------------------------------------------------
; inc/sane.plh: 0039: // Operand format masks.
; inc/sane.plh: 0040: //-----------------------------------------------------------
; inc/sane.plh: 0041: const FFEXT     = $0000     // extended -- 80-bit float
					; FFEXT = 0
; inc/sane.plh: 0042: const FFDBL     = $0100     // double   -- 64-bit float
					; FFDBL = 256
; inc/sane.plh: 0043: const FFSGL     = $0200     // single   -- 32-bit float
					; FFSGL = 512
; inc/sane.plh: 0044: // UNDEFINED    = $0300
; inc/sane.plh: 0045: const FFINT     = $0400     // integer  -- 16-bit integer
					; FFINT = 1024
; inc/sane.plh: 0046: const FFCOMP    = $0500     // comp     -- 64-bit integer
					; FFCOMP = 1280
; inc/sane.plh: 0047: // UNDEFINED    = $0600
; inc/sane.plh: 0048: // UNDEFINED    = $0700
; inc/sane.plh: 0049: //-----------------------------------------------------------
; inc/sane.plh: 0050: // Class.
; inc/sane.plh: 0051: //-----------------------------------------------------------
; inc/sane.plh: 0052: const FCSNAN    = $FC       // -4: signaling NAN
					; FCSNAN = 252
; inc/sane.plh: 0053: const FCQNAN    = $FD       // -3: quiet NAN
					; FCQNAN = 253
; inc/sane.plh: 0054: const FCINF     = $FE       // -2: infinite
					; FCINF = 254
; inc/sane.plh: 0055: const FCZERO    = $FF       // -1: zero
					; FCZERO = 255
; inc/sane.plh: 0056: const FCNORM    = $00       //  0: normal
					; FCNORM = 0
; inc/sane.plh: 0057: const FCDENORM  = $01       //  1: denormal
					; FCDENORM = 1
; inc/sane.plh: 0058: //-----------------------------------------------------------
; inc/sane.plh: 0059: // Exceptions.
; inc/sane.plh: 0060: //-----------------------------------------------------------
; inc/sane.plh: 0061: const FBINVALID = $01
					; FBINVALID = 1
; inc/sane.plh: 0062: const FBUFLOW   = $02
					; FBUFLOW = 2
; inc/sane.plh: 0063: const FBOFLOW   = $04
					; FBOFLOW = 4
; inc/sane.plh: 0064: const FBDIVZER  = $08
					; FBDIVZER = 8
; inc/sane.plh: 0065: const FBINEXACT = $10
					; FBINEXACT = 16
; inc/sane.plh: 0066: //-----------------------------------------------------------
; inc/sane.plh: 0067: // Elementary function operation code masks.
; inc/sane.plh: 0068: //-----------------------------------------------------------
; inc/sane.plh: 0069: const FOLNX     = $0000     // base-e log
					; FOLNX = 0
; inc/sane.plh: 0070: const FOLOG2X   = $0002     // base-2 log
					; FOLOG2X = 2
; inc/sane.plh: 0071: const FOLN1X    = $0004     // ln (1 + x)
					; FOLN1X = 4
; inc/sane.plh: 0072: const FOLOG21X  = $0006     // log2 (1 + x)
					; FOLOG21X = 6
; inc/sane.plh: 0073: const FOEXPX    = $0008     // base-e exponential
					; FOEXPX = 8
; inc/sane.plh: 0074: const FOEXP2X   = $000A     // base-2 exponential
					; FOEXP2X = 10
; inc/sane.plh: 0075: const FOEXP1X   = $000C     // exp (x) - 1
					; FOEXP1X = 12
; inc/sane.plh: 0076: const FOEXP21X  = $000E     // exp2 (x) - 1
					; FOEXP21X = 14
; inc/sane.plh: 0077: const FOXPWRI   = $0010     // integer exponentiation
					; FOXPWRI = 16
; inc/sane.plh: 0078: const FOXPWRY   = $0012     // general exponentiation
					; FOXPWRY = 18
; inc/sane.plh: 0079: const FOCOMPND  = $0014     // compound
					; FOCOMPND = 20
; inc/sane.plh: 0080: const FOANNUIT  = $0016     // annuity
					; FOANNUIT = 22
; inc/sane.plh: 0081: const FOATANX   = $0018     // arctangent
					; FOATANX = 24
; inc/sane.plh: 0082: const FOSINX    = $001A     // sine
					; FOSINX = 26
; inc/sane.plh: 0083: const FOCOSX    = $001C     // cosine
					; FOCOSX = 28
; inc/sane.plh: 0084: const FOTANX    = $001E     // tangent
					; FOTANX = 30
; inc/sane.plh: 0085: const FORANDX   = $0020     // random
					; FORANDX = 32
; inc/sane.plh: 0086: //-----------------------------------------------------------
; inc/sane.plh: 0087: // NaN error codes.
; inc/sane.plh: 0088: //-----------------------------------------------------------
; inc/sane.plh: 0089: const NANSQRT   = 1         // Invalid square root such as sqrt(-1).
					; NANSQRT = 1
; inc/sane.plh: 0090: const NANADD    = 2         // Invalid addition such as +INF - +INF.
					; NANADD = 2
; inc/sane.plh: 0091: const NANDIV    = 4         // Invalid division such as 0/0.
					; NANDIV = 4
; inc/sane.plh: 0092: const NANMUL    = 8         // Invalid multiply such as 0 * INF.
					; NANMUL = 8
; inc/sane.plh: 0093: const NANREM    = 9         // Invalid remainder or mod such as x REM 0.
					; NANREM = 9
; inc/sane.plh: 0094: const NANASCBIN = 17        // Attempt to convert invalid ASCII string.
					; NANASCBIN = 17
; inc/sane.plh: 0095: const NANCOMP   = 20        // Result of converting comp NaN to floating.
					; NANCOMP = 20
; inc/sane.plh: 0096: const NANZERO   = 21        // Attempt to create a NaN with a zero code.
					; NANZERO = 21
; inc/sane.plh: 0097: const NANTRIG   = 33        // Invalid argument to trig routine.
					; NANTRIG = 33
; inc/sane.plh: 0098: const NANINVTRIG = 34       // Invalid argument to inverse trig routine.
					; NANINVTRIG = 34
; inc/sane.plh: 0099: const NANLOG    = 36        // Invalid argument to log routine.
					; NANLOG = 36
; inc/sane.plh: 0100: const NANPOWER  = 37        // Invalid argument to x^i or x^y routine.
					; NANPOWER = 37
; inc/sane.plh: 0101: const NANFINAN  = 38        // Invalid argument to financial function.
					; NANFINAN = 38
; inc/sane.plh: 0102: const NANINIT   = 255       // Uninitialized storage.
					; NANINIT = 255
; inc/sane.plh: 0103: //-----------------------------------------------------------
; inc/sane.plh: 0104: // Comparison results.
; inc/sane.plh: 0105: //-----------------------------------------------------------
; inc/sane.plh: 0106: const FCMPGT    = $4040     // Greater Than
					; FCMPGT = 16448
; inc/sane.plh: 0107: const FCMPLT    = $8080     // Less Than
					; FCMPLT = 32896
; inc/sane.plh: 0108: const FCMPEQ    = $0002     // EQual
					; FCMPEQ = 2
; inc/sane.plh: 0109: const FCMPUN    = $0101     // UNordered
					; FCMPUN = 257
; inc/sane.plh: 0110: //-----------------------------------------------------------
; inc/sane.plh: 0111: //
; inc/sane.plh: 0112: // Data types
; inc/sane.plh: 0113: //
; inc/sane.plh: 0114: struc t_single
; inc/sane.plh: 0115:     byte[3] s_mantissa
					; s_mantissa = 0
; inc/sane.plh: 0116:     byte    s_exponent
					; s_exponent = 3
; inc/sane.plh: 0117: end
					; t_single = 4
; inc/sane.plh: 0118: struc t_double
; inc/sane.plh: 0119:     byte[6] d_mantissa
					; d_mantissa = 0
; inc/sane.plh: 0120:     word    d_exponent
					; d_exponent = 6
; inc/sane.plh: 0121: end
					; t_double = 8
; inc/sane.plh: 0122: struc t_extended
; inc/sane.plh: 0123:     byte[8] x_mantissa
					; x_mantissa = 0
; inc/sane.plh: 0124:     word    x_exponent
					; x_exponent = 8
; inc/sane.plh: 0125: end
					; t_extended = 10
; inc/sane.plh: 0126: struc t_bigint
; inc/sane.plh: 0127:     byte[8] l_int
					; l_int = 0
; inc/sane.plh: 0128: end
					; t_bigint = 8
; inc/sane.plh: 0129: //
; inc/sane.plh: 0130: // SANE PLASMA interface
; inc/sane.plh: 0131: //
; inc/sane.plh: 0132: struc t_sane
; inc/sane.plh: 0133:     word initFP
					; initFP = 0
; inc/sane.plh: 0134:     word haltFP
					; haltFP = 2
; inc/sane.plh: 0135:     word op0FP
					; op0FP = 4
; inc/sane.plh: 0136:     word op1FP
					; op1FP = 6
; inc/sane.plh: 0137:     word op2FP
					; op2FP = 8
; inc/sane.plh: 0138:     word op3FP
					; op3FP = 10
; inc/sane.plh: 0139:     word op1ELEM
					; op1ELEM = 12
; inc/sane.plh: 0140:     word op2ELEM
					; op2ELEM = 14
; inc/sane.plh: 0141:     word op3ELEM
					; op3ELEM = 16
; inc/sane.plh: 0142:     word saveZP
					; saveZP = 18
; inc/sane.plh: 0143:     word restoreZP
					; restoreZP = 20
; inc/sane.plh: 0144: end
					; t_sane = 22
; inc/sane.plh: 0145: end
; libsrc/fpu.pla: 0005: 
; libsrc/fpu.pla: 0006: include "inc/fpstr.plh"
; inc/fpstr.plh: 0001: import fpstr
	; DCI STRING: FPSTR
	!BYTE	$C6,$D0,$D3,$D4,$52
					; FPSTR -> X029
; inc/fpstr.plh: 0002: //
; inc/fpstr.plh: 0003: // String formatting bits
; inc/fpstr.plh: 0004: //
; inc/fpstr.plh: 0005: const FPSTR_FIXED = 1 // Fixed count of fractional digits
					; FPSTR_FIXED = 1
; inc/fpstr.plh: 0006: const FPSTR_FLOAT = 0 // Floating count of fractional digits
					; FPSTR_FLOAT = 0
; inc/fpstr.plh: 0007: const FPSTR_STRIP = 2 // Strip trailing fractional zeros
					; FPSTR_STRIP = 2
; inc/fpstr.plh: 0008: const FPSTR_EXP   = 4 // Force exponential format
					; FPSTR_EXP = 4
; inc/fpstr.plh: 0009: const FPSTR_FLEX  = 8 // Flexible switch to EXP format if over/underflow
					; FPSTR_FLEX = 8
; inc/fpstr.plh: 0010: //
; inc/fpstr.plh: 0011: // Parse string into decrecord, return SANE conversion output
; inc/fpstr.plh: 0012: //
; inc/fpstr.plh: 0013: predef str2ext(str, ext)#1
					; STR2EXT -> X030
; inc/fpstr.plh: 0014: //
; inc/fpstr.plh: 0015: // Convert extended FP to string using , return string
; inc/fpstr.plh: 0016: //
; inc/fpstr.plh: 0017: predef ext2str(ext, str, intdigits, fracdigits, format)#1
					; EXT2STR -> X031
; inc/fpstr.plh: 0018: end
; libsrc/fpu.pla: 0006: 
; libsrc/fpu.pla: 0007: //
; libsrc/fpu.pla: 0008: // External interface to FPU library
; libsrc/fpu.pla: 0009: //
; libsrc/fpu.pla: 0010: predef reset, getEnv, setEnv(env), testExcept(except), setExcept(except), enterProc(pEnv), exitProc(env)
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/fpu.pla: 0011: predef constPi, constE
; libsrc/fpu.pla: 0012: predef pushInt(pInt), pushSgl(pSgl), pushDbl(pDbl), pushExt(pExt), pushStr(pStr)
; libsrc/fpu.pla: 0013: predef pullInt(pInt), pullSgl(pSgl), pullDbl(pDbl), pullExt(pExt), pullStr(pStr,intdigits,fracdigits,format)
; libsrc/fpu.pla: 0014: predef loadInt(pInt,reg), loadSgl(pSgl,reg), loadDbl(pDbl,reg), loadExt(pExt,reg), loadStr(pStr,reg)
; libsrc/fpu.pla: 0015: predef storInt(pInt,reg), storSgl(pSgl,reg), storDbl(pDbl,reg), storExt(pExt,reg), storStr(pStr,intdigits,fracdigits,format,reg)
; libsrc/fpu.pla: 0016: predef shiftUp, shiftDown, rotateUp, rotateDown, dup, swap, clear
; libsrc/fpu.pla: 0017: predef add, sub, mul, div, rem
; libsrc/fpu.pla: 0018: predef neg, abs, type, cmp, logb, scalb(scale), trunc, round, sqrt, squared
; libsrc/fpu.pla: 0019: predef cos, sin, tan, atan
; libsrc/fpu.pla: 0020: predef log2X, log21X, lnX, ln1X, pow2X, pow21X, powEX, powE1X, powE21X, powXInt(powInt), powXY
; libsrc/fpu.pla: 0021: predef compXY, annuityXY, randNum(pSeed)
; libsrc/fpu.pla: 0022: //
; libsrc/fpu.pla: 0023: // FP6502 functions
; libsrc/fpu.pla: 0024: //
; libsrc/fpu.pla: 0025: //export word fpu = @reset
; libsrc/fpu.pla: 0026: word fpu = @reset
_D101 					; fpu = @reset
_F000 	!WORD	_P000
; libsrc/fpu.pla: 0027: word = @setEnv, @getEnv, @testExcept, @setExcept, @enterProc, @exitProc
_F001 	!WORD	_P002
_F002 	!WORD	_P001
_F003 	!WORD	_P003
_F004 	!WORD	_P004
_F005 	!WORD	_P005
_F006 	!WORD	_P006
; libsrc/fpu.pla: 0028: word = @constPi, @constE
_F007 	!WORD	_P007
_F008 	!WORD	_P008
; libsrc/fpu.pla: 0029: word = @pushInt, @pushSgl, @pushDbl, @pushExt, @pushStr
_F009 	!WORD	_P009
_F010 	!WORD	_P010
_F011 	!WORD	_P011
_F012 	!WORD	_P012
_F013 	!WORD	_P013
; libsrc/fpu.pla: 0030: word = @pullInt, @pullSgl, @pullDbl, @pullExt, @pullStr
_F014 	!WORD	_P014
_F015 	!WORD	_P015
_F016 	!WORD	_P016
_F017 	!WORD	_P017
_F018 	!WORD	_P018
; libsrc/fpu.pla: 0031: word = @loadInt, @loadSgl, @loadDbl, @loadExt, @loadStr
_F019 	!WORD	_P019
_F020 	!WORD	_P020
_F021 	!WORD	_P021
_F022 	!WORD	_P022
_F023 	!WORD	_P023
; libsrc/fpu.pla: 0032: word = @storInt, @storSgl, @storDbl, @storExt, @storStr
_F024 	!WORD	_P024
_F025 	!WORD	_P025
_F026 	!WORD	_P026
_F027 	!WORD	_P027
_F028 	!WORD	_P028
; libsrc/fpu.pla: 0033: word = @shiftUp, @shiftDown, @rotateUp, @rotateDown, @dup, @swap, @clear
_F029 	!WORD	_P029
_F030 	!WORD	_P030
_F031 	!WORD	_P031
_F032 	!WORD	_P032
_F033 	!WORD	_P033
_F034 	!WORD	_P034
_F035 	!WORD	_P035
; libsrc/fpu.pla: 0034: word = @add, @sub, @mul, @div, @rem
_F036 	!WORD	_P036
_F037 	!WORD	_P037
_F038 	!WORD	_P038
_F039 	!WORD	_P039
_F040 	!WORD	_P040
; libsrc/fpu.pla: 0035: word = @neg, @abs, @type, @cmp
_F041 	!WORD	_P041
_F042 	!WORD	_P042
_F043 	!WORD	_P043
_F044 	!WORD	_P044
; libsrc/fpu.pla: 0036: word = @logb, @scalb, @trunc, @round, @sqrt, @squared
_F045 	!WORD	_P045
_F046 	!WORD	_P046
_F047 	!WORD	_P047
_F048 	!WORD	_P048
_F049 	!WORD	_P049
_F050 	!WORD	_P050
; libsrc/fpu.pla: 0037: //
; libsrc/fpu.pla: 0038: // ELEMS6502 functions
; libsrc/fpu.pla: 0039: //
; libsrc/fpu.pla: 0040: word = @cos, @sin, @tan, @atan
_F051 	!WORD	_P051
_F052 	!WORD	_P052
_F053 	!WORD	_P053
_F054 	!WORD	_P054
; libsrc/fpu.pla: 0041: word = @log2X, @log21X, @lnX, @ln1X, @pow2X, @pow21X, @powEX, @powE1X, @powE21X, @powXInt, @powXY
_F055 	!WORD	_P055
_F056 	!WORD	_P056
_F057 	!WORD	_P057
_F058 	!WORD	_P058
_F059 	!WORD	_P059
_F060 	!WORD	_P060
_F061 	!WORD	_P061
_F062 	!WORD	_P062
_F063 	!WORD	_P063
_F064 	!WORD	_P064
_F065 	!WORD	_P065
; libsrc/fpu.pla: 0042: word = @compXY, @annuityXY, @randNum
_F066 	!WORD	_P066
_F067 	!WORD	_P067
_F068 	!WORD	_P068
; libsrc/fpu.pla: 0043: //
; libsrc/fpu.pla: 0044: // Useful constants
; libsrc/fpu.pla: 0045: //
; libsrc/fpu.pla: 0046: byte ext_pi[t_extended] = $35,$C2,$68,$21,$A2,$DA,$0F,$C9,$00,$40
_D102 					; ext_pi[t_extended] = $35,$C2,$68,$21,$A2,$DA,$0F,$C9,$00,$40
	!BYTE	$35
	!BYTE	$C2
	!BYTE	$68
	!BYTE	$21
	!BYTE	$A2
	!BYTE	$DA
	!BYTE	$0F
	!BYTE	$C9
	!BYTE	$00
	!BYTE	$40
; libsrc/fpu.pla: 0047: byte ext_e[t_extended]  = $9B,$4A,$BB,$A2,$5B,$54,$F8,$AD,$00,$40
_D103 					; ext_e[t_extended]  = $9B,$4A,$BB,$A2,$5B,$54,$F8,$AD,$00,$40
	!BYTE	$9B
	!BYTE	$4A
	!BYTE	$BB
	!BYTE	$A2
	!BYTE	$5B
	!BYTE	$54
	!BYTE	$F8
	!BYTE	$AD
	!BYTE	$00
	!BYTE	$40
; libsrc/fpu.pla: 0048: //
; libsrc/fpu.pla: 0049: // FP Stack
; libsrc/fpu.pla: 0050: //
; libsrc/fpu.pla: 0051: byte stack[t_extended*4]
_D104 	!FILL	40			; stack[t_extended*4]
; libsrc/fpu.pla: 0052: word stackRegs[4]
_D105 	!FILL	8			; stackRegs[4]
; libsrc/fpu.pla: 0053: //
; libsrc/fpu.pla: 0054: // Environment access
; libsrc/fpu.pla: 0055: //
; libsrc/fpu.pla: 0056: def setEnv(env)
_SUBSEG 				; BYTECODE STARTS
					; env -> [0]
_P002 					; setEnv(env)()
_C000 					; setEnv()
; libsrc/fpu.pla: 0057:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0058:     return sane:restoreZP(sane:op1FP(FOSETENV, env))
	!BYTE	$6A			; LAW	_X028+18
_F069 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+6
_F070 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F071 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0059: end
; libsrc/fpu.pla: 0060: def getEnv
_P001 					; getEnv()
_C001 					; getEnv()
; libsrc/fpu.pla: 0061:     sane:saveZP()
; libsrc/fpu.pla: 0062:     return sane:restoreZP(sane:op0FP(FOGETENV))
	!BYTE	$6A			; LAW	_X028+18
_F072 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$06			; CN	3
	!BYTE	$6A			; LAW	_X028+4
_F073 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F074 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0063: end
; libsrc/fpu.pla: 0064: def testExcept(except)
					; except -> [0]
_P003 					; testExcept(except)()
_C002 					; testExcept()
; libsrc/fpu.pla: 0065:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0066:     return sane:restoreZP(sane:op1FP(FOTESTXCP, except))
	!BYTE	$6A			; LAW	_X028+18
_F075 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1B			; CB	27
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+6
_F076 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F077 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0067: end
; libsrc/fpu.pla: 0068: def setExcept(except)
					; except -> [0]
_P004 					; setExcept(except)()
_C003 					; setExcept()
; libsrc/fpu.pla: 0069:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0070:     return sane:restoreZP(sane:op1FP(FOSETXCP, except))
	!BYTE	$6A			; LAW	_X028+18
_F078 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$15			; CB	21
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+6
_F079 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F080 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0071: end
; libsrc/fpu.pla: 0072: def enterProc(pEnv)
					; pEnv -> [0]
_P005 					; enterProc(pEnv)()
_C004 					; enterProc()
; libsrc/fpu.pla: 0073:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0074:     return sane:restoreZP(sane:op1FP(FOPROCENTRY, pEnv))
	!BYTE	$6A			; LAW	_X028+18
_F081 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$17			; CB	23
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+6
_F082 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F083 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0075: end
; libsrc/fpu.pla: 0076: def exitProc(env)
					; env -> [0]
_P006 					; exitProc(env)()
_C005 					; exitProc()
; libsrc/fpu.pla: 0077:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0078:     return sane:restoreZP(sane:op1FP(FOPROCEXIT, env))
	!BYTE	$6A			; LAW	_X028+18
_F084 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$19			; CB	25
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+6
_F085 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F086 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0079: end
; libsrc/fpu.pla: 0080: //
; libsrc/fpu.pla: 0081: // Stack manipulation routines
; libsrc/fpu.pla: 0082: //
; libsrc/fpu.pla: 0083: def rotateUp
_P031 					; rotateUp()
_C006 					; rotateUp()
; libsrc/fpu.pla: 0084:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
; libsrc/fpu.pla: 0085:     return 0
	!BYTE	$6A			; LAW	_D105+6
_F087 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F088 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F089 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F090 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F091 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F092 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F093 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F094 	!WORD	_D105+0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0086: end
; libsrc/fpu.pla: 0087: def rotateDown
_P032 					; rotateDown()
_C007 					; rotateDown()
; libsrc/fpu.pla: 0088:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[1], stackRegs[2], stackRegs[3], stackRegs[0]
; libsrc/fpu.pla: 0089:     return 0
	!BYTE	$6A			; LAW	_D105+2
_F095 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F096 	!WORD	_D105+4		
	!BYTE	$6A			; LAW	_D105+6
_F097 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F098 	!WORD	_D105+0		
	!BYTE	$7A			; SAW	_D105+6
_F099 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F100 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F101 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F102 	!WORD	_D105+0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0090: end
; libsrc/fpu.pla: 0091: def shiftUp
_P029 					; shiftUp()
_C008 					; shiftUp()
; libsrc/fpu.pla: 0092:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
; libsrc/fpu.pla: 0093:     memcpy(stackRegs[0], stackRegs[1], t_extended)
; libsrc/fpu.pla: 0094:     return 0
	!BYTE	$6A			; LAW	_D105+6
_F103 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F104 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F105 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F106 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F107 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F108 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F109 	!WORD	_D105+2		
	!BYTE	$7E			; DAW	_D105+0
_F110 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F111 	!WORD	_D105+2		
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_X018
_F112 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0095: end
; libsrc/fpu.pla: 0096: def shiftDown // drop
_P030 					; shiftDown // drop()
_C009 					; shiftDown()
; libsrc/fpu.pla: 0097:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[1], stackRegs[2], stackRegs[3], stackRegs[0]
; libsrc/fpu.pla: 0098:     memcpy(stackRegs[3], stackRegs[2], t_extended)
; libsrc/fpu.pla: 0099:     return 0
	!BYTE	$6A			; LAW	_D105+2
_F113 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F114 	!WORD	_D105+4		
	!BYTE	$6A			; LAW	_D105+6
_F115 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F116 	!WORD	_D105+0		
	!BYTE	$7A			; SAW	_D105+6
_F117 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F118 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F119 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F120 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+6
_F121 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+4
_F122 	!WORD	_D105+4		
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_X018
_F123 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0100: end
; libsrc/fpu.pla: 0101: def _drop(passthru) // Internal version with passthru
					; passthru -> [0]
_C010 					; _drop()
; libsrc/fpu.pla: 0102:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[1], stackRegs[2], stackRegs[3], stackRegs[0]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0103:     memcpy(stackRegs[3], stackRegs[2], t_extended)
; libsrc/fpu.pla: 0104:     return passthru
	!BYTE	$6A			; LAW	_D105+2
_F124 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F125 	!WORD	_D105+4		
	!BYTE	$6A			; LAW	_D105+6
_F126 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F127 	!WORD	_D105+0		
	!BYTE	$7A			; SAW	_D105+6
_F128 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F129 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F130 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F131 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+6
_F132 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+4
_F133 	!WORD	_D105+4		
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_X018
_F134 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0105: end
; libsrc/fpu.pla: 0106: def swap
_P034 					; swap()
_C011 					; swap()
; libsrc/fpu.pla: 0107:     stackRegs[0], stackRegs[1] = stackRegs[1], stackRegs[0]
; libsrc/fpu.pla: 0108:     return 0
	!BYTE	$6A			; LAW	_D105+2
_F135 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F136 	!WORD	_D105+0		
	!BYTE	$7A			; SAW	_D105+2
_F137 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F138 	!WORD	_D105+0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0109: end
; libsrc/fpu.pla: 0110: def _swap(passthru) // Internal version with passthru
					; passthru -> [0]
_C012 					; _swap()
; libsrc/fpu.pla: 0111:     stackRegs[0], stackRegs[1] = stackRegs[1], stackRegs[0]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0112:     return passthru
	!BYTE	$6A			; LAW	_D105+2
_F139 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F140 	!WORD	_D105+0		
	!BYTE	$7A			; SAW	_D105+2
_F141 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F142 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0113: end
; libsrc/fpu.pla: 0114: def dup
_P033 					; dup()
_C013 					; dup()
; libsrc/fpu.pla: 0115:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
; libsrc/fpu.pla: 0116:     memcpy(stackRegs[0], stackRegs[1], t_extended)
; libsrc/fpu.pla: 0117:     return 0
	!BYTE	$6A			; LAW	_D105+6
_F143 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F144 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F145 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F146 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F147 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F148 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F149 	!WORD	_D105+2		
	!BYTE	$7E			; DAW	_D105+0
_F150 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F151 	!WORD	_D105+2		
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_X018
_F152 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0118: end
; libsrc/fpu.pla: 0119: def clear
_P035 					; clear()
_C014 					; clear()
; libsrc/fpu.pla: 0120:     word zero
					; zero -> [0]
; libsrc/fpu.pla: 0121:     zero = 0
	!BYTE	$58,$02,$00		; ENTER	2,0
; libsrc/fpu.pla: 0122:     sane:saveZP()
; libsrc/fpu.pla: 0123:     return sane:restoreZP(sane:op2FP(FFINT|FOZ2X, stackRegs[0], @zero))
	!BYTE	$00			; CN	0
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$6A			; LAW	_X028+18
_F153 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$6A			; LAW	_D105+0
_F154 	!WORD	_D105+0		
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$6A			; LAW	_X028+8
_F155 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F156 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0124: end
; libsrc/fpu.pla: 0125: //
; libsrc/fpu.pla: 0126: // Stack access
; libsrc/fpu.pla: 0127: //
; libsrc/fpu.pla: 0128: def pushInt(pInt)
					; pInt -> [0]
_P009 					; pushInt(pInt)()
_C015 					; pushInt()
; libsrc/fpu.pla: 0129:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0130:     sane:saveZP()
; libsrc/fpu.pla: 0131:     return sane:restoreZP(sane:op2FP(FFINT|FOZ2X, stackRegs[0], pInt))
	!BYTE	$6A			; LAW	_D105+6
_F157 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F158 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F159 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F160 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F161 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F162 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F163 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F164 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+18
_F165 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$6A			; LAW	_D105+0
_F166 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F167 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F168 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0132: end
; libsrc/fpu.pla: 0133: def pullInt(pInt)
					; pInt -> [0]
_P014 					; pullInt(pInt)()
_C016 					; pullInt()
; libsrc/fpu.pla: 0134:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0135:     return _drop(sane:restoreZP(sane:op2FP(FFINT|FOX2Z, pInt, stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F169 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$04		; CW	1040
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D105+0
_F170 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F171 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F172 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F173 	!WORD	_C010		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0136: end
; libsrc/fpu.pla: 0137: def loadInt(pInt, reg)
					; pInt -> [0]
					; reg -> [2]
_P019 					; loadInt(pInt, reg)()
_C017 					; loadInt()
; libsrc/fpu.pla: 0138:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0139:     return sane:restoreZP(sane:op2FP(FFINT|FOZ2X, stackRegs[reg & $03], pInt))
	!BYTE	$6A			; LAW	_X028+18
_F174 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$26			; LA	_D105+0
_F175 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F176 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F177 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0140: end
; libsrc/fpu.pla: 0141: def storInt(pInt, reg)
					; pInt -> [0]
					; reg -> [2]
_P024 					; storInt(pInt, reg)()
_C018 					; storInt()
; libsrc/fpu.pla: 0142:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0143:     return sane:restoreZP(sane:op2FP(FFINT|FOX2Z, pInt, stackRegs[reg & $03]))
	!BYTE	$6A			; LAW	_X028+18
_F178 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$04		; CW	1040
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D105+0
_F179 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_X028+8
_F180 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F181 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0144: end
; libsrc/fpu.pla: 0145: def pushSgl(pSgl)
					; pSgl -> [0]
_P010 					; pushSgl(pSgl)()
_C019 					; pushSgl()
; libsrc/fpu.pla: 0146:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0147:     sane:saveZP()
; libsrc/fpu.pla: 0148:     return sane:restoreZP(sane:op2FP(FFSGL|FOZ2X, stackRegs[0], pSgl))
	!BYTE	$6A			; LAW	_D105+6
_F182 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F183 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F184 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F185 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F186 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F187 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F188 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F189 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+18
_F190 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$02		; CW	526
	!BYTE	$6A			; LAW	_D105+0
_F191 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F192 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F193 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0149: end
; libsrc/fpu.pla: 0150: def pullSgl(pSgl)
					; pSgl -> [0]
_P015 					; pullSgl(pSgl)()
_C020 					; pullSgl()
; libsrc/fpu.pla: 0151:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0152:     return _drop(sane:restoreZP(sane:op2FP(FFSGL|FOX2Z, pSgl, stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F194 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$02		; CW	528
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D105+0
_F195 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F196 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F197 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F198 	!WORD	_C010		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0153: end
; libsrc/fpu.pla: 0154: def loadSgl(pSgl, reg)
					; pSgl -> [0]
					; reg -> [2]
_P020 					; loadSgl(pSgl, reg)()
_C021 					; loadSgl()
; libsrc/fpu.pla: 0155:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0156:     return sane:restoreZP(sane:op2FP(FFSGL|FOZ2X, stackRegs[reg & $03], pSgl))
	!BYTE	$6A			; LAW	_X028+18
_F199 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$02		; CW	526
	!BYTE	$26			; LA	_D105+0
_F200 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F201 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F202 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0157: end
; libsrc/fpu.pla: 0158: def storSgl(pSgl, reg)
					; pSgl -> [0]
					; reg -> [2]
_P025 					; storSgl(pSgl, reg)()
_C022 					; storSgl()
; libsrc/fpu.pla: 0159:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0160:     return sane:restoreZP(sane:op2FP(FFSGL|FOX2Z, pSgl, stackRegs[reg & $03]))
	!BYTE	$6A			; LAW	_X028+18
_F203 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$02		; CW	528
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D105+0
_F204 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_X028+8
_F205 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F206 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0161: end
; libsrc/fpu.pla: 0162: def pushDbl(pDbl)
					; pDbl -> [0]
_P011 					; pushDbl(pDbl)()
_C023 					; pushDbl()
; libsrc/fpu.pla: 0163:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0164:     sane:saveZP()
; libsrc/fpu.pla: 0165:     return sane:restoreZP(sane:op2FP(FFDBL|FOZ2X, stackRegs[0], pDbl))
	!BYTE	$6A			; LAW	_D105+6
_F207 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F208 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F209 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F210 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F211 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F212 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F213 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F214 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+18
_F215 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$01		; CW	270
	!BYTE	$6A			; LAW	_D105+0
_F216 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F217 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F218 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0166: end
; libsrc/fpu.pla: 0167: def pullDbl(pDbl)
					; pDbl -> [0]
_P016 					; pullDbl(pDbl)()
_C024 					; pullDbl()
; libsrc/fpu.pla: 0168:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0169:     return _drop(sane:restoreZP(sane:op2FP(FFDBL|FOX2Z, pDbl, stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F219 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$01		; CW	272
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D105+0
_F220 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F221 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F222 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F223 	!WORD	_C010		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0170: end
; libsrc/fpu.pla: 0171: def loadDbl(pDbl, reg)
					; pDbl -> [0]
					; reg -> [2]
_P021 					; loadDbl(pDbl, reg)()
_C025 					; loadDbl()
; libsrc/fpu.pla: 0172:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0173:     return sane:restoreZP(sane:op2FP(FFDBL|FOZ2X, stackRegs[reg & $03], pDbl))
	!BYTE	$6A			; LAW	_X028+18
_F224 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$01		; CW	270
	!BYTE	$26			; LA	_D105+0
_F225 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F226 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F227 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0174: end
; libsrc/fpu.pla: 0175: def storDbl(pDbl, reg)
					; pDbl -> [0]
					; reg -> [2]
_P026 					; storDbl(pDbl, reg)()
_C026 					; storDbl()
; libsrc/fpu.pla: 0176:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0177:     return sane:restoreZP(sane:op2FP(FFDBL|FOX2Z, pDbl, stackRegs[reg & $03]))
	!BYTE	$6A			; LAW	_X028+18
_F228 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$01		; CW	272
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D105+0
_F229 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_X028+8
_F230 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F231 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0178: end
; libsrc/fpu.pla: 0179: def pushExt(pExt)
					; pExt -> [0]
_P012 					; pushExt(pExt)()
_C027 					; pushExt()
; libsrc/fpu.pla: 0180:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0181:     sane:saveZP()
; libsrc/fpu.pla: 0182:     return sane:restoreZP(sane:op2FP(FFEXT|FOZ2X, stackRegs[0], pExt))
	!BYTE	$6A			; LAW	_D105+6
_F232 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F233 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F234 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F235 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F236 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F237 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F238 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F239 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+18
_F240 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$1C			; CN	14
	!BYTE	$6A			; LAW	_D105+0
_F241 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F242 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F243 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0183: end
; libsrc/fpu.pla: 0184: def pullExt(pExt)
					; pExt -> [0]
_P017 					; pullExt(pExt)()
_C028 					; pullExt()
; libsrc/fpu.pla: 0185:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0186:     return _drop(sane:restoreZP(sane:op2FP(FFEXT|FOX2Z, pExt, stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F244 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$10			; CB	16
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D105+0
_F245 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F246 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F247 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F248 	!WORD	_C010		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0187: end
; libsrc/fpu.pla: 0188: def loadExt(pExt, reg)
					; pExt -> [0]
					; reg -> [2]
_P022 					; loadExt(pExt, reg)()
_C029 					; loadExt()
; libsrc/fpu.pla: 0189:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0190:     return sane:restoreZP(sane:op2FP(FFEXT|FOZ2X, stackRegs[reg & $03], pExt))
	!BYTE	$6A			; LAW	_X028+18
_F249 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$1C			; CN	14
	!BYTE	$26			; LA	_D105+0
_F250 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F251 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F252 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0191: end
; libsrc/fpu.pla: 0192: def storExt(pExt, reg)
					; pExt -> [0]
					; reg -> [2]
_P027 					; storExt(pExt, reg)()
_C030 					; storExt()
; libsrc/fpu.pla: 0193:     sane:saveZP()
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/fpu.pla: 0194:     return sane:restoreZP(sane:op2FP(FFEXT|FOX2Z, pExt, stackRegs[reg & $03]))
	!BYTE	$6A			; LAW	_X028+18
_F253 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$10			; CB	16
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D105+0
_F254 	!WORD	_D105+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$03			; ANDI	3
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_X028+8
_F255 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F256 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0195: end
; libsrc/fpu.pla: 0196: def pushStr(pStr)
					; pStr -> [0]
_P013 					; pushStr(pStr)()
_C031 					; pushStr()
; libsrc/fpu.pla: 0197:     stackRegs[0], stackRegs[1], stackRegs[2], stackRegs[3] = stackRegs[3], stackRegs[0], stackRegs[1], stackRegs[2]
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0198:     return str2ext(pStr, stackRegs[0])
	!BYTE	$6A			; LAW	_D105+6
_F257 	!WORD	_D105+6		
	!BYTE	$6A			; LAW	_D105+0
_F258 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F259 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+4
_F260 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+6
_F261 	!WORD	_D105+6		
	!BYTE	$7A			; SAW	_D105+4
_F262 	!WORD	_D105+4		
	!BYTE	$7A			; SAW	_D105+2
_F263 	!WORD	_D105+2		
	!BYTE	$7A			; SAW	_D105+0
_F264 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D105+0
_F265 	!WORD	_D105+0		
	!BYTE	$54			; CALL	_X030
_F266 	!WORD	0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0199: end
; libsrc/fpu.pla: 0200: def pullStr(pStr, intdigits, fracdigits, format)
					; pStr -> [0]
					; intdigits -> [2]
					; fracdigits -> [4]
					; format -> [6]
_P018 					; pullStr(pStr, intdigits, fracdigits, format)()
_C032 					; pullStr()
; libsrc/fpu.pla: 0201:     return _drop(ext2str(stackRegs[0], pStr, intdigits, fracdigits, format))
	!BYTE	$58,$08,$04		; ENTER	8,4
	!BYTE	$6A			; LAW	_D105+0
_F267 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X031
_F268 	!WORD	0		
	!BYTE	$54			; CALL	_C010
_F269 	!WORD	_C010		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/fpu.pla: 0202: end
; libsrc/fpu.pla: 0203: def loadStr(pStr, reg)
					; pStr -> [0]
					; reg -> [2]
_P023 					; loadStr(pStr, reg)()
_C033 					; loadStr()
; libsrc/fpu.pla: 0204:     return str2ext(pStr, stackRegs[reg])
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D105+0
_F270 	!WORD	_D105+0		
	!BYTE	$BA,$02			; IDXLW	[2]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X030
_F271 	!WORD	0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/fpu.pla: 0205: end
; libsrc/fpu.pla: 0206: def storStr(pStr, intdigits, fracdigits, format, reg)
					; pStr -> [0]
					; intdigits -> [2]
					; fracdigits -> [4]
					; format -> [6]
					; reg -> [8]
_P028 					; storStr(pStr, intdigits, fracdigits, format, reg)()
_C034 					; storStr()
; libsrc/fpu.pla: 0207:     return ext2str(stackRegs[reg], pStr, intdigits, fracdigits, format)
	!BYTE	$58,$0A,$05		; ENTER	10,5
	!BYTE	$26			; LA	_D105+0
_F272 	!WORD	_D105+0		
	!BYTE	$BA,$08			; IDXLW	[8]
	!BYTE	$62			; LW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X031
_F273 	!WORD	0		
	!BYTE	$5A,$0A			; LEAVE	10
; libsrc/fpu.pla: 0208: end
; libsrc/fpu.pla: 0209: //
; libsrc/fpu.pla: 0210: // Basic math operations
; libsrc/fpu.pla: 0211: //
; libsrc/fpu.pla: 0212: def add
_P036 					; add()
_C035 					; add()
; libsrc/fpu.pla: 0213:     sane:saveZP()
; libsrc/fpu.pla: 0214:     return _drop(sane:restoreZP(sane:op2FP(FFEXT|FOADD, stackRegs[1], stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F274 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D105+2
_F275 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F276 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F277 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F278 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F279 	!WORD	_C010		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0215: end
; libsrc/fpu.pla: 0216: def sub
_P037 					; sub()
_C036 					; sub()
; libsrc/fpu.pla: 0217:     sane:saveZP()
; libsrc/fpu.pla: 0218:     return _drop(sane:restoreZP(sane:op2FP(FFEXT|FOSUB, stackRegs[1], stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F280 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$04			; CN	2
	!BYTE	$6A			; LAW	_D105+2
_F281 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F282 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F283 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F284 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F285 	!WORD	_C010		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0219: end
; libsrc/fpu.pla: 0220: def mul
_P038 					; mul()
_C037 					; mul()
; libsrc/fpu.pla: 0221:     sane:saveZP()
; libsrc/fpu.pla: 0222:     return _drop(sane:restoreZP(sane:op2FP(FFEXT|FOMUL, stackRegs[1], stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F286 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_D105+2
_F287 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F288 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F289 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F290 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F291 	!WORD	_C010		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0223: end
; libsrc/fpu.pla: 0224: def div
_P039 					; div()
_C038 					; div()
; libsrc/fpu.pla: 0225:     sane:saveZP()
; libsrc/fpu.pla: 0226:     return _drop(sane:restoreZP(sane:op2FP(FFEXT|FODIV, stackRegs[1], stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F292 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$0C			; CN	6
	!BYTE	$6A			; LAW	_D105+2
_F293 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F294 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F295 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F296 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F297 	!WORD	_C010		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0227: end
; libsrc/fpu.pla: 0228: def rem
_P040 					; rem()
_C039 					; rem()
; libsrc/fpu.pla: 0229:     sane:saveZP()
; libsrc/fpu.pla: 0230:     return _drop(sane:restoreZP(sane:op2FP(FFEXT|FOREM, stackRegs[1], stackRegs[0])))
	!BYTE	$6A			; LAW	_X028+18
_F298 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$18			; CN	12
	!BYTE	$6A			; LAW	_D105+2
_F299 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F300 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F301 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F302 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C010
_F303 	!WORD	_C010		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0231: end
; libsrc/fpu.pla: 0232: def neg
_P041 					; neg()
_C040 					; neg()
; libsrc/fpu.pla: 0233:     sane:saveZP()
; libsrc/fpu.pla: 0234:     return sane:restoreZP(sane:op1FP(FFEXT|FONEG, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F304 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$1A			; CN	13
	!BYTE	$6A			; LAW	_D105+0
_F305 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F306 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F307 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0235: end
; libsrc/fpu.pla: 0236: def abs
_P042 					; abs()
_C041 					; abs()
; libsrc/fpu.pla: 0237:     sane:saveZP()
; libsrc/fpu.pla: 0238:     return sane:restoreZP(sane:op1FP(FFEXT|FOABS, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F308 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$1E			; CN	15
	!BYTE	$6A			; LAW	_D105+0
_F309 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F310 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F311 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0239: end
; libsrc/fpu.pla: 0240: def type
_P043 					; type()
_C042 					; type()
; libsrc/fpu.pla: 0241:     sane:saveZP()
; libsrc/fpu.pla: 0242:     return sane:restoreZP(sane:op1FP(FFEXT|FOCLASS, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F312 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$6A			; LAW	_D105+0
_F313 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F314 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F315 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0243: end
; libsrc/fpu.pla: 0244: def cmp
_P044 					; cmp()
_C043 					; cmp()
; libsrc/fpu.pla: 0245:     sane:saveZP()
; libsrc/fpu.pla: 0246:     return sane:restoreZP(sane:op2FP(FFEXT|FOCMP, stackRegs[1], stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F316 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$10			; CN	8
	!BYTE	$6A			; LAW	_D105+2
_F317 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_D105+0
_F318 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+8
_F319 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F320 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0247: end
; libsrc/fpu.pla: 0248: def trunc
_P047 					; trunc()
_C044 					; trunc()
; libsrc/fpu.pla: 0249:     sane:saveZP()
; libsrc/fpu.pla: 0250:     return sane:restoreZP(sane:op1FP(FFEXT|FOTTI, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F321 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$16			; CB	22
	!BYTE	$6A			; LAW	_D105+0
_F322 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F323 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F324 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0251: end
; libsrc/fpu.pla: 0252: def round
_P048 					; round()
_C045 					; round()
; libsrc/fpu.pla: 0253:     sane:saveZP()
; libsrc/fpu.pla: 0254:     return sane:restoreZP(sane:op1FP(FFEXT|FORTI, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F325 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$14			; CB	20
	!BYTE	$6A			; LAW	_D105+0
_F326 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F327 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F328 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0255: end
; libsrc/fpu.pla: 0256: def sqrt
_P049 					; sqrt()
_C046 					; sqrt()
; libsrc/fpu.pla: 0257:     sane:saveZP()
; libsrc/fpu.pla: 0258:     return sane:restoreZP(sane:op1FP(FFEXT|FOSQRT, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F329 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$12			; CB	18
	!BYTE	$6A			; LAW	_D105+0
_F330 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F331 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F332 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0259: end
; libsrc/fpu.pla: 0260: def squared
_P050 					; squared()
_C047 					; squared()
; libsrc/fpu.pla: 0261:     sane:saveZP()
; libsrc/fpu.pla: 0262:     return sane:restoreZP(sane:op2FP(FFEXT|FOMUL, stackRegs[0], stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F333 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_D105+0
_F334 	!WORD	_D105+0		
	!BYTE	$34			; DUP
	!BYTE	$6A			; LAW	_X028+8
_F335 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F336 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0263: end
; libsrc/fpu.pla: 0264: def logb
_P045 					; logb()
_C048 					; logb()
; libsrc/fpu.pla: 0265:     sane:saveZP()
; libsrc/fpu.pla: 0266:     return sane:restoreZP(sane:op1FP(FFEXT|FOLOGB, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F337 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$6A			; LAW	_D105+0
_F338 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+6
_F339 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F340 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0267: end
; libsrc/fpu.pla: 0268: def scalb(scale)
					; scale -> [0]
_P046 					; scalb(scale)()
_C049 					; scalb()
; libsrc/fpu.pla: 0269:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0270:     return sane:restoreZP(sane:op2FP(FFEXT|FOSCALB, stackRegs[0], scale))
	!BYTE	$6A			; LAW	_X028+18
_F341 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$18			; CB	24
	!BYTE	$6A			; LAW	_D105+0
_F342 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+8
_F343 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F344 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0271: end
; libsrc/fpu.pla: 0272: //
; libsrc/fpu.pla: 0273: // Elems operations
; libsrc/fpu.pla: 0274: //
; libsrc/fpu.pla: 0275: def cos
_P051 					; cos()
_C050 					; cos()
; libsrc/fpu.pla: 0276:     sane:saveZP()
; libsrc/fpu.pla: 0277:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOCOSX, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F345 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1C			; CB	28
	!BYTE	$6A			; LAW	_D105+0
_F346 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F347 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F348 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0278: end
; libsrc/fpu.pla: 0279: def sin
_P052 					; sin()
_C051 					; sin()
; libsrc/fpu.pla: 0280:     sane:saveZP()
; libsrc/fpu.pla: 0281:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOSINX, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F349 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1A			; CB	26
	!BYTE	$6A			; LAW	_D105+0
_F350 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F351 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F352 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0282: end
; libsrc/fpu.pla: 0283: def tan
_P053 					; tan()
_C052 					; tan()
; libsrc/fpu.pla: 0284:     sane:saveZP()
; libsrc/fpu.pla: 0285:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOTANX, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F353 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1E			; CB	30
	!BYTE	$6A			; LAW	_D105+0
_F354 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F355 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F356 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0286: end
; libsrc/fpu.pla: 0287: def atan
_P054 					; atan()
_C053 					; atan()
; libsrc/fpu.pla: 0288:     sane:saveZP()
; libsrc/fpu.pla: 0289:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOATANX, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F357 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$18			; CB	24
	!BYTE	$6A			; LAW	_D105+0
_F358 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F359 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F360 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0290: end
; libsrc/fpu.pla: 0291: def log2X
_P055 					; log2X()
_C054 					; log2X()
; libsrc/fpu.pla: 0292:     sane:saveZP()
; libsrc/fpu.pla: 0293:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOLOG2X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F361 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$04			; CN	2
	!BYTE	$6A			; LAW	_D105+0
_F362 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F363 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F364 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0294: end
; libsrc/fpu.pla: 0295: def log21X
_P056 					; log21X()
_C055 					; log21X()
; libsrc/fpu.pla: 0296:     sane:saveZP()
; libsrc/fpu.pla: 0297:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOLOG21X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F365 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$0C			; CN	6
	!BYTE	$6A			; LAW	_D105+0
_F366 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F367 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F368 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0298: end
; libsrc/fpu.pla: 0299: def lnX
_P057 					; lnX()
_C056 					; lnX()
; libsrc/fpu.pla: 0300:     sane:saveZP()
; libsrc/fpu.pla: 0301:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOLNX, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F369 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D105+0
_F370 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F371 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F372 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0302: end
; libsrc/fpu.pla: 0303: def ln1X
_P058 					; ln1X()
_C057 					; ln1X()
; libsrc/fpu.pla: 0304:     sane:saveZP()
; libsrc/fpu.pla: 0305:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOLN1X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F373 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_D105+0
_F374 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F375 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F376 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0306: end
; libsrc/fpu.pla: 0307: def pow2X
_P059 					; pow2X()
_C058 					; pow2X()
; libsrc/fpu.pla: 0308:     sane:saveZP()
; libsrc/fpu.pla: 0309:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOEXP2X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F377 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$14			; CN	10
	!BYTE	$6A			; LAW	_D105+0
_F378 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F379 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F380 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0310: end
; libsrc/fpu.pla: 0311: def pow21X
_P060 					; pow21X()
_C059 					; pow21X()
; libsrc/fpu.pla: 0312:     sane:saveZP()
; libsrc/fpu.pla: 0313:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOEXP21X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F381 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$1C			; CN	14
	!BYTE	$6A			; LAW	_D105+0
_F382 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F383 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F384 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0314: end
; libsrc/fpu.pla: 0315: def powEX
_P061 					; powEX()
_C060 					; powEX()
; libsrc/fpu.pla: 0316:     sane:saveZP()
; libsrc/fpu.pla: 0317:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOEXPX, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F385 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$10			; CN	8
	!BYTE	$6A			; LAW	_D105+0
_F386 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F387 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F388 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0318: end
; libsrc/fpu.pla: 0319: def powE1X
_P062 					; powE1X()
_C061 					; powE1X()
; libsrc/fpu.pla: 0320:     sane:saveZP()
; libsrc/fpu.pla: 0321:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOEXP1X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F389 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$18			; CN	12
	!BYTE	$6A			; LAW	_D105+0
_F390 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F391 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F392 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0322: end
; libsrc/fpu.pla: 0323: def powE21X
_P063 					; powE21X()
_C062 					; powE21X()
; libsrc/fpu.pla: 0324:     sane:saveZP()
; libsrc/fpu.pla: 0325:     return sane:restoreZP(sane:op1ELEM(FFEXT|FOEXP21X, stackRegs[0]))
	!BYTE	$6A			; LAW	_X028+18
_F393 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$1C			; CN	14
	!BYTE	$6A			; LAW	_D105+0
_F394 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_X028+12
_F395 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F396 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0326:     end
; libsrc/fpu.pla: 0327: def powXInt(powInt)
					; powInt -> [0]
_P064 					; powXInt(powInt)()
_C063 					; powXInt()
; libsrc/fpu.pla: 0328:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0329:     return sane:restoreZP(sane:op2ELEM(FFEXT|FOXPWRI, stackRegs[0], powInt))
	!BYTE	$6A			; LAW	_X028+18
_F397 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$10			; CB	16
	!BYTE	$6A			; LAW	_D105+0
_F398 	!WORD	_D105+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+14
_F399 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F400 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0330: end
; libsrc/fpu.pla: 0331: def powXY
_P065 					; powXY()
_C064 					; powXY()
; libsrc/fpu.pla: 0332:     sane:saveZP()
; libsrc/fpu.pla: 0333:     return sane:restoreZP(_drop(_swap(sane:op2ELEM(FFEXT|FOXPWRY, stackRegs[0], stackRegs[1]))))
	!BYTE	$6A			; LAW	_X028+18
_F401 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$12			; CB	18
	!BYTE	$6A			; LAW	_D105+0
_F402 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F403 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_X028+14
_F404 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C012
_F405 	!WORD	_C012		
	!BYTE	$54			; CALL	_C010
_F406 	!WORD	_C010		
	!BYTE	$6A			; LAW	_X028+20
_F407 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0334: end
; libsrc/fpu.pla: 0335: def compXY
_P066 					; compXY()
_C065 					; compXY()
; libsrc/fpu.pla: 0336:     sane:saveZP()
; libsrc/fpu.pla: 0337:     return sane:restoreZP(_drop(_swap(sane:op2ELEM(FFEXT|FOCOMPND, stackRegs[0], stackRegs[1]))))
	!BYTE	$6A			; LAW	_X028+18
_F408 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$14			; CB	20
	!BYTE	$6A			; LAW	_D105+0
_F409 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F410 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_X028+14
_F411 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C012
_F412 	!WORD	_C012		
	!BYTE	$54			; CALL	_C010
_F413 	!WORD	_C010		
	!BYTE	$6A			; LAW	_X028+20
_F414 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0338: end
; libsrc/fpu.pla: 0339: def annuityXY
_P067 					; annuityXY()
_C066 					; annuityXY()
; libsrc/fpu.pla: 0340:     sane:saveZP()
; libsrc/fpu.pla: 0341:     return sane:restoreZP(_drop(_swap(sane:op2ELEM(FFEXT|FOANNUIT, stackRegs[0], stackRegs[1]))))
	!BYTE	$6A			; LAW	_X028+18
_F415 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$16			; CB	22
	!BYTE	$6A			; LAW	_D105+0
_F416 	!WORD	_D105+0		
	!BYTE	$6A			; LAW	_D105+2
_F417 	!WORD	_D105+2		
	!BYTE	$6A			; LAW	_X028+14
_F418 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_C012
_F419 	!WORD	_C012		
	!BYTE	$54			; CALL	_C010
_F420 	!WORD	_C010		
	!BYTE	$6A			; LAW	_X028+20
_F421 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0342: end
; libsrc/fpu.pla: 0343: def randNum(pSeed)
					; pSeed -> [0]
_P068 					; randNum(pSeed)()
_C067 					; randNum()
; libsrc/fpu.pla: 0344:     sane:saveZP()
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/fpu.pla: 0345:     return sane:restoreZP(sane:op1ELEM(FFEXT|FORANDX, pSeed))
	!BYTE	$6A			; LAW	_X028+18
_F422 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+12
_F423 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F424 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/fpu.pla: 0346: end
; libsrc/fpu.pla: 0347: //
; libsrc/fpu.pla: 0348: // Push useful constants
; libsrc/fpu.pla: 0349: //
; libsrc/fpu.pla: 0350: def constPi
_P007 					; constPi()
_C068 					; constPi()
; libsrc/fpu.pla: 0351:     return pushExt(@ext_pi)
	!BYTE	$26			; LA	_D102+0
_F425 	!WORD	_D102+0		
	!BYTE	$54			; CALL	_C027
_F426 	!WORD	_C027		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0352: end
; libsrc/fpu.pla: 0353: def constE
_P008 					; constE()
_C069 					; constE()
; libsrc/fpu.pla: 0354:     return pushExt(@ext_e)
	!BYTE	$26			; LA	_D103+0
_F427 	!WORD	_D103+0		
	!BYTE	$54			; CALL	_C027
_F428 	!WORD	_C027		
	!BYTE	$5C			; RET
; libsrc/fpu.pla: 0355: end
; libsrc/fpu.pla: 0356: //
; libsrc/fpu.pla: 0357: // Reset FPU and SANE
; libsrc/fpu.pla: 0358: //
; libsrc/fpu.pla: 0359: def reset
_P000 					; reset()
_C070 					; reset()
; libsrc/fpu.pla: 0360:     byte i
					; i -> [0]
; libsrc/fpu.pla: 0361:     word zero
					; zero -> [1]
; libsrc/fpu.pla: 0362: 
; libsrc/fpu.pla: 0363:     zero = 0
	!BYTE	$58,$03,$00		; ENTER	3,0
; libsrc/fpu.pla: 0364:     sane:initFP()
; libsrc/fpu.pla: 0365:     sane:saveZP()
; libsrc/fpu.pla: 0366:     for i = 0 to 3
	!BYTE	$00			; CN	0
	!BYTE	$76,$01			; SLW	[1]
	!BYTE	$6A			; LAW	_X028+0
_F429 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_X028+18
_F430 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$06			; CN	3
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6C,$00			; DLB	[0]
; libsrc/fpu.pla: 0367:         stackRegs[i] = @stack[i * t_extended]
; libsrc/fpu.pla: 0368:         sane:op2FP(FFINT|FOZ2X, stackRegs[i], @zero)
; libsrc/fpu.pla: 0369:     next
	!BYTE	$26			; LA	_D104+0
_F431 	!WORD	_D104+0		
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$82			; ADD 
	!BYTE	$26			; LA	_D105+0
_F432 	!WORD	_D105+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$72			; SW
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$26			; LA	_D105+0
_F433 	!WORD	_D105+0		
	!BYTE	$B8,$00			; IDXLB	[0]
	!BYTE	$62			; LW
	!BYTE	$28,$01			; LLA	[1]
	!BYTE	$6A			; LAW	_X028+8
_F434 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; libsrc/fpu.pla: 0370:     return sane:restoreZP(0)
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F435 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$03			; LEAVE	3
; libsrc/fpu.pla: 0371: end
; libsrc/fpu.pla: 0372: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	72
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C012		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C013		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C014		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C015		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C016		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C017		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C018		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C019		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C020		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C021		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C022		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C023		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C024		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C025		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C026		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C027		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C028		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C029		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C030		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C031		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C032		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C033		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C034		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C035		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C036		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C037		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C038		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C039		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C040		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C041		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C042		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C043		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C044		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C045		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C046		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C047		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C048		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C049		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C050		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C051		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C052		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C053		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C054		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C055		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C056		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C057		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C058		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C059		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C060		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C061		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C062		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C063		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C064		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C065		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C066		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C067		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C068		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C069		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C070		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F138-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F139-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F140-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F141-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F142-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F143-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F144-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F145-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F146-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F147-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F148-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F149-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F150-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F151-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F152-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F153-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F154-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F155-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F156-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F157-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F158-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F159-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F160-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F161-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F162-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F163-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F164-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F165-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F166-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F167-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F168-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F169-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F170-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F171-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F172-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F173-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F174-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F175-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F176-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F177-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F178-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F179-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F180-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F181-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F182-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F183-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F184-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F185-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F186-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F187-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F188-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F189-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F190-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F191-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F192-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F193-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F194-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F195-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F196-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F197-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F198-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F199-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F200-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F201-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F202-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F203-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F204-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F205-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F206-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F207-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F208-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F209-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F210-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F211-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F212-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F213-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F214-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F215-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F216-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F217-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F218-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F219-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F220-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F221-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F222-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F223-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F224-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F225-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F226-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F227-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F228-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F229-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F230-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F231-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F232-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F233-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F234-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F235-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F236-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F237-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F238-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F239-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F240-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F241-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F242-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F243-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F244-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F245-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F246-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F247-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F248-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F249-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F250-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F251-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F252-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F253-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F254-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F255-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F256-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F257-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F258-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F259-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F260-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F261-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F262-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F263-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F264-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F265-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F266-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F267-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F268-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F269-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F270-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F271-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F272-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F273-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F274-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F275-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F276-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F277-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F278-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F279-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F280-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F281-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F282-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F283-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F284-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F285-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F286-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F287-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F288-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F289-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F290-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F291-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F292-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F293-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F294-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F295-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F296-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F297-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F298-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F299-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F300-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F301-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F302-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F303-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F304-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F305-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F306-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F307-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F308-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F309-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F310-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F311-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F312-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F313-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F314-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F315-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F316-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F317-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F318-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F319-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F320-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F321-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F322-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F323-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F324-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F325-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F326-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F327-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F328-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F329-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F330-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F331-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F332-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F333-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F334-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F335-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F336-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F337-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F338-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F339-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F340-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F341-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F342-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F343-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F344-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F345-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F346-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F347-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F348-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F349-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F350-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F351-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F352-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F353-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F354-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F355-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F356-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F357-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F358-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F359-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F360-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F361-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F362-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F363-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F364-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F365-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F366-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F367-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F368-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F369-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F370-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F371-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F372-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F373-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F374-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F375-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F376-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F377-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F378-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F379-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F380-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F381-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F382-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F383-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F384-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F385-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F386-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F387-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F388-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F389-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F390-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F391-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F392-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F393-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F394-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F395-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F396-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F397-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F398-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F399-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F400-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F401-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F402-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F403-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F404-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F405-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F406-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F407-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F408-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F409-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F410-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F411-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F412-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F413-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F414-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F415-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F416-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F417-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F418-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F419-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F420-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F421-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F422-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F423-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F424-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F425-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F426-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F427-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F428-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F429-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F430-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F431-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F432-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F433-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F434-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F435-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: SANE
	!BYTE	$D3,$C1,$CE,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	; DCI STRING: STR2EXT
	!BYTE	$D3,$D4,$D2,$B2,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: EXT2STR
	!BYTE	$C5,$D8,$D4,$B2,$D3,$D4,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	!BYTE	$00			; END OF ESD
