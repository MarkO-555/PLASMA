; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/inet.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/inet.pla: 0001: 
; libsrc/inet.pla: 0002: include "inc/inet.plh"
; inc/inet.plh: 0001: //
; inc/inet.plh: 0002: // iNet API
; inc/inet.plh: 0003: //
; inc/inet.plh: 0004: import iNet
; inc/inet.plh: 0005: struc t_inet
; inc/inet.plh: 0006:     word initIP
					; initIP = 0
; inc/inet.plh: 0007:     word serviceIP
					; serviceIP = 2
; inc/inet.plh: 0008:     word openUDP
					; openUDP = 4
; inc/inet.plh: 0009:     word sendUDP
					; sendUDP = 6
; inc/inet.plh: 0010:     word closeUDP
					; closeUDP = 8
; inc/inet.plh: 0011:     word listenTCP
					; listenTCP = 10
; inc/inet.plh: 0012:     word connectTCP
					; connectTCP = 12
; inc/inet.plh: 0013:     word sendTCP
					; sendTCP = 14
; inc/inet.plh: 0014:     word closeTCP
					; closeTCP = 16
; inc/inet.plh: 0015:     word setInterfaceIP
					; setInterfaceIP = 18
; inc/inet.plh: 0016:     word getInterfaceHA
					; getInterfaceHA = 20
; inc/inet.plh: 0017:     word setDNS
					; setDNS = 22
; inc/inet.plh: 0018:     word resolveIP
					; resolveIP = 24
; inc/inet.plh: 0019:     word setCallback
					; setCallback = 26
; inc/inet.plh: 0020:     word setParam
					; setParam = 28
; inc/inet.plh: 0021: end
					; t_inet = 30
; inc/inet.plh: 0022: end
; libsrc/inet.pla: 0002: 
; libsrc/inet.pla: 0003: //
; libsrc/inet.pla: 0004: // DNS message
; libsrc/inet.pla: 0005: //
; libsrc/inet.pla: 0006: struc t_dnshdr
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/inet.pla: 0007:     word dnsID
					; dnsID = 0
; libsrc/inet.pla: 0008:     word dnsCode
					; dnsCode = 2
; libsrc/inet.pla: 0009:     word dnsQdCount
					; dnsQdCount = 4
; libsrc/inet.pla: 0010:     word dnsAnCount
					; dnsAnCount = 6
; libsrc/inet.pla: 0011:     word dnsNsCount
					; dnsNsCount = 8
; libsrc/inet.pla: 0012:     word dnsArCount
					; dnsArCount = 10
; libsrc/inet.pla: 0013: end
					; t_dnshdr = 12
; libsrc/inet.pla: 0014: //
; libsrc/inet.pla: 0015: // External interface to net class. Must be first.
; libsrc/inet.pla: 0016: //
; libsrc/inet.pla: 0017: res[t_inet] iNet
_D028 	!FILL	30			; iNet
; libsrc/inet.pla: 0018: //
; libsrc/inet.pla: 0019: // List of loadable network device drivers
; libsrc/inet.pla: 0020: //
; libsrc/inet.pla: 0021: byte netDrivers = "UTHERNET2"
_D029 					; netDrivers = "UTHERNET2"
	!BYTE	$09
	!BYTE	$55,$54,$48,$45,$52,$4E,$45,$54
	!BYTE	$32
; libsrc/inet.pla: 0022: byte            = "UTHERNET"
	!BYTE	$08
	!BYTE	$55,$54,$48,$45,$52,$4E,$45,$54
; libsrc/inet.pla: 0023: byte            = ""
	!BYTE	$00
; libsrc/inet.pla: 0024: word driver = @netDrivers
_D030 					; driver = @netDrivers
_F000 	!WORD	_D029
; libsrc/inet.pla: 0025: //
; libsrc/inet.pla: 0026: // DNS address (default to Google DNS)
; libsrc/inet.pla: 0027: //
; libsrc/inet.pla: 0028: byte[4] dns = 8,8,8,8
_D031 					; dns = 8,8,8,8
	!BYTE	$08
	!BYTE	$08
	!BYTE	$08
	!BYTE	$08
; libsrc/inet.pla: 0029: const DNS_QUERY  = 1
					; DNS_QUERY = 1
; libsrc/inet.pla: 0030: const DNS_ANSWER = 2
					; DNS_ANSWER = 2
; libsrc/inet.pla: 0031: byte stateDNS
_D032 	!FILL	1			; stateDNS
; libsrc/inet.pla: 0032: 
; libsrc/inet.pla: 0033: def iNetSetDNS(ipptr)
_SUBSEG 				; BYTECODE STARTS
					; ipptr -> [0]
_C000 					; iNetSetDNS()
; libsrc/inet.pla: 0034:     memcpy(@dns, ipptr, 4)
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/inet.pla: 0035:     return 0
	!BYTE	$26			; LA	_D031+0
_F001 	!WORD	_D031+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X018
_F002 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/inet.pla: 0036: end
; libsrc/inet.pla: 0037: 
; libsrc/inet.pla: 0038: //def dumpbytes(buf, len)
; libsrc/inet.pla: 0039: //    word i
; libsrc/inet.pla: 0040: //
; libsrc/inet.pla: 0041: //    for i = 0 to len - 1
; libsrc/inet.pla: 0042: //        putb(buf->[i])
; libsrc/inet.pla: 0043: //  if i & 7 == 7
; libsrc/inet.pla: 0044: //      putln
; libsrc/inet.pla: 0045: //  else
; libsrc/inet.pla: 0046: //      putc(' ')
; libsrc/inet.pla: 0047: //  fin
; libsrc/inet.pla: 0048: //    next
; libsrc/inet.pla: 0049: //end
; libsrc/inet.pla: 0050: //def putip(ipptr)
; libsrc/inet.pla: 0051: //    byte i
; libsrc/inet.pla: 0052: //
; libsrc/inet.pla: 0053: //    for i = 0 to 2
; libsrc/inet.pla: 0054: //        puti(ipptr->[i]); putc('.')
; libsrc/inet.pla: 0055: //    next
; libsrc/inet.pla: 0056: //    return puti(ipptr->[i])
; libsrc/inet.pla: 0057: //end
; libsrc/inet.pla: 0058: 
; libsrc/inet.pla: 0059: def parseIP(ipstr, ipaddr)
					; ipstr -> [0]
					; ipaddr -> [2]
_C001 					; parseIP()
; libsrc/inet.pla: 0060:     byte i
					; i -> [4]
; libsrc/inet.pla: 0061:     word endstr
					; endstr -> [5]
; libsrc/inet.pla: 0062: 
; libsrc/inet.pla: 0063:     endstr = ipstr + ^ipstr
	!BYTE	$58,$07,$02		; ENTER	7,2
; libsrc/inet.pla: 0064:     for i = 0 to 3
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$06			; CN	3
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6C,$04			; DLB	[4]
; libsrc/inet.pla: 0065:         ipstr = ipstr + 1
; libsrc/inet.pla: 0066:             while ^ipstr >= '0' and ^ipstr <= '9' and ipstr <= endstr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B004 
; libsrc/inet.pla: 0067:             ipaddr->[i] = ipaddr->[i] * 10 + ^ipstr - '0'
; libsrc/inet.pla: 0068:             ipstr = ipstr + 1
; libsrc/inet.pla: 0069:         loop
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$3A,$30			; SUBI	48
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$76,$00			; SLW	[0]
_B006 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B007
	!WORD	_B007-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
	!BYTE	$AC			; BRAND	_B008
	!WORD	_B008-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$4A			; ISLE
_B008 
_B007 
	!BYTE	$4E			; BRTRU	_B004
	!WORD	_B004-*
_B005 
; libsrc/inet.pla: 0070:         if ^ipstr <> '.' and ipstr < endstr
; libsrc/inet.pla: 0071:             return 0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$42			; ISNE
	!BYTE	$AC			; BRAND	_B009
	!WORD	_B009-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$46			; ISLT
_B009 
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$32			; DROP2
	!BYTE	$00			; CN	0
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/inet.pla: 0072:         fin
_B010 
_B011 
; libsrc/inet.pla: 0073:     next
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/inet.pla: 0074:     return i == 3
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$06			; CN	3
	!BYTE	$40			; ISEQ
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/inet.pla: 0075: end
; libsrc/inet.pla: 0076: 
; libsrc/inet.pla: 0077: def parseDomain(domstr, msgptr)
					; domstr -> [0]
					; msgptr -> [2]
_C002 					; parseDomain()
; libsrc/inet.pla: 0078:     byte i, l
					; i -> [4]
					; l -> [5]
; libsrc/inet.pla: 0079: 
; libsrc/inet.pla: 0080:     l = 0
	!BYTE	$58,$06,$02		; ENTER	6,2
; libsrc/inet.pla: 0081:     for i = 1 to ^domstr
	!BYTE	$00			; CN	0
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B012
	!WORD	_B012-*
_B013 
	!BYTE	$6C,$04			; DLB	[4]
; libsrc/inet.pla: 0082:         if domstr->[i] == '.'
; libsrc/inet.pla: 0083:             msgptr->[l] = i - l - 1
; libsrc/inet.pla: 0084:             l = i
; libsrc/inet.pla: 0085:         else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B015
	!WORD	_B015-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$84			; SUB 
	!BYTE	$8E			; DECR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$05			; ADDLB	[5]
	!BYTE	$70			; SB
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$50			; BRNCH	_B016
	!WORD	_B016-*
_B015 
; libsrc/inet.pla: 0086:             msgptr->[i] = domstr->[i]
; libsrc/inet.pla: 0087:         fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
_B016 
; libsrc/inet.pla: 0088:     next
_B014 
	!BYTE	$A4			; INCBRLE	_B013
	!WORD	_B013-*
_B012 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; libsrc/inet.pla: 0089:     msgptr->[l] = i - l - 1
; libsrc/inet.pla: 0090:     msgptr  = msgptr + i
; libsrc/inet.pla: 0091:     ^msgptr = 0 // Terminate label list
; libsrc/inet.pla: 0092:     return msgptr + 1
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$84			; SUB 
	!BYTE	$8E			; DECR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$05			; ADDLB	[5]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/inet.pla: 0093: end
; libsrc/inet.pla: 0094: 
; libsrc/inet.pla: 0095: def recvDNS(remip, remport, pkt, len, ipaddr)
					; remip -> [0]
					; remport -> [2]
					; pkt -> [4]
					; len -> [6]
					; ipaddr -> [8]
_C003 					; recvDNS()
; libsrc/inet.pla: 0096:     byte q, r
					; q -> [10]
					; r -> [11]
; libsrc/inet.pla: 0097:     word resptr
					; resptr -> [12]
; libsrc/inet.pla: 0098: 
; libsrc/inet.pla: 0099:     if pkt=>dnsID == $BEEF
	!BYTE	$58,$0E,$05		; ENTER	14,5
; libsrc/inet.pla: 0100:         q = pkt->dnsQdCount.1
; libsrc/inet.pla: 0101:         r = pkt->dnsAnCount.1 + pkt->dnsNsCount.1 + pkt->dnsArCount.1
; libsrc/inet.pla: 0102:         resptr = pkt + t_dnshdr
; libsrc/inet.pla: 0103:         while q
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$62			; LW
	!BYTE	$2C,$EF,$BE		; CW	48879
	!BYTE	$24			; BRNE	_B017
	!WORD	_B017-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$50			; BRNCH	_B021
	!WORD	_B021-*
_B019 
; libsrc/inet.pla: 0104:             while ^resptr
	!BYTE	$50			; BRNCH	_B024
	!WORD	_B024-*
_B022 
; libsrc/inet.pla: 0105:                 //puts(resptr); putc('.')
; libsrc/inet.pla: 0106:                 resptr = resptr + ^resptr + 1
; libsrc/inet.pla: 0107:             loop
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$76,$0C			; SLW	[12]
_B024 
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B022
	!WORD	_B022-*
_B023 
; libsrc/inet.pla: 0108:             resptr = resptr + 1
; libsrc/inet.pla: 0109:             //putln; dumpbytes(resptr, 4); putln
; libsrc/inet.pla: 0110:             resptr = resptr + 4
; libsrc/inet.pla: 0111:             q--
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$8E			; DECR
; libsrc/inet.pla: 0112:         loop
	!BYTE	$74,$0A			; SLB	[10]
_B021 
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$4E			; BRTRU	_B019
	!WORD	_B019-*
_B020 
; libsrc/inet.pla: 0113:         while r
	!BYTE	$50			; BRNCH	_B027
	!WORD	_B027-*
_B025 
; libsrc/inet.pla: 0114:             //dumpbytes(resptr, 40); putln
; libsrc/inet.pla: 0115:             if ^resptr & $C0 == $C0
; libsrc/inet.pla: 0116:                 resptr = resptr + 2
; libsrc/inet.pla: 0117:             else
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$60			; LB
	!BYTE	$3C,$C0			; ANDI	192
	!BYTE	$2A,$C0			; CB	192
	!BYTE	$24			; BRNE	_B028
	!WORD	_B028-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$50			; BRNCH	_B029
	!WORD	_B029-*
_B028 
; libsrc/inet.pla: 0118:                 while ^resptr
	!BYTE	$50			; BRNCH	_B032
	!WORD	_B032-*
_B030 
; libsrc/inet.pla: 0119:                     //puts(resptr); putc('.')
; libsrc/inet.pla: 0120:                     resptr = resptr + ^resptr + 1
; libsrc/inet.pla: 0121:                 loop
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$76,$0C			; SLW	[12]
_B032 
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B030
	!WORD	_B030-*
_B031 
; libsrc/inet.pla: 0122:                 resptr = resptr + 1
; libsrc/inet.pla: 0123:             fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$76,$0C			; SLW	[12]
_B029 
; libsrc/inet.pla: 0124:             if resptr->1 == 1 and resptr->3 == 1 and resptr->9 == 4
; libsrc/inet.pla: 0125:                 ipaddr=>0 = resptr=>10
; libsrc/inet.pla: 0126:                 ipaddr=>2 = resptr=>12
; libsrc/inet.pla: 0127:             fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B033
	!WORD	_B033-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B034
	!WORD	_B034-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$38,$09			; ADDI	9
	!BYTE	$60			; LB
	!BYTE	$08			; CN	4
	!BYTE	$40			; ISEQ
_B034 
_B033 
	!BYTE	$4C			; BRFLS	_B035
	!WORD	_B035-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$62			; LW
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$72			; SW
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$62			; LW
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
_B035 
_B036 
; libsrc/inet.pla: 0128:             //putln; dumpbytes(resptr, 10); putc(':'); putln
; libsrc/inet.pla: 0129:             resptr = resptr + 8
; libsrc/inet.pla: 0130:             //dumpbytes(resptr + 2, ^(resptr + 1))
; libsrc/inet.pla: 0131:             resptr = resptr + 2 + ^(resptr + 1); putln
; libsrc/inet.pla: 0132:             r--
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$54			; CALL	_X003
_F003 	!WORD	0		
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8E			; DECR
; libsrc/inet.pla: 0133:         loop
	!BYTE	$74,$0B			; SLB	[11]
_B027 
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$4E			; BRTRU	_B025
	!WORD	_B025-*
_B026 
; libsrc/inet.pla: 0134:     fin
_B017 
_B018 
; libsrc/inet.pla: 0135:     stateDNS = DNS_ANSWER
; libsrc/inet.pla: 0136:     return 0
	!BYTE	$04			; CN	2
	!BYTE	$78			; SAB	_D032+0
_F004 	!WORD	_D032+0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0E			; LEAVE	14
; libsrc/inet.pla: 0137: end
; libsrc/inet.pla: 0138: 
; libsrc/inet.pla: 0139: def iNetResolve(namestr, ipaddr)
					; namestr -> [0]
					; ipaddr -> [2]
_C004 					; iNetResolve()
; libsrc/inet.pla: 0140:     word dnspkt, msgptr, msglen
					; dnspkt -> [4]
					; msgptr -> [6]
					; msglen -> [8]
; libsrc/inet.pla: 0141:     word portDNS, timeout
					; portDNS -> [10]
					; timeout -> [12]
; libsrc/inet.pla: 0142: 
; libsrc/inet.pla: 0143:     ipaddr=>0 = 0
	!BYTE	$58,$0E,$02		; ENTER	14,2
; libsrc/inet.pla: 0144:     ipaddr=>2 = 0
; libsrc/inet.pla: 0145:     if not parseIP(namestr, ipaddr)
; libsrc/inet.pla: 0146:         //
; libsrc/inet.pla: 0147:         // Query Domain Name Server for address
; libsrc/inet.pla: 0148:         //
; libsrc/inet.pla: 0149:         dnspkt             = heapalloc(^namestr + t_dnshdr + 8) // Use heap as working DNS query packet
; libsrc/inet.pla: 0150:         msgptr             = dnspkt
; libsrc/inet.pla: 0151:         msgptr=>dnsID      = $BEEF
; libsrc/inet.pla: 0152:         msgptr=>dnsCode    = $0001 // RD (Recursion Desired)
; libsrc/inet.pla: 0153:         msgptr=>dnsQdCount = $0100 // BE count = 1
; libsrc/inet.pla: 0154:         msgptr=>dnsAnCount = 0
; libsrc/inet.pla: 0155:         msgptr=>dnsNsCount = 0
; libsrc/inet.pla: 0156:         msgptr=>dnsArCount = 0
; libsrc/inet.pla: 0157:         msgptr             = parseDomain(namestr, msgptr + t_dnshdr)
; libsrc/inet.pla: 0158:         msgptr=>0          = $0100 // BE TYPE  = Address
; libsrc/inet.pla: 0159:         msgptr=>2          = $0100 // BE CLASS = Internet
; libsrc/inet.pla: 0160:         msglen             = msgptr - dnspkt + 4
; libsrc/inet.pla: 0161:         //
; libsrc/inet.pla: 0162:         // Prepare to receive DNS answer from server
; libsrc/inet.pla: 0163:         //
; libsrc/inet.pla: 0164:         portDNS = iNet:openUDP(3999, @recvDNS, ipaddr)
; libsrc/inet.pla: 0165:         //
; libsrc/inet.pla: 0166:         // Service IP
; libsrc/inet.pla: 0167:         //
; libsrc/inet.pla: 0168:         stateDNS = DNS_QUERY
; libsrc/inet.pla: 0169:         iNet:sendUDP(portDNS, @dns, 53, dnspkt, msglen)
; libsrc/inet.pla: 0170:         for timeout = 1 to 1000
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C001
_F005 	!WORD	_C001		
	!BYTE	$4E			; BRTRU	_B037
	!WORD	_B037-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$54			; CALL	_X014
_F006 	!WORD	0		
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$2C,$EF,$BE		; CW	48879
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$72			; SW
	!BYTE	$02			; CN	1
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$0A			; ADDI	10
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$0C			; ADDI	12
	!BYTE	$54			; CALL	_C002
_F007 	!WORD	_C002		
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$72			; SW
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$84			; SUB 
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$2C,$9F,$0F		; CW	3999
	!BYTE	$26			; LA	_C003+0
_F008 	!WORD	_C003+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D028+4
_F009 	!WORD	_D028+4		
	!BYTE	$56			; ICAL
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D032+0
_F010 	!WORD	_D032+0		
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$26			; LA	_D031+0
_F011 	!WORD	_D031+0		
	!BYTE	$2A,$35			; CB	53
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$6A			; LAW	_D028+6
_F012 	!WORD	_D028+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$E8,$03		; CW	1000
	!BYTE	$02			; CN	1
_B040 
	!BYTE	$6E,$0C			; DLW	[12]
; libsrc/inet.pla: 0171:             iNet:serviceIP()
; libsrc/inet.pla: 0172:             if stateDNS == DNS_ANSWER
; libsrc/inet.pla: 0173:                 break
	!BYTE	$6A			; LAW	_D028+2
_F013 	!WORD	_D028+2		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D032+0
_F014 	!WORD	_D032+0		
	!BYTE	$04			; CN	2
	!BYTE	$24			; BRNE	_B042
	!WORD	_B042-*
	!BYTE	$50			; BRNCH	_B039
	!WORD	_B039-*
; libsrc/inet.pla: 0174:             fin
_B042 
_B043 
; libsrc/inet.pla: 0175:         next
_B041 
	!BYTE	$A4			; INCBRLE	_B040
	!WORD	_B040-*
_B039 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$30			; DROP 
; libsrc/inet.pla: 0176:         iNet:closeUDP(portDNS)
; libsrc/inet.pla: 0177:         heaprelease(dnspkt)
; libsrc/inet.pla: 0178:     fin
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$6A			; LAW	_D028+8
_F015 	!WORD	_D028+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X015
_F016 	!WORD	0		
	!BYTE	$30			; DROP 
_B037 
_B038 
; libsrc/inet.pla: 0179:     return ipaddr=>0 <> 0 or ipaddr=>2 <> 0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$62			; LW
	!BYTE	$AE			; BROR	_B044
	!WORD	_B044-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
_B044 
	!BYTE	$5A,$0E			; LEAVE	14
; libsrc/inet.pla: 0180: end
; libsrc/inet.pla: 0181: //
; libsrc/inet.pla: 0182: // Initialze network stack
; libsrc/inet.pla: 0183: //
; libsrc/inet.pla: 0184: def iNetInit
_C005 					; iNetInit()
; libsrc/inet.pla: 0185:     //
; libsrc/inet.pla: 0186:     // Look for net hardware
; libsrc/inet.pla: 0187:     //
; libsrc/inet.pla: 0188:     while ^driver
	!BYTE	$50			; BRNCH	_B047
	!WORD	_B047-*
_B045 
; libsrc/inet.pla: 0189:         if cmdsys:modexec(driver) >= 0
; libsrc/inet.pla: 0190:             //
; libsrc/inet.pla: 0191:             // Get an IP address
; libsrc/inet.pla: 0192:             //
; libsrc/inet.pla: 0193:             cmdsys:modexec("DHCP")
	!BYTE	$6A			; LAW	_D030+0
_F017 	!WORD	_D030+0		
	!BYTE	$6A			; LAW	_X000+6
_F018 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$00			; CN	0
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B048
	!WORD	_B048-*
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$44,$48,$43,$50
	!BYTE	$6A			; LAW	_X000+6
_F019 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
; libsrc/inet.pla: 0194:             iNet:resolveIP = @iNetResolve
; libsrc/inet.pla: 0195:             return @iNet
	!BYTE	$26			; LA	_C004+0
_F020 	!WORD	_C004+0		
	!BYTE	$7A			; SAW	_D028+24
_F021 	!WORD	_D028+24		
	!BYTE	$26			; LA	_D028+0
_F022 	!WORD	_D028+0		
	!BYTE	$5C			; RET
; libsrc/inet.pla: 0196:         fin
_B048 
_B049 
; libsrc/inet.pla: 0197:         driver = driver + ^driver + 1
; libsrc/inet.pla: 0198:     loop
	!BYTE	$6A			; LAW	_D030+0
_F023 	!WORD	_D030+0		
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$7A			; SAW	_D030+0
_F024 	!WORD	_D030+0		
_B047 
	!BYTE	$6A			; LAW	_D030+0
_F025 	!WORD	_D030+0		
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B045
	!WORD	_B045-*
_B046 
; libsrc/inet.pla: 0199:     puts("No network adapters found.\n")
	!BYTE	$2E			; CS
	!BYTE	$1B
	!BYTE	$4E,$6F,$20,$6E,$65,$74,$77,$6F
	!BYTE	$72,$6B,$20,$61,$64,$61,$70,$74
	!BYTE	$65,$72,$73,$20,$66,$6F,$75,$6E
	!BYTE	$64,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F026 	!WORD	0		
; libsrc/inet.pla: 0200:     return NULL
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; libsrc/inet.pla: 0201: end
; libsrc/inet.pla: 0202: //
; libsrc/inet.pla: 0203: // Fill iNet class
; libsrc/inet.pla: 0204: //
; libsrc/inet.pla: 0205: iNet:initIP = @iNetInit
_INIT 
; libsrc/inet.pla: 0206: iNet:setDNS = @iNetSetDNS
; libsrc/inet.pla: 0207: done
	!BYTE	$26			; LA	_C005+0
_F027 	!WORD	_C005+0		
	!BYTE	$7A			; SAW	_D028+0
_F028 	!WORD	_D028+0		
	!BYTE	$26			; LA	_C000+0
_F029 	!WORD	_C000+0		
	!BYTE	$7A			; SAW	_D028+22
_F030 	!WORD	_D028+22		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	!BYTE	$00			; END OF ESD
