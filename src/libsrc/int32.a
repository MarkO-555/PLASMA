; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/int32.pla: 0001: //
; libsrc/int32.pla: 0002: // 32 bit integer math routines
; libsrc/int32.pla: 0003: //
; libsrc/int32.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/int32.pla: 0004: 
; libsrc/int32.pla: 0005: const t_i32 = 4
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; t_i32 = 4
; libsrc/int32.pla: 0006: //
; libsrc/int32.pla: 0007: // Include zero page definitions
; libsrc/int32.pla: 0008: //
; libsrc/int32.pla: 0009: asm int32Inc
_A000 					; int32Inc()
; libsrc/int32.pla: 0010:     !SOURCE "vmsrc/plvmzp.inc"
    !SOURCE "vmsrc/plvmzp.inc"
; libsrc/int32.pla: 0011: ACCUM32 =       DSTH+1
ACCUM32 =       DSTH+1
; libsrc/int32.pla: 0012: DVSIGN  =       TMP+3
DVSIGN  =       TMP+3
; libsrc/int32.pla: 0013: end
; libsrc/int32.pla: 0014: export asm zero32#0
_A001 					; zero32()
; libsrc/int32.pla: 0015:         LDA     #$00
        LDA     #$00
; libsrc/int32.pla: 0016:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0017:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0018:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0019:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0020:         RTS
        RTS
; libsrc/int32.pla: 0021: end
; libsrc/int32.pla: 0022: export asm zext16to32#0
_A002 					; zext16to32()
; libsrc/int32.pla: 0023:         LDA     #$00
        LDA     #$00
; libsrc/int32.pla: 0024:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0025:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0026:         RTS
        RTS
; libsrc/int32.pla: 0027: end
; libsrc/int32.pla: 0028: export asm neg32#0
_A003 					; neg32()
; libsrc/int32.pla: 0029:         LDA     #$00
        LDA     #$00
; libsrc/int32.pla: 0030:         SEC
        SEC
; libsrc/int32.pla: 0031:         SBC     ACCUM32+0
        SBC     ACCUM32+0
; libsrc/int32.pla: 0032:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0033:         LDA     #$00
        LDA     #$00
; libsrc/int32.pla: 0034:         SBC     ACCUM32+1
        SBC     ACCUM32+1
; libsrc/int32.pla: 0035:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0036:         LDA     #$00
        LDA     #$00
; libsrc/int32.pla: 0037:         SBC     ACCUM32+2
        SBC     ACCUM32+2
; libsrc/int32.pla: 0038:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0039:         LDA     #$00
        LDA     #$00
; libsrc/int32.pla: 0040:         SBC     ACCUM32+3
        SBC     ACCUM32+3
; libsrc/int32.pla: 0041:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0042:         RTS
        RTS
; libsrc/int32.pla: 0043: end
; libsrc/int32.pla: 0044: export asm load32(i32ptr)#0
_A004 					; load32()
; libsrc/int32.pla: 0045:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0046:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0047:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0048:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0049:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0050:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0051:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0052:         INY
        INY
; libsrc/int32.pla: 0053:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0054:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0055:         INY
        INY
; libsrc/int32.pla: 0056:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0057:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0058:         INY
        INY
; libsrc/int32.pla: 0059:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0060:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0061:         INX
        INX
; libsrc/int32.pla: 0062:         RTS
        RTS
; libsrc/int32.pla: 0063: end
; libsrc/int32.pla: 0064: export asm loadi16(imm16)#0
_A005 					; loadi16()
; libsrc/int32.pla: 0065:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0066:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0067:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0068:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0069:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0070:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0071:         DEY
        DEY
; libsrc/int32.pla: 0072: +       STY     ACCUM32+2
+       STY     ACCUM32+2
; libsrc/int32.pla: 0073:         STY     ACCUM32+3
        STY     ACCUM32+3
; libsrc/int32.pla: 0074:         INX
        INX
; libsrc/int32.pla: 0075:         RTS
        RTS
; libsrc/int32.pla: 0076: end
; libsrc/int32.pla: 0077: export asm store32(i32ptr)#0
_A006 					; store32()
; libsrc/int32.pla: 0078:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0079:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0080:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0081:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0082:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0083:         LDA     ACCUM32+0
        LDA     ACCUM32+0
; libsrc/int32.pla: 0084:         STA     (TMP),Y
        STA     (TMP),Y
; libsrc/int32.pla: 0085:         INY
        INY
; libsrc/int32.pla: 0086:         LDA     ACCUM32+1
        LDA     ACCUM32+1
; libsrc/int32.pla: 0087:         STA     (TMP),Y
        STA     (TMP),Y
; libsrc/int32.pla: 0088:         INY
        INY
; libsrc/int32.pla: 0089:         LDA     ACCUM32+2
        LDA     ACCUM32+2
; libsrc/int32.pla: 0090:         STA     (TMP),Y
        STA     (TMP),Y
; libsrc/int32.pla: 0091:         INY
        INY
; libsrc/int32.pla: 0092:         LDA     ACCUM32+3
        LDA     ACCUM32+3
; libsrc/int32.pla: 0093:         STA     (TMP),Y
        STA     (TMP),Y
; libsrc/int32.pla: 0094:         INX
        INX
; libsrc/int32.pla: 0095:         RTS
        RTS
; libsrc/int32.pla: 0096: end
; libsrc/int32.pla: 0097: export asm add32(i32ptr)#0
_A007 					; add32()
; libsrc/int32.pla: 0098:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0099:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0100:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0101:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0102:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0103:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0104:         CLC
        CLC
; libsrc/int32.pla: 0105:         ADC     ACCUM32+0
        ADC     ACCUM32+0
; libsrc/int32.pla: 0106:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0107:         INY
        INY
; libsrc/int32.pla: 0108:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0109:         ADC     ACCUM32+1
        ADC     ACCUM32+1
; libsrc/int32.pla: 0110:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0111:         INY
        INY
; libsrc/int32.pla: 0112:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0113:         ADC     ACCUM32+2
        ADC     ACCUM32+2
; libsrc/int32.pla: 0114:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0115:         INY
        INY
; libsrc/int32.pla: 0116:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0117:         ADC     ACCUM32+3
        ADC     ACCUM32+3
; libsrc/int32.pla: 0118:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0119:         INX
        INX
; libsrc/int32.pla: 0120:         RTS
        RTS
; libsrc/int32.pla: 0121: end
; libsrc/int32.pla: 0122: export asm addi16(imm16)#0
_A008 					; addi16()
; libsrc/int32.pla: 0123:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0124:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0125:         CLC
        CLC
; libsrc/int32.pla: 0126:         ADC     ACCUM32+0
        ADC     ACCUM32+0
; libsrc/int32.pla: 0127:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0128:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0129:         BPL     +
        BPL     +
; libsrc/int32.pla: 0130:         DEY
        DEY
; libsrc/int32.pla: 0131: +       ADC     ACCUM32+1
+       ADC     ACCUM32+1
; libsrc/int32.pla: 0132:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0133:         TYA
        TYA
; libsrc/int32.pla: 0134:         ADC     ACCUM32+2
        ADC     ACCUM32+2
; libsrc/int32.pla: 0135:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0136:         TYA
        TYA
; libsrc/int32.pla: 0137:         ADC     ACCUM32+3
        ADC     ACCUM32+3
; libsrc/int32.pla: 0138:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0139:         INX
        INX
; libsrc/int32.pla: 0140:         RTS
        RTS
; libsrc/int32.pla: 0141: end
; libsrc/int32.pla: 0142: export asm sub32(i32ptr)#0
_A009 					; sub32()
; libsrc/int32.pla: 0143:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0144:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0145:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0146:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0147:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0148: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0149:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0150:         DEY
        DEY
; libsrc/int32.pla: 0151:         BPL     -
        BPL     -
; libsrc/int32.pla: 0152:         BMI     _SUB
        BMI     _SUB
; libsrc/int32.pla: 0153: end
; libsrc/int32.pla: 0154: export asm subi16(imm16)#0
_A010 					; subi16()
; libsrc/int32.pla: 0155:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0156:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0157:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0158:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0159:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0160:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0161:         DEY
        DEY
; libsrc/int32.pla: 0162: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0163:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0164: _SUB    LDA     ACCUM32+0
_SUB    LDA     ACCUM32+0
; libsrc/int32.pla: 0165:         SEC
        SEC
; libsrc/int32.pla: 0166:         SBC     SRC+0
        SBC     SRC+0
; libsrc/int32.pla: 0167:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0168:         LDA     ACCUM32+1
        LDA     ACCUM32+1
; libsrc/int32.pla: 0169:         SBC     SRC+1
        SBC     SRC+1
; libsrc/int32.pla: 0170:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0171:         LDA     ACCUM32+2
        LDA     ACCUM32+2
; libsrc/int32.pla: 0172:         SBC     SRC+2
        SBC     SRC+2
; libsrc/int32.pla: 0173:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0174:         LDA     ACCUM32+3
        LDA     ACCUM32+3
; libsrc/int32.pla: 0175:         SBC     SRC+3
        SBC     SRC+3
; libsrc/int32.pla: 0176:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0177:         INX
        INX
; libsrc/int32.pla: 0178:         RTS
        RTS
; libsrc/int32.pla: 0179: end
; libsrc/int32.pla: 0180: export asm shl32(imm8)#0
_A011 					; shl32()
; libsrc/int32.pla: 0181:         LDA     ESTKL+0,X       ; IMM8
        LDA     ESTKL+0,X       ; IMM8
; libsrc/int32.pla: 0182:         AND     #$1F
        AND     #$1F
; libsrc/int32.pla: 0183:         CMP     #16
        CMP     #16
; libsrc/int32.pla: 0184:         BCC     +
        BCC     +
; libsrc/int32.pla: 0185:         LDY     ACCUM32+1
        LDY     ACCUM32+1
; libsrc/int32.pla: 0186:         STY     ACCUM32+3
        STY     ACCUM32+3
; libsrc/int32.pla: 0187:         LDY     ACCUM32+0
        LDY     ACCUM32+0
; libsrc/int32.pla: 0188:         STY     ACCUM32+2
        STY     ACCUM32+2
; libsrc/int32.pla: 0189:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0190:         STY     ACCUM32+1
        STY     ACCUM32+1
; libsrc/int32.pla: 0191:         STY     ACCUM32+0
        STY     ACCUM32+0
; libsrc/int32.pla: 0192:         SBC     #16
        SBC     #16
; libsrc/int32.pla: 0193: +       CMP     #8
+       CMP     #8
; libsrc/int32.pla: 0194:         BCC     +
        BCC     +
; libsrc/int32.pla: 0195:         LDY     ACCUM32+2
        LDY     ACCUM32+2
; libsrc/int32.pla: 0196:         STY     ACCUM32+3
        STY     ACCUM32+3
; libsrc/int32.pla: 0197:         LDY     ACCUM32+1
        LDY     ACCUM32+1
; libsrc/int32.pla: 0198:         STY     ACCUM32+2
        STY     ACCUM32+2
; libsrc/int32.pla: 0199:         LDY     ACCUM32+0
        LDY     ACCUM32+0
; libsrc/int32.pla: 0200:         STY     ACCUM32+1
        STY     ACCUM32+1
; libsrc/int32.pla: 0201:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0202:         STY     ACCUM32+0
        STY     ACCUM32+0
; libsrc/int32.pla: 0203:         SBC     #8
        SBC     #8
; libsrc/int32.pla: 0204: +       TAY
+       TAY
; libsrc/int32.pla: 0205:         BEQ     ++
        BEQ     ++
; libsrc/int32.pla: 0206: -       ASL     ACCUM32+0
-       ASL     ACCUM32+0
; libsrc/int32.pla: 0207:         ROL     ACCUM32+1
        ROL     ACCUM32+1
; libsrc/int32.pla: 0208:         ROL     ACCUM32+2
        ROL     ACCUM32+2
; libsrc/int32.pla: 0209:         ROL     ACCUM32+3
        ROL     ACCUM32+3
; libsrc/int32.pla: 0210:         DEY
        DEY
; libsrc/int32.pla: 0211:         BNE     -
        BNE     -
; libsrc/int32.pla: 0212: ++      INX
++      INX
; libsrc/int32.pla: 0213:         RTS
        RTS
; libsrc/int32.pla: 0214: end
; libsrc/int32.pla: 0215: export asm shr32(imm8)#0
_A012 					; shr32()
; libsrc/int32.pla: 0216:         LDA     ESTKL+0,X       ; IMM8
        LDA     ESTKL+0,X       ; IMM8
; libsrc/int32.pla: 0217:         AND     #$1F
        AND     #$1F
; libsrc/int32.pla: 0218:         BEQ     +
        BEQ     +
; libsrc/int32.pla: 0219:         TAY
        TAY
; libsrc/int32.pla: 0220:         LDA     #$80
        LDA     #$80
; libsrc/int32.pla: 0221: -       CMP     ACCUM32
-       CMP     ACCUM32
; libsrc/int32.pla: 0222:         ROR     ACCUM32+3
        ROR     ACCUM32+3
; libsrc/int32.pla: 0223:         ROR     ACCUM32+2
        ROR     ACCUM32+2
; libsrc/int32.pla: 0224:         ROR     ACCUM32+1
        ROR     ACCUM32+1
; libsrc/int32.pla: 0225:         ROR     ACCUM32+0
        ROR     ACCUM32+0
; libsrc/int32.pla: 0226:         DEY
        DEY
; libsrc/int32.pla: 0227:         BNE     -
        BNE     -
; libsrc/int32.pla: 0228: +       INX
+       INX
; libsrc/int32.pla: 0229:         RTS
        RTS
; libsrc/int32.pla: 0230: end
; libsrc/int32.pla: 0231: export asm mul32(i32ptr)#0
_A013 					; mul32()
; libsrc/int32.pla: 0232:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0233:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0234:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0235:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0236:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0237: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0238:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0239:         DEY
        DEY
; libsrc/int32.pla: 0240:         BPL     -
        BPL     -
; libsrc/int32.pla: 0241:         INY
        INY
; libsrc/int32.pla: 0242:         BEQ     _MUL
        BEQ     _MUL
; libsrc/int32.pla: 0243: end
; libsrc/int32.pla: 0244: export asm muli16(imm16)#0
_A014 					; muli16()
; libsrc/int32.pla: 0245:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0246:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0247:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0248:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0249:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0250:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0251:         DEY
        DEY
; libsrc/int32.pla: 0252: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0253:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0254:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0255: _MUL    LDA     ACCUM32+0
_MUL    LDA     ACCUM32+0
; libsrc/int32.pla: 0256:         STA     ESTKL-1,X
        STA     ESTKL-1,X
; libsrc/int32.pla: 0257:         LDA     ACCUM32+1
        LDA     ACCUM32+1
; libsrc/int32.pla: 0258:         STA     ESTKH-1,X
        STA     ESTKH-1,X
; libsrc/int32.pla: 0259:         LDA     ACCUM32+2
        LDA     ACCUM32+2
; libsrc/int32.pla: 0260:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/int32.pla: 0261:         LDA     ACCUM32+3
        LDA     ACCUM32+3
; libsrc/int32.pla: 0262:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/int32.pla: 0263:         STY     ACCUM32+0
        STY     ACCUM32+0
; libsrc/int32.pla: 0264:         STY     ACCUM32+1
        STY     ACCUM32+1
; libsrc/int32.pla: 0265:         STY     ACCUM32+2
        STY     ACCUM32+2
; libsrc/int32.pla: 0266:         STY     ACCUM32+3
        STY     ACCUM32+3
; libsrc/int32.pla: 0267:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0268:         LDA     #$80
        LDA     #$80
; libsrc/int32.pla: 0269:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0270: -       AND     SRC,Y
-       AND     SRC,Y
; libsrc/int32.pla: 0271:         BEQ     +
        BEQ     +
; libsrc/int32.pla: 0272:         CLC
        CLC
; libsrc/int32.pla: 0273:         LDA     ESTKL-1,X
        LDA     ESTKL-1,X
; libsrc/int32.pla: 0274:         ADC     ACCUM32+0
        ADC     ACCUM32+0
; libsrc/int32.pla: 0275:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0276:         LDA     ESTKH-1,X
        LDA     ESTKH-1,X
; libsrc/int32.pla: 0277:         ADC     ACCUM32+1
        ADC     ACCUM32+1
; libsrc/int32.pla: 0278:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0279:         LDA     ESTKL+0,X
        LDA     ESTKL+0,X
; libsrc/int32.pla: 0280:         ADC     ACCUM32+2
        ADC     ACCUM32+2
; libsrc/int32.pla: 0281:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0282:         LDA     ESTKH+0,X
        LDA     ESTKH+0,X
; libsrc/int32.pla: 0283:         ADC     ACCUM32+3
        ADC     ACCUM32+3
; libsrc/int32.pla: 0284:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0285: +       LSR     TMPL
+       LSR     TMPL
; libsrc/int32.pla: 0286:         BCC     +
        BCC     +
; libsrc/int32.pla: 0287:         DEY
        DEY
; libsrc/int32.pla: 0288:         BMI     ++
        BMI     ++
; libsrc/int32.pla: 0289:         ROR     TMPL
        ROR     TMPL
; libsrc/int32.pla: 0290: +       ASL     ACCUM32+0
+       ASL     ACCUM32+0
; libsrc/int32.pla: 0291:         ROL     ACCUM32+1
        ROL     ACCUM32+1
; libsrc/int32.pla: 0292:         ROL     ACCUM32+2
        ROL     ACCUM32+2
; libsrc/int32.pla: 0293:         ROL     ACCUM32+3
        ROL     ACCUM32+3
; libsrc/int32.pla: 0294:         LDA     TMPL
        LDA     TMPL
; libsrc/int32.pla: 0295:         BNE     -
        BNE     -
; libsrc/int32.pla: 0296: ++      INX
++      INX
; libsrc/int32.pla: 0297:         RTS
        RTS
; libsrc/int32.pla: 0298: end
; libsrc/int32.pla: 0299: export asm div32(i32ptr)#2
_A015 					; div32()
; libsrc/int32.pla: 0300:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0301:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0302:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0303:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0304:         LDY     #$03            ; DVSR = SRC..SRC+3
        LDY     #$03            ; DVSR = SRC..SRC+3
; libsrc/int32.pla: 0305:         LDA     (TMP),Y
        LDA     (TMP),Y
; libsrc/int32.pla: 0306:         BMI     +
        BMI     +
; libsrc/int32.pla: 0307:         STA     SRC+3
        STA     SRC+3
; libsrc/int32.pla: 0308:         DEY
        DEY
; libsrc/int32.pla: 0309: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0310:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0311:         DEY
        DEY
; libsrc/int32.pla: 0312:         BPL     -
        BPL     -
; libsrc/int32.pla: 0313:         INY
        INY
; libsrc/int32.pla: 0314:         BEQ     _DIV
        BEQ     _DIV
; libsrc/int32.pla: 0315: +       SEC
+       SEC
; libsrc/int32.pla: 0316: -       LDA     #$00
-       LDA     #$00
; libsrc/int32.pla: 0317:         SBC     (TMP),Y
        SBC     (TMP),Y
; libsrc/int32.pla: 0318:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0319:         DEY
        DEY
; libsrc/int32.pla: 0320:         BPL     -
        BPL     -
; libsrc/int32.pla: 0321:         LDY     #$01
        LDY     #$01
; libsrc/int32.pla: 0322:         BNE     _DIV
        BNE     _DIV
; libsrc/int32.pla: 0323: end
; libsrc/int32.pla: 0324: export asm divi16(imm16)#2
_A016 					; divi16()
; libsrc/int32.pla: 0325:         LDY     #$00            ; DVSR = SRC..SRC+3
        LDY     #$00            ; DVSR = SRC..SRC+3
; libsrc/int32.pla: 0326:         STY     SRC+2
        STY     SRC+2
; libsrc/int32.pla: 0327:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0328:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0329:         BPL     +
        BPL     +
; libsrc/int32.pla: 0330:         TYA                     ; DVSR IS NEG
        TYA                     ; DVSR IS NEG
; libsrc/int32.pla: 0331:         SEC
        SEC
; libsrc/int32.pla: 0332:         SBC     ESTKL+0,X       ; IMM16L
        SBC     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0333:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0334:         TYA
        TYA
; libsrc/int32.pla: 0335:         SBC     ESTKH+0,X       ; IMM16L
        SBC     ESTKH+0,X       ; IMM16L
; libsrc/int32.pla: 0336:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0337:         INY
        INY
; libsrc/int32.pla: 0338:         BNE     _DIV
        BNE     _DIV
; libsrc/int32.pla: 0339: +       STA     SRC+1
+       STA     SRC+1
; libsrc/int32.pla: 0340:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0341:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0342: _DIV    STY     DVSIGN          ; LSB = SIGN OF DVSR
_DIV    STY     DVSIGN          ; LSB = SIGN OF DVSR
; libsrc/int32.pla: 0343:         DEX                     ; REMNDR = ESTK..ESTK+1
        DEX                     ; REMNDR = ESTK..ESTK+1
; libsrc/int32.pla: 0344:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0345:         STY     ESTKL+0,X
        STY     ESTKL+0,X
; libsrc/int32.pla: 0346:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/int32.pla: 0347:         STY     ESTKL+1,X
        STY     ESTKL+1,X
; libsrc/int32.pla: 0348:         STY     ESTKH+1,X
        STY     ESTKH+1,X
; libsrc/int32.pla: 0349:         LDA     SRC+0           ; DIVIDE BY 0?
        LDA     SRC+0           ; DIVIDE BY 0?
; libsrc/int32.pla: 0350:         ORA     SRC+1
        ORA     SRC+1
; libsrc/int32.pla: 0351:         ORA     SRC+2
        ORA     SRC+2
; libsrc/int32.pla: 0352:         ORA     SRC+3
        ORA     SRC+3
; libsrc/int32.pla: 0353:         BNE     +
        BNE     +
; libsrc/int32.pla: 0354:         STA     ACCUM32+0       ; SET TO 0 AND EXIT
        STA     ACCUM32+0       ; SET TO 0 AND EXIT
; libsrc/int32.pla: 0355:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0356:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0357:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0358: -       RTS
-       RTS
; libsrc/int32.pla: 0359: +       LDA     ACCUM32+0       ; DIVIDE 0?
+       LDA     ACCUM32+0       ; DIVIDE 0?
; libsrc/int32.pla: 0360:         ORA     ACCUM32+1
        ORA     ACCUM32+1
; libsrc/int32.pla: 0361:         ORA     ACCUM32+2
        ORA     ACCUM32+2
; libsrc/int32.pla: 0362:         ORA     ACCUM32+3
        ORA     ACCUM32+3
; libsrc/int32.pla: 0363:         BEQ     -        
        BEQ     -        
; libsrc/int32.pla: 0364:         LDA     ACCUM32+3       ; DVDND = ACCUM32
        LDA     ACCUM32+3       ; DVDND = ACCUM32
; libsrc/int32.pla: 0365:         BPL     +
        BPL     +
; libsrc/int32.pla: 0366:         LDA     #$81            ; DVDND IS NEG
        LDA     #$81            ; DVDND IS NEG
; libsrc/int32.pla: 0367:         CLC
        CLC
; libsrc/int32.pla: 0368:         ADC     DVSIGN
        ADC     DVSIGN
; libsrc/int32.pla: 0369:         STA     DVSIGN
        STA     DVSIGN
; libsrc/int32.pla: 0370:         TYA
        TYA
; libsrc/int32.pla: 0371:         SEC
        SEC
; libsrc/int32.pla: 0372:         SBC     ACCUM32+0
        SBC     ACCUM32+0
; libsrc/int32.pla: 0373:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0374:         TYA
        TYA
; libsrc/int32.pla: 0375:         SBC     ACCUM32+1
        SBC     ACCUM32+1
; libsrc/int32.pla: 0376:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0377:         TYA
        TYA
; libsrc/int32.pla: 0378:         SBC     ACCUM32+2
        SBC     ACCUM32+2
; libsrc/int32.pla: 0379:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0380:         TYA
        TYA
; libsrc/int32.pla: 0381:         SBC     ACCUM32+3
        SBC     ACCUM32+3
; libsrc/int32.pla: 0382:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0383: +       LDY     #$21            ; #BITS+1
+       LDY     #$21            ; #BITS+1
; libsrc/int32.pla: 0384: -       ASL     ACCUM32+0       ; SKIP DVDND LEADING 0 BITS
-       ASL     ACCUM32+0       ; SKIP DVDND LEADING 0 BITS
; libsrc/int32.pla: 0385:         ROL     ACCUM32+1
        ROL     ACCUM32+1
; libsrc/int32.pla: 0386:         ROL     ACCUM32+2
        ROL     ACCUM32+2
; libsrc/int32.pla: 0387:         ROL     ACCUM32+3
        ROL     ACCUM32+3
; libsrc/int32.pla: 0388:         DEY
        DEY
; libsrc/int32.pla: 0389:         BCC     -
        BCC     -
; libsrc/int32.pla: 0390: -       ROL     ESTKL+0,X       ; REMNDR
-       ROL     ESTKL+0,X       ; REMNDR
; libsrc/int32.pla: 0391:         ROL     ESTKH+0,X
        ROL     ESTKH+0,X
; libsrc/int32.pla: 0392:         ROL     ESTKL+1,X
        ROL     ESTKL+1,X
; libsrc/int32.pla: 0393:         ROL     ESTKH+1,X
        ROL     ESTKH+1,X
; libsrc/int32.pla: 0394:         LDA     ESTKL+0,X       ; REMNDR
        LDA     ESTKL+0,X       ; REMNDR
; libsrc/int32.pla: 0395:         CMP     SRC+0           ; DVSR
        CMP     SRC+0           ; DVSR
; libsrc/int32.pla: 0396:         LDA     ESTKH+0,X       ; COMPARE
        LDA     ESTKH+0,X       ; COMPARE
; libsrc/int32.pla: 0397:         SBC     SRC+1
        SBC     SRC+1
; libsrc/int32.pla: 0398:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/int32.pla: 0399:         SBC     SRC+2
        SBC     SRC+2
; libsrc/int32.pla: 0400:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/int32.pla: 0401:         SBC     SRC+3
        SBC     SRC+3
; libsrc/int32.pla: 0402:         BCC     +               ; IS LESS THAN?
        BCC     +               ; IS LESS THAN?
; libsrc/int32.pla: 0403:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/int32.pla: 0404:         LDA     ESTKL+0,X       ; REMNDR
        LDA     ESTKL+0,X       ; REMNDR
; libsrc/int32.pla: 0405:         SBC     SRC+0           ; DVSR
        SBC     SRC+0           ; DVSR
; libsrc/int32.pla: 0406:         STA     ESTKL+0,X       ; SUBTRACT
        STA     ESTKL+0,X       ; SUBTRACT
; libsrc/int32.pla: 0407:         LDA     ESTKH+0,X
        LDA     ESTKH+0,X
; libsrc/int32.pla: 0408:         SBC     SRC+1
        SBC     SRC+1
; libsrc/int32.pla: 0409:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/int32.pla: 0410:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/int32.pla: 0411:         SBC     SRC+2
        SBC     SRC+2
; libsrc/int32.pla: 0412:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/int32.pla: 0413:         SEC
        SEC
; libsrc/int32.pla: 0414: +       ROL     ACCUM32+0       ; DVDND
+       ROL     ACCUM32+0       ; DVDND
; libsrc/int32.pla: 0415:         ROL     ACCUM32+1       ; ROTATE IN RESULT
        ROL     ACCUM32+1       ; ROTATE IN RESULT
; libsrc/int32.pla: 0416:         ROL     ACCUM32+2
        ROL     ACCUM32+2
; libsrc/int32.pla: 0417:         ROL     ACCUM32+3
        ROL     ACCUM32+3
; libsrc/int32.pla: 0418:         DEY
        DEY
; libsrc/int32.pla: 0419:         BNE     -
        BNE     -
; libsrc/int32.pla: 0420:         LDA     DVSIGN          ; SET SIGNS OF RESULTS
        LDA     DVSIGN          ; SET SIGNS OF RESULTS
; libsrc/int32.pla: 0421:         BPL     +
        BPL     +
; libsrc/int32.pla: 0422:         TYA
        TYA
; libsrc/int32.pla: 0423:         SEC
        SEC
; libsrc/int32.pla: 0424:         SBC     ESTKL+0,X
        SBC     ESTKL+0,X
; libsrc/int32.pla: 0425:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/int32.pla: 0426:         TYA
        TYA
; libsrc/int32.pla: 0427:         SBC     ESTKH+0,X
        SBC     ESTKH+0,X
; libsrc/int32.pla: 0428:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/int32.pla: 0429:         TYA
        TYA
; libsrc/int32.pla: 0430:         SBC     ESTKL+1,X
        SBC     ESTKL+1,X
; libsrc/int32.pla: 0431:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/int32.pla: 0432:         TYA
        TYA
; libsrc/int32.pla: 0433:         SBC     ESTKH+1,X
        SBC     ESTKH+1,X
; libsrc/int32.pla: 0434:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/int32.pla: 0435:         LDA     DVSIGN
        LDA     DVSIGN
; libsrc/int32.pla: 0436: +       LSR
+       LSR
; libsrc/int32.pla: 0437:         BCC     +
        BCC     +
; libsrc/int32.pla: 0438:         TYA
        TYA
; libsrc/int32.pla: 0439:         SBC     ACCUM32+0
        SBC     ACCUM32+0
; libsrc/int32.pla: 0440:         STA     ACCUM32+0
        STA     ACCUM32+0
; libsrc/int32.pla: 0441:         TYA
        TYA
; libsrc/int32.pla: 0442:         SBC     ACCUM32+1
        SBC     ACCUM32+1
; libsrc/int32.pla: 0443:         STA     ACCUM32+1
        STA     ACCUM32+1
; libsrc/int32.pla: 0444:         TYA
        TYA
; libsrc/int32.pla: 0445:         SBC     ACCUM32+2
        SBC     ACCUM32+2
; libsrc/int32.pla: 0446:         STA     ACCUM32+2
        STA     ACCUM32+2
; libsrc/int32.pla: 0447:         TYA
        TYA
; libsrc/int32.pla: 0448:         SBC     ACCUM32+3
        SBC     ACCUM32+3
; libsrc/int32.pla: 0449:         STA     ACCUM32+3
        STA     ACCUM32+3
; libsrc/int32.pla: 0450: +       RTS
+       RTS
; libsrc/int32.pla: 0451: end
; libsrc/int32.pla: 0452: export asm iseq32(i32ptr)#1
_A017 					; iseq32()
; libsrc/int32.pla: 0453:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0454:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0455:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0456:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0457:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0458: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0459:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0460:         DEY
        DEY
; libsrc/int32.pla: 0461:         BPL     -
        BPL     -
; libsrc/int32.pla: 0462:         INY
        INY
; libsrc/int32.pla: 0463:         BEQ     _ISEQ
        BEQ     _ISEQ
; libsrc/int32.pla: 0464: end
; libsrc/int32.pla: 0465: export asm iseqi16(imm16)#1
_A018 					; iseqi16()
; libsrc/int32.pla: 0466:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0467:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0468:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0469:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0470:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0471:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0472:         DEY
        DEY
; libsrc/int32.pla: 0473: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0474:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0475:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0476: _ISEQ   LDA     ACCUM32+0
_ISEQ   LDA     ACCUM32+0
; libsrc/int32.pla: 0477:         CMP     SRC+0
        CMP     SRC+0
; libsrc/int32.pla: 0478:         BNE     +
        BNE     +
; libsrc/int32.pla: 0479:         LDA     ACCUM32+1
        LDA     ACCUM32+1
; libsrc/int32.pla: 0480:         CMP     SRC+1
        CMP     SRC+1
; libsrc/int32.pla: 0481:         BNE     +
        BNE     +
; libsrc/int32.pla: 0482:         LDA     ACCUM32+2
        LDA     ACCUM32+2
; libsrc/int32.pla: 0483:         CMP     SRC+2
        CMP     SRC+2
; libsrc/int32.pla: 0484:         BNE     +
        BNE     +
; libsrc/int32.pla: 0485:         LDA     ACCUM32+3
        LDA     ACCUM32+3
; libsrc/int32.pla: 0486:         CMP     SRC+3
        CMP     SRC+3
; libsrc/int32.pla: 0487:         BNE     +
        BNE     +
; libsrc/int32.pla: 0488:         DEY
        DEY
; libsrc/int32.pla: 0489: +       STY     ESTKL+0,X
+       STY     ESTKL+0,X
; libsrc/int32.pla: 0490:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/int32.pla: 0491:         RTS
        RTS
; libsrc/int32.pla: 0492: end
; libsrc/int32.pla: 0493: export asm isge32(i32ptr)#1
_A019 					; isge32()
; libsrc/int32.pla: 0494:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0495:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0496:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0497:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0498:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0499: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0500:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0501:         DEY
        DEY
; libsrc/int32.pla: 0502:         BPL     -
        BPL     -
; libsrc/int32.pla: 0503:         INY
        INY
; libsrc/int32.pla: 0504:         BEQ     _ISGE
        BEQ     _ISGE
; libsrc/int32.pla: 0505: end
; libsrc/int32.pla: 0506: export asm isgei16(imm16)#1
_A020 					; isgei16()
; libsrc/int32.pla: 0507:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0508:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0509:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0510:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0511:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0512:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0513:         DEY
        DEY
; libsrc/int32.pla: 0514: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0515:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0516:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0517: _ISGE   LDA     ACCUM32+0
_ISGE   LDA     ACCUM32+0
; libsrc/int32.pla: 0518:         CMP     SRC+0
        CMP     SRC+0
; libsrc/int32.pla: 0519:         LDA     ACCUM32+1
        LDA     ACCUM32+1
; libsrc/int32.pla: 0520:         SBC     SRC+1
        SBC     SRC+1
; libsrc/int32.pla: 0521:         LDA     ACCUM32+2
        LDA     ACCUM32+2
; libsrc/int32.pla: 0522:         SBC     SRC+2
        SBC     SRC+2
; libsrc/int32.pla: 0523:         LDA     ACCUM32+3
        LDA     ACCUM32+3
; libsrc/int32.pla: 0524:         SBC     SRC+3
        SBC     SRC+3
; libsrc/int32.pla: 0525:         BVC     +
        BVC     +
; libsrc/int32.pla: 0526:         EOR     #$80
        EOR     #$80
; libsrc/int32.pla: 0527: +       BMI     +
+       BMI     +
; libsrc/int32.pla: 0528:         DEY
        DEY
; libsrc/int32.pla: 0529: +       STY     ESTKL+0,X
+       STY     ESTKL+0,X
; libsrc/int32.pla: 0530:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/int32.pla: 0531:         RTS
        RTS
; libsrc/int32.pla: 0532: end
; libsrc/int32.pla: 0533: export asm isle32(i32ptr)#1
_A021 					; isle32()
; libsrc/int32.pla: 0534:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0535:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0536:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0537:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0538:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0539: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0540:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0541:         DEY
        DEY
; libsrc/int32.pla: 0542:         BPL     -
        BPL     -
; libsrc/int32.pla: 0543:         INY
        INY
; libsrc/int32.pla: 0544:         BEQ     _ISLE
        BEQ     _ISLE
; libsrc/int32.pla: 0545: end
; libsrc/int32.pla: 0546: export asm islei16(imm16)#1
_A022 					; islei16()
; libsrc/int32.pla: 0547:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0548:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0549:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0550:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0551:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0552:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0553:         DEY
        DEY
; libsrc/int32.pla: 0554: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0555:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0556:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0557: _ISLE   LDA     SRC+0
_ISLE   LDA     SRC+0
; libsrc/int32.pla: 0558:         CMP     ACCUM32+0
        CMP     ACCUM32+0
; libsrc/int32.pla: 0559:         LDA     SRC+1
        LDA     SRC+1
; libsrc/int32.pla: 0560:         SBC     ACCUM32+1
        SBC     ACCUM32+1
; libsrc/int32.pla: 0561:         LDA     SRC+2
        LDA     SRC+2
; libsrc/int32.pla: 0562:         SBC     ACCUM32+2
        SBC     ACCUM32+2
; libsrc/int32.pla: 0563:         LDA     SRC+3
        LDA     SRC+3
; libsrc/int32.pla: 0564:         SBC     ACCUM32+3
        SBC     ACCUM32+3
; libsrc/int32.pla: 0565:         BVC     +
        BVC     +
; libsrc/int32.pla: 0566:         EOR     #$80
        EOR     #$80
; libsrc/int32.pla: 0567: +       BMI     +
+       BMI     +
; libsrc/int32.pla: 0568:         DEY
        DEY
; libsrc/int32.pla: 0569: +       STY     ESTKL+0,X
+       STY     ESTKL+0,X
; libsrc/int32.pla: 0570:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/int32.pla: 0571:         RTS
        RTS
; libsrc/int32.pla: 0572: end
; libsrc/int32.pla: 0573: export asm isgt32(i32ptr)#1
_A023 					; isgt32()
; libsrc/int32.pla: 0574:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0575:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0576:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0577:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0578:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0579: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0580:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0581:         DEY
        DEY
; libsrc/int32.pla: 0582:         BPL     -
        BPL     -
; libsrc/int32.pla: 0583:         INY
        INY
; libsrc/int32.pla: 0584:         BEQ     _ISGT
        BEQ     _ISGT
; libsrc/int32.pla: 0585: end
; libsrc/int32.pla: 0586: export asm isgti16(imm16)#1
_A024 					; isgti16()
; libsrc/int32.pla: 0587:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0588:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0589:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0590:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0591:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0592:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0593:         DEY
        DEY
; libsrc/int32.pla: 0594: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0595:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0596:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0597: _ISGT   LDA     SRC+0
_ISGT   LDA     SRC+0
; libsrc/int32.pla: 0598:         CMP     ACCUM32+0
        CMP     ACCUM32+0
; libsrc/int32.pla: 0599:         LDA     SRC+1
        LDA     SRC+1
; libsrc/int32.pla: 0600:         SBC     ACCUM32+1
        SBC     ACCUM32+1
; libsrc/int32.pla: 0601:         LDA     SRC+2
        LDA     SRC+2
; libsrc/int32.pla: 0602:         SBC     ACCUM32+2
        SBC     ACCUM32+2
; libsrc/int32.pla: 0603:         LDA     SRC+3
        LDA     SRC+3
; libsrc/int32.pla: 0604:         SBC     ACCUM32+3
        SBC     ACCUM32+3
; libsrc/int32.pla: 0605:         BVC     +
        BVC     +
; libsrc/int32.pla: 0606:         EOR     #$80
        EOR     #$80
; libsrc/int32.pla: 0607: +       BPL     +
+       BPL     +
; libsrc/int32.pla: 0608:         DEY
        DEY
; libsrc/int32.pla: 0609: +       STY     ESTKL+0,X
+       STY     ESTKL+0,X
; libsrc/int32.pla: 0610:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/int32.pla: 0611:         RTS
        RTS
; libsrc/int32.pla: 0612: end
; libsrc/int32.pla: 0613: export asm islt32(i32ptr)#1
_A025 					; islt32()
; libsrc/int32.pla: 0614:         LDA     ESTKL+0,X       ; I32PTR
        LDA     ESTKL+0,X       ; I32PTR
; libsrc/int32.pla: 0615:         STA     TMPL
        STA     TMPL
; libsrc/int32.pla: 0616:         LDA     ESTKH+0,X       ; I32PTR
        LDA     ESTKH+0,X       ; I32PTR
; libsrc/int32.pla: 0617:         STA     TMPH
        STA     TMPH
; libsrc/int32.pla: 0618:         LDY     #$03
        LDY     #$03
; libsrc/int32.pla: 0619: -       LDA     (TMP),Y
-       LDA     (TMP),Y
; libsrc/int32.pla: 0620:         STA     SRC,Y
        STA     SRC,Y
; libsrc/int32.pla: 0621:         DEY
        DEY
; libsrc/int32.pla: 0622:         BPL     -
        BPL     -
; libsrc/int32.pla: 0623:         INY
        INY
; libsrc/int32.pla: 0624:         BEQ     _ISLT
        BEQ     _ISLT
; libsrc/int32.pla: 0625: end
; libsrc/int32.pla: 0626: export asm islti16(imm16)#1
_A026 					; islti16()
; libsrc/int32.pla: 0627:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0628:         LDA     ESTKL+0,X       ; IMM16L
        LDA     ESTKL+0,X       ; IMM16L
; libsrc/int32.pla: 0629:         STA     SRC+0
        STA     SRC+0
; libsrc/int32.pla: 0630:         LDA     ESTKH+0,X       ; IMM16H
        LDA     ESTKH+0,X       ; IMM16H
; libsrc/int32.pla: 0631:         STA     SRC+1
        STA     SRC+1
; libsrc/int32.pla: 0632:         BPL     +               ; SIGN EXTEND
        BPL     +               ; SIGN EXTEND
; libsrc/int32.pla: 0633:         DEY
        DEY
; libsrc/int32.pla: 0634: +       STY     SRC+2
+       STY     SRC+2
; libsrc/int32.pla: 0635:         STY     SRC+3
        STY     SRC+3
; libsrc/int32.pla: 0636:         LDY     #$00
        LDY     #$00
; libsrc/int32.pla: 0637: _ISLT   LDA     ACCUM32+0
_ISLT   LDA     ACCUM32+0
; libsrc/int32.pla: 0638:         CMP     SRC+0
        CMP     SRC+0
; libsrc/int32.pla: 0639:         LDA     ACCUM32+1
        LDA     ACCUM32+1
; libsrc/int32.pla: 0640:         SBC     SRC+1
        SBC     SRC+1
; libsrc/int32.pla: 0641:         LDA     ACCUM32+2
        LDA     ACCUM32+2
; libsrc/int32.pla: 0642:         SBC     SRC+2
        SBC     SRC+2
; libsrc/int32.pla: 0643:         LDA     ACCUM32+3
        LDA     ACCUM32+3
; libsrc/int32.pla: 0644:         SBC     SRC+3
        SBC     SRC+3
; libsrc/int32.pla: 0645:         BVC     +
        BVC     +
; libsrc/int32.pla: 0646:         EOR     #$80
        EOR     #$80
; libsrc/int32.pla: 0647: +       BPL     +
+       BPL     +
; libsrc/int32.pla: 0648:         DEY
        DEY
; libsrc/int32.pla: 0649: +       STY     ESTKL+0,X
+       STY     ESTKL+0,X
; libsrc/int32.pla: 0650:         STY     ESTKH+0,X
        STY     ESTKH+0,X
; libsrc/int32.pla: 0651:         RTS
        RTS
; libsrc/int32.pla: 0652: end
; libsrc/int32.pla: 0653: export def i32tos(i32ptr, strptr)#1
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; i32ptr -> [0]
					; strptr -> [2]
_C000 					; i32tos()
; libsrc/int32.pla: 0654:     res[t_i32] save
					; save -> [4]
; libsrc/int32.pla: 0655:     word iptr, rem
					; iptr -> [8]
					; rem -> [10]
; libsrc/int32.pla: 0656:     char[12] istr
					; istr -> [12]
; libsrc/int32.pla: 0657:     
; libsrc/int32.pla: 0658:     iptr = @istr.11
	!BYTE	$58,$18,$02		; ENTER	24,2
; libsrc/int32.pla: 0659:     store32(@save)
; libsrc/int32.pla: 0660:     load32(i32ptr)
; libsrc/int32.pla: 0661:     if i32ptr->3 & $80
; libsrc/int32.pla: 0662:         neg32()
; libsrc/int32.pla: 0663:         putc('-')
; libsrc/int32.pla: 0664:     fin
	!BYTE	$28,$17			; LLA	[23]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_A006
_F000 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_A004
_F001 	!WORD	_A004		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$54			; CALL	_A003
_F002 	!WORD	_A003		
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$54			; CALL	_X002
_F003 	!WORD	0		
_B001 
_B002 
; libsrc/int32.pla: 0665:     repeat
_B004 
; libsrc/int32.pla: 0666:         drop, rem = divi16(10) // Only care about LSW of remainder
; libsrc/int32.pla: 0667:         ^iptr = rem + '0'
; libsrc/int32.pla: 0668:         iptr--
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_A016
_F004 	!WORD	_A016		
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$30			; DROP 
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$70			; SB
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8E			; DECR
; libsrc/int32.pla: 0669:     until iseqi16(0)
	!BYTE	$76,$08			; SLW	[8]
_B005 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_A018
_F005 	!WORD	_A018		
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
_B003 
; libsrc/int32.pla: 0670:     ^iptr = @istr.11 - iptr
; libsrc/int32.pla: 0671:     strcpy(strptr, iptr)
; libsrc/int32.pla: 0672:     load32(@save)
; libsrc/int32.pla: 0673:     return strptr
	!BYTE	$28,$17			; LLA	[23]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$84			; SUB 
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_X019
_F006 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_A004
_F007 	!WORD	_A004		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$18			; LEAVE	24
; libsrc/int32.pla: 0674: end
; libsrc/int32.pla: 0675: export def puti32(i32ptr)#0
					; i32ptr -> [0]
_C001 					; puti32()
; libsrc/int32.pla: 0676:     char[12] i32str
					; i32str -> [2]
; libsrc/int32.pla: 0677:         
; libsrc/int32.pla: 0678:     puts(i32tos(i32ptr, @i32str))
	!BYTE	$58,$0E,$01		; ENTER	14,1
; libsrc/int32.pla: 0679: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_C000
_F008 	!WORD	_C000		
	!BYTE	$54			; CALL	_X004
_F009 	!WORD	0		
	!BYTE	$5A,$0E			; LEAVE	14
; libsrc/int32.pla: 0680: 
; libsrc/int32.pla: 0681: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	3
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: ZERO32
	!BYTE	$DA,$C5,$D2,$CF,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A001		
	; DCI STRING: ZEXT16TO32
	!BYTE	$DA,$C5,$D8,$D4,$B1,$B6,$D4,$CF,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A002		
	; DCI STRING: NEG32
	!BYTE	$CE,$C5,$C7,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A003		
	; DCI STRING: LOAD32
	!BYTE	$CC,$CF,$C1,$C4,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A004		
	; DCI STRING: LOADI16
	!BYTE	$CC,$CF,$C1,$C4,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A005		
	; DCI STRING: STORE32
	!BYTE	$D3,$D4,$CF,$D2,$C5,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A006		
	; DCI STRING: ADD32
	!BYTE	$C1,$C4,$C4,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A007		
	; DCI STRING: ADDI16
	!BYTE	$C1,$C4,$C4,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A008		
	; DCI STRING: SUB32
	!BYTE	$D3,$D5,$C2,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A009		
	; DCI STRING: SUBI16
	!BYTE	$D3,$D5,$C2,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A010		
	; DCI STRING: SHL32
	!BYTE	$D3,$C8,$CC,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A011		
	; DCI STRING: SHR32
	!BYTE	$D3,$C8,$D2,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A012		
	; DCI STRING: MUL32
	!BYTE	$CD,$D5,$CC,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A013		
	; DCI STRING: MULI16
	!BYTE	$CD,$D5,$CC,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A014		
	; DCI STRING: DIV32
	!BYTE	$C4,$C9,$D6,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A015		
	; DCI STRING: DIVI16
	!BYTE	$C4,$C9,$D6,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A016		
	; DCI STRING: ISEQ32
	!BYTE	$C9,$D3,$C5,$D1,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A017		
	; DCI STRING: ISEQI16
	!BYTE	$C9,$D3,$C5,$D1,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A018		
	; DCI STRING: ISGE32
	!BYTE	$C9,$D3,$C7,$C5,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A019		
	; DCI STRING: ISGEI16
	!BYTE	$C9,$D3,$C7,$C5,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A020		
	; DCI STRING: ISLE32
	!BYTE	$C9,$D3,$CC,$C5,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A021		
	; DCI STRING: ISLEI16
	!BYTE	$C9,$D3,$CC,$C5,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A022		
	; DCI STRING: ISGT32
	!BYTE	$C9,$D3,$C7,$D4,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A023		
	; DCI STRING: ISGTI16
	!BYTE	$C9,$D3,$C7,$D4,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A024		
	; DCI STRING: ISLT32
	!BYTE	$C9,$D3,$CC,$D4,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A025		
	; DCI STRING: ISLTI16
	!BYTE	$C9,$D3,$CC,$D4,$C9,$B1,$36
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_A026		
	; DCI STRING: I32TOS
	!BYTE	$C9,$B3,$B2,$D4,$CF,$53
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: PUTI32
	!BYTE	$D0,$D5,$D4,$C9,$B3,$32
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	!BYTE	$00			; END OF ESD
