; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/lines.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/lines.pla: 0001: 
; libsrc/lines.pla: 0002: predef nopLin(a, b, c)#0
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; libsrc/lines.pla: 0003: predef nopPix(a, b)#0
; libsrc/lines.pla: 0004: 
; libsrc/lines.pla: 0005: byte jmpplot = $4C // Sneaky!
_D030 					; jmpplot = $4C // Sneaky!
	!BYTE	$4C
; libsrc/lines.pla: 0006: var plot     = @nopPix
_D031 					; plot     = @nopPix
_F000 	!WORD	_P001
; libsrc/lines.pla: 0007: var hspan    = @nopLin
_D032 					; hspan    = @nopLin
_F001 	!WORD	_P000
; libsrc/lines.pla: 0008: var vspan    = @nopLin
_D033 					; vspan    = @nopLin
_F002 	!WORD	_P000
; libsrc/lines.pla: 0009: var err, shorterr, shortlen, longerr, longlen
_D034 	!FILL	2			; err, shorterr, shortlen, longerr, longlen
_D035 	!FILL	2			; shorterr, shortlen, longerr, longlen
_D036 	!FILL	2			; shortlen, longerr, longlen
_D037 	!FILL	2			; longerr, longlen
_D038 	!FILL	2			; longlen
; libsrc/lines.pla: 0010: 
; libsrc/lines.pla: 0011: //def nopLin(a, b, c)#0
; libsrc/lines.pla: 0012: //end
; libsrc/lines.pla: 0013: //def majorspans(majorstart, major, majorend, minor, dir, majorspan)#0
; libsrc/lines.pla: 0014: //    //
; libsrc/lines.pla: 0015: //    // Initial half-span step
; libsrc/lines.pla: 0016: //    //
; libsrc/lines.pla: 0017: //    err = err + shorterr
; libsrc/lines.pla: 0018: //    repeat
; libsrc/lines.pla: 0019: //        majorspan(majorstart, major, minor)#0
; libsrc/lines.pla: 0020: //        minor      = minor + dir     // Move to next span
; libsrc/lines.pla: 0021: //        majorstart = major + 1       // Start of next span = end of previous + 1
; libsrc/lines.pla: 0022: //        if err >= 0             // Short span
; libsrc/lines.pla: 0023: //            err   = err   + shorterr
; libsrc/lines.pla: 0024: //            major = major + shortlen
; libsrc/lines.pla: 0025: //        else                    // Long span
; libsrc/lines.pla: 0026: //            err   = err   + longerr
; libsrc/lines.pla: 0027: //            major = major + longlen
; libsrc/lines.pla: 0028: //        fin
; libsrc/lines.pla: 0029: //    until major >= majorend
; libsrc/lines.pla: 0030: //    //
; libsrc/lines.pla: 0031: //    // Final half-span step
; libsrc/lines.pla: 0032: //    //
; libsrc/lines.pla: 0033: //    majorspan(majorstart, majorend, minor)#0
; libsrc/lines.pla: 0034: //end
; libsrc/lines.pla: 0035: asm majorspans(majorstart, major, majorend, minor, dir, majorspan)#0
_A000 					; majorspans()
; libsrc/lines.pla: 0036: !SOURCE    "vmsrc/plvmzp.inc"
!SOURCE    "vmsrc/plvmzp.inc"
; libsrc/lines.pla: 0037:         LDA     $1000       ; ERRL
        LDA     $1000       ; ERRL
; libsrc/lines.pla: 0038:         CLC
        CLC
; libsrc/lines.pla: 0039:         ADC     $2000       ; SHORTERRL
        ADC     $2000       ; SHORTERRL
; libsrc/lines.pla: 0040:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0041:         LDA     $1001       ; ERRH
        LDA     $1001       ; ERRH
; libsrc/lines.pla: 0042:         ADC     $2001       ; SHORTERRH
        ADC     $2001       ; SHORTERRH
; libsrc/lines.pla: 0043:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0044:         LDA     ESTKL+0,X   ; MAJORSPANL
        LDA     ESTKL+0,X   ; MAJORSPANL
; libsrc/lines.pla: 0045:         STA     $A000
        STA     $A000
; libsrc/lines.pla: 0046:         STA     $B000
        STA     $B000
; libsrc/lines.pla: 0047:         LDA     ESTKH+0,X   ; MAJORSPANH
        LDA     ESTKH+0,X   ; MAJORSPANH
; libsrc/lines.pla: 0048:         STA     $A001
        STA     $A001
; libsrc/lines.pla: 0049:         STA     $B001
        STA     $B001
; libsrc/lines.pla: 0050: end
; libsrc/lines.pla: 0051: asm     _majorspansA
_A001 					; _majorspansA()
; libsrc/lines.pla: 0052: -       DEX
-       DEX
; libsrc/lines.pla: 0053:         DEX
        DEX
; libsrc/lines.pla: 0054:         DEX
        DEX
; libsrc/lines.pla: 0055:         LDA     ESTKL+8,X   ; MAJORSTARTL
        LDA     ESTKL+8,X   ; MAJORSTARTL
; libsrc/lines.pla: 0056:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/lines.pla: 0057:         LDA     ESTKH+8,X   ; MAJORSTARTH
        LDA     ESTKH+8,X   ; MAJORSTARTH
; libsrc/lines.pla: 0058:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/lines.pla: 0059:         LDA     ESTKL+7,X   ; MAJORL
        LDA     ESTKL+7,X   ; MAJORL
; libsrc/lines.pla: 0060:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/lines.pla: 0061:         LDA     ESTKH+7,X   ; MAJORH
        LDA     ESTKH+7,X   ; MAJORH
; libsrc/lines.pla: 0062:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/lines.pla: 0063:         LDA     ESTKL+5,X   ; MINORL
        LDA     ESTKL+5,X   ; MINORL
; libsrc/lines.pla: 0064:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/lines.pla: 0065:         LDA     ESTKH+5,X   ; MINORH
        LDA     ESTKH+5,X   ; MINORH
; libsrc/lines.pla: 0066:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/lines.pla: 0067:         JSR     $A000
        JSR     $A000
; libsrc/lines.pla: 0068: 
; libsrc/lines.pla: 0069:         LDA     ESTKL+2,X   ; MINORL
        LDA     ESTKL+2,X   ; MINORL
; libsrc/lines.pla: 0070:         CLC
        CLC
; libsrc/lines.pla: 0071:         ADC     ESTKL+1,X   ; DIRL
        ADC     ESTKL+1,X   ; DIRL
; libsrc/lines.pla: 0072:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/lines.pla: 0073:         LDA     ESTKH+2,X   ; MINORH
        LDA     ESTKH+2,X   ; MINORH
; libsrc/lines.pla: 0074:         ADC     ESTKH+1,X   ; DIRH
        ADC     ESTKH+1,X   ; DIRH
; libsrc/lines.pla: 0075:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/lines.pla: 0076: 
; libsrc/lines.pla: 0077:         LDA     ESTKL+4,X   ; MAJORL
        LDA     ESTKL+4,X   ; MAJORL
; libsrc/lines.pla: 0078:         CLC
        CLC
; libsrc/lines.pla: 0079:         ADC     #$01
        ADC     #$01
; libsrc/lines.pla: 0080:         STA     ESTKL+5,X   ; MAJORSTARTL
        STA     ESTKL+5,X   ; MAJORSTARTL
; libsrc/lines.pla: 0081:         LDA     ESTKH+4,X   ; MAJORH
        LDA     ESTKH+4,X   ; MAJORH
; libsrc/lines.pla: 0082:         ADC     #$00
        ADC     #$00
; libsrc/lines.pla: 0083:         STA     ESTKH+5,X   ; MAJORSTARTH
        STA     ESTKH+5,X   ; MAJORSTARTH
; libsrc/lines.pla: 0084: end
; libsrc/lines.pla: 0085: asm     _majorspansB
_A002 					; _majorspansB()
; libsrc/lines.pla: 0086:         LDY     $1001       ; ERRH
        LDY     $1001       ; ERRH
; libsrc/lines.pla: 0087:         BMI     +
        BMI     +
; libsrc/lines.pla: 0088: end
; libsrc/lines.pla: 0089: asm     _majorspansC
_A003 					; _majorspansC()
; libsrc/lines.pla: 0090:         LDA     $1000       ; ERRL
        LDA     $1000       ; ERRL
; libsrc/lines.pla: 0091:         CLC
        CLC
; libsrc/lines.pla: 0092:         ADC     $2000       ; SHORTERRL
        ADC     $2000       ; SHORTERRL
; libsrc/lines.pla: 0093:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0094:         TYA                 ; ERRH
        TYA                 ; ERRH
; libsrc/lines.pla: 0095:         ADC     $2001       ; SHORTERRH
        ADC     $2001       ; SHORTERRH
; libsrc/lines.pla: 0096:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0097:         LDA     ESTKL+4,X   ; MAJORL
        LDA     ESTKL+4,X   ; MAJORL
; libsrc/lines.pla: 0098:         CLC
        CLC
; libsrc/lines.pla: 0099:         ADC     $3000       ; SHORTLENL
        ADC     $3000       ; SHORTLENL
; libsrc/lines.pla: 0100:         STA     ESTKL+4,X
        STA     ESTKL+4,X
; libsrc/lines.pla: 0101:         LDA     ESTKH+4,X   ; MAJORH
        LDA     ESTKH+4,X   ; MAJORH
; libsrc/lines.pla: 0102:         ADC     $3001       ; SHORTLENH
        ADC     $3001       ; SHORTLENH
; libsrc/lines.pla: 0103:         STA     ESTKH+4,X
        STA     ESTKH+4,X
; libsrc/lines.pla: 0104:         LDA     ESTKL+4,X   ; MAJORL
        LDA     ESTKL+4,X   ; MAJORL
; libsrc/lines.pla: 0105:         CMP     ESTKL+3,X   ; MAJORENDL
        CMP     ESTKL+3,X   ; MAJORENDL
; libsrc/lines.pla: 0106:         LDA     ESTKH+4,X   ; MAJORH
        LDA     ESTKH+4,X   ; MAJORH
; libsrc/lines.pla: 0107:         SBC     ESTKH+3,X   ; MAJORENDH
        SBC     ESTKH+3,X   ; MAJORENDH
; libsrc/lines.pla: 0108:         BCC     -
        BCC     -
; libsrc/lines.pla: 0109:         BCS     ++
        BCS     ++
; libsrc/lines.pla: 0110: end
; libsrc/lines.pla: 0111: asm     _majorspansD
_A004 					; _majorspansD()
; libsrc/lines.pla: 0112: +       LDA     $1000       ; ERRL
+       LDA     $1000       ; ERRL
; libsrc/lines.pla: 0113:         CLC
        CLC
; libsrc/lines.pla: 0114:         ADC     $4000       ; LONGERRL
        ADC     $4000       ; LONGERRL
; libsrc/lines.pla: 0115:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0116:         TYA                 ; ERRH
        TYA                 ; ERRH
; libsrc/lines.pla: 0117:         ADC     $4001       ; LONGERRL
        ADC     $4001       ; LONGERRL
; libsrc/lines.pla: 0118:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0119:         LDA     ESTKL+4,X   ; MAJORL
        LDA     ESTKL+4,X   ; MAJORL
; libsrc/lines.pla: 0120:         CLC
        CLC
; libsrc/lines.pla: 0121:         ADC     $5000       ; LONGLENL
        ADC     $5000       ; LONGLENL
; libsrc/lines.pla: 0122:         STA     ESTKL+4,X
        STA     ESTKL+4,X
; libsrc/lines.pla: 0123:         LDA     ESTKH+4,X   ; MAJORH
        LDA     ESTKH+4,X   ; MAJORH
; libsrc/lines.pla: 0124:         ADC     $5001       ; LONGLENH
        ADC     $5001       ; LONGLENH
; libsrc/lines.pla: 0125:         STA     ESTKH+4,X
        STA     ESTKH+4,X
; libsrc/lines.pla: 0126:         LDA     ESTKL+4,X   ; MAJORL
        LDA     ESTKL+4,X   ; MAJORL
; libsrc/lines.pla: 0127:         CMP     ESTKL+3,X   ; MAJORENDL
        CMP     ESTKL+3,X   ; MAJORENDL
; libsrc/lines.pla: 0128:         LDA     ESTKH+4,X   ; MAJORH
        LDA     ESTKH+4,X   ; MAJORH
; libsrc/lines.pla: 0129:         SBC     ESTKH+3,X   ; MAJORENDH
        SBC     ESTKH+3,X   ; MAJORENDH
; libsrc/lines.pla: 0130:         BCS     ++
        BCS     ++
; libsrc/lines.pla: 0131: end
; libsrc/lines.pla: 0132: asm     _majorspansE
_A005 					; _majorspansE()
; libsrc/lines.pla: 0133:         JMP     $6000
        JMP     $6000
; libsrc/lines.pla: 0134: ++      DEX
++      DEX
; libsrc/lines.pla: 0135:         DEX
        DEX
; libsrc/lines.pla: 0136:         DEX
        DEX
; libsrc/lines.pla: 0137:         LDA     ESTKL+8,X   ; MAJORSTARTL
        LDA     ESTKL+8,X   ; MAJORSTARTL
; libsrc/lines.pla: 0138:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/lines.pla: 0139:         LDA     ESTKH+8,X   ; MAJORSTARTH
        LDA     ESTKH+8,X   ; MAJORSTARTH
; libsrc/lines.pla: 0140:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/lines.pla: 0141:         LDA     ESTKL+6,X   ; MAJORENDL
        LDA     ESTKL+6,X   ; MAJORENDL
; libsrc/lines.pla: 0142:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/lines.pla: 0143:         LDA     ESTKH+6,X   ; MAJORENDH
        LDA     ESTKH+6,X   ; MAJORENDH
; libsrc/lines.pla: 0144:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/lines.pla: 0145:         LDA     ESTKL+5,X   ; MINORL
        LDA     ESTKL+5,X   ; MINORL
; libsrc/lines.pla: 0146:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/lines.pla: 0147:         LDA     ESTKH+5,X   ; MINORH
        LDA     ESTKH+5,X   ; MINORH
; libsrc/lines.pla: 0148:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/lines.pla: 0149:         JSR     $B000
        JSR     $B000
; libsrc/lines.pla: 0150:         TXA
        TXA
; libsrc/lines.pla: 0151:         CLC
        CLC
; libsrc/lines.pla: 0152:         ADC     #$06
        ADC     #$06
; libsrc/lines.pla: 0153:         TAX
        TAX
; libsrc/lines.pla: 0154:         RTS
        RTS
; libsrc/lines.pla: 0155: end
; libsrc/lines.pla: 0156: asm nopLin(a, b, c)#0
_P000 					; nopLin(a, b, c)#0()
_A006 					; nopLin()
; libsrc/lines.pla: 0157:         INX
        INX
; libsrc/lines.pla: 0158: end
; libsrc/lines.pla: 0159: asm nopPix(a, b)#0
_P001 					; nopPix(a, b)#0()
_A007 					; nopPix()
; libsrc/lines.pla: 0160:         INX
        INX
; libsrc/lines.pla: 0161:         INX
        INX
; libsrc/lines.pla: 0162:         RTS
        RTS
; libsrc/lines.pla: 0163: end
; libsrc/lines.pla: 0164: //def hline(x1, x2, dx2, y, dy2, sy)#0
; libsrc/lines.pla: 0165: //    var dyx2, x
; libsrc/lines.pla: 0166: //
; libsrc/lines.pla: 0167: //    err  = dy2 - dx2 / 2
; libsrc/lines.pla: 0168: //    dyx2 = dy2 - dx2
; libsrc/lines.pla: 0169: //    for x = x1 to x2
; libsrc/lines.pla: 0170: //        plot(x, y)#0
; libsrc/lines.pla: 0171: //        if err >= 0
; libsrc/lines.pla: 0172: //            y   = y + sy
; libsrc/lines.pla: 0173: //            err = err + dyx2
; libsrc/lines.pla: 0174: //        else
; libsrc/lines.pla: 0175: //            err = err + dy2
; libsrc/lines.pla: 0176: //        fin
; libsrc/lines.pla: 0177: //    next
; libsrc/lines.pla: 0178: //end
; libsrc/lines.pla: 0179: asm hline(x1, x2, dx2, y, dy2, sy)#0
_A008 					; hline()
; libsrc/lines.pla: 0180:         LDA     ESTKH+3,X   ; DX2H
        LDA     ESTKH+3,X   ; DX2H
; libsrc/lines.pla: 0181:         LSR
        LSR
; libsrc/lines.pla: 0182:         STA     TMPH
        STA     TMPH
; libsrc/lines.pla: 0183:         LDA     ESTKL+3,X   ; DX2L
        LDA     ESTKL+3,X   ; DX2L
; libsrc/lines.pla: 0184:         ROR
        ROR
; libsrc/lines.pla: 0185:         STA     TMPL
        STA     TMPL
; libsrc/lines.pla: 0186:         LDA     ESTKL+1,X   ; DY2L
        LDA     ESTKL+1,X   ; DY2L
; libsrc/lines.pla: 0187:         SEC
        SEC
; libsrc/lines.pla: 0188:         SBC     TMPL
        SBC     TMPL
; libsrc/lines.pla: 0189:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0190:         LDA     ESTKH+1,X   ; DY2H
        LDA     ESTKH+1,X   ; DY2H
; libsrc/lines.pla: 0191:         SBC     TMPH
        SBC     TMPH
; libsrc/lines.pla: 0192:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0193:         LDA     ESTKL+1,X   ; DY2L
        LDA     ESTKL+1,X   ; DY2L
; libsrc/lines.pla: 0194:         SEC
        SEC
; libsrc/lines.pla: 0195:         SBC     ESTKL+3,X   ; DX2L
        SBC     ESTKL+3,X   ; DX2L
; libsrc/lines.pla: 0196:         STA     ESTKL+3,X   ; DYX2L
        STA     ESTKL+3,X   ; DYX2L
; libsrc/lines.pla: 0197:         LDA     ESTKH+1,X   ; DY2H
        LDA     ESTKH+1,X   ; DY2H
; libsrc/lines.pla: 0198:         SBC     ESTKH+3,X   ; DX2H
        SBC     ESTKH+3,X   ; DX2H
; libsrc/lines.pla: 0199:         STA     ESTKH+3,X   ; DYX2H
        STA     ESTKH+3,X   ; DYX2H
; libsrc/lines.pla: 0200: -       DEX
-       DEX
; libsrc/lines.pla: 0201:         DEX
        DEX
; libsrc/lines.pla: 0202:         LDA     ESTKL+7,X   ; XL
        LDA     ESTKL+7,X   ; XL
; libsrc/lines.pla: 0203:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/lines.pla: 0204:         LDA     ESTKH+7,X   ; XH
        LDA     ESTKH+7,X   ; XH
; libsrc/lines.pla: 0205:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/lines.pla: 0206:         LDA     ESTKL+4,X   ; YL
        LDA     ESTKL+4,X   ; YL
; libsrc/lines.pla: 0207:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/lines.pla: 0208:         LDA     ESTKH+4,X   ; YH
        LDA     ESTKH+4,X   ; YH
; libsrc/lines.pla: 0209:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/lines.pla: 0210: end
; libsrc/lines.pla: 0211: asm     _hlineA
_A009 					; _hlineA()
; libsrc/lines.pla: 0212:         JSR     $2000       ; PLOT
        JSR     $2000       ; PLOT
; libsrc/lines.pla: 0213:         LDA     $1001       ; ERRH
        LDA     $1001       ; ERRH
; libsrc/lines.pla: 0214:         BMI     +
        BMI     +
; libsrc/lines.pla: 0215:         LDA     ESTKL+2,X   ; YL
        LDA     ESTKL+2,X   ; YL
; libsrc/lines.pla: 0216:         CLC
        CLC
; libsrc/lines.pla: 0217:         ADC     ESTKL+0,X   ; SYL
        ADC     ESTKL+0,X   ; SYL
; libsrc/lines.pla: 0218:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/lines.pla: 0219:         LDA     ESTKH+2,X   ; YH
        LDA     ESTKH+2,X   ; YH
; libsrc/lines.pla: 0220:         ADC     ESTKH+0,X   ; SYH
        ADC     ESTKH+0,X   ; SYH
; libsrc/lines.pla: 0221:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/lines.pla: 0222:         LDA     ESTKL+3,X   ; DYX2L
        LDA     ESTKL+3,X   ; DYX2L
; libsrc/lines.pla: 0223:         LDY     ESTKH+3,X   ; DYX2H
        LDY     ESTKH+3,X   ; DYX2H
; libsrc/lines.pla: 0224:         BEQ     ++
        BEQ     ++
; libsrc/lines.pla: 0225:         BNE     ++
        BNE     ++
; libsrc/lines.pla: 0226: end
; libsrc/lines.pla: 0227: asm     _hlineB
_A010 					; _hlineB()
; libsrc/lines.pla: 0228: +       LDA     ESTKL+1,X   ; DY2L
+       LDA     ESTKL+1,X   ; DY2L
; libsrc/lines.pla: 0229:         LDY     ESTKH+1,X   ; DY2H
        LDY     ESTKH+1,X   ; DY2H
; libsrc/lines.pla: 0230: ++      CLC
++      CLC
; libsrc/lines.pla: 0231:         ADC     $1000       ; ERRL
        ADC     $1000       ; ERRL
; libsrc/lines.pla: 0232:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0233:         TYA
        TYA
; libsrc/lines.pla: 0234:         ADC     $1001       ; ERRH
        ADC     $1001       ; ERRH
; libsrc/lines.pla: 0235:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0236:         LDA     ESTKL+5,X   ; X1L
        LDA     ESTKL+5,X   ; X1L
; libsrc/lines.pla: 0237:         CMP     ESTKL+4,X   ; X2L
        CMP     ESTKL+4,X   ; X2L
; libsrc/lines.pla: 0238:         LDA     ESTKH+5,X
        LDA     ESTKH+5,X
; libsrc/lines.pla: 0239:         SBC     ESTKH+4,X
        SBC     ESTKH+4,X
; libsrc/lines.pla: 0240:         BCS     +
        BCS     +
; libsrc/lines.pla: 0241:         INC     ESTKL+5,X   ; XL
        INC     ESTKL+5,X   ; XL
; libsrc/lines.pla: 0242:         BNE     -
        BNE     -
; libsrc/lines.pla: 0243:         INC     ESTKH+5,X   ; XH
        INC     ESTKH+5,X   ; XH
; libsrc/lines.pla: 0244:         BCC     -
        BCC     -
; libsrc/lines.pla: 0245: +       TXA
+       TXA
; libsrc/lines.pla: 0246:         ADC     #$05
        ADC     #$05
; libsrc/lines.pla: 0247:         TAX
        TAX
; libsrc/lines.pla: 0248:         RTS
        RTS
; libsrc/lines.pla: 0249: end
; libsrc/lines.pla: 0250: //def vline(y1, y2, dy2, x, dx2, sx)#0
; libsrc/lines.pla: 0251: //    var dxy2, y
; libsrc/lines.pla: 0252: //    
; libsrc/lines.pla: 0253: //    err  = dx2 - dy2 / 2
; libsrc/lines.pla: 0254: //    dxy2 = dx2 - dy2
; libsrc/lines.pla: 0255: //    for y = y1 to y2
; libsrc/lines.pla: 0256: //        plot(x, y)#0
; libsrc/lines.pla: 0257: //        if err >= 0
; libsrc/lines.pla: 0258: //            x   = x + sx
; libsrc/lines.pla: 0259: //            err = err + dxy2
; libsrc/lines.pla: 0260: //        else
; libsrc/lines.pla: 0261: //            err = err + dx2
; libsrc/lines.pla: 0262: //        fin
; libsrc/lines.pla: 0263: //    next
; libsrc/lines.pla: 0264: //end
; libsrc/lines.pla: 0265: asm vline(y1, y2, dy2, x, dx2, sx)#0
_A011 					; vline()
; libsrc/lines.pla: 0266:         LDA     ESTKH+3,X   ; DY2H
        LDA     ESTKH+3,X   ; DY2H
; libsrc/lines.pla: 0267:         LSR
        LSR
; libsrc/lines.pla: 0268:         STA     TMPH
        STA     TMPH
; libsrc/lines.pla: 0269:         LDA     ESTKL+3,X   ; DY2L
        LDA     ESTKL+3,X   ; DY2L
; libsrc/lines.pla: 0270:         ROR
        ROR
; libsrc/lines.pla: 0271:         STA     TMPL
        STA     TMPL
; libsrc/lines.pla: 0272:         LDA     ESTKL+1,X   ; DX2L
        LDA     ESTKL+1,X   ; DX2L
; libsrc/lines.pla: 0273:         SEC
        SEC
; libsrc/lines.pla: 0274:         SBC     TMPL
        SBC     TMPL
; libsrc/lines.pla: 0275:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0276:         LDA     ESTKH+1,X   ; DX2H
        LDA     ESTKH+1,X   ; DX2H
; libsrc/lines.pla: 0277:         SBC     TMPH
        SBC     TMPH
; libsrc/lines.pla: 0278:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0279:         LDA     ESTKL+1,X   ; DX2L
        LDA     ESTKL+1,X   ; DX2L
; libsrc/lines.pla: 0280:         SEC
        SEC
; libsrc/lines.pla: 0281:         SBC     ESTKL+3,X   ; DX2L
        SBC     ESTKL+3,X   ; DX2L
; libsrc/lines.pla: 0282:         STA     ESTKL+3,X   ; DXY2L
        STA     ESTKL+3,X   ; DXY2L
; libsrc/lines.pla: 0283:         LDA     ESTKH+1,X   ; DX2H
        LDA     ESTKH+1,X   ; DX2H
; libsrc/lines.pla: 0284:         SBC     ESTKH+3,X   ; DY2H
        SBC     ESTKH+3,X   ; DY2H
; libsrc/lines.pla: 0285:         STA     ESTKH+3,X   ; DXY2H
        STA     ESTKH+3,X   ; DXY2H
; libsrc/lines.pla: 0286: -       DEX
-       DEX
; libsrc/lines.pla: 0287:         DEX
        DEX
; libsrc/lines.pla: 0288:         LDA     ESTKL+4,X   ; XL
        LDA     ESTKL+4,X   ; XL
; libsrc/lines.pla: 0289:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; libsrc/lines.pla: 0290:         LDA     ESTKH+4,X   ; XH
        LDA     ESTKH+4,X   ; XH
; libsrc/lines.pla: 0291:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; libsrc/lines.pla: 0292:         LDA     ESTKL+7,X   ; YL
        LDA     ESTKL+7,X   ; YL
; libsrc/lines.pla: 0293:         STA     ESTKL+0,X
        STA     ESTKL+0,X
; libsrc/lines.pla: 0294:         LDA     ESTKH+7,X   ; YH
        LDA     ESTKH+7,X   ; YH
; libsrc/lines.pla: 0295:         STA     ESTKH+0,X
        STA     ESTKH+0,X
; libsrc/lines.pla: 0296: end
; libsrc/lines.pla: 0297: asm     _vlineA
_A012 					; _vlineA()
; libsrc/lines.pla: 0298:         JSR     $2000       ; PLOT
        JSR     $2000       ; PLOT
; libsrc/lines.pla: 0299:         LDA     $1001       ; ERRH
        LDA     $1001       ; ERRH
; libsrc/lines.pla: 0300:         BMI     +
        BMI     +
; libsrc/lines.pla: 0301:         LDA     ESTKL+2,X   ; XL
        LDA     ESTKL+2,X   ; XL
; libsrc/lines.pla: 0302:         CLC
        CLC
; libsrc/lines.pla: 0303:         ADC     ESTKL+0,X   ; SXL
        ADC     ESTKL+0,X   ; SXL
; libsrc/lines.pla: 0304:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; libsrc/lines.pla: 0305:         LDA     ESTKH+2,X   ; XH
        LDA     ESTKH+2,X   ; XH
; libsrc/lines.pla: 0306:         ADC     ESTKH+0,X   ; SXH
        ADC     ESTKH+0,X   ; SXH
; libsrc/lines.pla: 0307:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; libsrc/lines.pla: 0308:         LDA     ESTKL+3,X   ; DXY2L
        LDA     ESTKL+3,X   ; DXY2L
; libsrc/lines.pla: 0309:         LDY     ESTKH+3,X   ; DXY2H
        LDY     ESTKH+3,X   ; DXY2H
; libsrc/lines.pla: 0310:         BEQ     ++
        BEQ     ++
; libsrc/lines.pla: 0311:         BNE     ++
        BNE     ++
; libsrc/lines.pla: 0312: end
; libsrc/lines.pla: 0313: asm     _vlineB
_A013 					; _vlineB()
; libsrc/lines.pla: 0314: +       LDA     ESTKL+1,X   ; DX2L
+       LDA     ESTKL+1,X   ; DX2L
; libsrc/lines.pla: 0315:         LDY     ESTKH+1,X   ; DX2H
        LDY     ESTKH+1,X   ; DX2H
; libsrc/lines.pla: 0316: ++      CLC
++      CLC
; libsrc/lines.pla: 0317:         ADC     $1000       ; ERRL
        ADC     $1000       ; ERRL
; libsrc/lines.pla: 0318:         STA     $1000       ; ERRL
        STA     $1000       ; ERRL
; libsrc/lines.pla: 0319:         TYA
        TYA
; libsrc/lines.pla: 0320:         ADC     $1001       ; ERRH
        ADC     $1001       ; ERRH
; libsrc/lines.pla: 0321:         STA     $1001       ; ERRH
        STA     $1001       ; ERRH
; libsrc/lines.pla: 0322:         LDA     ESTKL+5,X   ; Y1L
        LDA     ESTKL+5,X   ; Y1L
; libsrc/lines.pla: 0323:         CMP     ESTKL+4,X   ; Y2L
        CMP     ESTKL+4,X   ; Y2L
; libsrc/lines.pla: 0324:         LDA     ESTKH+5,X
        LDA     ESTKH+5,X
; libsrc/lines.pla: 0325:         SBC     ESTKH+4,X
        SBC     ESTKH+4,X
; libsrc/lines.pla: 0326:         BCS     +
        BCS     +
; libsrc/lines.pla: 0327:         INC     ESTKL+5,X   ; YL
        INC     ESTKL+5,X   ; YL
; libsrc/lines.pla: 0328:         BNE     -
        BNE     -
; libsrc/lines.pla: 0329:         INC     ESTKH+5,X   ; YH
        INC     ESTKH+5,X   ; YH
; libsrc/lines.pla: 0330:         BCC     -
        BCC     -
; libsrc/lines.pla: 0331: +       TXA
+       TXA
; libsrc/lines.pla: 0332:         ADC     #$05
        ADC     #$05
; libsrc/lines.pla: 0333:         TAX
        TAX
; libsrc/lines.pla: 0334:         RTS
        RTS
; libsrc/lines.pla: 0335: end
; libsrc/lines.pla: 0336: 
; libsrc/lines.pla: 0337: export def setlinespans(h, v)#0
_SUBSEG 				; BYTECODE STARTS
					; h -> [0]
					; v -> [2]
_C000 					; setlinespans()
; libsrc/lines.pla: 0338:     hspan = h
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/lines.pla: 0339:     vspan = v
; libsrc/lines.pla: 0340: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D032+0
_F003 	!WORD	_D032+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D033+0
_F004 	!WORD	_D033+0		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/lines.pla: 0341: def hmajorspans(x1, y1, x2, y2, dx, dy, sy)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
					; dx -> [8]
					; dy -> [10]
					; sy -> [12]
_C001 					; hmajorspans()
; libsrc/lines.pla: 0342:     var dy2, halflen, rem
					; dy2 -> [14]
					; halflen -> [16]
					; rem -> [18]
; libsrc/lines.pla: 0343:     //
; libsrc/lines.pla: 0344:     // Half-span length and error
; libsrc/lines.pla: 0345:     //
; libsrc/lines.pla: 0346:     dy2          = dy * 2
	!BYTE	$58,$14,$07		; ENTER	20,7
; libsrc/lines.pla: 0347:     halflen, rem = divmod(dx, dy2)
; libsrc/lines.pla: 0348:     err          = dy2 - rem
; libsrc/lines.pla: 0349:     //
; libsrc/lines.pla: 0350:     // Long-span length = half-span length * 2
; libsrc/lines.pla: 0351:     //
; libsrc/lines.pla: 0352:     longlen = (halflen + 1) * 2
; libsrc/lines.pla: 0353:     longerr = err * 2
; libsrc/lines.pla: 0354:     if longerr >= dy2
; libsrc/lines.pla: 0355:         longerr = longerr - dy2
; libsrc/lines.pla: 0356:         longlen--
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_X023
_F005 	!WORD	0		
	!BYTE	$76,$12			; SLW	[18]
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$84			; SUB 
	!BYTE	$7A			; SAW	_D034+0
_F006 	!WORD	_D034+0		
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$8C			; INCR
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$7A			; SAW	_D038+0
_F007 	!WORD	_D038+0		
	!BYTE	$6A			; LAW	_D034+0
_F008 	!WORD	_D034+0		
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$7E			; DAW	_D037+0
_F009 	!WORD	_D037+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$6A			; LAW	_D037+0
_F010 	!WORD	_D037+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$84			; SUB 
	!BYTE	$7A			; SAW	_D037+0
_F011 	!WORD	_D037+0		
	!BYTE	$6A			; LAW	_D038+0
_F012 	!WORD	_D038+0		
	!BYTE	$8E			; DECR
; libsrc/lines.pla: 0357:     fin
	!BYTE	$7A			; SAW	_D038+0
_F013 	!WORD	_D038+0		
_B001 
_B002 
; libsrc/lines.pla: 0358:     //
; libsrc/lines.pla: 0359:     // Short-span length = long-span length - 1
; libsrc/lines.pla: 0360:     //
; libsrc/lines.pla: 0361:     shortlen = longlen - 1
; libsrc/lines.pla: 0362:     shorterr = longerr - dy2
; libsrc/lines.pla: 0363:     majorspans(x1, x1 + halflen, x2, y1, sy, hspan)
; libsrc/lines.pla: 0364: end
	!BYTE	$6A			; LAW	_D038+0
_F014 	!WORD	_D038+0		
	!BYTE	$8E			; DECR
	!BYTE	$7A			; SAW	_D036+0
_F015 	!WORD	_D036+0		
	!BYTE	$6A			; LAW	_D037+0
_F016 	!WORD	_D037+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$84			; SUB 
	!BYTE	$7A			; SAW	_D035+0
_F017 	!WORD	_D035+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$B2,$10			; ADDLW	[16]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$6A			; LAW	_D032+0
_F018 	!WORD	_D032+0		
	!BYTE	$54			; CALL	_A000
_F019 	!WORD	_A000		
	!BYTE	$5A,$14			; LEAVE	20
; libsrc/lines.pla: 0365: def vmajorspans(x1, y1, x2, y2, dx, dy, sx)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
					; dx -> [8]
					; dy -> [10]
					; sx -> [12]
_C002 					; vmajorspans()
; libsrc/lines.pla: 0366:     var dx2, halflen, rem
					; dx2 -> [14]
					; halflen -> [16]
					; rem -> [18]
; libsrc/lines.pla: 0367: 
; libsrc/lines.pla: 0368:     //
; libsrc/lines.pla: 0369:     // Half-span length and error
; libsrc/lines.pla: 0370:     //
; libsrc/lines.pla: 0371:     dx2          = dx * 2
	!BYTE	$58,$14,$07		; ENTER	20,7
; libsrc/lines.pla: 0372:     halflen, rem = divmod(dy, dx2)
; libsrc/lines.pla: 0373:     err          = dx2 - rem
; libsrc/lines.pla: 0374:     //
; libsrc/lines.pla: 0375:     // Long-span length = half-span length * 2
; libsrc/lines.pla: 0376:     //
; libsrc/lines.pla: 0377:     longlen = (halflen + 1) * 2
; libsrc/lines.pla: 0378:     longerr = err * 2
; libsrc/lines.pla: 0379:     if longerr >= dx2
; libsrc/lines.pla: 0380:         longerr = longerr - dx2
; libsrc/lines.pla: 0381:         longlen--
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_X023
_F020 	!WORD	0		
	!BYTE	$76,$12			; SLW	[18]
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$84			; SUB 
	!BYTE	$7A			; SAW	_D034+0
_F021 	!WORD	_D034+0		
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$8C			; INCR
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$7A			; SAW	_D038+0
_F022 	!WORD	_D038+0		
	!BYTE	$6A			; LAW	_D034+0
_F023 	!WORD	_D034+0		
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$7E			; DAW	_D037+0
_F024 	!WORD	_D037+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$6A			; LAW	_D037+0
_F025 	!WORD	_D037+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$84			; SUB 
	!BYTE	$7A			; SAW	_D037+0
_F026 	!WORD	_D037+0		
	!BYTE	$6A			; LAW	_D038+0
_F027 	!WORD	_D038+0		
	!BYTE	$8E			; DECR
; libsrc/lines.pla: 0382:     fin
	!BYTE	$7A			; SAW	_D038+0
_F028 	!WORD	_D038+0		
_B003 
_B004 
; libsrc/lines.pla: 0383:     shortlen = longlen - 1
; libsrc/lines.pla: 0384:     shorterr = longerr - dx2
; libsrc/lines.pla: 0385:     majorspans(y1, y1 + halflen, y2, x1, sx, vspan)
; libsrc/lines.pla: 0386: end
	!BYTE	$6A			; LAW	_D038+0
_F029 	!WORD	_D038+0		
	!BYTE	$8E			; DECR
	!BYTE	$7A			; SAW	_D036+0
_F030 	!WORD	_D036+0		
	!BYTE	$6A			; LAW	_D037+0
_F031 	!WORD	_D037+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$84			; SUB 
	!BYTE	$7A			; SAW	_D035+0
_F032 	!WORD	_D035+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$34			; DUP
	!BYTE	$B2,$10			; ADDLW	[16]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$6A			; LAW	_D033+0
_F033 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_A000
_F034 	!WORD	_A000		
	!BYTE	$5A,$14			; LEAVE	20
; libsrc/lines.pla: 0387: export def linespans(x1, y1, x2, y2)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C003 					; linespans()
; libsrc/lines.pla: 0388:     var dx, dy, dx2, dy2, halflen, rem, sx, sy
					; dx -> [8]
					; dy -> [10]
					; dx2 -> [12]
					; dy2 -> [14]
					; halflen -> [16]
					; rem -> [18]
					; sx -> [20]
					; sy -> [22]
; libsrc/lines.pla: 0389:     
; libsrc/lines.pla: 0390:     sx = 1
	!BYTE	$58,$18,$04		; ENTER	24,4
; libsrc/lines.pla: 0391:     sy = 1
; libsrc/lines.pla: 0392:     dx = x2 - x1
; libsrc/lines.pla: 0393:     if dx < 0
; libsrc/lines.pla: 0394:         sx  = -1; dx = -dx
; libsrc/lines.pla: 0395:     fin
	!BYTE	$02			; CN	1
	!BYTE	$76,$14			; SLW	[20]
	!BYTE	$02			; CN	1
	!BYTE	$76,$16			; SLW	[22]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$84			; SUB 
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$14			; SLW	[20]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$90			; NEG
	!BYTE	$76,$08			; SLW	[8]
_B005 
_B006 
; libsrc/lines.pla: 0396:     dy = y2 - y1
; libsrc/lines.pla: 0397:     if dy < 0
; libsrc/lines.pla: 0398:         sy  = -1; dy = -dy
; libsrc/lines.pla: 0399:     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$84			; SUB 
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$16			; SLW	[22]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$90			; NEG
	!BYTE	$76,$0A			; SLW	[10]
_B007 
_B008 
; libsrc/lines.pla: 0400:     if dx >= dy
; libsrc/lines.pla: 0401:         if sx < 0
; libsrc/lines.pla: 0402:             y1, y2 = y2, y1
; libsrc/lines.pla: 0403:             x1, x2 = x2, x1
; libsrc/lines.pla: 0404:             sy = -sy
; libsrc/lines.pla: 0405:         fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$90			; NEG
	!BYTE	$76,$16			; SLW	[22]
_B011 
_B012 
; libsrc/lines.pla: 0406:         if dy == 0
; libsrc/lines.pla: 0407:             hspan(x1, x2, y1)#0; return
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$4E			; BRTRU	_B013
	!WORD	_B013-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D032+0
_F035 	!WORD	_D032+0		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$18			; LEAVE	24
; libsrc/lines.pla: 0408:         fin
_B013 
_B014 
; libsrc/lines.pla: 0409:         //
; libsrc/lines.pla: 0410:         // JIT optimize setup
; libsrc/lines.pla: 0411:         //
; libsrc/lines.pla: 0412:         hmajorspans(x1, y1, x2, y2, dx, dy, sy)
; libsrc/lines.pla: 0413:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$54			; CALL	_C001
_F036 	!WORD	_C001		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B009 
; libsrc/lines.pla: 0414:         if sy < 0
; libsrc/lines.pla: 0415:             x1, x2 = x2, x1
; libsrc/lines.pla: 0416:             y1, y2 = y2, y1
; libsrc/lines.pla: 0417:             sx = -sx
; libsrc/lines.pla: 0418:         fin
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$90			; NEG
	!BYTE	$76,$14			; SLW	[20]
_B015 
_B016 
; libsrc/lines.pla: 0419:         if dx == 0
; libsrc/lines.pla: 0420:             vspan(y1, y2, x1)#0; return
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$4E			; BRTRU	_B017
	!WORD	_B017-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D033+0
_F037 	!WORD	_D033+0		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$18			; LEAVE	24
; libsrc/lines.pla: 0421:         fin
_B017 
_B018 
; libsrc/lines.pla: 0422:         //
; libsrc/lines.pla: 0423:         // JIT optimize inner setup
; libsrc/lines.pla: 0424:         //
; libsrc/lines.pla: 0425:         vmajorspans(x1, y1, x2, y2, dx, dy, sx)
; libsrc/lines.pla: 0426:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$54			; CALL	_C002
_F038 	!WORD	_C002		
_B010 
; libsrc/lines.pla: 0427: end
	!BYTE	$5A,$18			; LEAVE	24
; libsrc/lines.pla: 0428: export def setlineplot(p)#0
					; p -> [0]
_C004 					; setlineplot()
; libsrc/lines.pla: 0429:     plot = p
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/lines.pla: 0430: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+0
_F039 	!WORD	_D031+0		
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/lines.pla: 0431: export def line(x1, y1, x2, y2)#0
					; x1 -> [0]
					; y1 -> [2]
					; x2 -> [4]
					; y2 -> [6]
_C005 					; line()
; libsrc/lines.pla: 0432:     var sx, sy, dx2, dy2
					; sx -> [8]
					; sy -> [10]
					; dx2 -> [12]
					; dy2 -> [14]
; libsrc/lines.pla: 0433:     
; libsrc/lines.pla: 0434:     sx = 1
	!BYTE	$58,$10,$04		; ENTER	16,4
; libsrc/lines.pla: 0435:     sy = 1
; libsrc/lines.pla: 0436:     dx2 = (x2 - x1) * 2
; libsrc/lines.pla: 0437:     if dx2 < 0
; libsrc/lines.pla: 0438:         sx = -1; dx2 = -dx2
; libsrc/lines.pla: 0439:     fin
	!BYTE	$02			; CN	1
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$02			; CN	1
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$84			; SUB 
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B019
	!WORD	_B019-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$90			; NEG
	!BYTE	$76,$0C			; SLW	[12]
_B019 
_B020 
; libsrc/lines.pla: 0440:     dy2 = (y2 - y1) * 2
; libsrc/lines.pla: 0441:     if dy2 < 0
; libsrc/lines.pla: 0442:         sy = -1; dy2 = -dy2
; libsrc/lines.pla: 0443:     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$84			; SUB 
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$90			; NEG
	!BYTE	$76,$0E			; SLW	[14]
_B021 
_B022 
; libsrc/lines.pla: 0444:     if dx2 >= dy2
; libsrc/lines.pla: 0445:         if sx < 0
; libsrc/lines.pla: 0446:             x1, x2 = x2, x1
; libsrc/lines.pla: 0447:             y1, y2 = y2, y1
; libsrc/lines.pla: 0448:             sy = -sy
; libsrc/lines.pla: 0449:         fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B023
	!WORD	_B023-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B025
	!WORD	_B025-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$90			; NEG
	!BYTE	$76,$0A			; SLW	[10]
_B025 
_B026 
; libsrc/lines.pla: 0450:         hline(x1, x2, dx2, y1, dy2, sy)
; libsrc/lines.pla: 0451:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$54			; CALL	_A008
_F040 	!WORD	_A008		
	!BYTE	$50			; BRNCH	_B024
	!WORD	_B024-*
_B023 
; libsrc/lines.pla: 0452:         if sy < 0
; libsrc/lines.pla: 0453:             y1, y2 = y2, y1
; libsrc/lines.pla: 0454:             x1, x2 = x2, x1
; libsrc/lines.pla: 0455:             sx = -sx
; libsrc/lines.pla: 0456:         fin
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B027
	!WORD	_B027-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$90			; NEG
	!BYTE	$76,$08			; SLW	[8]
_B027 
_B028 
; libsrc/lines.pla: 0457:         vline(y1, y2, dy2, x1, dx2, sx)
; libsrc/lines.pla: 0458:     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_A011
_F041 	!WORD	_A011		
_B024 
; libsrc/lines.pla: 0459:  end
	!BYTE	$5A,$10			; LEAVE	16
; libsrc/lines.pla: 0460: 
; libsrc/lines.pla: 0461: //
; libsrc/lines.pla: 0462: // Assembly fixups
; libsrc/lines.pla: 0463: //
; libsrc/lines.pla: 0464: majorspans:1    = @err
_INIT 
; libsrc/lines.pla: 0465: majorspans:5    = @shorterr
; libsrc/lines.pla: 0466: majorspans:8    = @err
; libsrc/lines.pla: 0467: majorspans:11   = @err.1
; libsrc/lines.pla: 0468: majorspans:14   = @shorterr.1
; libsrc/lines.pla: 0469: majorspans:17   = @err.1
; libsrc/lines.pla: 0470: majorspans:22   = @_majorspansA.28
; libsrc/lines.pla: 0471: majorspans:25   = @_majorspansE.31
; libsrc/lines.pla: 0472: majorspans:30   = @_majorspansA.29
; libsrc/lines.pla: 0473: majorspans:33   = @_majorspansE.32
; libsrc/lines.pla: 0474: _majorspansB:1  = @err.1
; libsrc/lines.pla: 0475: _majorspansC:1  = @err
; libsrc/lines.pla: 0476: _majorspansC:5  = @shorterr
; libsrc/lines.pla: 0477: _majorspansC:8  = @err
; libsrc/lines.pla: 0478: _majorspansC:12 = @shorterr.1
; libsrc/lines.pla: 0479: _majorspansC:15 = @err.1
; libsrc/lines.pla: 0480: _majorspansC:21 = @shortlen
; libsrc/lines.pla: 0481: _majorspansC:28 = @shortlen.1
; libsrc/lines.pla: 0482: _majorspansD:1  = @err
; libsrc/lines.pla: 0483: _majorspansD:5  = @longerr
; libsrc/lines.pla: 0484: _majorspansD:8  = @err
; libsrc/lines.pla: 0485: _majorspansD:12 = @longerr.1
; libsrc/lines.pla: 0486: _majorspansD:15 = @err.1
; libsrc/lines.pla: 0487: _majorspansD:21 = @longlen
; libsrc/lines.pla: 0488: _majorspansD:28 = @longlen.1
; libsrc/lines.pla: 0489: _majorspansE:1  = @_majorspansA
; libsrc/lines.pla: 0490: hline:16        = @err
; libsrc/lines.pla: 0491: hline:23        = @err.1
; libsrc/lines.pla: 0492: _hlineA:1       = @jmpplot
; libsrc/lines.pla: 0493: _hlineA:4       = @err.1
; libsrc/lines.pla: 0494: _hlineB:6       = @err
; libsrc/lines.pla: 0495: _hlineB:9       = @err
; libsrc/lines.pla: 0496: _hlineB:13      = @err.1
; libsrc/lines.pla: 0497: _hlineB:16      = @err.1
; libsrc/lines.pla: 0498: vline:16        = @err
; libsrc/lines.pla: 0499: vline:23        = @err.1
; libsrc/lines.pla: 0500: _vlineA:1       = @jmpplot
; libsrc/lines.pla: 0501: _vlineA:4       = @err.1
; libsrc/lines.pla: 0502: _vlineB:6       = @err
; libsrc/lines.pla: 0503: _vlineB:9       = @err
; libsrc/lines.pla: 0504: _vlineB:13      = @err.1
; libsrc/lines.pla: 0505: _vlineB:16      = @err.1
; libsrc/lines.pla: 0506: done
	!BYTE	$26			; LA	_D034+0
_F042 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A000+1
_F043 	!WORD	_A000+1		
	!BYTE	$26			; LA	_D035+0
_F044 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A000+5
_F045 	!WORD	_A000+5		
	!BYTE	$26			; LA	_D034+0
_F046 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A000+8
_F047 	!WORD	_A000+8		
	!BYTE	$26			; LA	_D034+1
_F048 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A000+11
_F049 	!WORD	_A000+11		
	!BYTE	$26			; LA	_D035+1
_F050 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A000+14
_F051 	!WORD	_A000+14		
	!BYTE	$26			; LA	_D034+1
_F052 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A000+17
_F053 	!WORD	_A000+17		
	!BYTE	$26			; LA	_A001+28
_F054 	!WORD	_A001+28		
	!BYTE	$7A			; SAW	_A000+22
_F055 	!WORD	_A000+22		
	!BYTE	$26			; LA	_A005+31
_F056 	!WORD	_A005+31		
	!BYTE	$7A			; SAW	_A000+25
_F057 	!WORD	_A000+25		
	!BYTE	$26			; LA	_A001+29
_F058 	!WORD	_A001+29		
	!BYTE	$7A			; SAW	_A000+30
_F059 	!WORD	_A000+30		
	!BYTE	$26			; LA	_A005+32
_F060 	!WORD	_A005+32		
	!BYTE	$7A			; SAW	_A000+33
_F061 	!WORD	_A000+33		
	!BYTE	$26			; LA	_D034+1
_F062 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A002+1
_F063 	!WORD	_A002+1		
	!BYTE	$26			; LA	_D034+0
_F064 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A003+1
_F065 	!WORD	_A003+1		
	!BYTE	$26			; LA	_D035+0
_F066 	!WORD	_D035+0		
	!BYTE	$7A			; SAW	_A003+5
_F067 	!WORD	_A003+5		
	!BYTE	$26			; LA	_D034+0
_F068 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A003+8
_F069 	!WORD	_A003+8		
	!BYTE	$26			; LA	_D035+1
_F070 	!WORD	_D035+1		
	!BYTE	$7A			; SAW	_A003+12
_F071 	!WORD	_A003+12		
	!BYTE	$26			; LA	_D034+1
_F072 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A003+15
_F073 	!WORD	_A003+15		
	!BYTE	$26			; LA	_D036+0
_F074 	!WORD	_D036+0		
	!BYTE	$7A			; SAW	_A003+21
_F075 	!WORD	_A003+21		
	!BYTE	$26			; LA	_D036+1
_F076 	!WORD	_D036+1		
	!BYTE	$7A			; SAW	_A003+28
_F077 	!WORD	_A003+28		
	!BYTE	$26			; LA	_D034+0
_F078 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A004+1
_F079 	!WORD	_A004+1		
	!BYTE	$26			; LA	_D037+0
_F080 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_A004+5
_F081 	!WORD	_A004+5		
	!BYTE	$26			; LA	_D034+0
_F082 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A004+8
_F083 	!WORD	_A004+8		
	!BYTE	$26			; LA	_D037+1
_F084 	!WORD	_D037+1		
	!BYTE	$7A			; SAW	_A004+12
_F085 	!WORD	_A004+12		
	!BYTE	$26			; LA	_D034+1
_F086 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A004+15
_F087 	!WORD	_A004+15		
	!BYTE	$26			; LA	_D038+0
_F088 	!WORD	_D038+0		
	!BYTE	$7A			; SAW	_A004+21
_F089 	!WORD	_A004+21		
	!BYTE	$26			; LA	_D038+1
_F090 	!WORD	_D038+1		
	!BYTE	$7A			; SAW	_A004+28
_F091 	!WORD	_A004+28		
	!BYTE	$26			; LA	_A001+0
_F092 	!WORD	_A001+0		
	!BYTE	$7A			; SAW	_A005+1
_F093 	!WORD	_A005+1		
	!BYTE	$26			; LA	_D034+0
_F094 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A008+16
_F095 	!WORD	_A008+16		
	!BYTE	$26			; LA	_D034+1
_F096 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A008+23
_F097 	!WORD	_A008+23		
	!BYTE	$26			; LA	_D030+0
_F098 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A009+1
_F099 	!WORD	_A009+1		
	!BYTE	$26			; LA	_D034+1
_F100 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A009+4
_F101 	!WORD	_A009+4		
	!BYTE	$26			; LA	_D034+0
_F102 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A010+6
_F103 	!WORD	_A010+6		
	!BYTE	$26			; LA	_D034+0
_F104 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A010+9
_F105 	!WORD	_A010+9		
	!BYTE	$26			; LA	_D034+1
_F106 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A010+13
_F107 	!WORD	_A010+13		
	!BYTE	$26			; LA	_D034+1
_F108 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A010+16
_F109 	!WORD	_A010+16		
	!BYTE	$26			; LA	_D034+0
_F110 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A011+16
_F111 	!WORD	_A011+16		
	!BYTE	$26			; LA	_D034+1
_F112 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A011+23
_F113 	!WORD	_A011+23		
	!BYTE	$26			; LA	_D030+0
_F114 	!WORD	_D030+0		
	!BYTE	$7A			; SAW	_A012+1
_F115 	!WORD	_A012+1		
	!BYTE	$26			; LA	_D034+1
_F116 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A012+4
_F117 	!WORD	_A012+4		
	!BYTE	$26			; LA	_D034+0
_F118 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A013+6
_F119 	!WORD	_A013+6		
	!BYTE	$26			; LA	_D034+0
_F120 	!WORD	_D034+0		
	!BYTE	$7A			; SAW	_A013+9
_F121 	!WORD	_A013+9		
	!BYTE	$26			; LA	_D034+1
_F122 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A013+13
_F123 	!WORD	_A013+13		
	!BYTE	$26			; LA	_D034+1
_F124 	!WORD	_D034+1		
	!BYTE	$7A			; SAW	_A013+16
_F125 	!WORD	_A013+16		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	23			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	23			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: DIVMOD
	!BYTE	$C4,$C9,$D6,$CD,$CF,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	23			; ESD INDEX
	; DCI STRING: SETLINESPANS
	!BYTE	$D3,$C5,$D4,$CC,$C9,$CE,$C5,$D3,$D0,$C1,$CE,$53
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	; DCI STRING: LINESPANS
	!BYTE	$CC,$C9,$CE,$C5,$D3,$D0,$C1,$CE,$53
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C003		
	; DCI STRING: SETLINEPLOT
	!BYTE	$D3,$C5,$D4,$CC,$C9,$CE,$C5,$D0,$CC,$CF,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C004		
	; DCI STRING: LINE
	!BYTE	$CC,$C9,$CE,$45
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	!BYTE	$00			; END OF ESD
