; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/lz4.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/lz4.pla: 0001: 
; libsrc/lz4.pla: 0002: asm incs
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_A000 					; incs()
; libsrc/lz4.pla: 0003:         !SOURCE    "vmsrc/plvmzp.inc"
        !SOURCE    "vmsrc/plvmzp.inc"
; libsrc/lz4.pla: 0004: end
; libsrc/lz4.pla: 0005: //
; libsrc/lz4.pla: 0006: // Always forward copy memory - important for overlapping match sequences
; libsrc/lz4.pla: 0007: //
; libsrc/lz4.pla: 0008: asm bcpy(dst, src, len)#0
_A001 					; bcpy()
; libsrc/lz4.pla: 0009:         INX
        INX
; libsrc/lz4.pla: 0010:         INX
        INX
; libsrc/lz4.pla: 0011:         INX
        INX
; libsrc/lz4.pla: 0012:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; libsrc/lz4.pla: 0013:         ORA     ESTKH-3,X
        ORA     ESTKH-3,X
; libsrc/lz4.pla: 0014:         BEQ     CPYEX
        BEQ     CPYEX
; libsrc/lz4.pla: 0015:         LDA     ESTKL-1,X
        LDA     ESTKL-1,X
; libsrc/lz4.pla: 0016:         STA     DSTL
        STA     DSTL
; libsrc/lz4.pla: 0017:         LDA     ESTKH-1,X
        LDA     ESTKH-1,X
; libsrc/lz4.pla: 0018:         STA     DSTH
        STA     DSTH
; libsrc/lz4.pla: 0019:         LDA     ESTKL-2,X
        LDA     ESTKL-2,X
; libsrc/lz4.pla: 0020:         STA     SRCL
        STA     SRCL
; libsrc/lz4.pla: 0021:         LDA     ESTKH-2,X
        LDA     ESTKH-2,X
; libsrc/lz4.pla: 0022:         STA     SRCH
        STA     SRCH
; libsrc/lz4.pla: 0023:         LDY     ESTKL-3,X
        LDY     ESTKL-3,X
; libsrc/lz4.pla: 0024:         BEQ     CPYLP
        BEQ     CPYLP
; libsrc/lz4.pla: 0025:         INC     ESTKH-3,X
        INC     ESTKH-3,X
; libsrc/lz4.pla: 0026:         LDY     #$00
        LDY     #$00
; libsrc/lz4.pla: 0027: CPYLP   LDA     (SRC),Y
CPYLP   LDA     (SRC),Y
; libsrc/lz4.pla: 0028:         STA     (DST),Y
        STA     (DST),Y
; libsrc/lz4.pla: 0029:         INY
        INY
; libsrc/lz4.pla: 0030:         BNE     +
        BNE     +
; libsrc/lz4.pla: 0031:         INC     DSTH
        INC     DSTH
; libsrc/lz4.pla: 0032:         INC     SRCH
        INC     SRCH
; libsrc/lz4.pla: 0033: +       DEC     ESTKL-3,X
+       DEC     ESTKL-3,X
; libsrc/lz4.pla: 0034:         BNE     CPYLP
        BNE     CPYLP
; libsrc/lz4.pla: 0035:         DEC     ESTKH-3,X
        DEC     ESTKH-3,X
; libsrc/lz4.pla: 0036:         BNE     CPYLP
        BNE     CPYLP
; libsrc/lz4.pla: 0037: CPYEX   RTS
CPYEX   RTS
; libsrc/lz4.pla: 0038: end
; libsrc/lz4.pla: 0039: //
; libsrc/lz4.pla: 0040: // Unpack LZ4 sequence into buffer, return unpacked length
; libsrc/lz4.pla: 0041: //
; libsrc/lz4.pla: 0042: export def lz4Unpack(seq, seqend, buff, buffend)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; seq -> [0]
					; seqend -> [2]
					; buff -> [4]
					; buffend -> [6]
_C000 					; lz4Unpack()
; libsrc/lz4.pla: 0043:     word data, len, match, i
					; data -> [8]
					; len -> [10]
					; match -> [12]
					; i -> [14]
; libsrc/lz4.pla: 0044:     byte token
					; token -> [16]
; libsrc/lz4.pla: 0045: 
; libsrc/lz4.pla: 0046:     data = buff
	!BYTE	$58,$11,$04		; ENTER	17,4
; libsrc/lz4.pla: 0047:     while isult(seq, seqend)
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; libsrc/lz4.pla: 0048:         token = ^seq
; libsrc/lz4.pla: 0049:         seq++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$10			; SLB	[16]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/lz4.pla: 0050:         len = token >> 4
; libsrc/lz4.pla: 0051:         if len
; libsrc/lz4.pla: 0052:             //
; libsrc/lz4.pla: 0053:             // Literal sequence
; libsrc/lz4.pla: 0054:             //
; libsrc/lz4.pla: 0055:             if len == 15
; libsrc/lz4.pla: 0056:                 while ^seq == 255
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$64,$10			; LLB	[16]
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B006
	!WORD	_B006-*
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B008 
; libsrc/lz4.pla: 0057:                     len = len + 255
; libsrc/lz4.pla: 0058:                     seq++
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$FF			; ADDI	255
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/lz4.pla: 0059:                 loop
	!BYTE	$76,$00			; SLW	[0]
_B010 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$22			; BREQ	_B008
	!WORD	_B008-*
_B009 
; libsrc/lz4.pla: 0060:                 len = len + ^seq
; libsrc/lz4.pla: 0061:                 seq++
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/lz4.pla: 0062:             fin
	!BYTE	$76,$00			; SLW	[0]
_B006 
_B007 
; libsrc/lz4.pla: 0063:             if isuge(data + len, buffend); return 0; fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X025
_F000 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$11			; LEAVE	17
_B011 
_B012 
; libsrc/lz4.pla: 0064:             bcpy(data, seq, len)
; libsrc/lz4.pla: 0065:             data = data + len
; libsrc/lz4.pla: 0066:             seq  = seq  + len
; libsrc/lz4.pla: 0067:         fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$54			; CALL	_A001
_F001 	!WORD	_A001		
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$76,$00			; SLW	[0]
_B004 
_B005 
; libsrc/lz4.pla: 0068:         len = token & $0F
; libsrc/lz4.pla: 0069:         if len or isult(seq, seqend)
; libsrc/lz4.pla: 0070:             //
; libsrc/lz4.pla: 0071:             // Match sequence
; libsrc/lz4.pla: 0072:             //
; libsrc/lz4.pla: 0073:             match =  data - *seq
; libsrc/lz4.pla: 0074:             seq   = seq + 2
; libsrc/lz4.pla: 0075:             len   = len + 4
; libsrc/lz4.pla: 0076:             if len == 19 // $0F + 4
; libsrc/lz4.pla: 0077:                 while ^seq == 255
	!BYTE	$64,$10			; LLB	[16]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$AE			; BROR	_B013
	!WORD	_B013-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X026
_F002 	!WORD	0		
_B013 
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$2A,$13			; CB	19
	!BYTE	$24			; BRNE	_B016
	!WORD	_B016-*
	!BYTE	$50			; BRNCH	_B020
	!WORD	_B020-*
_B018 
; libsrc/lz4.pla: 0078:                     len = len + 255
; libsrc/lz4.pla: 0079:                     seq++
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$38,$FF			; ADDI	255
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/lz4.pla: 0080:                 loop
	!BYTE	$76,$00			; SLW	[0]
_B020 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$22			; BREQ	_B018
	!WORD	_B018-*
_B019 
; libsrc/lz4.pla: 0081:                 len = len + ^seq
; libsrc/lz4.pla: 0082:                 seq++
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; libsrc/lz4.pla: 0083:             fin
	!BYTE	$76,$00			; SLW	[0]
_B016 
_B017 
; libsrc/lz4.pla: 0084:             if isuge(data + len, buffend); return 0; fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X025
_F003 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$11			; LEAVE	17
_B021 
_B022 
; libsrc/lz4.pla: 0085:             bcpy(data, match, len)
; libsrc/lz4.pla: 0086:             data = data + len
; libsrc/lz4.pla: 0087:         fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$54			; CALL	_A001
_F004 	!WORD	_A001		
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$76,$08			; SLW	[8]
_B014 
_B015 
; libsrc/lz4.pla: 0088:     loop
_B003 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X026
_F005 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; libsrc/lz4.pla: 0089:     return data - buff
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$84			; SUB 
	!BYTE	$5A,$11			; LEAVE	17
; libsrc/lz4.pla: 0090: end
; libsrc/lz4.pla: 0091: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	25			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	26			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	25			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	26			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: ISUGE
	!BYTE	$C9,$D3,$D5,$C7,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	25			; ESD INDEX
	; DCI STRING: ISULT
	!BYTE	$C9,$D3,$D5,$CC,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	26			; ESD INDEX
	; DCI STRING: LZ4UNPACK
	!BYTE	$CC,$DA,$B4,$D5,$CE,$D0,$C1,$C3,$4B
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C000		
	!BYTE	$00			; END OF ESD
