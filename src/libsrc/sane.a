; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; libsrc/sane.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; libsrc/sane.pla: 0001: 
; libsrc/sane.pla: 0002: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X028
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X029
; inc/fileio.plh: 0080: end
; libsrc/sane.pla: 0002: 
; libsrc/sane.pla: 0003: const AUXADDR = $E000 // Location of SANE on 128K //e or //c
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; AUXADDR = 57344
; libsrc/sane.pla: 0004: struc t_diskinfo
; libsrc/sane.pla: 0005:     word codelen
					; codelen = 0
; libsrc/sane.pla: 0006:     word codeaddr
					; codeaddr = 2
; libsrc/sane.pla: 0007: end
					; t_diskinfo = 4
; libsrc/sane.pla: 0008: struc t_codefile
; libsrc/sane.pla: 0009:     byte[16*t_diskinfo] diskinfo
					; diskinfo = 0
; libsrc/sane.pla: 0010:     byte[16*8]          segname
					; segname = 64
; libsrc/sane.pla: 0011:     word[16]            segkind
					; segkind = 192
; libsrc/sane.pla: 0012:     word[16]            textaddr
					; textaddr = 224
; libsrc/sane.pla: 0013:     word[16]            seginfo
					; seginfo = 256
; libsrc/sane.pla: 0014: end
					; t_codefile = 288
; libsrc/sane.pla: 0015: //
; libsrc/sane.pla: 0016: // External interface to SANE libraries
; libsrc/sane.pla: 0017: //
; libsrc/sane.pla: 0018: predef fpInit(), fpDefaultHalt(pstatus), uninit0(), uninit1(op, dst), uninit2(op, dst, src), uninit3(op, dst, src, src2)
; libsrc/sane.pla: 0019: //export word sane = @fpInit, @fpDefaultHalt, @uninit0, @uninit1, @uninit2, @uninit3, @uninit1, @uninit2, @uninit3, @uninit0, @uninit0
; libsrc/sane.pla: 0020: word sane = @fpInit, @fpDefaultHalt, @uninit0, @uninit1, @uninit2, @uninit3, @uninit1, @uninit2, @uninit3, @uninit0, @uninit0
_D036 					; sane = @fpInit, @fpDefaultHalt, @uninit0, @uninit1, @uninit2, @uninit3, @uninit1, @uninit2, @uninit3, @uninit0, @uninit0
_F000 	!WORD	_P000
_F001 	!WORD	_P001
_F002 	!WORD	_P002
_F003 	!WORD	_P003
_F004 	!WORD	_P004
_F005 	!WORD	_P005
_F006 	!WORD	_P003
_F007 	!WORD	_P004
_F008 	!WORD	_P005
_F009 	!WORD	_P002
_F010 	!WORD	_P002
; libsrc/sane.pla: 0021: //
; libsrc/sane.pla: 0022: // Pointer to FP6502 entry
; libsrc/sane.pla: 0023: //
; libsrc/sane.pla: 0024: word fp6502
_D037 	!FILL	2			; fp6502
; libsrc/sane.pla: 0025: //
; libsrc/sane.pla: 0026: // PLASMA <-> SANE interface routines
; libsrc/sane.pla: 0027: //
; libsrc/sane.pla: 0028: asm equates
_A000 					; equates()
; libsrc/sane.pla: 0029:         !SOURCE "vmsrc/plvmzp.inc"
        !SOURCE "vmsrc/plvmzp.inc"
; libsrc/sane.pla: 0030: end
; libsrc/sane.pla: 0031: //
; libsrc/sane.pla: 0032: // HALT exception handling
; libsrc/sane.pla: 0033: //
; libsrc/sane.pla: 0034: asm xfpHalt
_A001 					; xfpHalt()
; libsrc/sane.pla: 0035:         STX     SRC         ; COPY STATUS RECORD TO MAIN MEMORY
        STX     SRC         ; COPY STATUS RECORD TO MAIN MEMORY
; libsrc/sane.pla: 0036:         STY     SRC+1
        STY     SRC+1
; libsrc/sane.pla: 0037:         LDY     #$08
        LDY     #$08
; libsrc/sane.pla: 0038: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; libsrc/sane.pla: 0039:         STA     $02F7,Y
        STA     $02F7,Y
; libsrc/sane.pla: 0040:         DEY
        DEY
; libsrc/sane.pla: 0041:         BPL     -
        BPL     -
; libsrc/sane.pla: 0042:         PLA
        PLA
; libsrc/sane.pla: 0043:         TAX
        TAX
; libsrc/sane.pla: 0044:         PLA
        PLA
; libsrc/sane.pla: 0045:         TAY
        TAY
; libsrc/sane.pla: 0046:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0047:         PLP
        PLP
; libsrc/sane.pla: 0048:         TYA
        TYA
; libsrc/sane.pla: 0049:         PHA
        PHA
; libsrc/sane.pla: 0050:         TXA
        TXA
; libsrc/sane.pla: 0051:         PHA
        PHA
; libsrc/sane.pla: 0052:         LDY     #$02        ; POINT TO MOVED STATUS RECORD
        LDY     #$02        ; POINT TO MOVED STATUS RECORD
; libsrc/sane.pla: 0053:         LDX     #$F7
        LDX     #$F7
; libsrc/sane.pla: 0054: end
; libsrc/sane.pla: 0055: asm fpHalt
_A002 					; fpHalt()
; libsrc/sane.pla: 0056:         STA     $C008
        STA     $C008
; libsrc/sane.pla: 0057:         TXA
        TXA
; libsrc/sane.pla: 0058:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0059:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0060:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0061:         PLA                 ; POP RETURN TO fpOp?
        PLA                 ; POP RETURN TO fpOp?
; libsrc/sane.pla: 0062:         PLA
        PLA
; libsrc/sane.pla: 0063: end
; libsrc/sane.pla: 0064: asm fixupHLT
_A003 					; fixupHLT()
; libsrc/sane.pla: 0065:         JMP     ($FFF0)     ; JUMP THROUGH PLASMA HALT VECTOR
        JMP     ($FFF0)     ; JUMP THROUGH PLASMA HALT VECTOR
; libsrc/sane.pla: 0066: end
; libsrc/sane.pla: 0067: //
; libsrc/sane.pla: 0068: // Main memory FP6502 API
; libsrc/sane.pla: 0069: //
; libsrc/sane.pla: 0070: asm fpOp0(op)#1
_A004 					; fpOp0()
; libsrc/sane.pla: 0071:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0072:         PHA
        PHA
; libsrc/sane.pla: 0073:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0074:         PHA
        PHA
; libsrc/sane.pla: 0075:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0076: end
; libsrc/sane.pla: 0077: asm fixupFP0
_A005 					; fixupFP0()
; libsrc/sane.pla: 0078:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0079:         TXA
        TXA
; libsrc/sane.pla: 0080:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0081:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0082:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0083:         RTS
        RTS
; libsrc/sane.pla: 0084: end
; libsrc/sane.pla: 0085: asm fpOp1(op, dst)#1
_A006 					; fpOp1()
; libsrc/sane.pla: 0086:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0087:         PHA
        PHA
; libsrc/sane.pla: 0088:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0089:         PHA
        PHA
; libsrc/sane.pla: 0090:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0091:         PHA
        PHA
; libsrc/sane.pla: 0092:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0093:         PHA
        PHA
; libsrc/sane.pla: 0094:         INX
        INX
; libsrc/sane.pla: 0095:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0096: end
; libsrc/sane.pla: 0097: asm fixupFP1
_A007 					; fixupFP1()
; libsrc/sane.pla: 0098:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0099:         TXA
        TXA
; libsrc/sane.pla: 0100:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0101:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0102:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0103:         RTS
        RTS
; libsrc/sane.pla: 0104: end
; libsrc/sane.pla: 0105: asm fpOp2(op, dst, src)#1
_A008 					; fpOp2()
; libsrc/sane.pla: 0106:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0107:         PHA
        PHA
; libsrc/sane.pla: 0108:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0109:         PHA
        PHA
; libsrc/sane.pla: 0110:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0111:         PHA
        PHA
; libsrc/sane.pla: 0112:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0113:         PHA
        PHA
; libsrc/sane.pla: 0114:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0115:         PHA
        PHA
; libsrc/sane.pla: 0116:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0117:         PHA
        PHA
; libsrc/sane.pla: 0118:         INX
        INX
; libsrc/sane.pla: 0119:         INX
        INX
; libsrc/sane.pla: 0120:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0121: end
; libsrc/sane.pla: 0122: asm fixupFP2
_A009 					; fixupFP2()
; libsrc/sane.pla: 0123:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0124:         TXA
        TXA
; libsrc/sane.pla: 0125:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0126:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0127:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0128:         RTS
        RTS
; libsrc/sane.pla: 0129: end
; libsrc/sane.pla: 0130: asm fpOp3(op, dst, src, src2)#1
_A010 					; fpOp3()
; libsrc/sane.pla: 0131:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0132:         PHA
        PHA
; libsrc/sane.pla: 0133:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0134:         PHA
        PHA
; libsrc/sane.pla: 0135:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0136:         PHA
        PHA
; libsrc/sane.pla: 0137:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0138:         PHA
        PHA
; libsrc/sane.pla: 0139:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0140:         PHA
        PHA
; libsrc/sane.pla: 0141:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0142:         PHA
        PHA
; libsrc/sane.pla: 0143:         LDA     ESTKH+3,X
        LDA     ESTKH+3,X
; libsrc/sane.pla: 0144:         PHA
        PHA
; libsrc/sane.pla: 0145:         LDA     ESTKL+3,X
        LDA     ESTKL+3,X
; libsrc/sane.pla: 0146:         PHA
        PHA
; libsrc/sane.pla: 0147:         INX
        INX
; libsrc/sane.pla: 0148:         INX
        INX
; libsrc/sane.pla: 0149:         INX
        INX
; libsrc/sane.pla: 0150:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0151: end
; libsrc/sane.pla: 0152: asm fixupFP3
_A011 					; fixupFP3()
; libsrc/sane.pla: 0153:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0154:         TXA
        TXA
; libsrc/sane.pla: 0155:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0156:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0157:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0158:         RTS
        RTS
; libsrc/sane.pla: 0159: end
; libsrc/sane.pla: 0160: //
; libsrc/sane.pla: 0161: // AUX memory FP6502 API
; libsrc/sane.pla: 0162: //
; libsrc/sane.pla: 0163: asm xfpOp0(op)#1
_A012 					; xfpOp0()
; libsrc/sane.pla: 0164:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0165:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0166:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0167:         PHP
        PHP
; libsrc/sane.pla: 0168:         SEI
        SEI
; libsrc/sane.pla: 0169:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0170:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0171:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0172:         PHA
        PHA
; libsrc/sane.pla: 0173:         TYA
        TYA
; libsrc/sane.pla: 0174:         PHA
        PHA
; libsrc/sane.pla: 0175:         JSR     $E000
        JSR     $E000
; libsrc/sane.pla: 0176:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0177:         PLP
        PLP
; libsrc/sane.pla: 0178:         TXA
        TXA
; libsrc/sane.pla: 0179:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0180:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0181:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0182:         RTS
        RTS
; libsrc/sane.pla: 0183: end
; libsrc/sane.pla: 0184: asm xfpOp1(op, dst)#1
_A013 					; xfpOp1()
; libsrc/sane.pla: 0185:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0186:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0187:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0188:         STA     $02FF
        STA     $02FF
; libsrc/sane.pla: 0189:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0190:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0191:         INX
        INX
; libsrc/sane.pla: 0192:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0193:         PHP
        PHP
; libsrc/sane.pla: 0194:         SEI
        SEI
; libsrc/sane.pla: 0195:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0196:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0197:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0198:         PHA
        PHA
; libsrc/sane.pla: 0199:         TYA
        TYA
; libsrc/sane.pla: 0200:         PHA
        PHA
; libsrc/sane.pla: 0201:         LDA     $02FF
        LDA     $02FF
; libsrc/sane.pla: 0202:         PHA
        PHA
; libsrc/sane.pla: 0203:         LDA     $02FE
        LDA     $02FE
; libsrc/sane.pla: 0204:         PHA
        PHA
; libsrc/sane.pla: 0205:         JSR     $E000
        JSR     $E000
; libsrc/sane.pla: 0206:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0207:         PLP
        PLP
; libsrc/sane.pla: 0208:         TXA
        TXA
; libsrc/sane.pla: 0209:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0210:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0211:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0212:         RTS
        RTS
; libsrc/sane.pla: 0213: end
; libsrc/sane.pla: 0214: asm xfpOp2(op, dst, src)#1
_A014 					; xfpOp2()
; libsrc/sane.pla: 0215:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0216:         STA     $02FC
        STA     $02FC
; libsrc/sane.pla: 0217:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0218:         STA     $02FD
        STA     $02FD
; libsrc/sane.pla: 0219:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0220:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0221:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0222:         STA     $02FF
        STA     $02FF
; libsrc/sane.pla: 0223:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0224:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0225:         INX
        INX
; libsrc/sane.pla: 0226:         INX
        INX
; libsrc/sane.pla: 0227:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0228:         PHP
        PHP
; libsrc/sane.pla: 0229:         SEI
        SEI
; libsrc/sane.pla: 0230:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0231:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0232:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0233:         PHA
        PHA
; libsrc/sane.pla: 0234:         TYA
        TYA
; libsrc/sane.pla: 0235:         PHA
        PHA
; libsrc/sane.pla: 0236:         LDA     $02FF
        LDA     $02FF
; libsrc/sane.pla: 0237:         PHA
        PHA
; libsrc/sane.pla: 0238:         LDA     $02FE
        LDA     $02FE
; libsrc/sane.pla: 0239:         PHA
        PHA
; libsrc/sane.pla: 0240:         LDA     $02FD
        LDA     $02FD
; libsrc/sane.pla: 0241:         PHA
        PHA
; libsrc/sane.pla: 0242:         LDA     $02FC
        LDA     $02FC
; libsrc/sane.pla: 0243:         PHA
        PHA
; libsrc/sane.pla: 0244:         JSR     $E000
        JSR     $E000
; libsrc/sane.pla: 0245:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0246:         PLP
        PLP
; libsrc/sane.pla: 0247:         TXA
        TXA
; libsrc/sane.pla: 0248:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0249:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0250:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0251:         RTS
        RTS
; libsrc/sane.pla: 0252: end
; libsrc/sane.pla: 0253: asm xfpOp3(op, dst, src, src2)#1
_A015 					; xfpOp3()
; libsrc/sane.pla: 0254:         LDA     ESTKL+3,X
        LDA     ESTKL+3,X
; libsrc/sane.pla: 0255:         STA     $02FA
        STA     $02FA
; libsrc/sane.pla: 0256:         LDA     ESTKH+3,X
        LDA     ESTKH+3,X
; libsrc/sane.pla: 0257:         STA     $02FB
        STA     $02FB
; libsrc/sane.pla: 0258:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0259:         STA     $02FC
        STA     $02FC
; libsrc/sane.pla: 0260:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0261:         STA     $02FD
        STA     $02FD
; libsrc/sane.pla: 0262:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0263:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0264:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0265:         STA     $02FF
        STA     $02FF
; libsrc/sane.pla: 0266:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0267:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0268:         INX
        INX
; libsrc/sane.pla: 0269:         INX
        INX
; libsrc/sane.pla: 0270:         INX
        INX
; libsrc/sane.pla: 0271:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0272:         PHP
        PHP
; libsrc/sane.pla: 0273:         SEI
        SEI
; libsrc/sane.pla: 0274:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0275:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0276:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0277:         PHA
        PHA
; libsrc/sane.pla: 0278:         TYA
        TYA
; libsrc/sane.pla: 0279:         PHA
        PHA
; libsrc/sane.pla: 0280:         LDA     $02FF
        LDA     $02FF
; libsrc/sane.pla: 0281:         PHA
        PHA
; libsrc/sane.pla: 0282:         LDA     $02FE
        LDA     $02FE
; libsrc/sane.pla: 0283:         PHA
        PHA
; libsrc/sane.pla: 0284:         LDA     $02FD
        LDA     $02FD
; libsrc/sane.pla: 0285:         PHA
        PHA
; libsrc/sane.pla: 0286:         LDA     $02FC
        LDA     $02FC
; libsrc/sane.pla: 0287:         PHA
        PHA
; libsrc/sane.pla: 0288:         LDA     $02FB
        LDA     $02FB
; libsrc/sane.pla: 0289:         PHA
        PHA
; libsrc/sane.pla: 0290:         LDA     $02FA
        LDA     $02FA
; libsrc/sane.pla: 0291:         PHA
        PHA
; libsrc/sane.pla: 0292:         JSR     $E000
        JSR     $E000
; libsrc/sane.pla: 0293:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0294:         PLP
        PLP
; libsrc/sane.pla: 0295:         TXA
        TXA
; libsrc/sane.pla: 0296:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0297:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0298:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0299:         RTS
        RTS
; libsrc/sane.pla: 0300: end
; libsrc/sane.pla: 0301: //
; libsrc/sane.pla: 0302: // Main memory ELEMS6502 API
; libsrc/sane.pla: 0303: //
; libsrc/sane.pla: 0304: asm elemsOp1(op, dst)#1
_A016 					; elemsOp1()
; libsrc/sane.pla: 0305:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0306:         PHA
        PHA
; libsrc/sane.pla: 0307:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0308:         PHA
        PHA
; libsrc/sane.pla: 0309:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0310:         PHA
        PHA
; libsrc/sane.pla: 0311:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0312:         PHA
        PHA
; libsrc/sane.pla: 0313:         INX
        INX
; libsrc/sane.pla: 0314:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0315: end
; libsrc/sane.pla: 0316: asm fixupEL1
_A017 					; fixupEL1()
; libsrc/sane.pla: 0317:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0318:         TXA
        TXA
; libsrc/sane.pla: 0319:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0320:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0321:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0322:         RTS
        RTS
; libsrc/sane.pla: 0323: end
; libsrc/sane.pla: 0324: asm elemsOp2(op, dst, src)#1
_A018 					; elemsOp2()
; libsrc/sane.pla: 0325:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0326:         PHA
        PHA
; libsrc/sane.pla: 0327:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0328:         PHA
        PHA
; libsrc/sane.pla: 0329:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0330:         PHA
        PHA
; libsrc/sane.pla: 0331:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0332:         PHA
        PHA
; libsrc/sane.pla: 0333:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0334:         PHA
        PHA
; libsrc/sane.pla: 0335:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0336:         PHA
        PHA
; libsrc/sane.pla: 0337:         INX
        INX
; libsrc/sane.pla: 0338:         INX
        INX
; libsrc/sane.pla: 0339:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0340: end
; libsrc/sane.pla: 0341: asm fixupEL2
_A019 					; fixupEL2()
; libsrc/sane.pla: 0342:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0343:         TXA
        TXA
; libsrc/sane.pla: 0344:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0345:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0346:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0347:         RTS
        RTS
; libsrc/sane.pla: 0348: end
; libsrc/sane.pla: 0349: asm elemsOp3(op, dst, src, src2)#1
_A020 					; elemsOp3()
; libsrc/sane.pla: 0350:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0351:         PHA
        PHA
; libsrc/sane.pla: 0352:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0353:         PHA
        PHA
; libsrc/sane.pla: 0354:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0355:         PHA
        PHA
; libsrc/sane.pla: 0356:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0357:         PHA
        PHA
; libsrc/sane.pla: 0358:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0359:         PHA
        PHA
; libsrc/sane.pla: 0360:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0361:         PHA
        PHA
; libsrc/sane.pla: 0362:         LDA     ESTKH+3,X
        LDA     ESTKH+3,X
; libsrc/sane.pla: 0363:         PHA
        PHA
; libsrc/sane.pla: 0364:         LDA     ESTKL+3,X
        LDA     ESTKL+3,X
; libsrc/sane.pla: 0365:         PHA
        PHA
; libsrc/sane.pla: 0366:         INX
        INX
; libsrc/sane.pla: 0367:         INX
        INX
; libsrc/sane.pla: 0368:         INX
        INX
; libsrc/sane.pla: 0369:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0370: end
; libsrc/sane.pla: 0371: asm fixupEL3
_A021 					; fixupEL3()
; libsrc/sane.pla: 0372:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0373:         TXA
        TXA
; libsrc/sane.pla: 0374:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0375:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0376:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0377:         RTS
        RTS
; libsrc/sane.pla: 0378: end
; libsrc/sane.pla: 0379: //
; libsrc/sane.pla: 0380: // AUX memory ELEMS6502 API
; libsrc/sane.pla: 0381: //
; libsrc/sane.pla: 0382: asm xelemsOp1(op, dst)#1
_A022 					; xelemsOp1()
; libsrc/sane.pla: 0383:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0384:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0385:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0386:         STA     $02FF
        STA     $02FF
; libsrc/sane.pla: 0387:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0388:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0389:         INX
        INX
; libsrc/sane.pla: 0390:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0391:         PHP
        PHP
; libsrc/sane.pla: 0392:         SEI
        SEI
; libsrc/sane.pla: 0393:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0394:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0395:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0396:         PHA
        PHA
; libsrc/sane.pla: 0397:         TYA
        TYA
; libsrc/sane.pla: 0398:         PHA
        PHA
; libsrc/sane.pla: 0399:         LDA     $02FF
        LDA     $02FF
; libsrc/sane.pla: 0400:         PHA
        PHA
; libsrc/sane.pla: 0401:         LDA     $02FE
        LDA     $02FE
; libsrc/sane.pla: 0402:         PHA
        PHA
; libsrc/sane.pla: 0403: end
; libsrc/sane.pla: 0404: asm fixupXEL1
_A023 					; fixupXEL1()
; libsrc/sane.pla: 0405:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0406:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0407:         PLP
        PLP
; libsrc/sane.pla: 0408:         TXA
        TXA
; libsrc/sane.pla: 0409:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0410:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0411:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0412:         RTS
        RTS
; libsrc/sane.pla: 0413: end
; libsrc/sane.pla: 0414: asm xelemsOp2(op, dst, src)#1
_A024 					; xelemsOp2()
; libsrc/sane.pla: 0415:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0416:         STA     $02FC
        STA     $02FC
; libsrc/sane.pla: 0417:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0418:         STA     $02FD
        STA     $02FD
; libsrc/sane.pla: 0419:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0420:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0421:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0422:         STA     $02FF
        STA     $02FF
; libsrc/sane.pla: 0423:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0424:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0425:         INX
        INX
; libsrc/sane.pla: 0426:         INX
        INX
; libsrc/sane.pla: 0427:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0428:         PHP
        PHP
; libsrc/sane.pla: 0429:         SEI
        SEI
; libsrc/sane.pla: 0430:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0431:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0432:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0433:         PHA
        PHA
; libsrc/sane.pla: 0434:         TYA
        TYA
; libsrc/sane.pla: 0435:         PHA
        PHA
; libsrc/sane.pla: 0436:         LDA     $02FF
        LDA     $02FF
; libsrc/sane.pla: 0437:         PHA
        PHA
; libsrc/sane.pla: 0438:         LDA     $02FE
        LDA     $02FE
; libsrc/sane.pla: 0439:         PHA
        PHA
; libsrc/sane.pla: 0440:         LDA     $02FD
        LDA     $02FD
; libsrc/sane.pla: 0441:         PHA
        PHA
; libsrc/sane.pla: 0442:         LDA     $02FC
        LDA     $02FC
; libsrc/sane.pla: 0443:         PHA
        PHA
; libsrc/sane.pla: 0444: end
; libsrc/sane.pla: 0445: asm fixupXEL2
_A025 					; fixupXEL2()
; libsrc/sane.pla: 0446:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0447:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0448:         PLP
        PLP
; libsrc/sane.pla: 0449:         TXA
        TXA
; libsrc/sane.pla: 0450:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0451:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0452:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0453:         RTS
        RTS
; libsrc/sane.pla: 0454: end
; libsrc/sane.pla: 0455: asm xelemsOp3(op, dst, src, src2)#1
_A026 					; xelemsOp3()
; libsrc/sane.pla: 0456:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0457:         STA     $02FA
        STA     $02FA
; libsrc/sane.pla: 0458:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0459:         STA     $02FB
        STA     $02FB
; libsrc/sane.pla: 0460:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0461:         STA     $02FC
        STA     $02FC
; libsrc/sane.pla: 0462:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0463:         STA     $02FD
        STA     $02FD
; libsrc/sane.pla: 0464:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0465:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0466:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0467:         STA     $02FF
        STA     $02FF
; libsrc/sane.pla: 0468:         LDY     ESTKL,X
        LDY     ESTKL,X
; libsrc/sane.pla: 0469:         LDA     ESTKH,X
        LDA     ESTKH,X
; libsrc/sane.pla: 0470:         INX
        INX
; libsrc/sane.pla: 0471:         INX
        INX
; libsrc/sane.pla: 0472:         INX
        INX
; libsrc/sane.pla: 0473:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0474:         PHP
        PHP
; libsrc/sane.pla: 0475:         SEI
        SEI
; libsrc/sane.pla: 0476:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0477:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0478:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0479:         PHA
        PHA
; libsrc/sane.pla: 0480:         TYA
        TYA
; libsrc/sane.pla: 0481:         PHA
        PHA
; libsrc/sane.pla: 0482:         LDA     $02FF
        LDA     $02FF
; libsrc/sane.pla: 0483:         PHA
        PHA
; libsrc/sane.pla: 0484:         LDA     $02FE
        LDA     $02FE
; libsrc/sane.pla: 0485:         PHA
        PHA
; libsrc/sane.pla: 0486:         LDA     $02FD
        LDA     $02FD
; libsrc/sane.pla: 0487:         PHA
        PHA
; libsrc/sane.pla: 0488:         LDA     $02FC
        LDA     $02FC
; libsrc/sane.pla: 0489:         PHA
        PHA
; libsrc/sane.pla: 0490:         LDA     $02FB
        LDA     $02FB
; libsrc/sane.pla: 0491:         PHA
        PHA
; libsrc/sane.pla: 0492:         LDA     $02FA
        LDA     $02FA
; libsrc/sane.pla: 0493:         PHA
        PHA
; libsrc/sane.pla: 0494: end
; libsrc/sane.pla: 0495: asm fixupXEL3
_A027 					; fixupXEL3()
; libsrc/sane.pla: 0496:         JSR     $FFF0
        JSR     $FFF0
; libsrc/sane.pla: 0497:         STA     $C008       ; BACK TO MAINZP
        STA     $C008       ; BACK TO MAINZP
; libsrc/sane.pla: 0498:         PLP
        PLP
; libsrc/sane.pla: 0499:         TXA
        TXA
; libsrc/sane.pla: 0500:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0501:         STA     ESTKL,X
        STA     ESTKL,X
; libsrc/sane.pla: 0502:         STY     ESTKH,X
        STY     ESTKH,X
; libsrc/sane.pla: 0503:         RTS
        RTS
; libsrc/sane.pla: 0504: end
; libsrc/sane.pla: 0505: asm zpSaveX#1           // Save Apple /// XDATA
_A028 					; zpSaveX()
; libsrc/sane.pla: 0506: XPAGE   =       $1600
XPAGE   =       $1600
; libsrc/sane.pla: 0507:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0508:         LDX     #$00
        LDX     #$00
; libsrc/sane.pla: 0509:         LDY     #$33
        LDY     #$33
; libsrc/sane.pla: 0510: -       LDA     XPAGE,Y
-       LDA     XPAGE,Y
; libsrc/sane.pla: 0511: end
; libsrc/sane.pla: 0512: asm fixupXS
_A029 					; fixupXS()
; libsrc/sane.pla: 0513:         STA     $FFFF,Y
        STA     $FFFF,Y
; libsrc/sane.pla: 0514:         TXA
        TXA
; libsrc/sane.pla: 0515:         STA     XPAGE,Y
        STA     XPAGE,Y
; libsrc/sane.pla: 0516:         DEY
        DEY
; libsrc/sane.pla: 0517:         BPL     -
        BPL     -
; libsrc/sane.pla: 0518:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0519: end
; libsrc/sane.pla: 0520: asm zpSave#1
_A030 					; zpSave()
; libsrc/sane.pla: 0521:         LDY     #$33
        LDY     #$33
; libsrc/sane.pla: 0522: -       LDA     $00,Y
-       LDA     $00,Y
; libsrc/sane.pla: 0523: end
; libsrc/sane.pla: 0524: asm fixupZPS
_A031 					; fixupZPS()
; libsrc/sane.pla: 0525:         STA     $FFFF,Y
        STA     $FFFF,Y
; libsrc/sane.pla: 0526:         DEY
        DEY
; libsrc/sane.pla: 0527:         BPL     -
        BPL     -
; libsrc/sane.pla: 0528: end
; libsrc/sane.pla: 0529: asm zpNopSave
_A032 					; zpNopSave()
; libsrc/sane.pla: 0530:         DEX
        DEX
; libsrc/sane.pla: 0531:         RTS
        RTS
; libsrc/sane.pla: 0532: end
; libsrc/sane.pla: 0533: asm zpRestoreX(passthru)#1 // Restore Apple /// XDATA
_A033 					; zpRestoreX()
; libsrc/sane.pla: 0534:         LDY     #$33
        LDY     #$33
; libsrc/sane.pla: 0535: end
; libsrc/sane.pla: 0536: asm fixupXR
_A034 					; fixupXR()
; libsrc/sane.pla: 0537: -       LDA     $FFFF,Y
-       LDA     $FFFF,Y
; libsrc/sane.pla: 0538:         STA     XPAGE,Y
        STA     XPAGE,Y
; libsrc/sane.pla: 0539:         DEY
        DEY
; libsrc/sane.pla: 0540:         BPL     -
        BPL     -
; libsrc/sane.pla: 0541: end
; libsrc/sane.pla: 0542: asm zpRestore(passthru)#1
_A035 					; zpRestore()
; libsrc/sane.pla: 0543:         LDY     #$33
        LDY     #$33
; libsrc/sane.pla: 0544: end
; libsrc/sane.pla: 0545: asm fixupZPR
_A036 					; fixupZPR()
; libsrc/sane.pla: 0546: -       LDA     $FFFF,Y
-       LDA     $FFFF,Y
; libsrc/sane.pla: 0547:         STA     $00,Y
        STA     $00,Y
; libsrc/sane.pla: 0548:         DEY
        DEY
; libsrc/sane.pla: 0549:         BPL     -
        BPL     -
; libsrc/sane.pla: 0550: end
; libsrc/sane.pla: 0551: asm zpNopRestore(passthru)#1
_A037 					; zpNopRestore()
; libsrc/sane.pla: 0552:         RTS
        RTS
; libsrc/sane.pla: 0553: end
; libsrc/sane.pla: 0554: asm auxmove(dst, src, len)#0
_A038 					; auxmove()
; libsrc/sane.pla: 0555:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; libsrc/sane.pla: 0556:         STA     $02FA
        STA     $02FA
; libsrc/sane.pla: 0557:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; libsrc/sane.pla: 0558:         STA     $02FB
        STA     $02FB
; libsrc/sane.pla: 0559:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; libsrc/sane.pla: 0560:         STA     $02FC
        STA     $02FC
; libsrc/sane.pla: 0561:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; libsrc/sane.pla: 0562:         STA     $02FD
        STA     $02FD
; libsrc/sane.pla: 0563:         LDA     ESTKL,X
        LDA     ESTKL,X
; libsrc/sane.pla: 0564:         STA     $02FE
        STA     $02FE
; libsrc/sane.pla: 0565:         CLC
        CLC
; libsrc/sane.pla: 0566:         BEQ     +
        BEQ     +
; libsrc/sane.pla: 0567:         SEC
        SEC
; libsrc/sane.pla: 0568: +       LDA     #$00
+       LDA     #$00
; libsrc/sane.pla: 0569:         TAY
        TAY
; libsrc/sane.pla: 0570:         ADC     ESTKH,X
        ADC     ESTKH,X
; libsrc/sane.pla: 0571:         INX
        INX
; libsrc/sane.pla: 0572:         INX
        INX
; libsrc/sane.pla: 0573:         INX
        INX
; libsrc/sane.pla: 0574:         STX     ESP
        STX     ESP
; libsrc/sane.pla: 0575:         TAX
        TAX
; libsrc/sane.pla: 0576:         PHP
        PHP
; libsrc/sane.pla: 0577:         SEI
        SEI
; libsrc/sane.pla: 0578:         STA     $C009       ; SELECT ALTZP
        STA     $C009       ; SELECT ALTZP
; libsrc/sane.pla: 0579:         BIT     $C083       ; R/W LC BANK2
        BIT     $C083       ; R/W LC BANK2
; libsrc/sane.pla: 0580:         BIT     $C083
        BIT     $C083
; libsrc/sane.pla: 0581:         LDA     $02FA       ; DST ADDRESS
        LDA     $02FA       ; DST ADDRESS
; libsrc/sane.pla: 0582:         STA     $42
        STA     $42
; libsrc/sane.pla: 0583:         LDA     $02FB
        LDA     $02FB
; libsrc/sane.pla: 0584:         STA     $43
        STA     $43
; libsrc/sane.pla: 0585:         LDA     $02FC       ; SRC ADDRESS
        LDA     $02FC       ; SRC ADDRESS
; libsrc/sane.pla: 0586:         STA     $3C
        STA     $3C
; libsrc/sane.pla: 0587:         LDA     $02FD
        LDA     $02FD
; libsrc/sane.pla: 0588:         STA     $3D
        STA     $3D
; libsrc/sane.pla: 0589: -       LDA     ($3C),Y
-       LDA     ($3C),Y
; libsrc/sane.pla: 0590:         STA     ($42),Y
        STA     ($42),Y
; libsrc/sane.pla: 0591:         INY
        INY
; libsrc/sane.pla: 0592:         BNE     +
        BNE     +
; libsrc/sane.pla: 0593:         INC     $3D
        INC     $3D
; libsrc/sane.pla: 0594:         INC     $43
        INC     $43
; libsrc/sane.pla: 0595: +       DEC     $02FE
+       DEC     $02FE
; libsrc/sane.pla: 0596:         BNE     -
        BNE     -
; libsrc/sane.pla: 0597:         DEX
        DEX
; libsrc/sane.pla: 0598:         BNE     -
        BNE     -
; libsrc/sane.pla: 0599:         STA     $C008       ; SELECT MAINZP
        STA     $C008       ; SELECT MAINZP
; libsrc/sane.pla: 0600:         PLP
        PLP
; libsrc/sane.pla: 0601:         LDX     ESP
        LDX     ESP
; libsrc/sane.pla: 0602:         RTS
        RTS
; libsrc/sane.pla: 0603: end
; libsrc/sane.pla: 0604: //
; libsrc/sane.pla: 0605: // Default HALT handler
; libsrc/sane.pla: 0606: //
; libsrc/sane.pla: 0607: def fpDefaultHalt(pstatus)
_SUBSEG 				; BYTECODE STARTS
					; pstatus -> [0]
_P001 					; fpDefaultHalt(pstatus)()
_C000 					; fpDefaultHalt()
; libsrc/sane.pla: 0608:     sane[10](0) // zpRestore
	!BYTE	$58,$02,$01		; ENTER	2,1
; libsrc/sane.pla: 0609:     puts("SANE Exception="); puti(pstatus->8); puts("!\n")
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D036+20
_F011 	!WORD	_D036+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$0F
	!BYTE	$53,$41,$4E,$45,$20,$45,$78,$63
	!BYTE	$65,$70,$74,$69,$6F,$6E,$3D
	!BYTE	$54			; CALL	_X004
_F012 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F013 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$21,$0D
	!BYTE	$54			; CALL	_X004
_F014 	!WORD	0		
; libsrc/sane.pla: 0610:     sane[9]() // zpSave
; libsrc/sane.pla: 0611:     return pstatus=>4
	!BYTE	$6A			; LAW	_D036+18
_F015 	!WORD	_D036+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$62			; LW
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/sane.pla: 0612: end
; libsrc/sane.pla: 0613: //
; libsrc/sane.pla: 0614: // Utility test routines
; libsrc/sane.pla: 0615: //
; libsrc/sane.pla: 0616: //byte hexchar[] = '0','1','2','3','4','5','6','7','8','9','0','A','B','C','D','E','F'
; libsrc/sane.pla: 0617: //def prhex(h)#0
; libsrc/sane.pla: 0618: //    putc(hexchar[(h>>4)&$0F]);putc(hexchar[h&$0F])
; libsrc/sane.pla: 0619: //end
; libsrc/sane.pla: 0620: //def prbyte(h)#0
; libsrc/sane.pla: 0621: //    putc('$'); prhex(h)
; libsrc/sane.pla: 0622: //    //call($FDDA, h, 0, 0, 0)
; libsrc/sane.pla: 0623: //end
; libsrc/sane.pla: 0624: //def prword(h)#0
; libsrc/sane.pla: 0625: //    putc('$')
; libsrc/sane.pla: 0626: //    prhex(h>>8);prhex(h)
; libsrc/sane.pla: 0627: //    //call($F941, h >> 8, h, 0, 0)
; libsrc/sane.pla: 0628: //end
; libsrc/sane.pla: 0629: //def putname(pchr)#0
; libsrc/sane.pla: 0630: //    byte c
; libsrc/sane.pla: 0631: //
; libsrc/sane.pla: 0632: //    for c = 0 to 7
; libsrc/sane.pla: 0633: //        putc(pchr->[c])
; libsrc/sane.pla: 0634: //    next
; libsrc/sane.pla: 0635: //end
; libsrc/sane.pla: 0636: //def dumpheader(phdr)#0
; libsrc/sane.pla: 0637: //    byte i
; libsrc/sane.pla: 0638: //
; libsrc/sane.pla: 0639: //    puts("Seg Info\n")
; libsrc/sane.pla: 0640: //    for i = 0 to 15
; libsrc/sane.pla: 0641: //        if (phdr + i * t_diskinfo)=>codelen
; libsrc/sane.pla: 0642: //            prword((phdr + i * t_diskinfo)=>codelen)
; libsrc/sane.pla: 0643: //            putc(':')
; libsrc/sane.pla: 0644: //            prword((phdr + i * t_diskinfo)=>codeaddr)
; libsrc/sane.pla: 0645: //            putc('=')
; libsrc/sane.pla: 0646: //            putname(phdr + i * 8 + segname)
; libsrc/sane.pla: 0647: //            putc(',')
; libsrc/sane.pla: 0648: //            prword((phdr + segkind)=>[i])
; libsrc/sane.pla: 0649: //            putc(',')
; libsrc/sane.pla: 0650: //            prword((phdr + textaddr)=>[i])
; libsrc/sane.pla: 0651: //            putc(',')
; libsrc/sane.pla: 0652: //            prword((phdr + seginfo)=>[i])
; libsrc/sane.pla: 0653: //            putln
; libsrc/sane.pla: 0654: //        fin
; libsrc/sane.pla: 0655: //    next
; libsrc/sane.pla: 0656: //    putname(phdr + $01F4); putln
; libsrc/sane.pla: 0657: //end
; libsrc/sane.pla: 0658: //
; libsrc/sane.pla: 0659: // Fix-up external references and local relocations
; libsrc/sane.pla: 0660: //
; libsrc/sane.pla: 0661: def fixup(base, list)
					; base -> [0]
					; list -> [2]
_C001 					; fixup()
; libsrc/sane.pla: 0662:     word len
					; len -> [4]
; libsrc/sane.pla: 0663:     byte listcnt
					; listcnt -> [6]
; libsrc/sane.pla: 0664: 
; libsrc/sane.pla: 0665:     //puts("Reloc = "); prword(list); putln
; libsrc/sane.pla: 0666:     if *list <> $0101
	!BYTE	$58,$07,$02		; ENTER	7,2
; libsrc/sane.pla: 0667:         //puts("Reloc table not found!\n")
; libsrc/sane.pla: 0668:         return list
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$62			; LW
	!BYTE	$2C,$01,$01		; CW	257
	!BYTE	$22			; BREQ	_B001
	!WORD	_B001-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/sane.pla: 0669:     fin
_B001 
_B002 
; libsrc/sane.pla: 0670:     list = list - 10
; libsrc/sane.pla: 0671:     //
; libsrc/sane.pla: 0672:     // External reference fixup (only have fp6502 in our case)
; libsrc/sane.pla: 0673:     //
; libsrc/sane.pla: 0674:     len  = *list
; libsrc/sane.pla: 0675:     list = list - 2
; libsrc/sane.pla: 0676:     //puts("Extern list len = "); prword(len); putln; getc
; libsrc/sane.pla: 0677:     while len
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3A,$0A			; SUBI	10
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$62			; LW
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B005
	!WORD	_B005-*
_B003 
; libsrc/sane.pla: 0678:         //puts(" *"); prword(list - *list); putln
; libsrc/sane.pla: 0679:         *(list - *list) = fp6502
; libsrc/sane.pla: 0680:         list = list - 2
; libsrc/sane.pla: 0681:         len--
	!BYTE	$6A			; LAW	_D037+0
_F016 	!WORD	_D037+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$34			; DUP
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8E			; DECR
; libsrc/sane.pla: 0682:     loop
	!BYTE	$76,$04			; SLW	[4]
_B005 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$4E			; BRTRU	_B003
	!WORD	_B003-*
_B004 
; libsrc/sane.pla: 0683:     //
; libsrc/sane.pla: 0684:     // Internal relocation
; libsrc/sane.pla: 0685:     //
; libsrc/sane.pla: 0686:     len  = *list
; libsrc/sane.pla: 0687:     list = list - 2
; libsrc/sane.pla: 0688:     //puts("Reloc list len = "); prword(len); putln; getc
; libsrc/sane.pla: 0689:     while len
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$62			; LW
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B006 
; libsrc/sane.pla: 0690:         //puts(" *"); prword(list - *list); putln
; libsrc/sane.pla: 0691:         *(list - *list) = *(list - *list) + base
; libsrc/sane.pla: 0692:         list = list - 2
; libsrc/sane.pla: 0693:         len--
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$34			; DUP
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$62			; LW
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$34			; DUP
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$72			; SW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8E			; DECR
; libsrc/sane.pla: 0694:     loop
	!BYTE	$76,$04			; SLW	[4]
_B008 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$4E			; BRTRU	_B006
	!WORD	_B006-*
_B007 
; libsrc/sane.pla: 0695:     return list
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$07			; LEAVE	7
; libsrc/sane.pla: 0696: end
; libsrc/sane.pla: 0697: //
; libsrc/sane.pla: 0698: // Linker Information that we don't need
; libsrc/sane.pla: 0699: //
; libsrc/sane.pla: 0700: //def resolve(base, pli)
; libsrc/sane.pla: 0701: //    byte fixups
; libsrc/sane.pla: 0702: //    word basend
; libsrc/sane.pla: 0703: //
; libsrc/sane.pla: 0704: //    puts("LinkInfo "); prword(pli); putc(':'); putln
; libsrc/sane.pla: 0705: //    basend = preloc
; libsrc/sane.pla: 0706: //    while ^pli
; libsrc/sane.pla: 0707: //        putname(pli); putc(':')
; libsrc/sane.pla: 0708: //        prword(pli=>8); putc(' ')
; libsrc/sane.pla: 0709: //        prword(pli=>10); putc(' ')
; libsrc/sane.pla: 0710: //        prword(pli=>12); putc(' ')
; libsrc/sane.pla: 0711: //        prword(pli=>14); putln
; libsrc/sane.pla: 0712: //        fixups = 0
; libsrc/sane.pla: 0713: //        if pli=>8 == $0002
; libsrc/sane.pla: 0714: //            fixups = pli=>12
; libsrc/sane.pla: 0715: //        fin
; libsrc/sane.pla: 0716: //        pli = pli + 16
; libsrc/sane.pla: 0717: //        while fixups
; libsrc/sane.pla: 0718: //            *(base + *pli) = fp6502
; libsrc/sane.pla: 0719: //            pli = pli + 2
; libsrc/sane.pla: 0720: //            fixups--
; libsrc/sane.pla: 0721: //        loop
; libsrc/sane.pla: 0722: //    loop
; libsrc/sane.pla: 0723: //end
; libsrc/sane.pla: 0724: //
; libsrc/sane.pla: 0725: // Load Pascal CODE file
; libsrc/sane.pla: 0726: //
; libsrc/sane.pla: 0727: def loadcode(codefile)
					; codefile -> [0]
_C002 					; loadcode()
; libsrc/sane.pla: 0728:     byte ref
					; ref -> [2]
; libsrc/sane.pla: 0729:     word pcode, seglen
					; pcode -> [3]
					; seglen -> [5]
; libsrc/sane.pla: 0730:     byte filepath[64]
					; filepath -> [7]
; libsrc/sane.pla: 0731: 
; libsrc/sane.pla: 0732:     //puts(codefile); puts(":\n")
; libsrc/sane.pla: 0733:     pcode = 0
	!BYTE	$58,$47,$01		; ENTER	71,1
; libsrc/sane.pla: 0734:     ref   = fileio:open(strcat(strcpy(@filepath, cmdsys:syspath), codefile))
; libsrc/sane.pla: 0735:     //puts("ref = "); prbyte(ref); puts(" perr = "); prbyte(perr); putln
; libsrc/sane.pla: 0736:     if ref
; libsrc/sane.pla: 0737:         pcode = heapalloc(512)
; libsrc/sane.pla: 0738:         fileio:read(ref, pcode, 512)
; libsrc/sane.pla: 0739:         //puts("Read header bytes: "); puti(seglen)
; libsrc/sane.pla: 0740:         //if seglen == 0; puts(" perr = "); prbyte(perr); fin
; libsrc/sane.pla: 0741:         //getc; putln
; libsrc/sane.pla: 0742:         //dumpheader(pcode)
; libsrc/sane.pla: 0743:         //putname(pcode + segname + 8); putc('='); prword(pcode); putln
; libsrc/sane.pla: 0744:         heaprelease(pcode + (pcode + t_diskinfo)=>codeaddr) // REserve heap to end of buffer
; libsrc/sane.pla: 0745:         seglen = fileio:read(ref, pcode, (pcode + t_diskinfo)=>codeaddr)
; libsrc/sane.pla: 0746:         //puts("Read segment bytes: "); puti(seglen); putln
; libsrc/sane.pla: 0747:         fileio:close(ref)
; libsrc/sane.pla: 0748:         if !fp6502 and (MACHID & $F0 == $B0) // 128K Apple //e or //c
; libsrc/sane.pla: 0749:             seglen = fixup(AUXADDR, pcode + seglen - 2) - pcode
; libsrc/sane.pla: 0750:             auxmove(AUXADDR, pcode, seglen)
; libsrc/sane.pla: 0751:             heaprelease(pcode)
; libsrc/sane.pla: 0752:             pcode = AUXADDR
; libsrc/sane.pla: 0753:         else
	!BYTE	$00			; CN	0
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$28,$07			; LLA	[7]
	!BYTE	$6A			; LAW	_X000+2
_F017 	!WORD	0+2		
	!BYTE	$54			; CALL	_X019
_F018 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X020
_F019 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+14
_F020 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$54			; CALL	_X014
_F021 	!WORD	0		
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$6A			; LAW	_X028+18
_F022 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$34			; DUP
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X015
_F023 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$34			; DUP
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_X028+18
_F024 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$6A			; LAW	_X028+16
_F025 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D037+0
_F026 	!WORD	_D037+0		
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B011
	!WORD	_B011-*
	!BYTE	$68			; LAB	_X001+0
_F027 	!WORD	0+0		
	!BYTE	$3C,$F0			; ANDI	240
	!BYTE	$2A,$B0			; CB	176
	!BYTE	$40			; ISEQ
_B011 
	!BYTE	$4C			; BRFLS	_B012
	!WORD	_B012-*
	!BYTE	$2C,$00,$E0		; CW	57344
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$B2,$05			; ADDLW	[5]
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$54			; CALL	_C001
_F028 	!WORD	_C001		
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$84			; SUB 
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$2C,$00,$E0		; CW	57344
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$54			; CALL	_A038
_F029 	!WORD	_A038		
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$54			; CALL	_X015
_F030 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2C,$00,$E0		; CW	57344
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$50			; BRNCH	_B013
	!WORD	_B013-*
_B012 
; libsrc/sane.pla: 0754:             heaprelease(fixup(pcode, pcode + seglen - 2)) // Set heap to beginning of relocation list
; libsrc/sane.pla: 0755:         fin
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$34			; DUP
	!BYTE	$B2,$05			; ADDLW	[5]
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$54			; CALL	_C001
_F031 	!WORD	_C001		
	!BYTE	$54			; CALL	_X015
_F032 	!WORD	0		
	!BYTE	$30			; DROP 
_B013 
; libsrc/sane.pla: 0756:     fin
_B009 
_B010 
; libsrc/sane.pla: 0757:     return pcode
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$5A,$47			; LEAVE	71
; libsrc/sane.pla: 0758: end
; libsrc/sane.pla: 0759: //
; libsrc/sane.pla: 0760: // Load ELEMS6502 library
; libsrc/sane.pla: 0761: //
; libsrc/sane.pla: 0762: def loadElems
_C003 					; loadElems()
; libsrc/sane.pla: 0763:     word elems
					; elems -> [0]
; libsrc/sane.pla: 0764: 
; libsrc/sane.pla: 0765:     elems = loadcode("ELEMS.CODE")
	!BYTE	$58,$02,$00		; ENTER	2,0
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$45,$4C,$45,$4D,$53,$2E,$43,$4F
	!BYTE	$44,$45
	!BYTE	$54			; CALL	_C002
_F033 	!WORD	_C002		
	!BYTE	$76,$00			; SLW	[0]
; libsrc/sane.pla: 0766:     if !elems
; libsrc/sane.pla: 0767:         puts("ELEMS library not found.\n")
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B014
	!WORD	_B014-*
	!BYTE	$2E			; CS
	!BYTE	$19
	!BYTE	$45,$4C,$45,$4D,$53,$20,$6C,$69
	!BYTE	$62,$72,$61,$72,$79,$20,$6E,$6F
	!BYTE	$74,$20,$66,$6F,$75,$6E,$64,$2E
	!BYTE	$0D
	!BYTE	$54			; CALL	_X004
_F034 	!WORD	0		
; libsrc/sane.pla: 0768:         return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/sane.pla: 0769:     fin
_B014 
_B015 
; libsrc/sane.pla: 0770:     if fp6502 == AUXADDR
; libsrc/sane.pla: 0771:         (@fixupXEL1)=>1 = elems
; libsrc/sane.pla: 0772:         (@fixupXEL2)=>1 = elems
; libsrc/sane.pla: 0773:         (@fixupXEL3)=>1 = elems
; libsrc/sane.pla: 0774:         sane[6] = @xelemsOp1
; libsrc/sane.pla: 0775:         sane[7] = @xelemsOp2
; libsrc/sane.pla: 0776:         sane[8] = @xelemsOp3
; libsrc/sane.pla: 0777:     else
	!BYTE	$6A			; LAW	_D037+0
_F035 	!WORD	_D037+0		
	!BYTE	$2C,$00,$E0		; CW	57344
	!BYTE	$24			; BRNE	_B016
	!WORD	_B016-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A023+1
_F036 	!WORD	_A023+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A025+1
_F037 	!WORD	_A025+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A027+1
_F038 	!WORD	_A027+1		
	!BYTE	$26			; LA	_A022+0
_F039 	!WORD	_A022+0		
	!BYTE	$7A			; SAW	_D036+12
_F040 	!WORD	_D036+12		
	!BYTE	$26			; LA	_A024+0
_F041 	!WORD	_A024+0		
	!BYTE	$7A			; SAW	_D036+14
_F042 	!WORD	_D036+14		
	!BYTE	$26			; LA	_A026+0
_F043 	!WORD	_A026+0		
	!BYTE	$7A			; SAW	_D036+16
_F044 	!WORD	_D036+16		
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B016 
; libsrc/sane.pla: 0778:         (@fixupEL1)=>1 = elems
; libsrc/sane.pla: 0779:         (@fixupEL2)=>1 = elems
; libsrc/sane.pla: 0780:         (@fixupEL3)=>1 = elems
; libsrc/sane.pla: 0781:         sane[6] = @elemsOp1
; libsrc/sane.pla: 0782:         sane[7] = @elemsOp2
; libsrc/sane.pla: 0783:         sane[8] = @elemsOp3
; libsrc/sane.pla: 0784:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A017+1
_F045 	!WORD	_A017+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A019+1
_F046 	!WORD	_A019+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A021+1
_F047 	!WORD	_A021+1		
	!BYTE	$26			; LA	_A016+0
_F048 	!WORD	_A016+0		
	!BYTE	$7A			; SAW	_D036+12
_F049 	!WORD	_D036+12		
	!BYTE	$26			; LA	_A018+0
_F050 	!WORD	_A018+0		
	!BYTE	$7A			; SAW	_D036+14
_F051 	!WORD	_D036+14		
	!BYTE	$26			; LA	_A020+0
_F052 	!WORD	_A020+0		
	!BYTE	$7A			; SAW	_D036+16
_F053 	!WORD	_D036+16		
_B017 
; libsrc/sane.pla: 0785:     return 1
	!BYTE	$02			; CN	1
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/sane.pla: 0786: end
; libsrc/sane.pla: 0787: //
; libsrc/sane.pla: 0788: // Don't load ELEMS6502 until referenced
; libsrc/sane.pla: 0789: //
; libsrc/sane.pla: 0790: def elemsLoad1(op, dst)#1
					; op -> [0]
					; dst -> [2]
_C004 					; elemsLoad1()
; libsrc/sane.pla: 0791:     if loadElems
	!BYTE	$58,$04,$02		; ENTER	4,2
; libsrc/sane.pla: 0792:         return sane[6](op, dst)
	!BYTE	$54			; CALL	_C003
_F054 	!WORD	_C003		
	!BYTE	$4C			; BRFLS	_B018
	!WORD	_B018-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D036+12
_F055 	!WORD	_D036+12		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/sane.pla: 0793:     fin
_B018 
_B019 
; libsrc/sane.pla: 0794:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/sane.pla: 0795: end
; libsrc/sane.pla: 0796: def elemsLoad2(op, dst, src)#1
					; op -> [0]
					; dst -> [2]
					; src -> [4]
_C005 					; elemsLoad2()
; libsrc/sane.pla: 0797:     if loadElems
	!BYTE	$58,$06,$03		; ENTER	6,3
; libsrc/sane.pla: 0798:         return sane[7](op, dst, src)
	!BYTE	$54			; CALL	_C003
_F056 	!WORD	_C003		
	!BYTE	$4C			; BRFLS	_B020
	!WORD	_B020-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_D036+14
_F057 	!WORD	_D036+14		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/sane.pla: 0799:     fin
_B020 
_B021 
; libsrc/sane.pla: 0800:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/sane.pla: 0801: end
; libsrc/sane.pla: 0802: def elemsLoad3(op, dst, src, src2)#1
					; op -> [0]
					; dst -> [2]
					; src -> [4]
					; src2 -> [6]
_C006 					; elemsLoad3()
; libsrc/sane.pla: 0803:     if loadElems
	!BYTE	$58,$08,$04		; ENTER	8,4
; libsrc/sane.pla: 0804:         return sane[8](op, dst, src, src2)
	!BYTE	$54			; CALL	_C003
_F058 	!WORD	_C003		
	!BYTE	$4C			; BRFLS	_B022
	!WORD	_B022-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$6A			; LAW	_D036+16
_F059 	!WORD	_D036+16		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/sane.pla: 0805:     fin
_B022 
_B023 
; libsrc/sane.pla: 0806:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/sane.pla: 0807: end
; libsrc/sane.pla: 0808: //
; libsrc/sane.pla: 0809: // Load SANE library and fixup function pointers
; libsrc/sane.pla: 0810: //
; libsrc/sane.pla: 0811: def fpInit()
_P000 					; fpInit()()
_C007 					; fpInit()
; libsrc/sane.pla: 0812:     word fpzpsave
					; fpzpsave -> [0]
; libsrc/sane.pla: 0813: 
; libsrc/sane.pla: 0814:     if !fp6502
	!BYTE	$58,$02,$00		; ENTER	2,0
; libsrc/sane.pla: 0815:         fp6502 = loadcode("FP6502.CODE")
	!BYTE	$6A			; LAW	_D037+0
_F060 	!WORD	_D037+0		
	!BYTE	$4E			; BRTRU	_B024
	!WORD	_B024-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$46,$50,$36,$35,$30,$32,$2E,$43
	!BYTE	$4F,$44,$45
	!BYTE	$54			; CALL	_C002
_F061 	!WORD	_C002		
	!BYTE	$7A			; SAW	_D037+0
_F062 	!WORD	_D037+0		
; libsrc/sane.pla: 0816:         if !fp6502
; libsrc/sane.pla: 0817:             puts("SANE library not found.\n")
	!BYTE	$6A			; LAW	_D037+0
_F063 	!WORD	_D037+0		
	!BYTE	$4E			; BRTRU	_B026
	!WORD	_B026-*
	!BYTE	$2E			; CS
	!BYTE	$18
	!BYTE	$53,$41,$4E,$45,$20,$6C,$69,$62
	!BYTE	$72,$61,$72,$79,$20,$6E,$6F,$74
	!BYTE	$20,$66,$6F,$75,$6E,$64,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F064 	!WORD	0		
; libsrc/sane.pla: 0818:             return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/sane.pla: 0819:         fin
_B026 
_B027 
; libsrc/sane.pla: 0820:         if fp6502 == AUXADDR
; libsrc/sane.pla: 0821:             //
; libsrc/sane.pla: 0822:             // Fixup AUX calls in interface routines
; libsrc/sane.pla: 0823:             //
; libsrc/sane.pla: 0824:             sane[2]  = @xfpOp0
; libsrc/sane.pla: 0825:             sane[3]  = @xfpOp1
; libsrc/sane.pla: 0826:             sane[4]  = @xfpOp2
; libsrc/sane.pla: 0827:             sane[5]  = @xfpOp3
; libsrc/sane.pla: 0828:             sane[9]  = @zpNopSave
; libsrc/sane.pla: 0829:             sane[10] = @zpNopRestore
; libsrc/sane.pla: 0830:             //
; libsrc/sane.pla: 0831:             // Install AUX HALT handler
; libsrc/sane.pla: 0832:             //
; libsrc/sane.pla: 0833:             xfpOp1($0005, @xfpHalt)
; libsrc/sane.pla: 0834:         else
	!BYTE	$6A			; LAW	_D037+0
_F065 	!WORD	_D037+0		
	!BYTE	$2C,$00,$E0		; CW	57344
	!BYTE	$24			; BRNE	_B028
	!WORD	_B028-*
	!BYTE	$26			; LA	_A012+0
_F066 	!WORD	_A012+0		
	!BYTE	$7A			; SAW	_D036+4
_F067 	!WORD	_D036+4		
	!BYTE	$26			; LA	_A013+0
_F068 	!WORD	_A013+0		
	!BYTE	$7A			; SAW	_D036+6
_F069 	!WORD	_D036+6		
	!BYTE	$26			; LA	_A014+0
_F070 	!WORD	_A014+0		
	!BYTE	$7A			; SAW	_D036+8
_F071 	!WORD	_D036+8		
	!BYTE	$26			; LA	_A015+0
_F072 	!WORD	_A015+0		
	!BYTE	$7A			; SAW	_D036+10
_F073 	!WORD	_D036+10		
	!BYTE	$26			; LA	_A032+0
_F074 	!WORD	_A032+0		
	!BYTE	$7A			; SAW	_D036+18
_F075 	!WORD	_D036+18		
	!BYTE	$26			; LA	_A037+0
_F076 	!WORD	_A037+0		
	!BYTE	$7A			; SAW	_D036+20
_F077 	!WORD	_D036+20		
	!BYTE	$0A			; CN	5
	!BYTE	$26			; LA	_A001+0
_F078 	!WORD	_A001+0		
	!BYTE	$54			; CALL	_A013
_F079 	!WORD	_A013		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B029
	!WORD	_B029-*
_B028 
; libsrc/sane.pla: 0835:             //
; libsrc/sane.pla: 0836:             // Fixup MAIN calls in interface routines
; libsrc/sane.pla: 0837:             //
; libsrc/sane.pla: 0838:             if MACHID & $F0 == $F0 // Apple ///
; libsrc/sane.pla: 0839:                 fpzpsave      = heapalloc($0034*2)
; libsrc/sane.pla: 0840:                 (@fixupXS)=>1 = fpzpsave+$34
; libsrc/sane.pla: 0841:                 (@fixupXR)=>1 = fpzpsave+$34
; libsrc/sane.pla: 0842:                 zpSaveX // Clear XBYTEs
; libsrc/sane.pla: 0843:                 heaprelease(fpzpsave)
; libsrc/sane.pla: 0844:                 sane[9]       = @zpNopSave//zpSaveX
; libsrc/sane.pla: 0845:                 sane[10]      = @zpNopRestore//zpRestoreX
; libsrc/sane.pla: 0846:             else // Apple II
	!BYTE	$68			; LAB	_X001+0
_F080 	!WORD	0+0		
	!BYTE	$3C,$F0			; ANDI	240
	!BYTE	$2A,$F0			; CB	240
	!BYTE	$24			; BRNE	_B030
	!WORD	_B030-*
	!BYTE	$2A,$68			; CB	104
	!BYTE	$54			; CALL	_X014
_F081 	!WORD	0		
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$38,$34			; ADDI	52
	!BYTE	$7A			; SAW	_A029+1
_F082 	!WORD	_A029+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$34			; ADDI	52
	!BYTE	$7A			; SAW	_A034+1
_F083 	!WORD	_A034+1		
	!BYTE	$54			; CALL	_A028
_F084 	!WORD	_A028		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X015
_F085 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_A032+0
_F086 	!WORD	_A032+0		
	!BYTE	$7A			; SAW	_D036+18
_F087 	!WORD	_D036+18		
	!BYTE	$26			; LA	_A037+0
_F088 	!WORD	_A037+0		
	!BYTE	$7A			; SAW	_D036+20
_F089 	!WORD	_D036+20		
	!BYTE	$50			; BRNCH	_B031
	!WORD	_B031-*
_B030 
; libsrc/sane.pla: 0847:                 fpzpsave = heapalloc($0034)
; libsrc/sane.pla: 0848:                 sane[9]  = @zpSave
; libsrc/sane.pla: 0849:                 sane[10] = @zpRestore
; libsrc/sane.pla: 0850:             fin
	!BYTE	$2A,$34			; CB	52
	!BYTE	$54			; CALL	_X014
_F090 	!WORD	0		
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$26			; LA	_A030+0
_F091 	!WORD	_A030+0		
	!BYTE	$7A			; SAW	_D036+18
_F092 	!WORD	_D036+18		
	!BYTE	$26			; LA	_A035+0
_F093 	!WORD	_A035+0		
	!BYTE	$7A			; SAW	_D036+20
_F094 	!WORD	_D036+20		
_B031 
; libsrc/sane.pla: 0851:             (@fixupFP0)=>1 = fp6502
; libsrc/sane.pla: 0852:             (@fixupFP1)=>1 = fp6502
; libsrc/sane.pla: 0853:             (@fixupFP2)=>1 = fp6502
; libsrc/sane.pla: 0854:             (@fixupFP3)=>1 = fp6502
; libsrc/sane.pla: 0855:             (@fixupZPS)=>1 = fpzpsave
; libsrc/sane.pla: 0856:             (@fixupZPR)=>1 = fpzpsave
; libsrc/sane.pla: 0857:             sane[2]  = @fpOp0
; libsrc/sane.pla: 0858:             sane[3]  = @fpOp1
; libsrc/sane.pla: 0859:             sane[4]  = @fpOp2
; libsrc/sane.pla: 0860:             sane[5]  = @fpOp3
; libsrc/sane.pla: 0861:             //
; libsrc/sane.pla: 0862:             // Install MAIN HALT handler
; libsrc/sane.pla: 0863:             //
; libsrc/sane.pla: 0864:             sane[9]()
; libsrc/sane.pla: 0865:             sane[10](fpOp1($0005, @fpHalt))
; libsrc/sane.pla: 0866:         fin
	!BYTE	$6A			; LAW	_D037+0
_F095 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_A005+1
_F096 	!WORD	_A005+1		
	!BYTE	$6A			; LAW	_D037+0
_F097 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_A007+1
_F098 	!WORD	_A007+1		
	!BYTE	$6A			; LAW	_D037+0
_F099 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_A009+1
_F100 	!WORD	_A009+1		
	!BYTE	$6A			; LAW	_D037+0
_F101 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_A011+1
_F102 	!WORD	_A011+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A031+1
_F103 	!WORD	_A031+1		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_A036+1
_F104 	!WORD	_A036+1		
	!BYTE	$26			; LA	_A004+0
_F105 	!WORD	_A004+0		
	!BYTE	$7A			; SAW	_D036+4
_F106 	!WORD	_D036+4		
	!BYTE	$26			; LA	_A006+0
_F107 	!WORD	_A006+0		
	!BYTE	$7A			; SAW	_D036+6
_F108 	!WORD	_D036+6		
	!BYTE	$26			; LA	_A008+0
_F109 	!WORD	_A008+0		
	!BYTE	$7A			; SAW	_D036+8
_F110 	!WORD	_D036+8		
	!BYTE	$26			; LA	_A010+0
_F111 	!WORD	_A010+0		
	!BYTE	$7A			; SAW	_D036+10
_F112 	!WORD	_D036+10		
	!BYTE	$6A			; LAW	_D036+18
_F113 	!WORD	_D036+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$0A			; CN	5
	!BYTE	$26			; LA	_A002+0
_F114 	!WORD	_A002+0		
	!BYTE	$54			; CALL	_A006
_F115 	!WORD	_A006		
	!BYTE	$6A			; LAW	_D036+20
_F116 	!WORD	_D036+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B029 
; libsrc/sane.pla: 0867:         sane[6] = @elemsLoad1
; libsrc/sane.pla: 0868:         sane[7] = @elemsLoad2
; libsrc/sane.pla: 0869:         sane[8] = @elemsLoad3
; libsrc/sane.pla: 0870:     fin
	!BYTE	$26			; LA	_C004+0
_F117 	!WORD	_C004+0		
	!BYTE	$7A			; SAW	_D036+12
_F118 	!WORD	_D036+12		
	!BYTE	$26			; LA	_C005+0
_F119 	!WORD	_C005+0		
	!BYTE	$7A			; SAW	_D036+14
_F120 	!WORD	_D036+14		
	!BYTE	$26			; LA	_C006+0
_F121 	!WORD	_C006+0		
	!BYTE	$7A			; SAW	_D036+16
_F122 	!WORD	_D036+16		
_B024 
_B025 
; libsrc/sane.pla: 0871:     (@fixupHLT)=>1 = @sane+2
; libsrc/sane.pla: 0872:     sane[1]        = @fpDefaultHalt
; libsrc/sane.pla: 0873:     //
; libsrc/sane.pla: 0874:     // Reset environment word
; libsrc/sane.pla: 0875:     //
; libsrc/sane.pla: 0876:     sane[9]()
; libsrc/sane.pla: 0877:     sane[3]($0001, $0000)
; libsrc/sane.pla: 0878:     return sane[10](0)
	!BYTE	$26			; LA	_D036+2
_F123 	!WORD	_D036+2		
	!BYTE	$7A			; SAW	_A003+1
_F124 	!WORD	_A003+1		
	!BYTE	$26			; LA	_C000+0
_F125 	!WORD	_C000+0		
	!BYTE	$7A			; SAW	_D036+2
_F126 	!WORD	_D036+2		
	!BYTE	$6A			; LAW	_D036+18
_F127 	!WORD	_D036+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D036+6
_F128 	!WORD	_D036+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D036+20
_F129 	!WORD	_D036+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$02			; LEAVE	2
; libsrc/sane.pla: 0879: end
; libsrc/sane.pla: 0880: //
; libsrc/sane.pla: 0881: // Uninitialized placeholders of API
; libsrc/sane.pla: 0882: //
; libsrc/sane.pla: 0883: def uninit
_C008 					; uninit()
; libsrc/sane.pla: 0884:     puts("SANE not initialized\n")
	!BYTE	$2E			; CS
	!BYTE	$15
	!BYTE	$53,$41,$4E,$45,$20,$6E,$6F,$74
	!BYTE	$20,$69,$6E,$69,$74,$69,$61,$6C
	!BYTE	$69,$7A,$65,$64,$0D
	!BYTE	$54			; CALL	_X004
_F130 	!WORD	0		
; libsrc/sane.pla: 0885:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; libsrc/sane.pla: 0886: end
; libsrc/sane.pla: 0887: def uninit0()
_P002 					; uninit0()()
_C009 					; uninit0()
; libsrc/sane.pla: 0888:     return uninit
	!BYTE	$54			; CALL	_C008
_F131 	!WORD	_C008		
	!BYTE	$5C			; RET
; libsrc/sane.pla: 0889: end
; libsrc/sane.pla: 0890: def uninit1(op, dst)
					; op -> [0]
					; dst -> [2]
_P003 					; uninit1(op, dst)()
_C010 					; uninit1()
; libsrc/sane.pla: 0891:     return uninit
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$54			; CALL	_C008
_F132 	!WORD	_C008		
	!BYTE	$5A,$04			; LEAVE	4
; libsrc/sane.pla: 0892: end
; libsrc/sane.pla: 0893: def uninit2(op, dst, src)
					; op -> [0]
					; dst -> [2]
					; src -> [4]
_P004 					; uninit2(op, dst, src)()
_C011 					; uninit2()
; libsrc/sane.pla: 0894:     return uninit
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$54			; CALL	_C008
_F133 	!WORD	_C008		
	!BYTE	$5A,$06			; LEAVE	6
; libsrc/sane.pla: 0895: end
; libsrc/sane.pla: 0896: def uninit3(op, dst, src, src2)
					; op -> [0]
					; dst -> [2]
					; src -> [4]
					; src2 -> [6]
_P005 					; uninit3(op, dst, src, src2)()
_C012 					; uninit3()
; libsrc/sane.pla: 0897:     return uninit
	!BYTE	$58,$08,$04		; ENTER	8,4
	!BYTE	$54			; CALL	_C008
_F134 	!WORD	_C008		
	!BYTE	$5A,$08			; LEAVE	8
; libsrc/sane.pla: 0898: end
; libsrc/sane.pla: 0899: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	14
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C012		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: MACHID
	!BYTE	$CD,$C1,$C3,$C8,$C9,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	1			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: STRCAT
	!BYTE	$D3,$D4,$D2,$C3,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	20			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	!BYTE	$00			; END OF ESD
