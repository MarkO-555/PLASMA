include "inc/cmdsys.plh"
include "inc/args.plh"
include "inc/fileio.plh"

import sexpr
  const TYPE_MASK  = $70
  const NIL        = $00
  const BOOL_FALSE = $00
  const BOOL_TRUE  = $01
  const CONS_TYPE  = $10
  const SYM_TYPE   = $20
  const SYM_LEN    = $0F
  const NUM_TYPE   = $30
  const NUM_INT    = $31
  const MARK_BIT   = $80
  const MARK_MASK  = $7F

  struc t_elem
    word link
    byte type
  end
  struc t_cons
    res[t_elem]
    word car
    word cdr
  end
  struc t_sym
    res[t_elem]
    word natv
    word lambda
    char[0] name
  end
  struc t_numint
    res[t_elem]
    word[2] intval
  end

  predef gc#0
  predef print_expr(expr)#0
  predef parse_expr(evalptr, level, refill)#2
  predef eval_expr(expr)#1
  predef eval_num(expr)#2
  predef bool_pred(bool)#1
  predef new_cons#1
  predef new_int(intlo, inthi)#1
  predef new_sym(symstr)#1
  predef new_assoc(symptr, valptr)#0
  predef set_assoc(symptr, valptr)#0
end

//
// REPL interface to S-expression evaluator
//

const GC_RESET  = 2
byte gc_trigger = GC_RESET

const FILEBUF_SIZE = 128
var readfn            // read input routine
var fileref, filebuf  // file read vars
byte quit = FALSE     // quit interpreter flag

//
// Native functions
//

def natv_bye(expr)
  quit = TRUE
  return new_sym("GOODBYE!")
end

def natv_memavail(expr)
  return new_int(heapavail, 0)
end

//
// Keyboard and file input routines
//

def refill_keybd
  var readline

  repeat
    readline = gets('>'|$80)
    ^(readline + ^readline + 1) = 0
  until ^readline
  return readline + 1
end

def read_keybd
  var readline, expr

  repeat
    readline = gets('?'|$80)
    ^(readline + ^readline + 1) = 0
  until ^readline
  drop, expr = parse_expr(readline + 1, 0, @refill_keybd)
  //print_expr(expr); putln // DEBUG - print parsed expression
  return expr
end

def read_fileline
  var len

  repeat
    len = fileio:read(fileref, filebuf, FILEBUF_SIZE-1)
    if len
      if ^(filebuf + len - 1) == $0D
        len-- // Remove trailing carriage return
      fin
      ^(filebuf + len) = 0 // NULL terminate
    else
      fileio:close(fileref)
      readfn = @read_keybd
      return FALSE
    fin
  until len
  return TRUE
end

def refill_file
  if not read_fileline
    puts("File input prematurely ended\n")
    return refill_keybd
  fin
  return filebuf
end

def read_file
  var expr

  if not read_fileline
    return read_keybd
  fin
  drop, expr = parse_expr(filebuf, 0, @refill_file)
  return expr
end

//
// Handle command line options
//

def parse_cmdline#0
  var filename

  puts("DRAWL (LISP 1.5) symbolic processor\n")
  readfn = @read_keybd
  filename = argNext(argFirst)
  if ^filename
    fileref = fileio:open(filename)
    if fileref
      fileio:newline(fileref, $7F, $0D)
      readfn = @read_file
      filebuf = heapalloc(FILEBUF_SIZE)
    fin
  fin
end

//
// REPL
//

def print_syms#0
    var symptr
    
    symptr = new_sym("PRINT")
    while symptr
        print_expr(symptr)
        symptr = symptr=>link
    loop
end

print_syms
parse_cmdline
new_sym("BYE")=>natv = @natv_bye
new_sym("MEM")=>natv = @natv_memavail
while not quit
  putln; print_expr(eval_expr(readfn()))
  gc_trigger--; if gc_trigger == 0; gc; gc_trigger = GC_RESET; fin
loop
putln
done
