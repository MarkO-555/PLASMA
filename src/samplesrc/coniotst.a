; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/coniotst.pla: 0001: // text screen
; samplesrc/coniotst.pla: 0002: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/coniotst.pla: 0002: 
; samplesrc/coniotst.pla: 0003: include "inc/conio.plh"
; inc/conio.plh: 0001: import conio
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
					; CONIO -> X028
; inc/conio.plh: 0002:     const NORMAL   = $FF
					; NORMAL = 255
; inc/conio.plh: 0003:     const INVERSE  = $3F
					; INVERSE = 63
; inc/conio.plh: 0004:     const FLASH    = $7F
					; FLASH = 127
; inc/conio.plh: 0005:     const ECHO_ON  = $80
					; ECHO_ON = 128
; inc/conio.plh: 0006:     const ECHO_OFF = $00
					; ECHO_OFF = 0
; inc/conio.plh: 0007:     struc t_conio
; inc/conio.plh: 0008:         word keypressed
					; keypressed = 0
; inc/conio.plh: 0009:         word getkey
					; getkey = 2
; inc/conio.plh: 0010:         word echo
					; echo = 4
; inc/conio.plh: 0011:         word home
					; home = 6
; inc/conio.plh: 0012:         word gotoxy
					; gotoxy = 8
; inc/conio.plh: 0013:         word viewport
					; viewport = 10
; inc/conio.plh: 0014:         word texttype
					; texttype = 12
; inc/conio.plh: 0015:         word textmode
					; textmode = 14
; inc/conio.plh: 0016:         word grmode
					; grmode = 16
; inc/conio.plh: 0017:         word grcolor
					; grcolor = 18
; inc/conio.plh: 0018:         word grplot
					; grplot = 20
; inc/conio.plh: 0019:         word tone
					; tone = 22
; inc/conio.plh: 0020:         word rnd
					; rnd = 24
; inc/conio.plh: 0021:     end
					; t_conio = 26
; inc/conio.plh: 0022: end
; samplesrc/coniotst.pla: 0003: 
; samplesrc/coniotst.pla: 0004: const SCR_PTR = $0400
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; SCR_PTR = 1024
; samplesrc/coniotst.pla: 0005: const SCR_SIZE = 1024
					; SCR_SIZE = 1024
; samplesrc/coniotst.pla: 0006: 
; samplesrc/coniotst.pla: 0007: byte[SCR_SIZE] ScrSave
_D029 	!FILL	1024			; ScrSave
; samplesrc/coniotst.pla: 0008: byte I
_D030 	!FILL	1			; I
; samplesrc/coniotst.pla: 0009: word Name
_D031 	!FILL	2			; Name
; samplesrc/coniotst.pla: 0010: 
; samplesrc/coniotst.pla: 0011: // save text screen
; samplesrc/coniotst.pla: 0012: memcpy(@ScrSave, SCR_PTR, SCR_SIZE)
_SUBSEG 				; BYTECODE STARTS
_INIT 
; samplesrc/coniotst.pla: 0013: conio:home()
; samplesrc/coniotst.pla: 0014: for I=0 to 23
	!BYTE	$26			; LA	_D029+0
_F000 	!WORD	_D029+0		
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$34			; DUP
	!BYTE	$54			; CALL	_X018
_F001 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+6
_F002 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$17			; CB	23
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$7C			; DAB	_D030+0
_F003 	!WORD	_D030+0		
; samplesrc/coniotst.pla: 0015:   conio:gotoxy(I,I)
; samplesrc/coniotst.pla: 0016:   putc('A'+I)
; samplesrc/coniotst.pla: 0017:   putc(' ')
; samplesrc/coniotst.pla: 0018:   puti(I)
; samplesrc/coniotst.pla: 0019: next
	!BYTE	$68			; LAB	_D030+0
_F004 	!WORD	_D030+0		
	!BYTE	$34			; DUP
	!BYTE	$6A			; LAW	_X028+8
_F005 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$41			; CB	65
	!BYTE	$B4			; ADDAB	_D030+0
_F006 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X002
_F007 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F008 	!WORD	0		
	!BYTE	$68			; LAB	_D030+0
_F009 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X005
_F010 	!WORD	0		
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$78			; SAB	_D030+0
_F011 	!WORD	_D030+0		
	!BYTE	$30			; DROP 
; samplesrc/coniotst.pla: 0020: conio:gotoxy(10, 5)
; samplesrc/coniotst.pla: 0021: puts("What is your name")
	!BYTE	$14			; CN	10
	!BYTE	$0A			; CN	5
	!BYTE	$6A			; LAW	_X028+8
_F012 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$11
	!BYTE	$57,$68,$61,$74,$20,$69,$73,$20
	!BYTE	$79,$6F,$75,$72,$20,$6E,$61,$6D
	!BYTE	$65
	!BYTE	$54			; CALL	_X004
_F013 	!WORD	0		
; samplesrc/coniotst.pla: 0022: Name = gets('?'|$80)  // $BF
; samplesrc/coniotst.pla: 0023: conio:gotoxy(12, 7)
; samplesrc/coniotst.pla: 0024: puts("Nice to meet you, ")
	!BYTE	$2A,$BF			; CB	191
	!BYTE	$54			; CALL	_X007
_F014 	!WORD	0		
	!BYTE	$7A			; SAW	_D031+0
_F015 	!WORD	_D031+0		
	!BYTE	$18			; CN	12
	!BYTE	$0E			; CN	7
	!BYTE	$6A			; LAW	_X028+8
_F016 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$12
	!BYTE	$4E,$69,$63,$65,$20,$74,$6F,$20
	!BYTE	$6D,$65,$65,$74,$20,$79,$6F,$75
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F017 	!WORD	0		
; samplesrc/coniotst.pla: 0025: puts(Name)
; samplesrc/coniotst.pla: 0026: conio:gotoxy(16, 10)
; samplesrc/coniotst.pla: 0027: puts("Press any key ...")
	!BYTE	$6A			; LAW	_D031+0
_F018 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X004
_F019 	!WORD	0		
	!BYTE	$2A,$10			; CB	16
	!BYTE	$14			; CN	10
	!BYTE	$6A			; LAW	_X028+8
_F020 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$11
	!BYTE	$50,$72,$65,$73,$73,$20,$61,$6E
	!BYTE	$79,$20,$6B,$65,$79,$20,$2E,$2E
	!BYTE	$2E
	!BYTE	$54			; CALL	_X004
_F021 	!WORD	0		
; samplesrc/coniotst.pla: 0028: getc()
; samplesrc/coniotst.pla: 0029: conio:gotoxy(0, 5)
; samplesrc/coniotst.pla: 0030: memcpy(SCR_PTR, @ScrSave, SCR_SIZE)
; samplesrc/coniotst.pla: 0031: done
	!BYTE	$54			; CALL	_X006
_F022 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$0A			; CN	5
	!BYTE	$6A			; LAW	_X028+8
_F023 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$26			; LA	_D029+0
_F024 	!WORD	_D029+0		
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$54			; CALL	_X018
_F025 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	1
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	7			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: GETS
	!BYTE	$C7,$C5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	7			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	!BYTE	$00			; END OF ESD
