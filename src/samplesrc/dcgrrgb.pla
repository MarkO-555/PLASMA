include "inc/cmdsys.plh"
include "inc/dcgrlib.plh"
include "inc/dcgrutils.plh"

sysflags resxtxt1|reshgr1|resxhgr1

const BLU_MSK = $001F
const GRN_MSK = $03E0
const RED_MSK = $7C00
const BLU = 0
const GRN = 1
const RED = 2
const ERR_MAX = 32
const ERR_DIV = 2
byte[12] ntscCycle
byte[] ntscChroma

// Imperical 0-255       B    G    R
//byte[]              = 127,  51,  64 // BLUE
//byte[]              =  64, 108,   0 // GREEN
//byte[]              =   1,  77,  64 // BROWN
//byte[]              =  64,  20, 128 // RED
// Imperical 0-63        B   G   R
byte[]              = 31, 13, 16 // BLUE
byte[]              = 16, 27,  0 // GREEN
byte[]              =  1, 19, 16 // BROWN
byte[]              = 16,  5, 32 // RED
// Ideal/simplified 0-63 B   G   R
//byte[]                = 32, 16, 16 // BLUE
//byte[]                = 16, 32,  0 // GREEN
//byte[]                =  0, 16, 16 // BROWN
//byte[]                = 16,  0, 32 // RED
// Test             0-63 B   G   R
//byte[]                = 63,  0,  0 // BLUE
//byte[]                =  0, 63,  0 // GREEN
//byte[]                =  0, 16, 16 // BROWN
//byte[]                =  0,  0, 63 // RED
//byte[]                = 63, 28, 32 // BLUE
//byte[]                = 31, 56,  0 // GREEN
//byte[]                =  0, 35, 31 // BROWN
//byte[]                = 32,  7, 63 // RED
//byte[]                = 63, 31, 32 // BLUE
//byte[]                = 31, 63,  0 // GREEN
//byte[]                =  0, 32, 31 // BROWN
//byte[]                = 32,  0, 63 // RED
//byte[]                = 40, 24, 24 // BLUE
//byte[]                = 20, 40,  0 // GREEN
//byte[]                =  0, 16, 16 // BROWN
//byte[]                = 20,  0, 40 // RED
var rgberr // Running color error

def packrgb24(r, g, b)#1
  return (b >> 2) | ((g & $F8) << 2) | ((r & $F8) << 7)
end

def packrgb15(r, g, b)#1
  return (r << 10) | (g << 5) | b
end
def unpackrgb15(rgb)#3
    return rgb >> 10, (rgb >> 5) & $1F, rgb $1F
end
def abs(n)
  return n < 0 ?? -n :: n
end

def max(a, b)
  return a < b ?? b :: a
end

def min(a, b)
  return a < b ?? a :: b
end

def dist(x1, y1, z1, x2, y2, z2)
    x2 = x2 - x1
    y2 = y2 - y1
    z2 = z2 - z1
    return x2*x2 + y2*y2 + z2*z2
end

def dotprod(x1, y1, z1, x2, y2, z2)
  return x1*x2 + y1*y2 + z1*z2
end

def rgbpix(r, g, b, x, y)#0
  var errptr
  var pr, pg, pb
  var nr, ng, nb
  var cr, cg, cb, cx
  var pd, cd, nd
  byte i

  // Error propogation
  errptr = rgberr + x * 3 * 2
  r = r + errptr=>[RED] / ERR_DIV
  g = g + errptr=>[GRN] / ERR_DIV
  b = b + errptr=>[BLU] / ERR_DIV
  pr = 0
  pg = 0
  pb = 0
  // Project RGB on previous 3/4 chroma cycle
  for cx = x - 1 downto x - 3
    i  = (cx & 3) * 3
    pr = pr + ntscCycle[i+RED]
    pg = pg + ntscCycle[i+GRN]
    pb = pb + ntscCycle[i+BLU]
  next
  pd = dist(r, g, b, pr, pg, pb)
  // Look ahead for possible better match
  i  = ((x + 1) & 3) * 3
  nr = pr - ntscCycle[i+RED] + ntscChroma[i+RED]
  ng = pg - ntscCycle[i+GRN] + ntscChroma[i+GRN]
  nb = pb - ntscCycle[i+BLU] + ntscChroma[i+BLU]
  nd = dist(r, g, b, nr, ng, nb)
  // Add current 1/4 chroma color
  i  = (x & 3) * 3
  cr = pr + ntscChroma[i+RED]
  cg = pg + ntscChroma[i+GRN]
  cb = pb + ntscChroma[i+BLU]
  cd = dist(r, g, b, cr, cg, cb)
  if cd < pd and cd < nd
    // RGB better matched with current 1/4 chroma color
    r = (r - cr + 1) / 2
    g = (g - cg + 1) / 2
    b = (b - cb + 1) / 2
    ntscCycle[i+RED] = ntscChroma[i+RED]
    ntscCycle[i+GRN] = ntscChroma[i+GRN]
    ntscCycle[i+BLU] = ntscChroma[i+BLU]
    dhgrSet(x, y)
  else
    // RGB closer to black
    r = (r - pr + 1) / 2
    g = (g - pg + 1) / 2
    b = (b - pb + 1) / 2
    ntscCycle[i+RED] = 0
    ntscCycle[i+GRN] = 0
    ntscCycle[i+BLU] = 0
  fin
  // Propogate error down and forward
  r = min(ERR_MAX, max(-ERR_MAX, r))
  g = min(ERR_MAX, max(-ERR_MAX, g))
  b = min(ERR_MAX, max(-ERR_MAX, b))
  errptr=>[RED] = r
  errptr=>[GRN] = g
  errptr=>[BLU] = b
  errptr = errptr + 6
  errptr=>[RED] = r + errptr=>[RED]
  errptr=>[GRN] = g + errptr=>[GRN]
  errptr=>[BLU] = b + errptr=>[BLU]
end

def rgb3Spans(rs, gs, bs, re, ge, be, rm, gm, bm, y)#0
  var i, j

  memset(@ntscCycle, 0, 12)
  for j = y to y + 2
    for i = 0 to 63
      rgbpix((i>>rs)|re, (i>>gs)|ge, (i>>bs)|be, i, j)
    next
    for i = 64 to 127
      rgbpix(rm, gm, bm, i, j)
    next
  next
end

def rgbTest#0
  var i

  // Init error propogation array
  rgberr = heapalloc(561 * 3 * 2)
  memset(rgberr, 0, 560 * 3 * 2)
  rgberr=>[RED] = -1
  rgberr=>[GRN] = -1
  rgberr=>[BLU] = -1

  rgb3Spans(0,5,5,  0, 0, 0, 63, 0, 0, 0)
  rgb3Spans(5,0,5,  0, 0, 0,  0,63, 0, 3)
  rgb3Spans(5,5,0,  0, 0, 0,  0, 0,63, 6)
  rgb3Spans(0,0,0,  0, 0, 0, 63,63,63, 9)
  rgb3Spans(0,1,1,  0, 0, 0, 63,31,31, 12)
  rgb3Spans(1,0,1,  0, 0, 0, 31,63,31, 15)
  rgb3Spans(1,1,0,  0, 0, 0, 31,31,63, 18)
  rgb3Spans(5,5,5, 16,16,16, 16,16,16, 21)
  rgb3Spans(5,5,5, 32,32,32, 32,32,32, 24)
  rgb3Spans(5,5,5, 48,48,48, 48,48,48, 27)
  rgb3Spans(5,5,5, 63,63,63, 63,63,63, 30)
end

dcgrMode(0)
rgbTest
getc
dcgrMode(-1)
done
