include "inc/cmdsys.plh"
include "inc/dcgrlib.plh"
include "inc/dcgrutils.plh"

sysflags resxtxt1|reshgr1|resxhgr1

const BLU_MSK = $001F
const GRN_MSK = $03E0
const RED_MSK = $7C00
const BLU = 0
const GRN = 1
const RED = 2
byte[12] ntscCycle
byte[] ntscChroma

// Imperical 0-255       B    G    R
//byte[]              = 127,  51,  64 // BLUE
//byte[]              =  64, 108,   0 // GREEN
//byte[]              =   1,  77,  64 // BROWN
//byte[]              =  64,  20, 128 // RED
// Imperical 0-63        B   G   R
byte[]              = 32, 14, 16 // BLUE
byte[]              = 16, 28,  0 // GREEN
byte[]              =  0, 18, 16 // BROWN
byte[]              = 16,  4, 32 // RED
// Ideal/simplified 0-63 B   G   R
//byte[]              = 32, 16, 16 // BLUE
//byte[]              = 16, 32,  0 // GREEN
//byte[]              =  0, 16, 16 // BROWN
//byte[]              = 16,  0, 32 // RED

var er, eg, eb // Running error

def rgb24to16(r, g, b)
  return (b>>2)|((g&$F8)<<2)|((r&$F8)<<7)
end

def abs(n)
    return n < 0 ?? -n :: n
end

def max(a, b)
    return a < b ?? b :: a
end

def rgbpix(r, g, b, x, y)#0
  var cr, cg, cb, cx
  var dr, dg, db
  var zdist, cdist
  byte i

  //r = r - er/4
  //g = g - eg/4
  //b = b - eb/4
  //puts("Match: "); puti(x & 3); putln
  //puti(r); putc(',');puti(g); putc(',');puti(b); putln
  //puts("Cycle:\n")
  cr = 0
  cg = 0
  cb = 0
  // Sum current chroma cycle
  for cx = x - 1 downto x - 3
    i = (cx & 3) * 3
    //puti(ntscCycle[i+RED]; putc(',')
    //puti(ntscCycle[i+GRN]; putc(',')
    //puti(ntscCycle[i+BLU]; putln
    cr = cr + ntscCycle[i+RED]
    cg = cg + ntscCycle[i+GRN]
    cb = cb + ntscCycle[i+BLU]
  next
  //puts("-------------\n")
  //puti(cr); putc(',');puti(cg); putc(',');puti(cb); putln
  // Subtract off chroma cycle from RGB pixel
  er = r - cr
  eg = g - cg
  eb = b - cb
  zdist = er*er + eg*eg + eb*eb // Distance to zero (black)
  i = (x & 3) * 3
  dr = er - ntscChroma[i+RED]
  dg = eg - ntscChroma[i+GRN]
  db = eb - ntscChroma[i+BLU]
  cdist = dr*dr + dg*dg + db*db // Distance to chroma color
  //puts("-------------\n")
  //puti(ntscChroma[i+RED]); putc(',')
  //puti(ntscChroma[i+GRN]); putc(',')
  //puti(ntscChroma[i+BLU]); putln
  //puts("Dist to Zero (Black):"); puti(zdist); putln
  //puts("Dist to Chroma Color:"); puti(cdist); putln
  if cdist < zdist
    // RGB closer to Chroma Color
    er = dr
    eg = dg
    eb = db
    ntscCycle[i+RED] = ntscChroma[i+RED]
    ntscCycle[i+GRN] = ntscChroma[i+GRN]
    ntscCycle[i+BLU] = ntscChroma[i+BLU]
    dhgrSet(x, y)
  else
    // RGB closer to Black
    ntscCycle[i+RED] = 0
    ntscCycle[i+GRN] = 0
    ntscCycle[i+BLU] = 0
  fin
  //getc
end

def rgbTest#0
  var i

  for i = 0 to 63
    rgbpix(i, 0, 0, i, 0)
  next
  memset(@ntscCycle, 0, 12)
  for i = 0 to 63
    rgbpix(0, i, 0, i, 2)
  next
  memset(@ntscCycle, 0, 12)
  for i = 0 to 63
    rgbpix(0, 0, i, i, 4)
  next
  memset(@ntscCycle, 0, 12)
  for i = 0 to 63
    rgbpix(i, i, i, i, 6)
  next
  memset(@ntscCycle, 0, 12)
  for i = 0 to 63
    rgbpix(i, i>>1, i>>1, i, 8)
  next
  memset(@ntscCycle, 0, 12)
  for i = 0 to 63
    rgbpix(i>>1, i, i>>1, i, 10)
  next
  memset(@ntscCycle, 0, 12)
  for i = 0 to 63
    rgbpix(i>>1, i>>1, i, i, 12)
  next
end

dcgrMode(0)
rgbTest
getc
dcgrMode(-1)
done
