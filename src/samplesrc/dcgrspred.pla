include "inc/cmdsys.plh"
include "inc/args.plh"
include "inc/grlib.plh"
include "inc/dcgrlib.plh"
include "inc/dcgrutils.plh"

sysflags restxt1|restxt2|resxtxt1|reshgr1|resxhgr1 //  Reserve all the pages

byte[8] sprinit = $05,$05,$00,$00,$00,$00,$05,$05
byte[8]         = $05,$00,$0A,$0A,$0A,$0A,$00,$05
byte[8]         = $00,$0A,$0F,$0F,$0F,$0F,$0A,$00
byte[8]         = $00,$0A,$0F,$05,$05,$0F,$0A,$00
byte[8]         = $00,$0A,$0F,$05,$05,$0F,$0A,$00
byte[8]         = $00,$0A,$0F,$0F,$0F,$0F,$0A,$00
byte[8]         = $05,$00,$0A,$0A,$0A,$0A,$00,$05
byte[8]         = $05,$05,$00,$00,$00,$00,$05,$05
byte[40*48] grSprite
byte[40*24] dcgrSprite
char[64] filename = "Untitled"
var arg
byte quit = FALSE
byte modified = TRUE
byte xCursor = 20
byte yCursor = 24
byte clrCursor = 0
byte bgTileOfst = 0

def dcgr2gr(width, height, pdcgrSpr)#0
    var pgrSpr
    byte i, cl, ch

    memset(@grSprite, $0505, 40*48)
    pgrSpr = @grSprite + (24 - height / 2) * 40
    pgrSpr = pgrSpr + 20 - width / 2
    while height
        for i = 0 to width-1 step 2
            cl = ^pdcgrSpr & $0F
            ch = ^pdcgrSpr >> 4
            *(pgrSpr + i) = cl | (ch << 8)
            pdcgrSpr++
        next
        pgrSpr = pgrSpr + 40
        height--
    loop
end

def gr2dcgr#6
    word pgrSpr, pdcgrSpr
    byte xmin, xmax, ymin, ymax
    byte cl, ch, i, j

    xmin = 39; xmax = 0
    ymin = 47; ymax = 0
    pgrSpr   = @grSprite
    pdcgrSpr = @dcgrSprite
    for j = 0 to 47
        for i = 0 to 39 step 2
            cl = ^pgrSpr & $0F
            pgrSpr++
            if cl <> $05 // Transparent
                if xmin > i; xmin = i; fin
                if xmax < i; xmax = i; fin
                if ymin > j; ymin = j; fin
                if ymax < j; ymax = j; fin
            fin
            ch = ^pgrSpr & $0F
            pgrSpr++
            if ch <> $05 // Transparent
                if xmin > i + 1; xmin = i + 1; fin
                if xmax < i + 1; xmax = i + 1; fin
                if ymin > j; ymin = j; fin
                if ymax < j; ymax = j; fin
            fin
            ^pdcgrSpr = cl | (ch << 4)
            pdcgrSpr++
        next
    next
    if xmin & 1; xmin--; fin
    pdcgrSpr = @dcgrSprite + ymin * 20 + xmin / 2
    return xCursor - xmin, yCursor - ymin, xmax - xmin + 1, ymax - ymin + 1, pdcgrSpr, 20
end

def readFile#1
    var xorg, yorg, width, height, sprptr

    xorg, yorg, width, height, sprptr = spriteRead(@filename)
    if sprptr
        heaprelease(sprptr)
        dcgr2gr(width, height, sprptr)
    fin
    return sprptr == NULL
end

def writeFile#1
    var xorg, yorg, width, height, sprptr, sprspan

    xorg, yorg, width, height, sprptr, sprspan = gr2dcgr
    return spriteWrite(@filename, xorg, yorg, width, height, sprptr, sprspan)
end

def getCmd#1
    var cmdstr, xorg, yorg, width, height, sprptr, sprspan, grspr
    byte cl, ch

    while 1
    if modified; putc('*'); fin
        puts(@filename)
        cmdstr = gets(':'|$80)
        if ^cmdstr
            when toupper(^(cmdstr + 1))
                is 'R'
                    if modified
                        puts("Lose changes (Y/N)?")
                        if toupper(getc) <> 'Y'
                            break
                        fin
                        putln
                    fin
                    repeat // Skip to filename
                        ^cmdstr--
                        memcpy(cmdstr + 1, cmdstr + 2, ^cmdstr)
                    until ^cmdstr == 0 or ^(cmdstr + 1) <> ' '
                    if ^cmdstr
                        memcpy(@filename, cmdstr, ^cmdstr + 1)
                    fin
                    modified = readFile
                    break
                is 'W'
                    repeat // Skip to filename
                        ^cmdstr--
                        memcpy(cmdstr + 1, cmdstr + 2, ^cmdstr)
                    until ^cmdstr == 0 or ^(cmdstr + 1) <> ' '
                    if ^cmdstr
                        memcpy(@filename, cmdstr, ^cmdstr + 1)
                    fin
                    modified = writeFile
                    break
                is 'Q'
                    if modified
                        puts("Lose changes (Y/N)?")
                        if toupper(getc) == 'Y'
                            return TRUE
                        fin
                        putln
                    else
                        return TRUE
                    fin
                    break
                otherwise
                    puts("?\n")
            wend
        else
            return FALSE
        fin
    loop
    return FALSE
end

def flipV#0
    byte[40] tmpRow
    byte j

    for j = 0 to 23
        memcpy(@tmpRow, @grSprite + j * 40, 40)
        memcpy(@grSprite + j * 40, @grSprite + (47 - j) * 40, 40)
        memcpy(@grSprite + (47 - j) * 40, @tmpRow, 40)
    next
end

def flipH#0
    byte i, j, tmpPix

    for i = 0 to 19
        for j = 0 to 47
            tmpPix = grSprite[j * 40 + i]
            grSprite[j * 40 + i] = grSprite[j * 40 + 39 - i]
            grSprite[j * 40 + 39 - i] = tmpPix
        next
    next
end

def grView#0
    grClear(5)
    grBLT(0, 0, 40, 48, @grSprite)
end

def grGetKey#1
    byte f, c

    ^$C010
    c = grSprite[yCursor * 40 + xCursor] & $0F
    f = 0
    while ^$C000 < 128
        when f
            is 0
                grColor(clrCursor)
                grPlot(xCursor, yCursor)
                break
            is 128
                grColor(c)
                grPlot(xCursor, yCursor)
                break
        wend
        f++
    loop
    grColor(c)
    grPlot(xCursor, yCursor)
    return ^$C010 & $7F
end

def dcgrTestView(bounce)#0
    byte i, j, inci, incj

    gr2dcgr
    i = 70-20; inci = bounce
    j = 96-24; incj = bounce
    grMode(grOff)
    dcgrMode(0)
    while ^$C000 < 128
        dcgrPixMap(i, j, 40, 48, @dcgrSprite)
        i = i + inci
        if i < 1 or i > 139-40; inci = -inci; fin
        j = j + incj
        if j < 1 or j > 191-48; incj = -incj; fin
    loop
    ^$C010
    dcgrMode(-1)
    grMode(grPage1)
    grDrawBuf(grPage1)
    grView
end

memset(@grSprite, $0505, 40*48)
arg = argNext(argFirst)
if ^arg
    memcpy(@filename, arg, ^arg + 1)
    modified = readFile
fin
if modified
    for modified = 0 to 8
        memcpy(@grSprite + modified*40 + 20*40 + 16, @sprinit + modified*8, 8)
    next
    modified = 0
fin
grMode(grPage1)
grDrawBuf(grPage1)
grView
while not quit
    when grGetKey
        is $0B // Up arrow
            if yCursor > 0; yCursor--; fin
            break
        is $0A // Down arrow
            if yCursor < 47; yCursor++; fin
            break
        is $08 // Left arrow
            if xCursor > 0; xCursor--; fin
            break
        is $15 // Right arrow
            if xCursor < 39; xCursor++; fin
            break
        is ' '
            modified = 1
            grSprite[yCursor*40 + xCursor] = clrCursor
            grView
            break
        is '+'
        is '='
            clrCursor = (clrCursor + 1) & $0F
            break
        is '-'
            clrCursor = (clrCursor - 1) & $0F
            break
        is 't'
            dcgrTestView(0)
            break
        is 'b'
            dcgrTestView(1)
            break
        is 'v'
            modified = 1
            flipV
            grView
            break
        is 'h'
            modified = 1
            flipH
            grView
            break
        is $1B // Escape
            grMode(grOff)
            quit = getCmd
            if not quit
                grMode(grPage1)
                grDrawBuf(grPage1)
                grView
            fin
            break
    wend
loop
grMode(grOff)
done
