; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/fatcat.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/fatcat.pla: 0001: 
; samplesrc/fatcat.pla: 0002: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X028
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X029
					; ARGNEXT -> X030
; inc/args.plh: 0003: end
; samplesrc/fatcat.pla: 0002: 
; samplesrc/fatcat.pla: 0003: include "inc/sdfat.plh"
; inc/sdfat.plh: 0001: //
; inc/sdfat.plh: 0002: // FAT I/O object
; inc/sdfat.plh: 0003: //
; inc/sdfat.plh: 0004: import sdFAT
	; DCI STRING: SDFAT
	!BYTE	$D3,$C4,$C6,$C1,$54
					; SDFAT -> X031
; inc/sdfat.plh: 0005:     //
; inc/sdfat.plh: 0006:     // Open flags
; inc/sdfat.plh: 0007:     //
; inc/sdfat.plh: 0008:     const O_READ   = $01
					; O_READ = 1
; inc/sdfat.plh: 0009:     const O_WRITE  = $02
					; O_WRITE = 2
; inc/sdfat.plh: 0010:     const O_APPEND = $04
					; O_APPEND = 4
; inc/sdfat.plh: 0011:     const O_SYNC   = $08
					; O_SYNC = 8
; inc/sdfat.plh: 0012:     const O_TRUNC  = $10
					; O_TRUNC = 16
; inc/sdfat.plh: 0013:     const O_AT_END = $20
					; O_AT_END = 32
; inc/sdfat.plh: 0014:     const O_CREAT  = $40
					; O_CREAT = 64
; inc/sdfat.plh: 0015:     const O_EXCL   = $80
					; O_EXCL = 128
; inc/sdfat.plh: 0016:     const MAX_FAT_BUF_SIZE = 512
					; MAX_FAT_BUF_SIZE = 512
; inc/sdfat.plh: 0017:     //
; inc/sdfat.plh: 0018:     // Interface
; inc/sdfat.plh: 0019:     //
; inc/sdfat.plh: 0020:     struc t_sdFAT
; inc/sdfat.plh: 0021:         word getDir
					; getDir = 0
; inc/sdfat.plh: 0022:         word setDir
					; setDir = 2
; inc/sdfat.plh: 0023:         word newDir
					; newDir = 4
; inc/sdfat.plh: 0024:         word removeDir
					; removeDir = 6
; inc/sdfat.plh: 0025:         word renameFile
					; renameFile = 8
; inc/sdfat.plh: 0026:         word removeFile
					; removeFile = 10
; inc/sdfat.plh: 0027:         word existsFile
					; existsFile = 12
; inc/sdfat.plh: 0028:         word openFirstFile
					; openFirstFile = 14
; inc/sdfat.plh: 0029:         word openNextFile
					; openNextFile = 16
; inc/sdfat.plh: 0030:         word openFile
					; openFile = 18
; inc/sdfat.plh: 0031:         word closeFile
					; closeFile = 20
; inc/sdfat.plh: 0032:         word readFile
					; readFile = 22
; inc/sdfat.plh: 0033:         word writeFile
					; writeFile = 24
; inc/sdfat.plh: 0034:         word syncFile
					; syncFile = 26
; inc/sdfat.plh: 0035:         word rewindFile
					; rewindFile = 28
; inc/sdfat.plh: 0036:         word seekFile
					; seekFile = 30
; inc/sdfat.plh: 0037:         word seekOffsetFile
					; seekOffsetFile = 32
; inc/sdfat.plh: 0038:         word posFile
					; posFile = 34
; inc/sdfat.plh: 0039:         word sizeOfFile
					; sizeOfFile = 36
; inc/sdfat.plh: 0040:         word truncateFile
					; truncateFile = 38
; inc/sdfat.plh: 0041:         word isDir
					; isDir = 40
; inc/sdfat.plh: 0042:         word isFile
					; isFile = 42
; inc/sdfat.plh: 0043:     end
					; t_sdFAT = 44
; inc/sdfat.plh: 0044: end
; samplesrc/fatcat.pla: 0003: 
; samplesrc/fatcat.pla: 0004: 
; samplesrc/fatcat.pla: 0005: word arg
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D032 	!FILL	2			; arg
; samplesrc/fatcat.pla: 0006: byte[64] cwd
_D033 	!FILL	64			; cwd
; samplesrc/fatcat.pla: 0007: byte[64] pathname
_D034 	!FILL	64			; pathname
; samplesrc/fatcat.pla: 0008: 
; samplesrc/fatcat.pla: 0009: def fatCat(path)#0
_SUBSEG 				; BYTECODE STARTS
					; path -> [0]
_C000 					; fatCat()
; samplesrc/fatcat.pla: 0010:     byte filename[32]
					; filename -> [2]
; samplesrc/fatcat.pla: 0011:     
; samplesrc/fatcat.pla: 0012:     sdFAT:setDir(path)
	!BYTE	$58,$22,$01		; ENTER	34,1
; samplesrc/fatcat.pla: 0013:     puts("Directory of "); puts(path); puts(":\n")
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X031+2
_F000 	!WORD	0+2		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$0D
	!BYTE	$44,$69,$72,$65,$63,$74,$6F,$72
	!BYTE	$79,$20,$6F,$66,$20
	!BYTE	$54			; CALL	_X004
_F001 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F002 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$3A,$0D
	!BYTE	$54			; CALL	_X004
_F003 	!WORD	0		
; samplesrc/fatcat.pla: 0014:     sdFAT:openFirstFile(@filename)
; samplesrc/fatcat.pla: 0015:     while filename
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$6A			; LAW	_X031+14
_F004 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; samplesrc/fatcat.pla: 0016:         puts("    "); puts(@filename)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$20,$20,$20
	!BYTE	$54			; CALL	_X004
_F005 	!WORD	0		
; samplesrc/fatcat.pla: 0017:         if sdFAT:isDir(); putc('/'); fin
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X004
_F006 	!WORD	0		
	!BYTE	$6A			; LAW	_X031+40
_F007 	!WORD	0+40		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$54			; CALL	_X002
_F008 	!WORD	0		
_B004 
_B005 
; samplesrc/fatcat.pla: 0018:         putln
; samplesrc/fatcat.pla: 0019:         sdFAT:closeFile()
; samplesrc/fatcat.pla: 0020:         sdFAT:openNextFile(@filename)
; samplesrc/fatcat.pla: 0021:     loop
	!BYTE	$54			; CALL	_X003
_F009 	!WORD	0		
	!BYTE	$6A			; LAW	_X031+20
_F010 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$6A			; LAW	_X031+16
_F011 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B003 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; samplesrc/fatcat.pla: 0022: end
	!BYTE	$5A,$22			; LEAVE	34
; samplesrc/fatcat.pla: 0023: 
; samplesrc/fatcat.pla: 0024: sdFAT:getDir(@cwd)
_INIT 
; samplesrc/fatcat.pla: 0025: if cwd[cwd] <> '/' // append '/' to cwd if needed
; samplesrc/fatcat.pla: 0026:     cwd++
	!BYTE	$26			; LA	_D033+0
_F012 	!WORD	_D033+0		
	!BYTE	$6A			; LAW	_X031+0
_F013 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D033+0
_F014 	!WORD	_D033+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F015 	!WORD	_D033+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B006
	!WORD	_B006-*
	!BYTE	$68			; LAB	_D033+0
_F016 	!WORD	_D033+0		
	!BYTE	$8C			; INCR
; samplesrc/fatcat.pla: 0027:     cwd[cwd] = '/'
; samplesrc/fatcat.pla: 0028: fin
	!BYTE	$78			; SAB	_D033+0
_F017 	!WORD	_D033+0		
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$26			; LA	_D033+0
_F018 	!WORD	_D033+0		
	!BYTE	$B4			; ADDAB	_D033+0
_F019 	!WORD	_D033+0		
	!BYTE	$70			; SB
_B006 
_B007 
; samplesrc/fatcat.pla: 0029: arg = argNext(argFirst)
; samplesrc/fatcat.pla: 0030: if ^arg
; samplesrc/fatcat.pla: 0031:     while ^arg
	!BYTE	$54			; CALL	_X029
_F020 	!WORD	0		
	!BYTE	$54			; CALL	_X030
_F021 	!WORD	0		
	!BYTE	$7A			; SAW	_D032+0
_F022 	!WORD	_D032+0		
	!BYTE	$6A			; LAW	_D032+0
_F023 	!WORD	_D032+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B008
	!WORD	_B008-*
	!BYTE	$50			; BRNCH	_B012
	!WORD	_B012-*
_B010 
; samplesrc/fatcat.pla: 0032:         if ^(arg + 1) <> '/' // relative path argument - append to cwd
; samplesrc/fatcat.pla: 0033:             memcpy(@pathname, @cwd, cwd + 1)
; samplesrc/fatcat.pla: 0034:         else
	!BYTE	$6A			; LAW	_D032+0
_F024 	!WORD	_D032+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B013
	!WORD	_B013-*
	!BYTE	$26			; LA	_D034+0
_F025 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D033+0
_F026 	!WORD	_D033+0		
	!BYTE	$68			; LAB	_D033+0
_F027 	!WORD	_D033+0		
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_X018
_F028 	!WORD	0		
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B013 
; samplesrc/fatcat.pla: 0035:             pathname = 0 // absolute path
; samplesrc/fatcat.pla: 0036:         fin
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D034+0
_F029 	!WORD	_D034+0		
_B014 
; samplesrc/fatcat.pla: 0037:         memcpy(@pathname + pathname + 1, arg + 1, ^arg) // append path argument
; samplesrc/fatcat.pla: 0038:         pathname = pathname + ^arg
; samplesrc/fatcat.pla: 0039:         if pathname[pathname] <> '/'
; samplesrc/fatcat.pla: 0040:             pathname++
	!BYTE	$26			; LA	_D034+0
_F030 	!WORD	_D034+0		
	!BYTE	$B4			; ADDAB	_D034+0
_F031 	!WORD	_D034+0		
	!BYTE	$8C			; INCR
	!BYTE	$6A			; LAW	_D032+0
_F032 	!WORD	_D032+0		
	!BYTE	$8C			; INCR
	!BYTE	$6A			; LAW	_D032+0
_F033 	!WORD	_D032+0		
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F034 	!WORD	0		
	!BYTE	$68			; LAB	_D034+0
_F035 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_D032+0
_F036 	!WORD	_D032+0		
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$78			; SAB	_D034+0
_F037 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D034+0
_F038 	!WORD	_D034+0		
	!BYTE	$B4			; ADDAB	_D034+0
_F039 	!WORD	_D034+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B015
	!WORD	_B015-*
	!BYTE	$68			; LAB	_D034+0
_F040 	!WORD	_D034+0		
	!BYTE	$8C			; INCR
; samplesrc/fatcat.pla: 0041:             pathname[pathname] = '/'
; samplesrc/fatcat.pla: 0042:         fin
	!BYTE	$78			; SAB	_D034+0
_F041 	!WORD	_D034+0		
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$26			; LA	_D034+0
_F042 	!WORD	_D034+0		
	!BYTE	$B4			; ADDAB	_D034+0
_F043 	!WORD	_D034+0		
	!BYTE	$70			; SB
_B015 
_B016 
; samplesrc/fatcat.pla: 0043:         fatCat(@pathname)
; samplesrc/fatcat.pla: 0044:         arg = argNext(arg)
; samplesrc/fatcat.pla: 0045:     loop
	!BYTE	$26			; LA	_D034+0
_F044 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_C000
_F045 	!WORD	_C000		
	!BYTE	$6A			; LAW	_D032+0
_F046 	!WORD	_D032+0		
	!BYTE	$54			; CALL	_X030
_F047 	!WORD	0		
	!BYTE	$7A			; SAW	_D032+0
_F048 	!WORD	_D032+0		
_B012 
	!BYTE	$6A			; LAW	_D032+0
_F049 	!WORD	_D032+0		
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B010
	!WORD	_B010-*
_B011 
; samplesrc/fatcat.pla: 0046: else
	!BYTE	$50			; BRNCH	_B009
	!WORD	_B009-*
_B008 
; samplesrc/fatcat.pla: 0047:     fatCat(@cwd)
; samplesrc/fatcat.pla: 0048: fin
	!BYTE	$26			; LA	_D033+0
_F050 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_C000
_F051 	!WORD	_C000		
_B009 
; samplesrc/fatcat.pla: 0049: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: SDFAT
	!BYTE	$D3,$C4,$C6,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	!BYTE	$00			; END OF ESD
