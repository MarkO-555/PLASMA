; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/fatput.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/fatput.pla: 0001: 
; samplesrc/fatput.pla: 0002: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X028
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X029
; inc/fileio.plh: 0080: end
; samplesrc/fatput.pla: 0002: 
; samplesrc/fatput.pla: 0003: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X030
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X031
					; ARGNEXT -> X032
; inc/args.plh: 0003: end
; samplesrc/fatput.pla: 0003: 
; samplesrc/fatput.pla: 0004: include "inc/sdfat.plh"
; inc/sdfat.plh: 0001: //
; inc/sdfat.plh: 0002: // FAT I/O object
; inc/sdfat.plh: 0003: //
; inc/sdfat.plh: 0004: import sdFAT
	; DCI STRING: SDFAT
	!BYTE	$D3,$C4,$C6,$C1,$54
					; SDFAT -> X033
; inc/sdfat.plh: 0005:     //
; inc/sdfat.plh: 0006:     // Open flags
; inc/sdfat.plh: 0007:     //
; inc/sdfat.plh: 0008:     const O_READ   = $01
					; O_READ = 1
; inc/sdfat.plh: 0009:     const O_WRITE  = $02
					; O_WRITE = 2
; inc/sdfat.plh: 0010:     const O_APPEND = $04
					; O_APPEND = 4
; inc/sdfat.plh: 0011:     const O_SYNC   = $08
					; O_SYNC = 8
; inc/sdfat.plh: 0012:     const O_TRUNC  = $10
					; O_TRUNC = 16
; inc/sdfat.plh: 0013:     const O_AT_END = $20
					; O_AT_END = 32
; inc/sdfat.plh: 0014:     const O_CREAT  = $40
					; O_CREAT = 64
; inc/sdfat.plh: 0015:     const O_EXCL   = $80
					; O_EXCL = 128
; inc/sdfat.plh: 0016:     const MAX_FAT_BUF_SIZE = 512
					; MAX_FAT_BUF_SIZE = 512
; inc/sdfat.plh: 0017:     //
; inc/sdfat.plh: 0018:     // Interface
; inc/sdfat.plh: 0019:     //
; inc/sdfat.plh: 0020:     struc t_sdFAT
; inc/sdfat.plh: 0021:         word getDir
					; getDir = 0
; inc/sdfat.plh: 0022:         word setDir
					; setDir = 2
; inc/sdfat.plh: 0023:         word newDir
					; newDir = 4
; inc/sdfat.plh: 0024:         word removeDir
					; removeDir = 6
; inc/sdfat.plh: 0025:         word renameFile
					; renameFile = 8
; inc/sdfat.plh: 0026:         word removeFile
					; removeFile = 10
; inc/sdfat.plh: 0027:         word existsFile
					; existsFile = 12
; inc/sdfat.plh: 0028:         word openFirstFile
					; openFirstFile = 14
; inc/sdfat.plh: 0029:         word openNextFile
					; openNextFile = 16
; inc/sdfat.plh: 0030:         word openFile
					; openFile = 18
; inc/sdfat.plh: 0031:         word closeFile
					; closeFile = 20
; inc/sdfat.plh: 0032:         word readFile
					; readFile = 22
; inc/sdfat.plh: 0033:         word writeFile
					; writeFile = 24
; inc/sdfat.plh: 0034:         word syncFile
					; syncFile = 26
; inc/sdfat.plh: 0035:         word rewindFile
					; rewindFile = 28
; inc/sdfat.plh: 0036:         word seekFile
					; seekFile = 30
; inc/sdfat.plh: 0037:         word seekOffsetFile
					; seekOffsetFile = 32
; inc/sdfat.plh: 0038:         word posFile
					; posFile = 34
; inc/sdfat.plh: 0039:         word sizeOfFile
					; sizeOfFile = 36
; inc/sdfat.plh: 0040:         word truncateFile
					; truncateFile = 38
; inc/sdfat.plh: 0041:         word isDir
					; isDir = 40
; inc/sdfat.plh: 0042:         word isFile
					; isFile = 42
; inc/sdfat.plh: 0043:     end
					; t_sdFAT = 44
; inc/sdfat.plh: 0044: end
; samplesrc/fatput.pla: 0004: 
; samplesrc/fatput.pla: 0005: 
; samplesrc/fatput.pla: 0006: const COPY_BUF_SIZE = 8192 // 8K
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; COPY_BUF_SIZE = 8192
; samplesrc/fatput.pla: 0007: const LOWER_DIFF = 'a' - 'A'
					; LOWER_DIFF = 32
; samplesrc/fatput.pla: 0008: 
; samplesrc/fatput.pla: 0009: word arg
_D034 	!FILL	2			; arg
; samplesrc/fatput.pla: 0010: byte[24] fatName
_D035 	!FILL	24			; fatName
; samplesrc/fatput.pla: 0011: 
; samplesrc/fatput.pla: 0012: def putByte(val)#0
_SUBSEG 				; BYTECODE STARTS
					; val -> [0]
_C000 					; putByte()
; samplesrc/fatput.pla: 0013:     byte c
					; c -> [2]
; samplesrc/fatput.pla: 0014:     c = ((val >> 4) & $0F) + '0'
	!BYTE	$58,$03,$01		; ENTER	3,1
; samplesrc/fatput.pla: 0015:     if c > '9'
; samplesrc/fatput.pla: 0016:         c = c + 7
; samplesrc/fatput.pla: 0017:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$74,$02			; SLB	[2]
_B001 
_B002 
; samplesrc/fatput.pla: 0018:     putc(c)
; samplesrc/fatput.pla: 0019:     c = (val & $0F) + '0'
; samplesrc/fatput.pla: 0020:     if c > '9'
; samplesrc/fatput.pla: 0021:         c = c + 7
; samplesrc/fatput.pla: 0022:     fin
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_X002
_F000 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$74,$02			; SLB	[2]
_B003 
_B004 
; samplesrc/fatput.pla: 0023:     putc(c)
; samplesrc/fatput.pla: 0024: end
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_X002
_F001 	!WORD	0		
	!BYTE	$5A,$03			; LEAVE	3
; samplesrc/fatput.pla: 0025: 
; samplesrc/fatput.pla: 0026: def hexChars(cptr, b)#0
					; cptr -> [0]
					; b -> [2]
_C001 					; hexChars()
; samplesrc/fatput.pla: 0027:     byte h
					; h -> [4]
; samplesrc/fatput.pla: 0028: 
; samplesrc/fatput.pla: 0029:     h = ((b >> 4) & $0F) + '0'
	!BYTE	$58,$05,$02		; ENTER	5,2
; samplesrc/fatput.pla: 0030:     if h > '9'
; samplesrc/fatput.pla: 0031:         h = h + 7
; samplesrc/fatput.pla: 0032:     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$6C,$04			; DLB	[4]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$74,$04			; SLB	[4]
_B005 
_B006 
; samplesrc/fatput.pla: 0033:     ^cptr = h
; samplesrc/fatput.pla: 0034:     cptr++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; samplesrc/fatput.pla: 0035:     h = (b & $0F) + '0'
; samplesrc/fatput.pla: 0036:     if h > '9'
; samplesrc/fatput.pla: 0037:         h = h + 7
; samplesrc/fatput.pla: 0038:     fin
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$6C,$04			; DLB	[4]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$74,$04			; SLB	[4]
_B007 
_B008 
; samplesrc/fatput.pla: 0039:     ^cptr = h
; samplesrc/fatput.pla: 0040: end
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$5A,$05			; LEAVE	5
; samplesrc/fatput.pla: 0041: 
; samplesrc/fatput.pla: 0042: def mkFatName(proName, fatName)
					; proName -> [0]
					; fatName -> [2]
_C002 					; mkFatName()
; samplesrc/fatput.pla: 0043:     word l, n
					; l -> [4]
					; n -> [6]
; samplesrc/fatput.pla: 0044:     byte fileinfo[t_fileinfo]
					; fileinfo -> [8]
; samplesrc/fatput.pla: 0045: 
; samplesrc/fatput.pla: 0046:     if !fileio:getfileinfo(proName, @fileinfo)
	!BYTE	$58,$17,$02		; ENTER	23,2
; samplesrc/fatput.pla: 0047:         //
; samplesrc/fatput.pla: 0048:         // Scan backward looking for dir seperator
; samplesrc/fatput.pla: 0049:         //
; samplesrc/fatput.pla: 0050:         l = ^proName
; samplesrc/fatput.pla: 0051:         for n = l downto 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$6A			; LAW	_X028+4
_F002 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B009
	!WORD	_B009-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$02			; CN	1
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$A2			; BRLT	_B011
	!WORD	_B011-*
_B012 
	!BYTE	$6E,$06			; DLW	[6]
; samplesrc/fatput.pla: 0052:             if ^(proName + n) == '/'
; samplesrc/fatput.pla: 0053:                 break
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$24			; BRNE	_B014
	!WORD	_B014-*
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; samplesrc/fatput.pla: 0054:             fin
_B014 
_B015 
; samplesrc/fatput.pla: 0055:         next
_B013 
	!BYTE	$A8			; DECBRGE	_B012
	!WORD	_B012-*
_B011 
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$30			; DROP 
; samplesrc/fatput.pla: 0056:         memcpy(fatName + 1, proName + 1 + n, l - n)
; samplesrc/fatput.pla: 0057:         ^fatName = l - n + 7
; samplesrc/fatput.pla: 0058:         //
; samplesrc/fatput.pla: 0059:         // Build CiderPress style extension
; samplesrc/fatput.pla: 0060:         //
; samplesrc/fatput.pla: 0061:         n = fatName + ^fatName - 6
; samplesrc/fatput.pla: 0062:         ^n = '#'
; samplesrc/fatput.pla: 0063:         hexChars(n + 1, fileinfo.file_type)
; samplesrc/fatput.pla: 0064:         hexChars(n + 3, fileinfo.aux_type.1)
; samplesrc/fatput.pla: 0065:         hexChars(n + 5, fileinfo.aux_type)
; samplesrc/fatput.pla: 0066:     else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$84			; SUB 
	!BYTE	$54			; CALL	_X018
_F003 	!WORD	0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$84			; SUB 
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$3A,$06			; SUBI	6
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$2A,$23			; CB	35
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$70			; SB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8C			; INCR
	!BYTE	$64,$09			; LLB	[9]
	!BYTE	$54			; CALL	_C001
_F004 	!WORD	_C001		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$28,$0A			; LLA	[10]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_C001
_F005 	!WORD	_C001		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$54			; CALL	_C001
_F006 	!WORD	_C001		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B009 
; samplesrc/fatput.pla: 0067:         //
; samplesrc/fatput.pla: 0068:         // Error getting info on file
; samplesrc/fatput.pla: 0069:         //
; samplesrc/fatput.pla: 0070:         puts("Error reading "); puts(proName); putln
	!BYTE	$2E			; CS
	!BYTE	$0E
	!BYTE	$45,$72,$72,$6F,$72,$20,$72,$65
	!BYTE	$61,$64,$69,$6E,$67,$20
	!BYTE	$54			; CALL	_X004
_F007 	!WORD	0		
; samplesrc/fatput.pla: 0071:         return -1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F008 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F009 	!WORD	0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$17			; LEAVE	23
; samplesrc/fatput.pla: 0072:     fin
_B010 
; samplesrc/fatput.pla: 0073:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$17			; LEAVE	23
; samplesrc/fatput.pla: 0074: end
; samplesrc/fatput.pla: 0075: 
; samplesrc/fatput.pla: 0076: def getYN(prompt)
					; prompt -> [0]
_C003 					; getYN()
; samplesrc/fatput.pla: 0077:     byte yn
					; yn -> [2]
; samplesrc/fatput.pla: 0078: 
; samplesrc/fatput.pla: 0079:     puts(prompt)
	!BYTE	$58,$03,$01		; ENTER	3,1
; samplesrc/fatput.pla: 0080:     yn = getc
; samplesrc/fatput.pla: 0081:     return yn == 'Y' or yn == 'y'
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F010 	!WORD	0		
	!BYTE	$54			; CALL	_X006
_F011 	!WORD	0		
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$2A,$59			; CB	89
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B016
	!WORD	_B016-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$2A,$79			; CB	121
	!BYTE	$40			; ISEQ
_B016 
	!BYTE	$5A,$03			; LEAVE	3
; samplesrc/fatput.pla: 0082: end
; samplesrc/fatput.pla: 0083: 
; samplesrc/fatput.pla: 0084: def bigFatWrite(buf, len)
					; buf -> [0]
					; len -> [2]
_C004 					; bigFatWrite()
; samplesrc/fatput.pla: 0085:     word xferLen, fatLen
					; xferLen -> [4]
					; fatLen -> [6]
; samplesrc/fatput.pla: 0086: 
; samplesrc/fatput.pla: 0087:     xferLen = 0
	!BYTE	$58,$08,$02		; ENTER	8,2
; samplesrc/fatput.pla: 0088:     repeat
	!BYTE	$00			; CN	0
	!BYTE	$76,$04			; SLW	[4]
_B018 
; samplesrc/fatput.pla: 0089:         if len > MAX_FAT_BUF_SIZE
; samplesrc/fatput.pla: 0090:             fatLen = MAX_FAT_BUF_SIZE
; samplesrc/fatput.pla: 0091:         else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B020
	!WORD	_B020-*
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$50			; BRNCH	_B021
	!WORD	_B021-*
_B020 
; samplesrc/fatput.pla: 0092:             fatLen = len
; samplesrc/fatput.pla: 0093:         fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$06			; SLW	[6]
_B021 
; samplesrc/fatput.pla: 0094:         fatLen = sdFAT:writeFile(buf, fatLen)
; samplesrc/fatput.pla: 0095:         if fatLen > 0
; samplesrc/fatput.pla: 0096:             xferLen = xferLen + fatLen
; samplesrc/fatput.pla: 0097:             len     = len     - fatLen
; samplesrc/fatput.pla: 0098:             buf     = buf     + fatLen
; samplesrc/fatput.pla: 0099:         else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$6A			; LAW	_X033+24
_F012 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B022
	!WORD	_B022-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$84			; SUB 
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$50			; BRNCH	_B023
	!WORD	_B023-*
_B022 
; samplesrc/fatput.pla: 0100:             len = 0
; samplesrc/fatput.pla: 0101:         fin
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
_B023 
; samplesrc/fatput.pla: 0102:     until len == 0
_B019 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$4E			; BRTRU	_B018
	!WORD	_B018-*
_B017 
; samplesrc/fatput.pla: 0103:     return xferLen
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$5A,$08			; LEAVE	8
; samplesrc/fatput.pla: 0104: end
; samplesrc/fatput.pla: 0105: 
; samplesrc/fatput.pla: 0106: def fatCopyTo(src, dst)
					; src -> [0]
					; dst -> [2]
_C005 					; fatCopyTo()
; samplesrc/fatput.pla: 0107:     word copyBuf, copyLen, freeAddr
					; copyBuf -> [4]
					; copyLen -> [6]
					; freeAddr -> [8]
; samplesrc/fatput.pla: 0108:     byte ref
					; ref -> [10]
; samplesrc/fatput.pla: 0109: 
; samplesrc/fatput.pla: 0110:     copyBuf = heapallocalign(COPY_BUF_SIZE, 8, @freeAddr)
	!BYTE	$58,$0B,$02		; ENTER	11,2
; samplesrc/fatput.pla: 0111:     if not copyBuf
; samplesrc/fatput.pla: 0112:         puts("Not enough free memory!\n"); putln
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$10			; CN	8
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_X013
_F013 	!WORD	0		
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$4E			; BRTRU	_B024
	!WORD	_B024-*
	!BYTE	$2E			; CS
	!BYTE	$18
	!BYTE	$4E,$6F,$74,$20,$65,$6E,$6F,$75
	!BYTE	$67,$68,$20,$66,$72,$65,$65,$20
	!BYTE	$6D,$65,$6D,$6F,$72,$79,$21,$0D
	!BYTE	$54			; CALL	_X004
_F014 	!WORD	0		
; samplesrc/fatput.pla: 0113:         return -1
	!BYTE	$54			; CALL	_X003
_F015 	!WORD	0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/fatput.pla: 0114:     fin
_B024 
_B025 
; samplesrc/fatput.pla: 0115:     ref = fileio:open(src)
; samplesrc/fatput.pla: 0116:     if not ref
; samplesrc/fatput.pla: 0117:         puts("Error opening file: "); puts(src); putln
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X028+14
_F016 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$0A			; DLB	[10]
	!BYTE	$4E			; BRTRU	_B026
	!WORD	_B026-*
	!BYTE	$2E			; CS
	!BYTE	$14
	!BYTE	$45,$72,$72,$6F,$72,$20,$6F,$70
	!BYTE	$65,$6E,$69,$6E,$67,$20,$66,$69
	!BYTE	$6C,$65,$3A,$20
	!BYTE	$54			; CALL	_X004
_F017 	!WORD	0		
; samplesrc/fatput.pla: 0118:         puts("Open file error: "); putByte(perr); putln
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F018 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F019 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$11
	!BYTE	$4F,$70,$65,$6E,$20,$66,$69,$6C
	!BYTE	$65,$20,$65,$72,$72,$6F,$72,$3A
	!BYTE	$20
	!BYTE	$54			; CALL	_X004
_F020 	!WORD	0		
; samplesrc/fatput.pla: 0119:         return -1
	!BYTE	$68			; LAB	_X029+0
_F021 	!WORD	0+0		
	!BYTE	$54			; CALL	_C000
_F022 	!WORD	_C000		
	!BYTE	$54			; CALL	_X003
_F023 	!WORD	0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/fatput.pla: 0120:     fin
_B026 
_B027 
; samplesrc/fatput.pla: 0121:     //
; samplesrc/fatput.pla: 0122:     // Copy file over in big chunks
; samplesrc/fatput.pla: 0123:     //
; samplesrc/fatput.pla: 0124:     if sdFAT:openFile(dst, O_READ | O_WRITE | O_CREAT)
; samplesrc/fatput.pla: 0125:         repeat
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$06			; CN	3
	!BYTE	$3E,$40			; ORI	64
	!BYTE	$6A			; LAW	_X033+18
_F024 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
_B031 
; samplesrc/fatput.pla: 0126:             copyLen = fileio:read(ref, copyBuf, COPY_BUF_SIZE)
; samplesrc/fatput.pla: 0127:             if copyLen
; samplesrc/fatput.pla: 0128:                 copyLen = bigFatWrite(copyBuf, copyLen)
; samplesrc/fatput.pla: 0129:                 if !copyLen
; samplesrc/fatput.pla: 0130:                 fin
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$6A			; LAW	_X028+18
_F025 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$4C			; BRFLS	_B033
	!WORD	_B033-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_C004
_F026 	!WORD	_C004		
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$4E			; BRTRU	_B035
	!WORD	_B035-*
_B035 
_B036 
; samplesrc/fatput.pla: 0131:             fin
_B033 
_B034 
; samplesrc/fatput.pla: 0132:         until copyLen == 0
_B032 
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$4E			; BRTRU	_B031
	!WORD	_B031-*
_B030 
; samplesrc/fatput.pla: 0133:         sdFAT:closeFile()
; samplesrc/fatput.pla: 0134:     else
	!BYTE	$6A			; LAW	_X033+20
_F027 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B029
	!WORD	_B029-*
_B028 
; samplesrc/fatput.pla: 0135:         puts("Error opening FAT file:"); puts(dst); putln
	!BYTE	$2E			; CS
	!BYTE	$17
	!BYTE	$45,$72,$72,$6F,$72,$20,$6F,$70
	!BYTE	$65,$6E,$69,$6E,$67,$20,$46,$41
	!BYTE	$54,$20,$66,$69,$6C,$65,$3A
	!BYTE	$54			; CALL	_X004
_F028 	!WORD	0		
; samplesrc/fatput.pla: 0136:     fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X004
_F029 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F030 	!WORD	0		
_B029 
; samplesrc/fatput.pla: 0137:     fileio:close(ref)
; samplesrc/fatput.pla: 0138:     heaprelease(freeAddr)
; samplesrc/fatput.pla: 0139:     return 0
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$6A			; LAW	_X028+16
_F031 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$54			; CALL	_X015
_F032 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/fatput.pla: 0140: end
; samplesrc/fatput.pla: 0141: 
; samplesrc/fatput.pla: 0142: arg = argNext(argFirst)
_INIT 
; samplesrc/fatput.pla: 0143: if ^arg
; samplesrc/fatput.pla: 0144:     mkFatName(arg, @fatName)
; samplesrc/fatput.pla: 0145:     puts(arg); puts(" ==> "); puts(@fatName); putln
	!BYTE	$54			; CALL	_X031
_F033 	!WORD	0		
	!BYTE	$54			; CALL	_X032
_F034 	!WORD	0		
	!BYTE	$7A			; SAW	_D034+0
_F035 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_D034+0
_F036 	!WORD	_D034+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B037
	!WORD	_B037-*
	!BYTE	$6A			; LAW	_D034+0
_F037 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D035+0
_F038 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_C002
_F039 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D034+0
_F040 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_X004
_F041 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$20,$3D,$3D,$3E,$20
	!BYTE	$54			; CALL	_X004
_F042 	!WORD	0		
; samplesrc/fatput.pla: 0146:     fatCopyTo(arg, @fatName)
; samplesrc/fatput.pla: 0147: else
	!BYTE	$26			; LA	_D035+0
_F043 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_X004
_F044 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F045 	!WORD	0		
	!BYTE	$6A			; LAW	_D034+0
_F046 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D035+0
_F047 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_C005
_F048 	!WORD	_C005		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B038
	!WORD	_B038-*
_B037 
; samplesrc/fatput.pla: 0148:     puts("Usage: +FATPUT <filename>"); putln
	!BYTE	$2E			; CS
	!BYTE	$19
	!BYTE	$55,$73,$61,$67,$65,$3A,$20,$2B
	!BYTE	$46,$41,$54,$50,$55,$54,$20,$3C
	!BYTE	$66,$69,$6C,$65,$6E,$61,$6D,$65
	!BYTE	$3E
	!BYTE	$54			; CALL	_X004
_F049 	!WORD	0		
; samplesrc/fatput.pla: 0149: fin
	!BYTE	$54			; CALL	_X003
_F050 	!WORD	0		
_B038 
; samplesrc/fatput.pla: 0150: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	13			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: HEAPALLOCALIGN
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$C3,$C1,$CC,$C9,$C7,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	13			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	; DCI STRING: PERR
	!BYTE	$D0,$C5,$D2,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: SDFAT
	!BYTE	$D3,$C4,$C6,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	!BYTE	$00			; END OF ESD
