; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/gfxdemo.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/gfxdemo.pla: 0001: 
; samplesrc/gfxdemo.pla: 0002: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X028
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X029
					; ARGNEXT -> X030
; inc/args.plh: 0003: end
; samplesrc/gfxdemo.pla: 0002: 
; samplesrc/gfxdemo.pla: 0003: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X031
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X032
; inc/fileio.plh: 0080: end
; samplesrc/gfxdemo.pla: 0003: 
; samplesrc/gfxdemo.pla: 0004: include "inc/grafix.plh"
; inc/grafix.plh: 0001: import grafix
	; DCI STRING: GRAFIX
	!BYTE	$C7,$D2,$C1,$C6,$C9,$58
					; GRAFIX -> X033
; inc/grafix.plh: 0002:     predef pencolor(clr)#0
					; PENCOLOR -> X034
; inc/grafix.plh: 0003:     predef fillcolor(clr)#0
					; FILLCOLOR -> X035
; inc/grafix.plh: 0004:     predef fillscreen()#0
					; FILLSCREEN -> X036
; inc/grafix.plh: 0005:     predef penmove(x, y)#0
					; PENMOVE -> X037
; inc/grafix.plh: 0006:     predef plot(x, y)#0
					; PLOT -> X038
; inc/grafix.plh: 0007:     predef line(x1, y1, x2, y2)#0
					; LINE -> X039
; inc/grafix.plh: 0008:     predef lineto(x, y)#0
					; LINETO -> X040
; inc/grafix.plh: 0009:     predef rect(x1, y1, x2, y2)#0
					; RECT -> X041
; inc/grafix.plh: 0010:     predef fillrect(x1, y1, x2, y2)#0
					; FILLRECT -> X042
; inc/grafix.plh: 0011:     predef bitblt(blk, pitch, x, y, width, height)#0
					; BITBLT -> X043
; inc/grafix.plh: 0012:     predef drawmode(mode)#0
					; DRAWMODE -> X044
; inc/grafix.plh: 0013:     predef setmode(mode)#0
					; SETMODE -> X045
; inc/grafix.plh: 0014: end
; samplesrc/gfxdemo.pla: 0004: 
; samplesrc/gfxdemo.pla: 0005: 
; samplesrc/gfxdemo.pla: 0006: var arg
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D046 	!FILL	2			; arg
; samplesrc/gfxdemo.pla: 0007: byte ref
_D047 	!FILL	1			; ref
; samplesrc/gfxdemo.pla: 0008: 
; samplesrc/gfxdemo.pla: 0009: def showimage#0
_SUBSEG 				; BYTECODE STARTS
_C000 					; showimage()
; samplesrc/gfxdemo.pla: 0010:     var row, x
					; row -> [0]
					; x -> [2]
; samplesrc/gfxdemo.pla: 0011:     byte scanline[140]
					; scanline -> [4]
; samplesrc/gfxdemo.pla: 0012: 
; samplesrc/gfxdemo.pla: 0013:     for row = 0 to 191
	!BYTE	$58,$90,$00		; ENTER	144,0
	!BYTE	$2A,$BF			; CB	191
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6E,$00			; DLW	[0]
; samplesrc/gfxdemo.pla: 0014:         //
; samplesrc/gfxdemo.pla: 0015:         // Read one scanline at a time, scale it, and draw it
; samplesrc/gfxdemo.pla: 0016:         //
; samplesrc/gfxdemo.pla: 0017:         fileio:read(ref, @scanline, 140)
; samplesrc/gfxdemo.pla: 0018:         for x = 139 downto 0
	!BYTE	$68			; LAB	_D047+0
_F000 	!WORD	_D047+0		
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$2A,$8C			; CB	140
	!BYTE	$6A			; LAW	_X031+18
_F001 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$2A,$8B			; CB	139
_B005 
	!BYTE	$6E,$02			; DLW	[2]
; samplesrc/gfxdemo.pla: 0019:             //scanline[x] = scanline[x] >> 4
; samplesrc/gfxdemo.pla: 0020:             pencolor(scanline[x] >> 4)
; samplesrc/gfxdemo.pla: 0021:             plot(x, row)
; samplesrc/gfxdemo.pla: 0022:         next
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$60			; LB
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$54			; CALL	_X034
_F002 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X038
_F003 	!WORD	0		
_B006 
	!BYTE	$A8			; DECBRGE	_B005
	!WORD	_B005-*
_B004 
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$30			; DROP 
; samplesrc/gfxdemo.pla: 0023:     next
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$30			; DROP 
; samplesrc/gfxdemo.pla: 0024: end
	!BYTE	$5A,$90			; LEAVE	144
; samplesrc/gfxdemo.pla: 0025: 
; samplesrc/gfxdemo.pla: 0026: arg = argNext(argFirst)
_INIT 
; samplesrc/gfxdemo.pla: 0027: if ^arg
; samplesrc/gfxdemo.pla: 0028:     ref = fileio:open(arg)
; samplesrc/gfxdemo.pla: 0029:     if ref
; samplesrc/gfxdemo.pla: 0030:         setmode(3) // 140 x 192 full color (or greyscale)
; samplesrc/gfxdemo.pla: 0031:         showimage
; samplesrc/gfxdemo.pla: 0032:         fileio:close(ref)
; samplesrc/gfxdemo.pla: 0033:         getc
; samplesrc/gfxdemo.pla: 0034:         setmode(-1)
; samplesrc/gfxdemo.pla: 0035:     else
	!BYTE	$54			; CALL	_X029
_F004 	!WORD	0		
	!BYTE	$54			; CALL	_X030
_F005 	!WORD	0		
	!BYTE	$7A			; SAW	_D046+0
_F006 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_D046+0
_F007 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$6A			; LAW	_D046+0
_F008 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_X031+14
_F009 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$7C			; DAB	_D047+0
_F010 	!WORD	_D047+0		
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X045
_F011 	!WORD	0		
	!BYTE	$54			; CALL	_C000
_F012 	!WORD	_C000		
	!BYTE	$68			; LAB	_D047+0
_F013 	!WORD	_D047+0		
	!BYTE	$6A			; LAW	_X031+16
_F014 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X006
_F015 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X045
_F016 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B009 
; samplesrc/gfxdemo.pla: 0036:         puts("Unable to open "); puts(arg); putln
	!BYTE	$2E			; CS
	!BYTE	$0F
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$6F,$70,$65,$6E,$20
	!BYTE	$54			; CALL	_X004
_F017 	!WORD	0		
; samplesrc/gfxdemo.pla: 0037:     fin
	!BYTE	$6A			; LAW	_D046+0
_F018 	!WORD	_D046+0		
	!BYTE	$54			; CALL	_X004
_F019 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F020 	!WORD	0		
_B010 
; samplesrc/gfxdemo.pla: 0038: else
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B007 
; samplesrc/gfxdemo.pla: 0039:     puts("Usage: gfxdemo <imagefile>\n")
	!BYTE	$2E			; CS
	!BYTE	$1B
	!BYTE	$55,$73,$61,$67,$65,$3A,$20,$67
	!BYTE	$66,$78,$64,$65,$6D,$6F,$20,$3C
	!BYTE	$69,$6D,$61,$67,$65,$66,$69,$6C
	!BYTE	$65,$3E,$0D
	!BYTE	$54			; CALL	_X004
_F021 	!WORD	0		
; samplesrc/gfxdemo.pla: 0040: fin
_B008 
; samplesrc/gfxdemo.pla: 0041: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	38			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	; DCI STRING: PENCOLOR
	!BYTE	$D0,$C5,$CE,$C3,$CF,$CC,$CF,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	; DCI STRING: PLOT
	!BYTE	$D0,$CC,$CF,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	38			; ESD INDEX
	; DCI STRING: SETMODE
	!BYTE	$D3,$C5,$D4,$CD,$CF,$C4,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	45			; ESD INDEX
	!BYTE	$00			; END OF ESD
