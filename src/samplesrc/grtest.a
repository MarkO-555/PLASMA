; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/grtest.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/grtest.pla: 0001: 
; samplesrc/grtest.pla: 0002: include "inc/grlib.plh"
; inc/grlib.plh: 0001: import grlib
	; DCI STRING: GRLIB
	!BYTE	$C7,$D2,$CC,$C9,$42
					; GRLIB -> X028
; inc/grlib.plh: 0002:     predef grPlot(x, y)#0
					; GRPLOT -> X029
; inc/grlib.plh: 0003:     predef grHLin(x1, x2, y)#0
					; GRHLIN -> X030
; inc/grlib.plh: 0004:     predef grVLin(y1, y2, x)#0
					; GRVLIN -> X031
; inc/grlib.plh: 0005:     predef grBLT(x, y, width, height, src)#0
					; GRBLT -> X032
; inc/grlib.plh: 0006:     predef grTile(x, y, src)#0
					; GRTILE -> X033
; inc/grlib.plh: 0007:     predef grTileStr(x, y, tilestr, strlen, tilebuff)#0
					; GRTILESTR -> X034
; inc/grlib.plh: 0008:     predef grFill(x, y, tile)#0
					; GRFILL -> X035
; inc/grlib.plh: 0009:     predef dgrVLB#0
					; DGRVLB -> X036
; inc/grlib.plh: 0010:     predef grClear(clr)#0
					; GRCLEAR -> X037
; inc/grlib.plh: 0011:     predef grMode(mode)#1
					; GRMODE -> X038
; inc/grlib.plh: 0012:     predef grShow(page)#1
					; GRSHOW -> X039
; inc/grlib.plh: 0013:     predef grSwap#0
					; GRSWAP -> X040
; inc/grlib.plh: 0014:     predef grDrawBuf(page)#0
					; GRDRAWBUF -> X041
; inc/grlib.plh: 0015:     predef grColor(clr)#0
					; GRCOLOR -> X042
; inc/grlib.plh: 0016: end
; samplesrc/grtest.pla: 0002: 
; samplesrc/grtest.pla: 0003: include "inc/lines.plh"
; inc/lines.plh: 0001: import lines
	; DCI STRING: LINES
	!BYTE	$CC,$C9,$CE,$C5,$53
					; LINES -> X043
; inc/lines.plh: 0002:     predef setlinespans(h, v)#0 
					; SETLINESPANS -> X044
; inc/lines.plh: 0003:     predef linespans(x1, y1, x2, y2)#0
					; LINESPANS -> X045
; inc/lines.plh: 0004:     predef setlineplot(p)#0
					; SETLINEPLOT -> X046
; inc/lines.plh: 0005:     predef line(x1, y1, x2, y2)#0
					; LINE -> X047
; inc/lines.plh: 0006: end
; samplesrc/grtest.pla: 0003: 
; samplesrc/grtest.pla: 0004: sysflags restxt1|restxt2    // Reserve all text pages
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_SYSFLAGS	=	$0003		; SYSTEM FLAGS
; samplesrc/grtest.pla: 0005: 
; samplesrc/grtest.pla: 0006: byte[] sprite1 = $80,$80,$00,$00,$00,$00,$80,$80
_D048 					; sprite1 = $80,$80,$00,$00,$00,$00,$80,$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$80
	!BYTE	$80
; samplesrc/grtest.pla: 0007: byte[]         = $80,$00,$0A,$0A,$0A,$0A,$00,$80
	!BYTE	$80
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$0A
	!BYTE	$0A
	!BYTE	$0A
	!BYTE	$00
	!BYTE	$80
; samplesrc/grtest.pla: 0008: byte[]         = $00,$0A,$0F,$0F,$0F,$0F,$0A,$00
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$0F
	!BYTE	$0F
	!BYTE	$0F
	!BYTE	$0F
	!BYTE	$0A
	!BYTE	$00
; samplesrc/grtest.pla: 0009: byte[]         = $00,$0A,$0F,$80,$80,$0F,$0A,$00
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$0F
	!BYTE	$80
	!BYTE	$80
	!BYTE	$0F
	!BYTE	$0A
	!BYTE	$00
; samplesrc/grtest.pla: 0010: byte[]         = $00,$0A,$0F,$80,$80,$0F,$0A,$00
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$0F
	!BYTE	$80
	!BYTE	$80
	!BYTE	$0F
	!BYTE	$0A
	!BYTE	$00
; samplesrc/grtest.pla: 0011: byte[]         = $00,$0A,$0F,$0F,$0F,$0F,$0A,$00
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$0F
	!BYTE	$0F
	!BYTE	$0F
	!BYTE	$0F
	!BYTE	$0A
	!BYTE	$00
; samplesrc/grtest.pla: 0012: byte[]         = $80,$00,$0A,$0A,$0A,$0A,$00,$80
	!BYTE	$80
	!BYTE	$00
	!BYTE	$0A
	!BYTE	$0A
	!BYTE	$0A
	!BYTE	$0A
	!BYTE	$00
	!BYTE	$80
; samplesrc/grtest.pla: 0013: byte[]         = $80,$80,$00,$00,$00,$00,$80,$80
	!BYTE	$80
	!BYTE	$80
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$80
	!BYTE	$80
; samplesrc/grtest.pla: 0014: 
; samplesrc/grtest.pla: 0015: byte[] tile1 = $11,$11,$11,$11,$11,$11,$55,$00
_D049 					; tile1 = $11,$11,$11,$11,$11,$11,$55,$00
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$55
	!BYTE	$00
; samplesrc/grtest.pla: 0016: byte[]       = $11,$11,$11,$11,$11,$11,$55,$00
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$55
	!BYTE	$00
; samplesrc/grtest.pla: 0017: byte[]       = $11,$11,$11,$11,$11,$11,$55,$00
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$55
	!BYTE	$00
; samplesrc/grtest.pla: 0018: byte[]       = $05,$05,$05,$05,$05,$05,$05,$00
	!BYTE	$05
	!BYTE	$05
	!BYTE	$05
	!BYTE	$05
	!BYTE	$05
	!BYTE	$05
	!BYTE	$05
	!BYTE	$00
; samplesrc/grtest.pla: 0019: 
; samplesrc/grtest.pla: 0020: //
; samplesrc/grtest.pla: 0021: // Test routine
; samplesrc/grtest.pla: 0022: //
; samplesrc/grtest.pla: 0023: def grTest#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_C000 					; grTest()
; samplesrc/grtest.pla: 0024:   byte b, l, k
					; b -> [0]
					; l -> [1]
					; k -> [2]
; samplesrc/grtest.pla: 0025:   word i, j, ii, ij
					; i -> [3]
					; j -> [5]
					; ii -> [7]
					; ij -> [9]
; samplesrc/grtest.pla: 0026: 
; samplesrc/grtest.pla: 0027:   b = grMode(TRUE)
	!BYTE	$58,$0B,$00		; ENTER	11,0
; samplesrc/grtest.pla: 0028:   grDrawBuf(0)
; samplesrc/grtest.pla: 0029:   for k = 15 downto 0
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X038
_F000 	!WORD	0		
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X041
_F001 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$1E			; CN	15
_B002 
	!BYTE	$6C,$02			; DLB	[2]
; samplesrc/grtest.pla: 0030:     grClear(k)
; samplesrc/grtest.pla: 0031:   next
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_X037
_F002 	!WORD	0		
_B003 
	!BYTE	$A8			; DECBRGE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; samplesrc/grtest.pla: 0032:   setlinespans(@grHLin, @grVLin)
; samplesrc/grtest.pla: 0033:   for l = 0 to 39
	!BYTE	$26			; LA	_X030+0
_F003 	!WORD	0+0		
	!BYTE	$26			; LA	_X031+0
_F004 	!WORD	0+0		
	!BYTE	$54			; CALL	_X044
_F005 	!WORD	0		
	!BYTE	$2A,$27			; CB	39
	!BYTE	$00			; CN	0
_B005 
	!BYTE	$6C,$01			; DLB	[1]
; samplesrc/grtest.pla: 0034:     grColor(l)
; samplesrc/grtest.pla: 0035:     linespans(0, 0, l, 47)
; samplesrc/grtest.pla: 0036:   next
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$54			; CALL	_X042
_F006 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$54			; CALL	_X045
_F007 	!WORD	0		
_B006 
	!BYTE	$A4			; INCBRLE	_B005
	!WORD	_B005-*
_B004 
	!BYTE	$74,$01			; SLB	[1]
	!BYTE	$30			; DROP 
; samplesrc/grtest.pla: 0037:   for l = 47 downto 0
	!BYTE	$00			; CN	0
	!BYTE	$2A,$2F			; CB	47
_B008 
	!BYTE	$6C,$01			; DLB	[1]
; samplesrc/grtest.pla: 0038:     grColor(l)
; samplesrc/grtest.pla: 0039:     linespans(0, 0, 39, l)
; samplesrc/grtest.pla: 0040:   next
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$54			; CALL	_X042
_F008 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$2A,$27			; CB	39
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$54			; CALL	_X045
_F009 	!WORD	0		
_B009 
	!BYTE	$A8			; DECBRGE	_B008
	!WORD	_B008-*
_B007 
	!BYTE	$74,$01			; SLB	[1]
	!BYTE	$30			; DROP 
; samplesrc/grtest.pla: 0041:   ii = 2
; samplesrc/grtest.pla: 0042:   ij = -1
; samplesrc/grtest.pla: 0043:   i = 20
; samplesrc/grtest.pla: 0044:   j = 10
; samplesrc/grtest.pla: 0045:   ^$C010
; samplesrc/grtest.pla: 0046:   grDrawBuf(1)
; samplesrc/grtest.pla: 0047:   while ^$C000 < 128
	!BYTE	$04			; CN	2
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$2A,$14			; CB	20
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$14			; CN	10
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$68,$10,$C0		; LAB	49168
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X041
_F010 	!WORD	0		
	!BYTE	$50			; BRNCH	_B012
	!WORD	_B012-*
_B010 
; samplesrc/grtest.pla: 0048:     grFill(k, k, @tile1)
; samplesrc/grtest.pla: 0049:     grBLT(i, j, 8, 8, @sprite1)
; samplesrc/grtest.pla: 0050:     grSwap
; samplesrc/grtest.pla: 0051:     k++
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D049+0
_F011 	!WORD	_D049+0		
	!BYTE	$54			; CALL	_X035
_F012 	!WORD	0		
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$10			; CN	8
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D048+0
_F013 	!WORD	_D048+0		
	!BYTE	$54			; CALL	_X032
_F014 	!WORD	0		
	!BYTE	$54			; CALL	_X040
_F015 	!WORD	0		
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$8C			; INCR
; samplesrc/grtest.pla: 0052:     i = i + ii
; samplesrc/grtest.pla: 0053:     if i < -3 or i > 35
; samplesrc/grtest.pla: 0054:       ii = -ii
; samplesrc/grtest.pla: 0055:     fin
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$B2,$07			; ADDLW	[7]
	!BYTE	$6E,$03			; DLW	[3]
	!BYTE	$5E,$FD			; CFFB	-3
	!BYTE	$46			; ISLT
	!BYTE	$AE			; BROR	_B013
	!WORD	_B013-*
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$2A,$23			; CB	35
	!BYTE	$44			; ISGT
_B013 
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$66,$07			; LLW	[7]
	!BYTE	$90			; NEG
	!BYTE	$76,$07			; SLW	[7]
_B014 
_B015 
; samplesrc/grtest.pla: 0056:     j = j + ij
; samplesrc/grtest.pla: 0057:     if j < -3 or j > 43
; samplesrc/grtest.pla: 0058:       ij = -ij
; samplesrc/grtest.pla: 0059:     fin
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$B2,$09			; ADDLW	[9]
	!BYTE	$6E,$05			; DLW	[5]
	!BYTE	$5E,$FD			; CFFB	-3
	!BYTE	$46			; ISLT
	!BYTE	$AE			; BROR	_B016
	!WORD	_B016-*
	!BYTE	$66,$05			; LLW	[5]
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$44			; ISGT
_B016 
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$90			; NEG
	!BYTE	$76,$09			; SLW	[9]
_B017 
_B018 
; samplesrc/grtest.pla: 0060:   loop
_B012 
	!BYTE	$68,$00,$C0		; LAB	49152
	!BYTE	$2A,$80			; CB	128
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B010
	!WORD	_B010-*
_B011 
; samplesrc/grtest.pla: 0061:   ^$C010
; samplesrc/grtest.pla: 0062:   grMode(FALSE)
; samplesrc/grtest.pla: 0063: end
	!BYTE	$68,$10,$C0		; LAB	49168
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X038
_F016 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/grtest.pla: 0064: 
; samplesrc/grtest.pla: 0065: grTest
_INIT 
; samplesrc/grtest.pla: 0066: done
	!BYTE	$54			; CALL	_C000
_F017 	!WORD	_C000		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	38			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	41			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	44			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	41			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	35			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	40			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	38			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: GRHLIN
	!BYTE	$C7,$D2,$C8,$CC,$C9,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: GRVLIN
	!BYTE	$C7,$D2,$D6,$CC,$C9,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	; DCI STRING: GRBLT
	!BYTE	$C7,$D2,$C2,$CC,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: GRFILL
	!BYTE	$C7,$D2,$C6,$C9,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	35			; ESD INDEX
	; DCI STRING: GRCLEAR
	!BYTE	$C7,$D2,$C3,$CC,$C5,$C1,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	37			; ESD INDEX
	; DCI STRING: GRMODE
	!BYTE	$C7,$D2,$CD,$CF,$C4,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	38			; ESD INDEX
	; DCI STRING: GRSWAP
	!BYTE	$C7,$D2,$D3,$D7,$C1,$50
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	40			; ESD INDEX
	; DCI STRING: GRDRAWBUF
	!BYTE	$C7,$D2,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	41			; ESD INDEX
	; DCI STRING: GRCOLOR
	!BYTE	$C7,$D2,$C3,$CF,$CC,$CF,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	42			; ESD INDEX
	; DCI STRING: SETLINESPANS
	!BYTE	$D3,$C5,$D4,$CC,$C9,$CE,$C5,$D3,$D0,$C1,$CE,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	44			; ESD INDEX
	; DCI STRING: LINESPANS
	!BYTE	$CC,$C9,$CE,$C5,$D3,$D0,$C1,$CE,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	45			; ESD INDEX
	!BYTE	$00			; END OF ESD
