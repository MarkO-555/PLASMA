; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/httpd.pla: 0001: //
; samplesrc/httpd.pla: 0002: // HTTP Daemon
; samplesrc/httpd.pla: 0003: //
; samplesrc/httpd.pla: 0004: // with these updates by D. Finnigan on 12 Nov 15:
; samplesrc/httpd.pla: 0005: // - revised 404 and 400 responses
; samplesrc/httpd.pla: 0006: // - split 200 OK response headers
; samplesrc/httpd.pla: 0007: // - added get_file_info() call
; samplesrc/httpd.pla: 0008: // - check for binary files and set Content-Type accordingly
; samplesrc/httpd.pla: 0009: // still todo: output base filename for Content-Disposition header
; samplesrc/httpd.pla: 0010: //
; samplesrc/httpd.pla: 0011: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/httpd.pla: 0011: 
; samplesrc/httpd.pla: 0012: include "inc/inet.plh"
; inc/inet.plh: 0001: //
; inc/inet.plh: 0002: // iNet API
; inc/inet.plh: 0003: //
; inc/inet.plh: 0004: import iNet
	; DCI STRING: INET
	!BYTE	$C9,$CE,$C5,$54
					; INET -> X028
; inc/inet.plh: 0005: struc t_inet
; inc/inet.plh: 0006:     word initIP
					; initIP = 0
; inc/inet.plh: 0007:     word serviceIP
					; serviceIP = 2
; inc/inet.plh: 0008:     word openUDP
					; openUDP = 4
; inc/inet.plh: 0009:     word sendUDP
					; sendUDP = 6
; inc/inet.plh: 0010:     word closeUDP
					; closeUDP = 8
; inc/inet.plh: 0011:     word listenTCP
					; listenTCP = 10
; inc/inet.plh: 0012:     word connectTCP
					; connectTCP = 12
; inc/inet.plh: 0013:     word sendTCP
					; sendTCP = 14
; inc/inet.plh: 0014:     word closeTCP
					; closeTCP = 16
; inc/inet.plh: 0015:     word setInterfaceIP
					; setInterfaceIP = 18
; inc/inet.plh: 0016:     word getInterfaceHA
					; getInterfaceHA = 20
; inc/inet.plh: 0017:     word setDNS
					; setDNS = 22
; inc/inet.plh: 0018:     word resolveIP
					; resolveIP = 24
; inc/inet.plh: 0019:     word setCallback
					; setCallback = 26
; inc/inet.plh: 0020:     word setParam
					; setParam = 28
; inc/inet.plh: 0021: end
					; t_inet = 30
; inc/inet.plh: 0022: end
; samplesrc/httpd.pla: 0012: 
; samplesrc/httpd.pla: 0013: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X029
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X030
; inc/fileio.plh: 0080: end
; samplesrc/httpd.pla: 0013: 
; samplesrc/httpd.pla: 0014: include "inc/conio.plh"
; inc/conio.plh: 0001: import conio
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
					; CONIO -> X031
; inc/conio.plh: 0002:     const NORMAL   = $FF
					; NORMAL = 255
; inc/conio.plh: 0003:     const INVERSE  = $3F
					; INVERSE = 63
; inc/conio.plh: 0004:     const FLASH    = $7F
					; FLASH = 127
; inc/conio.plh: 0005:     const ECHO_ON  = $80
					; ECHO_ON = 128
; inc/conio.plh: 0006:     const ECHO_OFF = $00
					; ECHO_OFF = 0
; inc/conio.plh: 0007:     struc t_conio
; inc/conio.plh: 0008:         word keypressed
					; keypressed = 0
; inc/conio.plh: 0009:         word getkey
					; getkey = 2
; inc/conio.plh: 0010:         word echo
					; echo = 4
; inc/conio.plh: 0011:         word home
					; home = 6
; inc/conio.plh: 0012:         word gotoxy
					; gotoxy = 8
; inc/conio.plh: 0013:         word viewport
					; viewport = 10
; inc/conio.plh: 0014:         word texttype
					; texttype = 12
; inc/conio.plh: 0015:         word textmode
					; textmode = 14
; inc/conio.plh: 0016:         word grmode
					; grmode = 16
; inc/conio.plh: 0017:         word grcolor
					; grcolor = 18
; inc/conio.plh: 0018:         word grplot
					; grplot = 20
; inc/conio.plh: 0019:         word tone
					; tone = 22
; inc/conio.plh: 0020:         word rnd
					; rnd = 24
; inc/conio.plh: 0021:     end
					; t_conio = 26
; inc/conio.plh: 0022: end
; samplesrc/httpd.pla: 0014: 
; samplesrc/httpd.pla: 0015: 
; samplesrc/httpd.pla: 0016: word socketHTTP
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D032 	!FILL	2			; socketHTTP
; samplesrc/httpd.pla: 0017: byte[65]  prefix
_D033 	!FILL	65			; prefix
; samplesrc/httpd.pla: 0018: word      filebuff
_D034 	!FILL	2			; filebuff
; samplesrc/httpd.pla: 0019: byte[15]  fileInfo = 0 // used for get_file_info()
_D035 					; fileInfo = 0 // used for get_file_info()
	!BYTE	$00
	!FILL	$0E
; samplesrc/httpd.pla: 0020: byte      defhtml = "INDEX.HTML"
_D036 					; defhtml = "INDEX.HTML"
	!BYTE	$0A
	!BYTE	$49,$4E,$44,$45,$58,$2E,$48,$54
	!BYTE	$4D,$4C
; samplesrc/httpd.pla: 0021: byte[200] okhdr // combined response header
_D037 	!FILL	200			; okhdr // combined response header
; samplesrc/httpd.pla: 0022: //
; samplesrc/httpd.pla: 0023: // HTTP response codes
; samplesrc/httpd.pla: 0024: // For the 4xx codes, if you change the body, make sure to update the Content-Length too
; samplesrc/httpd.pla: 0025: byte httpOK = "HTTP/1.1 200 OK\n\r"
_D038 					; httpOK = "HTTP/1.1 200 OK\n\r"
	!BYTE	$11
	!BYTE	$48,$54,$54,$50,$2F,$31,$2E,$31
	!BYTE	$20,$32,$30,$30,$20,$4F,$4B,$0D
	!BYTE	$0A
; samplesrc/httpd.pla: 0026: byte httpBAD = "HTTP/1.1 400 Bad Request\n\rContent-Type: text/plain\n\rContent-Length: 17\n\r\n\r400 Bad Request\n\r"
_D039 					; httpBAD = "HTTP/1.1 400 Bad Request\n\rContent-Type: text/plain\n\rContent-Length: 17\n\r\n\r400 Bad Request\n\r"
	!BYTE	$5B
	!BYTE	$48,$54,$54,$50,$2F,$31,$2E,$31
	!BYTE	$20,$34,$30,$30,$20,$42,$61,$64
	!BYTE	$20,$52,$65,$71,$75,$65,$73,$74
	!BYTE	$0D,$0A,$43,$6F,$6E,$74,$65,$6E
	!BYTE	$74,$2D,$54,$79,$70,$65,$3A,$20
	!BYTE	$74,$65,$78,$74,$2F,$70,$6C,$61
	!BYTE	$69,$6E,$0D,$0A,$43,$6F,$6E,$74
	!BYTE	$65,$6E,$74,$2D,$4C,$65,$6E,$67
	!BYTE	$74,$68,$3A,$20,$31,$37,$0D,$0A
	!BYTE	$0D,$0A,$34,$30,$30,$20,$42,$61
	!BYTE	$64,$20,$52,$65,$71,$75,$65,$73
	!BYTE	$74,$0D,$0A
; samplesrc/httpd.pla: 0027: byte httpNOTFOUND = "HTTP/1.1 404 Not Found\n\rStatus: 404 Not Found\n\rContent-Type: text/plain\n\rContent-Length: 28\n\r\n\r404 Error: File not found.\n\r"
_D040 					; httpNOTFOUND = "HTTP/1.1 404 Not Found\n\rStatus: 404 Not Found\n\rContent-Type: text/plain\n\rContent-Length: 28\n\r\n\r404 Error: File not found.\n\r"
	!BYTE	$7B
	!BYTE	$48,$54,$54,$50,$2F,$31,$2E,$31
	!BYTE	$20,$34,$30,$34,$20,$4E,$6F,$74
	!BYTE	$20,$46,$6F,$75,$6E,$64,$0D,$0A
	!BYTE	$53,$74,$61,$74,$75,$73,$3A,$20
	!BYTE	$34,$30,$34,$20,$4E,$6F,$74,$20
	!BYTE	$46,$6F,$75,$6E,$64,$0D,$0A,$43
	!BYTE	$6F,$6E,$74,$65,$6E,$74,$2D,$54
	!BYTE	$79,$70,$65,$3A,$20,$74,$65,$78
	!BYTE	$74,$2F,$70,$6C,$61,$69,$6E,$0D
	!BYTE	$0A,$43,$6F,$6E,$74,$65,$6E,$74
	!BYTE	$2D,$4C,$65,$6E,$67,$74,$68,$3A
	!BYTE	$20,$32,$38,$0D,$0A,$0D,$0A,$34
	!BYTE	$30,$34,$20,$45,$72,$72,$6F,$72
	!BYTE	$3A,$20,$46,$69,$6C,$65,$20,$6E
	!BYTE	$6F,$74,$20,$66,$6F,$75,$6E,$64
	!BYTE	$2E,$0D,$0A
; samplesrc/httpd.pla: 0028: //
; samplesrc/httpd.pla: 0029: // HTTP response headers
; samplesrc/httpd.pla: 0030: //
; samplesrc/httpd.pla: 0031: byte httpContentType = "Content-Type: "
_D041 					; httpContentType = "Content-Type: "
	!BYTE	$0E
	!BYTE	$43,$6F,$6E,$74,$65,$6E,$74,$2D
	!BYTE	$54,$79,$70,$65,$3A,$20
; samplesrc/httpd.pla: 0032: byte httpContentLen = "Content-Length: "
_D042 					; httpContentLen = "Content-Length: "
	!BYTE	$10
	!BYTE	$43,$6F,$6E,$74,$65,$6E,$74,$2D
	!BYTE	$4C,$65,$6E,$67,$74,$68,$3A,$20
; samplesrc/httpd.pla: 0033: byte httpContentAttach = "Content-Disposition: attachment; filename="
_D043 					; httpContentAttach = "Content-Disposition: attachment; filename="
	!BYTE	$2A
	!BYTE	$43,$6F,$6E,$74,$65,$6E,$74,$2D
	!BYTE	$44,$69,$73,$70,$6F,$73,$69,$74
	!BYTE	$69,$6F,$6E,$3A,$20,$61,$74,$74
	!BYTE	$61,$63,$68,$6D,$65,$6E,$74,$3B
	!BYTE	$20,$66,$69,$6C,$65,$6E,$61,$6D
	!BYTE	$65,$3D
; samplesrc/httpd.pla: 0034: byte httpEnd = "\n\r\n\r"
_D044 					; httpEnd = "\n\r\n\r"
	!BYTE	$04
	!BYTE	$0D,$0A,$0D,$0A
; samplesrc/httpd.pla: 0035: //
; samplesrc/httpd.pla: 0036: // MIME content types
; samplesrc/httpd.pla: 0037: //
; samplesrc/httpd.pla: 0038: byte mimeTextHtml = "text/html"
_D045 					; mimeTextHtml = "text/html"
	!BYTE	$09
	!BYTE	$74,$65,$78,$74,$2F,$68,$74,$6D
	!BYTE	$6C
; samplesrc/httpd.pla: 0039: byte mimeOctetStream = "application/octet-stream"
_D046 					; mimeOctetStream = "application/octet-stream"
	!BYTE	$18
	!BYTE	$61,$70,$70,$6C,$69,$63,$61,$74
	!BYTE	$69,$6F,$6E,$2F,$6F,$63,$74,$65
	!BYTE	$74,$2D,$73,$74,$72,$65,$61,$6D
; samplesrc/httpd.pla: 0040: //
; samplesrc/httpd.pla: 0041: // DEBUG
; samplesrc/httpd.pla: 0042: //
; samplesrc/httpd.pla: 0043: def putip(ipptr)#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; ipptr -> [0]
_C000 					; putip()
; samplesrc/httpd.pla: 0044:     byte i
					; i -> [2]
; samplesrc/httpd.pla: 0045: 
; samplesrc/httpd.pla: 0046:     for i = 0 to 2
	!BYTE	$58,$03,$01		; ENTER	3,1
	!BYTE	$04			; CN	2
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6C,$02			; DLB	[2]
; samplesrc/httpd.pla: 0047:         puti(ipptr->[i]); putc('.')
; samplesrc/httpd.pla: 0048:     next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F000 	!WORD	0		
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F001 	!WORD	0		
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; samplesrc/httpd.pla: 0049:     puti(ipptr->[i])
; samplesrc/httpd.pla: 0050: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F002 	!WORD	0		
	!BYTE	$5A,$03			; LEAVE	3
; samplesrc/httpd.pla: 0051: def dumpbytes(buf, len)#0
					; buf -> [0]
					; len -> [2]
_C001 					; dumpbytes()
; samplesrc/httpd.pla: 0052:     word i
					; i -> [4]
; samplesrc/httpd.pla: 0053: 
; samplesrc/httpd.pla: 0054:     for i = 0 to len - 1
	!BYTE	$58,$06,$02		; ENTER	6,2
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8E			; DECR
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B004
	!WORD	_B004-*
_B005 
	!BYTE	$6E,$04			; DLW	[4]
; samplesrc/httpd.pla: 0055:         putb(buf->[i])
; samplesrc/httpd.pla: 0056:     if i & 15 == 15
; samplesrc/httpd.pla: 0057:         putln
; samplesrc/httpd.pla: 0058:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$04			; ADDLW	[4]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X008
_F003 	!WORD	0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B007
	!WORD	_B007-*
	!BYTE	$54			; CALL	_X003
_F004 	!WORD	0		
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B007 
; samplesrc/httpd.pla: 0059:         putc(' ')
; samplesrc/httpd.pla: 0060:     fin
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F005 	!WORD	0		
_B008 
; samplesrc/httpd.pla: 0061:     next
_B006 
	!BYTE	$A4			; INCBRLE	_B005
	!WORD	_B005-*
_B004 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$30			; DROP 
; samplesrc/httpd.pla: 0062: end
	!BYTE	$5A,$06			; LEAVE	6
; samplesrc/httpd.pla: 0063: def dumpchars(buf, len)#0
					; buf -> [0]
					; len -> [2]
_C002 					; dumpchars()
; samplesrc/httpd.pla: 0064:     word i
					; i -> [4]
; samplesrc/httpd.pla: 0065: 
; samplesrc/httpd.pla: 0066:     len = len - 1
	!BYTE	$58,$06,$02		; ENTER	6,2
; samplesrc/httpd.pla: 0067:     for i = 0 to len
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8E			; DECR
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B009
	!WORD	_B009-*
_B010 
	!BYTE	$6E,$04			; DLW	[4]
; samplesrc/httpd.pla: 0068:         putc(buf->[i])
; samplesrc/httpd.pla: 0069:     next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$04			; ADDLW	[4]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X002
_F006 	!WORD	0		
_B011 
	!BYTE	$A4			; INCBRLE	_B010
	!WORD	_B010-*
_B009 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$30			; DROP 
; samplesrc/httpd.pla: 0070: end
	!BYTE	$5A,$06			; LEAVE	6
; samplesrc/httpd.pla: 0071: //
; samplesrc/httpd.pla: 0072: // String functions
; samplesrc/httpd.pla: 0073: //
; samplesrc/httpd.pla: 0074: def strcat2(dst, src1, src2)
					; dst -> [0]
					; src1 -> [2]
					; src2 -> [4]
_C003 					; strcat2()
; samplesrc/httpd.pla: 0075:     memcpy(dst + 1,         src1 + 1, ^src1)
	!BYTE	$58,$06,$03		; ENTER	6,3
; samplesrc/httpd.pla: 0076:     memcpy(dst + 1 + ^src1, src2 + 1, ^src2)
; samplesrc/httpd.pla: 0077:     ^dst = ^src1 + ^src2
; samplesrc/httpd.pla: 0078:     return dst
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F007 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8C			; INCR
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F008 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$06			; LEAVE	6
; samplesrc/httpd.pla: 0079: end
; samplesrc/httpd.pla: 0080: def itos(dst, i)
					; dst -> [0]
					; i -> [2]
_C004 					; itos()
; samplesrc/httpd.pla: 0081:     if i < 0; ^dst = '-'; i = -i; dst++; fin
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B012
	!WORD	_B012-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$90			; NEG
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$76,$00			; SLW	[0]
_B012 
_B013 
; samplesrc/httpd.pla: 0082:     if i < 10
; samplesrc/httpd.pla: 0083:         ^dst = i + '0'
; samplesrc/httpd.pla: 0084:     else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$14			; CN	10
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B015
	!WORD	_B015-*
_B014 
; samplesrc/httpd.pla: 0085:         dst = itos(dst, i / 10)
; samplesrc/httpd.pla: 0086:         ^dst = i % 10 + '0'
; samplesrc/httpd.pla: 0087:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$54			; CALL	_C004
_F009 	!WORD	_C004		
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$14			; CN	10
	!BYTE	$8A			; MOD
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B015 
; samplesrc/httpd.pla: 0088:     return dst + 1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$5A,$04			; LEAVE	4
; samplesrc/httpd.pla: 0089: end
; samplesrc/httpd.pla: 0090: //
; samplesrc/httpd.pla: 0091: // Send the file contents
; samplesrc/httpd.pla: 0092: //
; samplesrc/httpd.pla: 0093: def sendFile(fd, socket, len)#0
					; fd -> [0]
					; socket -> [2]
					; len -> [4]
_C005 					; sendFile()
; samplesrc/httpd.pla: 0094:     while isuge(len, 1024)
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$50			; BRNCH	_B018
	!WORD	_B018-*
_B016 
; samplesrc/httpd.pla: 0095:         fileio:read(fd, filebuff, 1024)
; samplesrc/httpd.pla: 0096:         len = len - 1024
; samplesrc/httpd.pla: 0097:         iNet:sendTCP(socket, filebuff, 1024)
; samplesrc/httpd.pla: 0098:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D034+0
_F010 	!WORD	_D034+0		
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$6A			; LAW	_X029+18
_F011 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$84			; SUB 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D034+0
_F012 	!WORD	_D034+0		
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$6A			; LAW	_X028+14
_F013 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B018 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$54			; CALL	_X025
_F014 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B016
	!WORD	_B016-*
_B017 
; samplesrc/httpd.pla: 0099:     if len
; samplesrc/httpd.pla: 0100:         fileio:read(fd, filebuff, len)
; samplesrc/httpd.pla: 0101:         iNet:sendTCP(socket, filebuff, len)
; samplesrc/httpd.pla: 0102:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$4C			; BRFLS	_B019
	!WORD	_B019-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_D034+0
_F015 	!WORD	_D034+0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_X029+18
_F016 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D034+0
_F017 	!WORD	_D034+0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_X028+14
_F018 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B019 
_B020 
; samplesrc/httpd.pla: 0103: end
	!BYTE	$5A,$06			; LEAVE	6
; samplesrc/httpd.pla: 0104: //
; samplesrc/httpd.pla: 0105: // Serve HTTP requests
; samplesrc/httpd.pla: 0106: //
; samplesrc/httpd.pla: 0107: def servHTTP(remip, remport, lclport, data, len, param)
					; remip -> [0]
					; remport -> [2]
					; lclport -> [4]
					; data -> [6]
					; len -> [8]
					; param -> [10]
_C006 					; servHTTP()
; samplesrc/httpd.pla: 0108:     byte i, refnum, err
					; i -> [12]
					; refnum -> [13]
					; err -> [14]
; samplesrc/httpd.pla: 0109:     byte[65] filename
					; filename -> [15]
; samplesrc/httpd.pla: 0110:     byte[8] lenstr
					; lenstr -> [80]
; samplesrc/httpd.pla: 0111:     word url, filelen
					; url -> [88]
					; filelen -> [90]
; samplesrc/httpd.pla: 0112: 
; samplesrc/httpd.pla: 0113:     //
; samplesrc/httpd.pla: 0114:     // Parse HTTP request
; samplesrc/httpd.pla: 0115:     //
; samplesrc/httpd.pla: 0116:     if len > 0
	!BYTE	$58,$5C,$06		; ENTER	92,6
; samplesrc/httpd.pla: 0117:         //dumpchars(data, len)
; samplesrc/httpd.pla: 0118:         //
; samplesrc/httpd.pla: 0119:         // Better be 'GET'
; samplesrc/httpd.pla: 0120:         //
; samplesrc/httpd.pla: 0121:         if data->0 == 'G' and data->1 == 'E' and data->2 == 'T' and data->3 == ' '
; samplesrc/httpd.pla: 0122:             len = len - 1
; samplesrc/httpd.pla: 0123:             if len > 64
; samplesrc/httpd.pla: 0124:                 len = 64 // maximum ProDOS path
; samplesrc/httpd.pla: 0125:             fin
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$60			; LB
	!BYTE	$2A,$47			; CB	71
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B023
	!WORD	_B023-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$45			; CB	69
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B024
	!WORD	_B024-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$2A,$54			; CB	84
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B025
	!WORD	_B025-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$40			; ISEQ
_B025 
_B024 
_B023 
	!BYTE	$4C			; BRFLS	_B026
	!WORD	_B026-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8E			; DECR
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$2A,$40			; CB	64
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$2A,$40			; CB	64
	!BYTE	$76,$08			; SLW	[8]
_B028 
_B029 
; samplesrc/httpd.pla: 0126:             for i = 4 to len // get ProDOS path from URL
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$08			; CN	4
	!BYTE	$A0			; BRGT	_B030
	!WORD	_B030-*
_B031 
	!BYTE	$6C,$0C			; DLB	[12]
; samplesrc/httpd.pla: 0127:                 if data->[i] <= ' '
; samplesrc/httpd.pla: 0128:                     data->3 = i - 4
; samplesrc/httpd.pla: 0129:                     url = data + 3
; samplesrc/httpd.pla: 0130:                     if url->1 == '/'
; samplesrc/httpd.pla: 0131:                         if url->0 == 1
; samplesrc/httpd.pla: 0132:                             url = @defhtml // Is this a directory with no file given? Use index.html
; samplesrc/httpd.pla: 0133:                         else
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B0,$0C			; ADDLB	[12]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B033
	!WORD	_B033-*
	!BYTE	$64,$0C			; LLB	[12]
	!BYTE	$3A,$04			; SUBI	4
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$6E,$58			; DLW	[88]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$24			; BRNE	_B035
	!WORD	_B035-*
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$24			; BRNE	_B037
	!WORD	_B037-*
	!BYTE	$26			; LA	_D036+0
_F019 	!WORD	_D036+0		
	!BYTE	$76,$58			; SLW	[88]
	!BYTE	$50			; BRNCH	_B038
	!WORD	_B038-*
_B037 
; samplesrc/httpd.pla: 0134:                             url->1 = url->0 - 1
; samplesrc/httpd.pla: 0135:                             url = url + 1
; samplesrc/httpd.pla: 0136:                         fin
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$8C			; INCR
	!BYTE	$76,$58			; SLW	[88]
_B038 
; samplesrc/httpd.pla: 0137:                     fin
_B035 
_B036 
; samplesrc/httpd.pla: 0138:                     strcat2(@filename, @prefix, url)
; samplesrc/httpd.pla: 0139:                     puts("GET:"); puts(@filename);putln
	!BYTE	$28,$0F			; LLA	[15]
	!BYTE	$26			; LA	_D033+0
_F020 	!WORD	_D033+0		
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$54			; CALL	_C003
_F021 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$47,$45,$54,$3A
	!BYTE	$54			; CALL	_X004
_F022 	!WORD	0		
; samplesrc/httpd.pla: 0140:                     //
; samplesrc/httpd.pla: 0141:                     // Get file info
; samplesrc/httpd.pla: 0142:                     //
; samplesrc/httpd.pla: 0143:                     //puts("getting file info "); // debug
; samplesrc/httpd.pla: 0144:                     refnum = fileio:open(@filename) // try to open this file with ProDOS
; samplesrc/httpd.pla: 0145:                     if refnum // file was opened OK
; samplesrc/httpd.pla: 0146:                         filelen = fileio:geteof(refnum) // get length of file for Content-Length
; samplesrc/httpd.pla: 0147:                         lenstr = itos(@lenstr + 1, filelen) - (@lenstr + 1)
; samplesrc/httpd.pla: 0148:                         strcat2(@okhdr, @httpOK, @httpContentLen)
; samplesrc/httpd.pla: 0149:                         strcat2(@okhdr, @okhdr, @lenstr)
; samplesrc/httpd.pla: 0150:                         strcat2(@okhdr, @okhdr, "\n\r")
	!BYTE	$28,$0F			; LLA	[15]
	!BYTE	$54			; CALL	_X004
_F023 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F024 	!WORD	0		
	!BYTE	$28,$0F			; LLA	[15]
	!BYTE	$6A			; LAW	_X029+14
_F025 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$0D			; DLB	[13]
	!BYTE	$4C			; BRFLS	_B039
	!WORD	_B039-*
	!BYTE	$64,$0D			; LLB	[13]
	!BYTE	$6A			; LAW	_X029+8
_F026 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$76,$5A			; SLW	[90]
	!BYTE	$28,$51			; LLA	[81]
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$54			; CALL	_C004
_F027 	!WORD	_C004		
	!BYTE	$28,$51			; LLA	[81]
	!BYTE	$84			; SUB 
	!BYTE	$74,$50			; SLB	[80]
	!BYTE	$26			; LA	_D037+0
_F028 	!WORD	_D037+0		
	!BYTE	$26			; LA	_D038+0
_F029 	!WORD	_D038+0		
	!BYTE	$26			; LA	_D042+0
_F030 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_C003
_F031 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D037+0
_F032 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$54			; CALL	_C003
_F033 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D037+0
_F034 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$0D,$0A
	!BYTE	$54			; CALL	_C003
_F035 	!WORD	_C003		
	!BYTE	$30			; DROP 
; samplesrc/httpd.pla: 0151:                         //
; samplesrc/httpd.pla: 0152:                         // Content type header
; samplesrc/httpd.pla: 0153:                         //
; samplesrc/httpd.pla: 0154:                         fileio:getfileinfo(@filename, @fileInfo)
; samplesrc/httpd.pla: 0155:                         if fileInfo.1 == $03 OR fileInfo.1 == $04
; samplesrc/httpd.pla: 0156:                             //
; samplesrc/httpd.pla: 0157:                             // this a text file
; samplesrc/httpd.pla: 0158:                             //
; samplesrc/httpd.pla: 0159:                             //puts(@mimeTextHtml) // debug
; samplesrc/httpd.pla: 0160:                             strcat2(@okhdr, @okhdr, @httpContentType)
; samplesrc/httpd.pla: 0161:                             strcat2(@okhdr, @okhdr, @mimeTextHtml)
; samplesrc/httpd.pla: 0162:                         else
	!BYTE	$28,$0F			; LLA	[15]
	!BYTE	$26			; LA	_D035+0
_F036 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_X029+4
_F037 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$68			; LAB	_D035+1
_F038 	!WORD	_D035+1		
	!BYTE	$06			; CN	3
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B041
	!WORD	_B041-*
	!BYTE	$68			; LAB	_D035+1
_F039 	!WORD	_D035+1		
	!BYTE	$08			; CN	4
	!BYTE	$40			; ISEQ
_B041 
	!BYTE	$4C			; BRFLS	_B042
	!WORD	_B042-*
	!BYTE	$26			; LA	_D037+0
_F040 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D041+0
_F041 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C003
_F042 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D037+0
_F043 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D045+0
_F044 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_C003
_F045 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B043
	!WORD	_B043-*
_B042 
; samplesrc/httpd.pla: 0163:                             //
; samplesrc/httpd.pla: 0164:                             // send as binary attachment
; samplesrc/httpd.pla: 0165:                             //
; samplesrc/httpd.pla: 0166:                             //puts(@mimeOctetStream) // debug
; samplesrc/httpd.pla: 0167:                             strcat2(@okhdr, @okhdr, @httpContentType)
; samplesrc/httpd.pla: 0168:                             strcat2(@okhdr, @okhdr, @mimeOctetStream)
; samplesrc/httpd.pla: 0169:                             strcat2(@okhdr, @okhdr, "\n\r")
	!BYTE	$26			; LA	_D037+0
_F046 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D041+0
_F047 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C003
_F048 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D037+0
_F049 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D046+0
_F050 	!WORD	_D046+0		
	!BYTE	$54			; CALL	_C003
_F051 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D037+0
_F052 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$0D,$0A
	!BYTE	$54			; CALL	_C003
_F053 	!WORD	_C003		
	!BYTE	$30			; DROP 
; samplesrc/httpd.pla: 0170:                             //
; samplesrc/httpd.pla: 0171:                             // and send filename too
; samplesrc/httpd.pla: 0172:                             //
; samplesrc/httpd.pla: 0173:                             strcat2(@okhdr, @okhdr, @httpContentAttach)
; samplesrc/httpd.pla: 0174:                             // todo: get the base filename...
; samplesrc/httpd.pla: 0175:                         fin
	!BYTE	$26			; LA	_D037+0
_F054 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D043+0
_F055 	!WORD	_D043+0		
	!BYTE	$54			; CALL	_C003
_F056 	!WORD	_C003		
	!BYTE	$30			; DROP 
_B043 
; samplesrc/httpd.pla: 0176:                         strcat2(@okhdr, @okhdr, @httpEnd)
; samplesrc/httpd.pla: 0177:                         //dumpchars(@okhdr + 1, okhdr) // debug
; samplesrc/httpd.pla: 0178:                         iNet:sendTCP(socketHTTP, @okhdr + 1, okhdr) // send HTTP response header to client
; samplesrc/httpd.pla: 0179:                         sendFile(refnum, socketHTTP, filelen) // send file data to client
; samplesrc/httpd.pla: 0180:                         fileio:close(refnum)
; samplesrc/httpd.pla: 0181:                     else // file couldn't be opened, so return 404 on this
	!BYTE	$26			; LA	_D037+0
_F057 	!WORD	_D037+0		
	!BYTE	$34			; DUP
	!BYTE	$26			; LA	_D044+0
_F058 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_C003
_F059 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D032+0
_F060 	!WORD	_D032+0		
	!BYTE	$26			; LA	_D037+1
_F061 	!WORD	_D037+1		
	!BYTE	$68			; LAB	_D037+0
_F062 	!WORD	_D037+0		
	!BYTE	$6A			; LAW	_X028+14
_F063 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$0D			; LLB	[13]
	!BYTE	$6A			; LAW	_D032+0
_F064 	!WORD	_D032+0		
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$54			; CALL	_C005
_F065 	!WORD	_C005		
	!BYTE	$64,$0D			; LLB	[13]
	!BYTE	$6A			; LAW	_X029+16
_F066 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B040
	!WORD	_B040-*
_B039 
; samplesrc/httpd.pla: 0182:                         puts("404 Not Found");putln // debug
	!BYTE	$2E			; CS
	!BYTE	$0D
	!BYTE	$34,$30,$34,$20,$4E,$6F,$74,$20
	!BYTE	$46,$6F,$75,$6E,$64
	!BYTE	$54			; CALL	_X004
_F067 	!WORD	0		
; samplesrc/httpd.pla: 0183:                         iNet:sendTCP(socketHTTP, @httpNOTFOUND + 1, httpNOTFOUND)
; samplesrc/httpd.pla: 0184:                     fin // refnum
	!BYTE	$54			; CALL	_X003
_F068 	!WORD	0		
	!BYTE	$6A			; LAW	_D032+0
_F069 	!WORD	_D032+0		
	!BYTE	$26			; LA	_D040+1
_F070 	!WORD	_D040+1		
	!BYTE	$68			; LAB	_D040+0
_F071 	!WORD	_D040+0		
	!BYTE	$6A			; LAW	_X028+14
_F072 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B040 
; samplesrc/httpd.pla: 0185:                     break
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
; samplesrc/httpd.pla: 0186:                 fin
_B033 
_B034 
; samplesrc/httpd.pla: 0187:             next
_B032 
	!BYTE	$A4			; INCBRLE	_B031
	!WORD	_B031-*
_B030 
	!BYTE	$74,$0C			; SLB	[12]
	!BYTE	$30			; DROP 
; samplesrc/httpd.pla: 0188:         else
	!BYTE	$50			; BRNCH	_B027
	!WORD	_B027-*
_B026 
; samplesrc/httpd.pla: 0189:             iNet:sendTCP(socketHTTP, @httpBAD + 1, httpBAD)
; samplesrc/httpd.pla: 0190:         fin
	!BYTE	$6A			; LAW	_D032+0
_F073 	!WORD	_D032+0		
	!BYTE	$26			; LA	_D039+1
_F074 	!WORD	_D039+1		
	!BYTE	$68			; LAB	_D039+0
_F075 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_X028+14
_F076 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B027 
; samplesrc/httpd.pla: 0191:     fin
_B021 
_B022 
; samplesrc/httpd.pla: 0192:     socketHTTP = iNet:closeTCP(socketHTTP)
; samplesrc/httpd.pla: 0193:     return 0
	!BYTE	$6A			; LAW	_D032+0
_F077 	!WORD	_D032+0		
	!BYTE	$6A			; LAW	_X028+16
_F078 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$7A			; SAW	_D032+0
_F079 	!WORD	_D032+0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$5C			; LEAVE	92
; samplesrc/httpd.pla: 0194: end
; samplesrc/httpd.pla: 0195: 
; samplesrc/httpd.pla: 0196: if !iNet:initIP()
_INIT 
; samplesrc/httpd.pla: 0197:     return -1
	!BYTE	$6A			; LAW	_X028+0
_F080 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B044
	!WORD	_B044-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; samplesrc/httpd.pla: 0198: fin
_B044 
_B045 
; samplesrc/httpd.pla: 0199: puts("PLASMA Web Server, Version 1.0\n")
	!BYTE	$2E			; CS
	!BYTE	$1F
	!BYTE	$50,$4C,$41,$53,$4D,$41,$20,$57
	!BYTE	$65,$62,$20,$53,$65,$72,$76,$65
	!BYTE	$72,$2C,$20,$56,$65,$72,$73,$69
	!BYTE	$6F,$6E,$20,$31,$2E,$30,$0D
	!BYTE	$54			; CALL	_X004
_F081 	!WORD	0		
; samplesrc/httpd.pla: 0200: fileio:getpfx(@prefix)
; samplesrc/httpd.pla: 0201: //
; samplesrc/httpd.pla: 0202: // Alloc aligned file/io buffers
; samplesrc/httpd.pla: 0203: //
; samplesrc/httpd.pla: 0204: filebuff = heapallocalign(1024, 8, 0)
; samplesrc/httpd.pla: 0205: //
; samplesrc/httpd.pla: 0206: // Service IP
; samplesrc/httpd.pla: 0207: //
; samplesrc/httpd.pla: 0208: repeat
	!BYTE	$26			; LA	_D033+0
_F082 	!WORD	_D033+0		
	!BYTE	$6A			; LAW	_X029+0
_F083 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$10			; CN	8
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X013
_F084 	!WORD	0		
	!BYTE	$7A			; SAW	_D034+0
_F085 	!WORD	_D034+0		
_B047 
; samplesrc/httpd.pla: 0209:     //
; samplesrc/httpd.pla: 0210:     // (Re)Open HTTPD port
; samplesrc/httpd.pla: 0211:     //
; samplesrc/httpd.pla: 0212:     if !socketHTTP
; samplesrc/httpd.pla: 0213:         socketHTTP = iNet:listenTCP(80, @servHTTP, 0)
; samplesrc/httpd.pla: 0214:     fin
	!BYTE	$6A			; LAW	_D032+0
_F086 	!WORD	_D032+0		
	!BYTE	$4E			; BRTRU	_B049
	!WORD	_B049-*
	!BYTE	$2A,$50			; CB	80
	!BYTE	$26			; LA	_C006+0
_F087 	!WORD	_C006+0		
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+10
_F088 	!WORD	0+10		
	!BYTE	$56			; ICAL
	!BYTE	$7A			; SAW	_D032+0
_F089 	!WORD	_D032+0		
_B049 
_B050 
; samplesrc/httpd.pla: 0215:     iNet:serviceIP()
; samplesrc/httpd.pla: 0216: until conio:keypressed()
	!BYTE	$6A			; LAW	_X028+2
_F090 	!WORD	0+2		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B048 
	!BYTE	$6A			; LAW	_X031+0
_F091 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B047
	!WORD	_B047-*
_B046 
; samplesrc/httpd.pla: 0217: 
; samplesrc/httpd.pla: 0218: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	8
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	8			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	25			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	13			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: PUTB
	!BYTE	$D0,$D5,$D4,$42
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	8			; ESD INDEX
	; DCI STRING: HEAPALLOCALIGN
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$C3,$C1,$CC,$C9,$C7,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	13			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: ISUGE
	!BYTE	$C9,$D3,$D5,$C7,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	25			; ESD INDEX
	; DCI STRING: INET
	!BYTE	$C9,$CE,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	!BYTE	$00			; END OF ESD
