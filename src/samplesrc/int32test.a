; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/int32test.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/int32test.pla: 0001: 
; samplesrc/int32test.pla: 0002: include "inc/int32.plh"
; inc/int32.plh: 0001: import int32
	; DCI STRING: INT32
	!BYTE	$C9,$CE,$D4,$B3,$32
					; INT32 -> X028
; inc/int32.plh: 0002:     const t_i32 = 4
					; t_i32 = 4
; inc/int32.plh: 0003:     
; inc/int32.plh: 0004:     predef zero32#0
					; ZERO32 -> X029
; inc/int32.plh: 0005:     predef zext16to32#0
					; ZEXT16TO32 -> X030
; inc/int32.plh: 0006:     predef neg32#0
					; NEG32 -> X031
; inc/int32.plh: 0007:     predef load32(i32ptr)#0
					; LOAD32 -> X032
; inc/int32.plh: 0008:     predef loadi16(imm16)#0
					; LOADI16 -> X033
; inc/int32.plh: 0009:     predef store32(i32ptr)#0
					; STORE32 -> X034
; inc/int32.plh: 0010:     predef add32(i32ptr)#0
					; ADD32 -> X035
; inc/int32.plh: 0011:     predef addi16(imm16)#0
					; ADDI16 -> X036
; inc/int32.plh: 0012:     predef sub32(i32ptr)#0
					; SUB32 -> X037
; inc/int32.plh: 0013:     predef subi16(imm16)#0
					; SUBI16 -> X038
; inc/int32.plh: 0014:     predef shl32(imm8)#0
					; SHL32 -> X039
; inc/int32.plh: 0015:     predef shr32(imm8)#0
					; SHR32 -> X040
; inc/int32.plh: 0016:     predef mul32(i32ptr)#0
					; MUL32 -> X041
; inc/int32.plh: 0017:     predef muli16(imm16)#0
					; MULI16 -> X042
; inc/int32.plh: 0018:     predef div32(i32ptr)#2
					; DIV32 -> X043
; inc/int32.plh: 0019:     predef divi16(imm16)#2
					; DIVI16 -> X044
; inc/int32.plh: 0020:     predef iseq32(i32ptr)#1
					; ISEQ32 -> X045
; inc/int32.plh: 0021:     predef iseqi16(imm16)#1
					; ISEQI16 -> X046
; inc/int32.plh: 0022:     predef isge32(i32ptr)#1
					; ISGE32 -> X047
; inc/int32.plh: 0023:     predef isgei16(imm16)#1
					; ISGEI16 -> X048
; inc/int32.plh: 0024:     predef isle32(i32ptr)#1
					; ISLE32 -> X049
; inc/int32.plh: 0025:     predef islei16(imm16)#1
					; ISLEI16 -> X050
; inc/int32.plh: 0026:     predef isgt32(i32ptr)#1
					; ISGT32 -> X051
; inc/int32.plh: 0027:     predef isgti16(imm16)#1
					; ISGTI16 -> X052
; inc/int32.plh: 0028:     predef islt32(i32ptr)#1
					; ISLT32 -> X053
; inc/int32.plh: 0029:     predef islti16(imm16)#1
					; ISLTI16 -> X054
; inc/int32.plh: 0030:     predef i32tos(i32ptr, strptr)#1
					; I32TOS -> X055
; inc/int32.plh: 0031:     predef puti32(i32ptr)#0
					; PUTI32 -> X056
; inc/int32.plh: 0032: end
; samplesrc/int32test.pla: 0002: 
; samplesrc/int32test.pla: 0003: 
; samplesrc/int32test.pla: 0004: def testi32#0
	!BYTE	$00			; END OF MODULE DEPENDENCIES
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_C000 					; testi32()
; samplesrc/int32test.pla: 0005:     word il, ih
					; il -> [0]
					; ih -> [2]
; samplesrc/int32test.pla: 0006:     res[t_i32] i32
					; i32 -> [4]
; samplesrc/int32test.pla: 0007:     
; samplesrc/int32test.pla: 0008:     ih = 0
	!BYTE	$58,$08,$00		; ENTER	8,0
; samplesrc/int32test.pla: 0009:     for il = 0 to 10
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$14			; CN	10
	!BYTE	$00			; CN	0
_B002 
	!BYTE	$6E,$00			; DLW	[0]
; samplesrc/int32test.pla: 0010:         load32(@il)
; samplesrc/int32test.pla: 0011:         muli16(10)
; samplesrc/int32test.pla: 0012:         divi16(2)
; samplesrc/int32test.pla: 0013:         store32(@i32)
; samplesrc/int32test.pla: 0014:         puti32(@i32); putln
; samplesrc/int32test.pla: 0015:     next
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$54			; CALL	_X032
_F000 	!WORD	0		
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_X042
_F001 	!WORD	0		
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X044
_F002 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$30			; DROP 
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X034
_F003 	!WORD	0		
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X056
_F004 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F005 	!WORD	0		
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$30			; DROP 
; samplesrc/int32test.pla: 0016:     muli16(-30000)
; samplesrc/int32test.pla: 0017:     store32(@i32)
; samplesrc/int32test.pla: 0018:     puti32(@i32); putln
; samplesrc/int32test.pla: 0019:     loadi16(100)
; samplesrc/int32test.pla: 0020:     if islti16(50)
; samplesrc/int32test.pla: 0021:         puts("100 < 50\n")
	!BYTE	$2C,$D0,$8A		; CW	-30000
	!BYTE	$54			; CALL	_X042
_F006 	!WORD	0		
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X034
_F007 	!WORD	0		
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X056
_F008 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F009 	!WORD	0		
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X033
_F010 	!WORD	0		
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_X054
_F011 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$31,$30,$30,$20,$3C,$20,$35,$30
	!BYTE	$0D
	!BYTE	$54			; CALL	_X004
_F012 	!WORD	0		
; samplesrc/int32test.pla: 0022:     fin
_B004 
_B005 
; samplesrc/int32test.pla: 0023:     if islti16(500)
; samplesrc/int32test.pla: 0024:         puts("100 < 500\n")
	!BYTE	$2C,$F4,$01		; CW	500
	!BYTE	$54			; CALL	_X054
_F013 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B006
	!WORD	_B006-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3C,$20,$35,$30
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F014 	!WORD	0		
; samplesrc/int32test.pla: 0025:     fin
_B006 
_B007 
; samplesrc/int32test.pla: 0026:     if isgti16(50)
; samplesrc/int32test.pla: 0027:         puts("100 > 50\n")
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_X052
_F015 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B008
	!WORD	_B008-*
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$31,$30,$30,$20,$3E,$20,$35,$30
	!BYTE	$0D
	!BYTE	$54			; CALL	_X004
_F016 	!WORD	0		
; samplesrc/int32test.pla: 0028:     fin
_B008 
_B009 
; samplesrc/int32test.pla: 0029:     if isgti16(500)
; samplesrc/int32test.pla: 0030:         puts("100 > 500\n")
	!BYTE	$2C,$F4,$01		; CW	500
	!BYTE	$54			; CALL	_X052
_F017 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3E,$20,$35,$30
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F018 	!WORD	0		
; samplesrc/int32test.pla: 0031:     fin
_B010 
_B011 
; samplesrc/int32test.pla: 0032:     if islei16(50)
; samplesrc/int32test.pla: 0033:         puts("100 <= 50\n")
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_X050
_F019 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B012
	!WORD	_B012-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3C,$3D,$20,$35
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F020 	!WORD	0		
; samplesrc/int32test.pla: 0034:     fin
_B012 
_B013 
; samplesrc/int32test.pla: 0035:     if islei16(500)
; samplesrc/int32test.pla: 0036:         puts("100 <= 500\n")
	!BYTE	$2C,$F4,$01		; CW	500
	!BYTE	$54			; CALL	_X050
_F021 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$31,$30,$30,$20,$3C,$3D,$20,$35
	!BYTE	$30,$30,$0D
	!BYTE	$54			; CALL	_X004
_F022 	!WORD	0		
; samplesrc/int32test.pla: 0037:     fin
_B014 
_B015 
; samplesrc/int32test.pla: 0038:     if isgei16(50)
; samplesrc/int32test.pla: 0039:         puts("100 >= 50\n")
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_X048
_F023 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B016
	!WORD	_B016-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3E,$3D,$20,$35
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F024 	!WORD	0		
; samplesrc/int32test.pla: 0040:     fin
_B016 
_B017 
; samplesrc/int32test.pla: 0041:     if isgei16(500)
; samplesrc/int32test.pla: 0042:         puts("100 >= 500\n")
	!BYTE	$2C,$F4,$01		; CW	500
	!BYTE	$54			; CALL	_X048
_F025 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B018
	!WORD	_B018-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$31,$30,$30,$20,$3E,$3D,$20,$35
	!BYTE	$30,$30,$0D
	!BYTE	$54			; CALL	_X004
_F026 	!WORD	0		
; samplesrc/int32test.pla: 0043:     fin
_B018 
_B019 
; samplesrc/int32test.pla: 0044: 
; samplesrc/int32test.pla: 0045:     if islti16(100)
; samplesrc/int32test.pla: 0046:         puts("100 < 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X054
_F027 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B020
	!WORD	_B020-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3C,$20,$31,$30
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F028 	!WORD	0		
; samplesrc/int32test.pla: 0047:     fin
_B020 
_B021 
; samplesrc/int32test.pla: 0048:     if islti16(100)
; samplesrc/int32test.pla: 0049:         puts("100 < 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X054
_F029 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B022
	!WORD	_B022-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3C,$20,$31,$30
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F030 	!WORD	0		
; samplesrc/int32test.pla: 0050:     fin
_B022 
_B023 
; samplesrc/int32test.pla: 0051:     if isgti16(100)
; samplesrc/int32test.pla: 0052:         puts("100 > 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X052
_F031 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3E,$20,$31,$30
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F032 	!WORD	0		
; samplesrc/int32test.pla: 0053:     fin
_B024 
_B025 
; samplesrc/int32test.pla: 0054:     if isgti16(100)
; samplesrc/int32test.pla: 0055:         puts("100 > 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X052
_F033 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B026
	!WORD	_B026-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$31,$30,$30,$20,$3E,$20,$31,$30
	!BYTE	$30,$0D
	!BYTE	$54			; CALL	_X004
_F034 	!WORD	0		
; samplesrc/int32test.pla: 0056:     fin
_B026 
_B027 
; samplesrc/int32test.pla: 0057:     if islei16(100)
; samplesrc/int32test.pla: 0058:         puts("100 <= 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X050
_F035 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$31,$30,$30,$20,$3C,$3D,$20,$31
	!BYTE	$30,$30,$0D
	!BYTE	$54			; CALL	_X004
_F036 	!WORD	0		
; samplesrc/int32test.pla: 0059:     fin
_B028 
_B029 
; samplesrc/int32test.pla: 0060:     if islei16(100)
; samplesrc/int32test.pla: 0061:         puts("100 <= 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X050
_F037 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B030
	!WORD	_B030-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$31,$30,$30,$20,$3C,$3D,$20,$31
	!BYTE	$30,$30,$0D
	!BYTE	$54			; CALL	_X004
_F038 	!WORD	0		
; samplesrc/int32test.pla: 0062:     fin
_B030 
_B031 
; samplesrc/int32test.pla: 0063:     if isgei16(100)
; samplesrc/int32test.pla: 0064:         puts("100 >= 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X048
_F039 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B032
	!WORD	_B032-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$31,$30,$30,$20,$3E,$3D,$20,$31
	!BYTE	$30,$30,$0D
	!BYTE	$54			; CALL	_X004
_F040 	!WORD	0		
; samplesrc/int32test.pla: 0065:     fin
_B032 
_B033 
; samplesrc/int32test.pla: 0066:     if isgei16(100)
; samplesrc/int32test.pla: 0067:         puts("100 >= 100\n")
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_X048
_F041 	!WORD	0		
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$31,$30,$30,$20,$3E,$3D,$20,$31
	!BYTE	$30,$30,$0D
	!BYTE	$54			; CALL	_X004
_F042 	!WORD	0		
; samplesrc/int32test.pla: 0068:     fin
_B034 
_B035 
; samplesrc/int32test.pla: 0069: end
	!BYTE	$5A,$08			; LEAVE	8
; samplesrc/int32test.pla: 0070: 
; samplesrc/int32test.pla: 0071: testi32
_INIT 
; samplesrc/int32test.pla: 0072: done
	!BYTE	$54			; CALL	_C000
_F043 	!WORD	_C000		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	44			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	56			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	42			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	56			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	48			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	48			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	48			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	48			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: LOAD32
	!BYTE	$CC,$CF,$C1,$C4,$B3,$32
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: LOADI16
	!BYTE	$CC,$CF,$C1,$C4,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	; DCI STRING: STORE32
	!BYTE	$D3,$D4,$CF,$D2,$C5,$B3,$32
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	; DCI STRING: MULI16
	!BYTE	$CD,$D5,$CC,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	42			; ESD INDEX
	; DCI STRING: DIVI16
	!BYTE	$C4,$C9,$D6,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	44			; ESD INDEX
	; DCI STRING: ISGEI16
	!BYTE	$C9,$D3,$C7,$C5,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	48			; ESD INDEX
	; DCI STRING: ISLEI16
	!BYTE	$C9,$D3,$CC,$C5,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	50			; ESD INDEX
	; DCI STRING: ISGTI16
	!BYTE	$C9,$D3,$C7,$D4,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	52			; ESD INDEX
	; DCI STRING: ISLTI16
	!BYTE	$C9,$D3,$CC,$D4,$C9,$B1,$36
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	54			; ESD INDEX
	; DCI STRING: PUTI32
	!BYTE	$D0,$D5,$D4,$C9,$B3,$32
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	56			; ESD INDEX
	!BYTE	$00			; END OF ESD
