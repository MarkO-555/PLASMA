; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/lz4cat.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/lz4cat.pla: 0001: 
; samplesrc/lz4cat.pla: 0002: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X028
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X029
					; ARGNEXT -> X030
; inc/args.plh: 0003: end
; samplesrc/lz4cat.pla: 0002: 
; samplesrc/lz4cat.pla: 0003: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X031
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X032
; inc/fileio.plh: 0080: end
; samplesrc/lz4cat.pla: 0003: 
; samplesrc/lz4cat.pla: 0004: include "inc/lz4.plh"
; inc/lz4.plh: 0001: import lz4
	; DCI STRING: LZ4
	!BYTE	$CC,$DA,$34
					; LZ4 -> X033
; inc/lz4.plh: 0002:     predef lz4Unpack(seq, seqend, buff, buffend)
					; LZ4UNPACK -> X034
; inc/lz4.plh: 0003: end
; samplesrc/lz4cat.pla: 0004: 
; samplesrc/lz4cat.pla: 0005: 
; samplesrc/lz4cat.pla: 0006: struc t_header
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; samplesrc/lz4cat.pla: 0007:     word magic[2]
					; magic = 0
; samplesrc/lz4cat.pla: 0008:     byte FLG
					; FLG = 4
; samplesrc/lz4cat.pla: 0009:     byte BD
					; BD = 5
; samplesrc/lz4cat.pla: 0010: end
					; t_header = 6
; samplesrc/lz4cat.pla: 0011: word arg
_D035 	!FILL	2			; arg
; samplesrc/lz4cat.pla: 0012: byte ref
_D036 	!FILL	1			; ref
; samplesrc/lz4cat.pla: 0013: 
; samplesrc/lz4cat.pla: 0014: def lz4ReadBlock(flags)#2
_SUBSEG 				; BYTECODE STARTS
					; flags -> [0]
_C000 					; lz4ReadBlock()
; samplesrc/lz4cat.pla: 0015:     word size[2], block, data, len
					; size -> [2]
					; block -> [6]
					; data -> [8]
					; len -> [10]
; samplesrc/lz4cat.pla: 0016:     
; samplesrc/lz4cat.pla: 0017:     len = fileio:read(ref, @size, 4)
	!BYTE	$58,$0C,$01		; ENTER	12,1
; samplesrc/lz4cat.pla: 0018:     if len <> 4 or size[0] == 0 or size[1] & $7FFF
; samplesrc/lz4cat.pla: 0019:         return NULL, 0
	!BYTE	$68			; LAB	_D036+0
_F000 	!WORD	_D036+0		
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_X031+18
_F001 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$08			; CN	4
	!BYTE	$42			; ISNE
	!BYTE	$AE			; BROR	_B001
	!WORD	_B001-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B002
	!WORD	_B002-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$FF,$7F		; CW	32767
	!BYTE	$94			; AND 
_B002 
_B001 
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0C			; LEAVE	12
; samplesrc/lz4cat.pla: 0020:     fin
_B003 
_B004 
; samplesrc/lz4cat.pla: 0021:     block = heapalloc(size[0])
; samplesrc/lz4cat.pla: 0022:     if block
; samplesrc/lz4cat.pla: 0023:         len = fileio:read(ref, block, size[0])
; samplesrc/lz4cat.pla: 0024:         if len <> size[0]
; samplesrc/lz4cat.pla: 0025:             heaprelease(block)
; samplesrc/lz4cat.pla: 0026:             return NULL, 0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X014
_F002 	!WORD	0		
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$68			; LAB	_D036+0
_F003 	!WORD	_D036+0		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_X031+18
_F004 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$22			; BREQ	_B007
	!WORD	_B007-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X015
_F005 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0C			; LEAVE	12
; samplesrc/lz4cat.pla: 0027:         fin
_B007 
_B008 
; samplesrc/lz4cat.pla: 0028:     else
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B005 
; samplesrc/lz4cat.pla: 0029:         return NULL, 0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0C			; LEAVE	12
; samplesrc/lz4cat.pla: 0030:     fin
_B006 
; samplesrc/lz4cat.pla: 0031:     if size[1] & $8000
; samplesrc/lz4cat.pla: 0032:         //
; samplesrc/lz4cat.pla: 0033:         // Uncompressed block
; samplesrc/lz4cat.pla: 0034:         //
; samplesrc/lz4cat.pla: 0035:         data = block
; samplesrc/lz4cat.pla: 0036:     else
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$80		; CW	32768
	!BYTE	$94			; AND 
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B009 
; samplesrc/lz4cat.pla: 0037:         //
; samplesrc/lz4cat.pla: 0038:         // Decompress block
; samplesrc/lz4cat.pla: 0039:         //
; samplesrc/lz4cat.pla: 0040:         len  = heapavail - 256 // Allocate almost entire heap to decompress into
; samplesrc/lz4cat.pla: 0041:         data = heapalloc(len)
; samplesrc/lz4cat.pla: 0042:         if data
; samplesrc/lz4cat.pla: 0043:             len = lz4Unpack(block, block + size[0], data, data + len)
; samplesrc/lz4cat.pla: 0044:             memcpy(block, data, len)
; samplesrc/lz4cat.pla: 0045:             data = block
; samplesrc/lz4cat.pla: 0046:         else
	!BYTE	$54			; CALL	_X016
_F006 	!WORD	0		
	!BYTE	$2C,$00,$01		; CW	256
	!BYTE	$84			; SUB 
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$54			; CALL	_X014
_F007 	!WORD	0		
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$34			; DUP
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$34			; DUP
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$54			; CALL	_X034
_F008 	!WORD	0		
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$54			; CALL	_X018
_F009 	!WORD	0		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$50			; BRNCH	_B012
	!WORD	_B012-*
_B011 
; samplesrc/lz4cat.pla: 0047:             len = 0
; samplesrc/lz4cat.pla: 0048:         fin
	!BYTE	$00			; CN	0
	!BYTE	$76,$0A			; SLW	[10]
_B012 
; samplesrc/lz4cat.pla: 0049:         heaprelease(block + len)
; samplesrc/lz4cat.pla: 0050:     fin
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$54			; CALL	_X015
_F010 	!WORD	0		
	!BYTE	$30			; DROP 
_B010 
; samplesrc/lz4cat.pla: 0051:     if flags & $10 // Block Checksum
; samplesrc/lz4cat.pla: 0052:         fileio:read(ref, @size, 4)
; samplesrc/lz4cat.pla: 0053:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$10			; ANDI	16
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$68			; LAB	_D036+0
_F011 	!WORD	_D036+0		
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_X031+18
_F012 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B013 
_B014 
; samplesrc/lz4cat.pla: 0054:     return data, len
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$5A,$0C			; LEAVE	12
; samplesrc/lz4cat.pla: 0055: end
; samplesrc/lz4cat.pla: 0056: def lz4ReadFrame#0
_C001 					; lz4ReadFrame()
; samplesrc/lz4cat.pla: 0057:     word data, len
					; data -> [0]
					; len -> [2]
; samplesrc/lz4cat.pla: 0058:     byte header[t_header], opt
					; header -> [4]
					; opt -> [10]
; samplesrc/lz4cat.pla: 0059: 
; samplesrc/lz4cat.pla: 0060:     fileio:read(ref, @header, t_header)
	!BYTE	$58,$0B,$00		; ENTER	11,0
; samplesrc/lz4cat.pla: 0061:     if header:magic[1] <> $184D or header:magic[0] <> $2204
; samplesrc/lz4cat.pla: 0062:         puts("Not LZ4 file.\n")
	!BYTE	$68			; LAB	_D036+0
_F013 	!WORD	_D036+0		
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$0C			; CN	6
	!BYTE	$6A			; LAW	_X031+18
_F014 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$2C,$4D,$18		; CW	6221
	!BYTE	$42			; ISNE
	!BYTE	$AE			; BROR	_B015
	!WORD	_B015-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$04,$22		; CW	8708
	!BYTE	$42			; ISNE
_B015 
	!BYTE	$4C			; BRFLS	_B016
	!WORD	_B016-*
	!BYTE	$2E			; CS
	!BYTE	$0E
	!BYTE	$4E,$6F,$74,$20,$4C,$5A,$34,$20
	!BYTE	$66,$69,$6C,$65,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F015 	!WORD	0		
; samplesrc/lz4cat.pla: 0063:         return
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/lz4cat.pla: 0064:     fin
_B016 
_B017 
; samplesrc/lz4cat.pla: 0065:     if header.FLG & $C0 <> $40
; samplesrc/lz4cat.pla: 0066:         puts("Wrong LZ4 version.\n")
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$3C,$C0			; ANDI	192
	!BYTE	$2A,$40			; CB	64
	!BYTE	$22			; BREQ	_B018
	!WORD	_B018-*
	!BYTE	$2E			; CS
	!BYTE	$13
	!BYTE	$57,$72,$6F,$6E,$67,$20,$4C,$5A
	!BYTE	$34,$20,$76,$65,$72,$73,$69,$6F
	!BYTE	$6E,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F016 	!WORD	0		
; samplesrc/lz4cat.pla: 0067:         return
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/lz4cat.pla: 0068:     fin
_B018 
_B019 
; samplesrc/lz4cat.pla: 0069:     if header.BD & $70 <> $40
; samplesrc/lz4cat.pla: 0070:         puts("Not 64K block size.\n")
	!BYTE	$64,$09			; LLB	[9]
	!BYTE	$3C,$70			; ANDI	112
	!BYTE	$2A,$40			; CB	64
	!BYTE	$22			; BREQ	_B020
	!WORD	_B020-*
	!BYTE	$2E			; CS
	!BYTE	$14
	!BYTE	$4E,$6F,$74,$20,$36,$34,$4B,$20
	!BYTE	$62,$6C,$6F,$63,$6B,$20,$73,$69
	!BYTE	$7A,$65,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F017 	!WORD	0		
; samplesrc/lz4cat.pla: 0071:         return
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/lz4cat.pla: 0072:     fin
_B020 
_B021 
; samplesrc/lz4cat.pla: 0073:     opt = 1
; samplesrc/lz4cat.pla: 0074:     if header.FLG & $08 // Content Size
; samplesrc/lz4cat.pla: 0075:         opt = opt + 8
; samplesrc/lz4cat.pla: 0076:     fin
	!BYTE	$02			; CN	1
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$4C			; BRFLS	_B022
	!WORD	_B022-*
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$74,$0A			; SLB	[10]
_B022 
_B023 
; samplesrc/lz4cat.pla: 0077:     if header.FLG & $01 // Dictionary ID
; samplesrc/lz4cat.pla: 0078:         opt = opt + 4
; samplesrc/lz4cat.pla: 0079:     fin
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$74,$0A			; SLB	[10]
_B024 
_B025 
; samplesrc/lz4cat.pla: 0080:     fileio:read(ref, heapmark, opt) // Read rest of header and throw away
; samplesrc/lz4cat.pla: 0081:     repeat
	!BYTE	$68			; LAB	_D036+0
_F018 	!WORD	_D036+0		
	!BYTE	$54			; CALL	_X012
_F019 	!WORD	0		
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$6A			; LAW	_X031+18
_F020 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B027 
; samplesrc/lz4cat.pla: 0082:         data, len = lz4ReadBlock(header.FLG)
; samplesrc/lz4cat.pla: 0083:         if len
; samplesrc/lz4cat.pla: 0084:             while len
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$54			; CALL	_C000
_F021 	!WORD	_C000		
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$4C			; BRFLS	_B029
	!WORD	_B029-*
	!BYTE	$50			; BRNCH	_B033
	!WORD	_B033-*
_B031 
; samplesrc/lz4cat.pla: 0085:                 putc(^data <> $0A ?? ^data :: $0D)
; samplesrc/lz4cat.pla: 0086:                 data++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$14			; CN	10
	!BYTE	$22			; BREQ	_B036
	!WORD	_B036-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$50			; BRNCH	_B037
	!WORD	_B037-*
_B036 
	!BYTE	$1A			; CN	13
_B037 
	!BYTE	$54			; CALL	_X002
_F022 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; samplesrc/lz4cat.pla: 0087:                 len--
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8E			; DECR
; samplesrc/lz4cat.pla: 0088:             loop
	!BYTE	$76,$02			; SLW	[2]
_B033 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$4E			; BRTRU	_B031
	!WORD	_B031-*
_B032 
; samplesrc/lz4cat.pla: 0089:             heaprelease(data)
; samplesrc/lz4cat.pla: 0090:         fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X015
_F023 	!WORD	0		
	!BYTE	$30			; DROP 
_B029 
_B030 
; samplesrc/lz4cat.pla: 0091:     until not data
_B028 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B027
	!WORD	_B027-*
_B026 
; samplesrc/lz4cat.pla: 0092:     if header.FLG & $04 // Content Checksun
; samplesrc/lz4cat.pla: 0093:         fileio:read(ref, heapmark, 4)
; samplesrc/lz4cat.pla: 0094:     fin
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$3C,$04			; ANDI	4
	!BYTE	$4C			; BRFLS	_B038
	!WORD	_B038-*
	!BYTE	$68			; LAB	_D036+0
_F024 	!WORD	_D036+0		
	!BYTE	$54			; CALL	_X012
_F025 	!WORD	0		
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_X031+18
_F026 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B038 
_B039 
; samplesrc/lz4cat.pla: 0095: end
	!BYTE	$5A,$0B			; LEAVE	11
; samplesrc/lz4cat.pla: 0096: arg = argNext(argFirst)
_INIT 
; samplesrc/lz4cat.pla: 0097: if ^arg
; samplesrc/lz4cat.pla: 0098:     ref = fileio:open(arg)
; samplesrc/lz4cat.pla: 0099:     if ref
; samplesrc/lz4cat.pla: 0100:         lz4ReadFrame
; samplesrc/lz4cat.pla: 0101:         fileio:close(ref)
; samplesrc/lz4cat.pla: 0102:     else
	!BYTE	$54			; CALL	_X029
_F027 	!WORD	0		
	!BYTE	$54			; CALL	_X030
_F028 	!WORD	0		
	!BYTE	$7A			; SAW	_D035+0
_F029 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_D035+0
_F030 	!WORD	_D035+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B040
	!WORD	_B040-*
	!BYTE	$6A			; LAW	_D035+0
_F031 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_X031+14
_F032 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$7C			; DAB	_D036+0
_F033 	!WORD	_D036+0		
	!BYTE	$4C			; BRFLS	_B042
	!WORD	_B042-*
	!BYTE	$54			; CALL	_C001
_F034 	!WORD	_C001		
	!BYTE	$68			; LAB	_D036+0
_F035 	!WORD	_D036+0		
	!BYTE	$6A			; LAW	_X031+16
_F036 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B043
	!WORD	_B043-*
_B042 
; samplesrc/lz4cat.pla: 0103:         puts("File not found.\n")
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$46,$69,$6C,$65,$20,$6E,$6F,$74
	!BYTE	$20,$66,$6F,$75,$6E,$64,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F037 	!WORD	0		
; samplesrc/lz4cat.pla: 0104:     fin
_B043 
; samplesrc/lz4cat.pla: 0105: fin
_B040 
_B041 
; samplesrc/lz4cat.pla: 0106: 
; samplesrc/lz4cat.pla: 0107: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	3
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	16			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: HEAPMARK
	!BYTE	$C8,$C5,$C1,$D0,$CD,$C1,$D2,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	12			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: HEAPAVAIL
	!BYTE	$C8,$C5,$C1,$D0,$C1,$D6,$C1,$C9,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	16			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	; DCI STRING: LZ4UNPACK
	!BYTE	$CC,$DA,$B4,$D5,$CE,$D0,$C1,$C3,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	!BYTE	$00			; END OF ESD
