; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/memtest.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/memtest.pla: 0001: 
; samplesrc/memtest.pla: 0002: include "inc/memmgr.plh"
; inc/memmgr.plh: 0001: import memmgr
	; DCI STRING: MEMMGR
	!BYTE	$CD,$C5,$CD,$CD,$C7,$52
					; MEMMGR -> X028
; inc/memmgr.plh: 0002:     //
; inc/memmgr.plh: 0003:     // Utility routine
; inc/memmgr.plh: 0004:     //
; inc/memmgr.plh: 0005:     predef sweep#0, brk(addr), sbrk(size)
					; SWEEP -> X029
					; BRK -> X030
					; SBRK -> X031
; inc/memmgr.plh: 0006:     //
; inc/memmgr.plh: 0007:     // Memory routines
; inc/memmgr.plh: 0008:     //
; inc/memmgr.plh: 0009:     predef hmemNew(size), hmemLock(hmem), hmemUnlock(hmem)#0, hmemRef(hmem)#0, hmemDel(hmem)#0, hmemFre(lptr)
					; HMEMNEW -> X032
					; HMEMLOCK -> X033
					; HMEMUNLOCK -> X034
					; HMEMREF -> X035
					; HMEMDEL -> X036
					; HMEMFRE -> X037
; inc/memmgr.plh: 0010:     //
; inc/memmgr.plh: 0011:     // Max size of a memory block
; inc/memmgr.plh: 0012:     //
; inc/memmgr.plh: 0013:     const MAX_MEMBLK_SIZE = $2000
					; MAX_MEMBLK_SIZE = 8192
; inc/memmgr.plh: 0014: end
; samplesrc/memtest.pla: 0002: 
; samplesrc/memtest.pla: 0003: word a, b, c, d, e, memptr
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D038 	!FILL	2			; a, b, c, d, e, memptr
_D039 	!FILL	2			; b, c, d, e, memptr
_D040 	!FILL	2			; c, d, e, memptr
_D041 	!FILL	2			; d, e, memptr
_D042 	!FILL	2			; e, memptr
_D043 	!FILL	2			; memptr
; samplesrc/memtest.pla: 0004: word memfre, memlrgst
_D044 	!FILL	2			; memfre, memlrgst
_D045 	!FILL	2			; memlrgst
; samplesrc/memtest.pla: 0005: 
; samplesrc/memtest.pla: 0006: sbrk($3000) // Set small pool size
_SUBSEG 				; BYTECODE STARTS
_INIT 
; samplesrc/memtest.pla: 0007: 
; samplesrc/memtest.pla: 0008: memfre=hmemFre(@memlrgst);puth(memfre); putc(' '); puth(memlrgst); putln
; samplesrc/memtest.pla: 0009: a = hmemNew(MAX_MEMBLK_SIZE)
; samplesrc/memtest.pla: 0010: b = hmemNew(MAX_MEMBLK_SIZE)
; samplesrc/memtest.pla: 0011: c = hmemNew(MAX_MEMBLK_SIZE)
; samplesrc/memtest.pla: 0012: 
; samplesrc/memtest.pla: 0013: d = hmemNew($1000)
; samplesrc/memtest.pla: 0014: e = hmemNew(768)
; samplesrc/memtest.pla: 0015: hmemLock(d)
; samplesrc/memtest.pla: 0016: memptr = hmemLock(e)
; samplesrc/memtest.pla: 0017: if memptr; *memptr = $EEEE; fin
	!BYTE	$2C,$00,$30		; CW	12288
	!BYTE	$54			; CALL	_X031
_F000 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D045+0
_F001 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X037
_F002 	!WORD	0		
	!BYTE	$7E			; DAW	_D044+0
_F003 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_X009
_F004 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F005 	!WORD	0		
	!BYTE	$6A			; LAW	_D045+0
_F006 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X009
_F007 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F008 	!WORD	0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X032
_F009 	!WORD	0		
	!BYTE	$7A			; SAW	_D038+0
_F010 	!WORD	_D038+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X032
_F011 	!WORD	0		
	!BYTE	$7A			; SAW	_D039+0
_F012 	!WORD	_D039+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X032
_F013 	!WORD	0		
	!BYTE	$7A			; SAW	_D040+0
_F014 	!WORD	_D040+0		
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$54			; CALL	_X032
_F015 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F016 	!WORD	_D041+0		
	!BYTE	$2C,$00,$03		; CW	768
	!BYTE	$54			; CALL	_X032
_F017 	!WORD	0		
	!BYTE	$7A			; SAW	_D042+0
_F018 	!WORD	_D042+0		
	!BYTE	$6A			; LAW	_D041+0
_F019 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F020 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D042+0
_F021 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X033
_F022 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F023 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$2C,$EE,$EE		; CW	61166
	!BYTE	$6A			; LAW	_D043+0
_F024 	!WORD	_D043+0		
	!BYTE	$72			; SW
_B001 
_B002 
; samplesrc/memtest.pla: 0018: hmemUnlock(d)
; samplesrc/memtest.pla: 0019: hmemUnlock(e)
; samplesrc/memtest.pla: 0020: hmemDel(d)
; samplesrc/memtest.pla: 0021: memfre=hmemFre(@memlrgst);puth(memfre); putc(' '); puth(memlrgst); putln
; samplesrc/memtest.pla: 0022: 
; samplesrc/memtest.pla: 0023: memptr = hmemLock(a)
; samplesrc/memtest.pla: 0024: if memptr; memset(memptr, $1111, MAX_MEMBLK_SIZE); fin
	!BYTE	$6A			; LAW	_D041+0
_F025 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X034
_F026 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F027 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X034
_F028 	!WORD	0		
	!BYTE	$6A			; LAW	_D041+0
_F029 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X036
_F030 	!WORD	0		
	!BYTE	$26			; LA	_D045+0
_F031 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X037
_F032 	!WORD	0		
	!BYTE	$7E			; DAW	_D044+0
_F033 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_X009
_F034 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F035 	!WORD	0		
	!BYTE	$6A			; LAW	_D045+0
_F036 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X009
_F037 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F038 	!WORD	0		
	!BYTE	$6A			; LAW	_D038+0
_F039 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X033
_F040 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F041 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$6A			; LAW	_D043+0
_F042 	!WORD	_D043+0		
	!BYTE	$2C,$11,$11		; CW	4369
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X017
_F043 	!WORD	0		
_B003 
_B004 
; samplesrc/memtest.pla: 0025: hmemUnlock(a)
; samplesrc/memtest.pla: 0026: memptr = hmemLock(b)
; samplesrc/memtest.pla: 0027: if memptr; memset(memptr, $2222, MAX_MEMBLK_SIZE); fin
	!BYTE	$6A			; LAW	_D038+0
_F044 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X034
_F045 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F046 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X033
_F047 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F048 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$6A			; LAW	_D043+0
_F049 	!WORD	_D043+0		
	!BYTE	$2C,$22,$22		; CW	8738
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X017
_F050 	!WORD	0		
_B005 
_B006 
; samplesrc/memtest.pla: 0028: hmemUnlock(b)
; samplesrc/memtest.pla: 0029: memptr = hmemLock(c)
; samplesrc/memtest.pla: 0030: if memptr; memset(memptr, $3333, MAX_MEMBLK_SIZE); fin
	!BYTE	$6A			; LAW	_D039+0
_F051 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X034
_F052 	!WORD	0		
	!BYTE	$6A			; LAW	_D040+0
_F053 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X033
_F054 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F055 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$6A			; LAW	_D043+0
_F056 	!WORD	_D043+0		
	!BYTE	$2C,$33,$33		; CW	13107
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_X017
_F057 	!WORD	0		
_B007 
_B008 
; samplesrc/memtest.pla: 0031: hmemUnlock(c)
; samplesrc/memtest.pla: 0032: memptr = hmemLock(a)
; samplesrc/memtest.pla: 0033: if memptr; puth(a); putc('='); puth(*(memptr + MAX_MEMBLK_SIZE - 2)); putln; fin
	!BYTE	$6A			; LAW	_D040+0
_F058 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X034
_F059 	!WORD	0		
	!BYTE	$6A			; LAW	_D038+0
_F060 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X033
_F061 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F062 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$6A			; LAW	_D038+0
_F063 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X009
_F064 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F065 	!WORD	0		
	!BYTE	$6A			; LAW	_D043+0
_F066 	!WORD	_D043+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$82			; ADD 
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X009
_F067 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F068 	!WORD	0		
_B009 
_B010 
; samplesrc/memtest.pla: 0034: hmemUnlock(a)
; samplesrc/memtest.pla: 0035: hmemDel(a)
; samplesrc/memtest.pla: 0036: memptr = hmemLock(b)
; samplesrc/memtest.pla: 0037: if memptr; puth(b); putc('='); puth(*(memptr + MAX_MEMBLK_SIZE - 2)); putln; fin
	!BYTE	$6A			; LAW	_D038+0
_F069 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X034
_F070 	!WORD	0		
	!BYTE	$6A			; LAW	_D038+0
_F071 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X036
_F072 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F073 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X033
_F074 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F075 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$6A			; LAW	_D039+0
_F076 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X009
_F077 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F078 	!WORD	0		
	!BYTE	$6A			; LAW	_D043+0
_F079 	!WORD	_D043+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$82			; ADD 
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X009
_F080 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F081 	!WORD	0		
_B011 
_B012 
; samplesrc/memtest.pla: 0038: hmemUnlock(b)
; samplesrc/memtest.pla: 0039: hmemDel(b)
; samplesrc/memtest.pla: 0040: memptr = hmemLock(c)
; samplesrc/memtest.pla: 0041: if memptr; puth(c); putc('='); puth(*(memptr + MAX_MEMBLK_SIZE - 2)); putln; fin
	!BYTE	$6A			; LAW	_D039+0
_F082 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X034
_F083 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F084 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X036
_F085 	!WORD	0		
	!BYTE	$6A			; LAW	_D040+0
_F086 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X033
_F087 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F088 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$6A			; LAW	_D040+0
_F089 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X009
_F090 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F091 	!WORD	0		
	!BYTE	$6A			; LAW	_D043+0
_F092 	!WORD	_D043+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$82			; ADD 
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X009
_F093 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F094 	!WORD	0		
_B013 
_B014 
; samplesrc/memtest.pla: 0042: hmemUnlock(c)
; samplesrc/memtest.pla: 0043: hmemDel(c)
; samplesrc/memtest.pla: 0044: 
; samplesrc/memtest.pla: 0045: memptr = hmemLock(e)
; samplesrc/memtest.pla: 0046: if memptr; puth(e); putc('='); puth(*memptr); putln; fin
	!BYTE	$6A			; LAW	_D040+0
_F095 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X034
_F096 	!WORD	0		
	!BYTE	$6A			; LAW	_D040+0
_F097 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X036
_F098 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F099 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X033
_F100 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F101 	!WORD	_D043+0		
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$6A			; LAW	_D042+0
_F102 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X009
_F103 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F104 	!WORD	0		
	!BYTE	$6A			; LAW	_D043+0
_F105 	!WORD	_D043+0		
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X009
_F106 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F107 	!WORD	0		
_B015 
_B016 
; samplesrc/memtest.pla: 0047: hmemUnlock(e)
; samplesrc/memtest.pla: 0048: hmemDel(e)
; samplesrc/memtest.pla: 0049: memfre=hmemFre(@memlrgst);puth(memfre); putc(' '); puth(memlrgst); putln
; samplesrc/memtest.pla: 0050: done
	!BYTE	$6A			; LAW	_D042+0
_F108 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X034
_F109 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F110 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X036
_F111 	!WORD	0		
	!BYTE	$26			; LA	_D045+0
_F112 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X037
_F113 	!WORD	0		
	!BYTE	$7E			; DAW	_D044+0
_F114 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_X009
_F115 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F116 	!WORD	0		
	!BYTE	$6A			; LAW	_D045+0
_F117 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X009
_F118 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F119 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	1
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	17			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTH
	!BYTE	$D0,$D5,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	9			; ESD INDEX
	; DCI STRING: MEMSET
	!BYTE	$CD,$C5,$CD,$D3,$C5,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	17			; ESD INDEX
	; DCI STRING: SBRK
	!BYTE	$D3,$C2,$D2,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	; DCI STRING: HMEMNEW
	!BYTE	$C8,$CD,$C5,$CD,$CE,$C5,$57
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: HMEMLOCK
	!BYTE	$C8,$CD,$C5,$CD,$CC,$CF,$C3,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	; DCI STRING: HMEMUNLOCK
	!BYTE	$C8,$CD,$C5,$CD,$D5,$CE,$CC,$CF,$C3,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	; DCI STRING: HMEMDEL
	!BYTE	$C8,$CD,$C5,$CD,$C4,$C5,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	36			; ESD INDEX
	; DCI STRING: HMEMFRE
	!BYTE	$C8,$CD,$C5,$CD,$C6,$D2,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	37			; ESD INDEX
	!BYTE	$00			; END OF ESD
