; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/rod.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/rod.pla: 0001: 
; samplesrc/rod.pla: 0002: include "inc/conio.plh"
; inc/conio.plh: 0001: import conio
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
					; CONIO -> X028
; inc/conio.plh: 0002:     const NORMAL   = $FF
					; NORMAL = 255
; inc/conio.plh: 0003:     const INVERSE  = $3F
					; INVERSE = 63
; inc/conio.plh: 0004:     const FLASH    = $7F
					; FLASH = 127
; inc/conio.plh: 0005:     const ECHO_ON  = $80
					; ECHO_ON = 128
; inc/conio.plh: 0006:     const ECHO_OFF = $00
					; ECHO_OFF = 0
; inc/conio.plh: 0007:     struc t_conio
; inc/conio.plh: 0008:         word keypressed
					; keypressed = 0
; inc/conio.plh: 0009:         word getkey
					; getkey = 2
; inc/conio.plh: 0010:         word echo
					; echo = 4
; inc/conio.plh: 0011:         word home
					; home = 6
; inc/conio.plh: 0012:         word gotoxy
					; gotoxy = 8
; inc/conio.plh: 0013:         word viewport
					; viewport = 10
; inc/conio.plh: 0014:         word texttype
					; texttype = 12
; inc/conio.plh: 0015:         word textmode
					; textmode = 14
; inc/conio.plh: 0016:         word grmode
					; grmode = 16
; inc/conio.plh: 0017:         word grcolor
					; grcolor = 18
; inc/conio.plh: 0018:         word grplot
					; grplot = 20
; inc/conio.plh: 0019:         word tone
					; tone = 22
; inc/conio.plh: 0020:         word rnd
					; rnd = 24
; inc/conio.plh: 0021:     end
					; t_conio = 26
; inc/conio.plh: 0022: end
; samplesrc/rod.pla: 0002: 
; samplesrc/rod.pla: 0003: //
; samplesrc/rod.pla: 0004: // Rod's Colors
; samplesrc/rod.pla: 0005: //
; samplesrc/rod.pla: 0006: def rod#0
	!BYTE	$00			; END OF MODULE DEPENDENCIES
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_C000 					; rod()
; samplesrc/rod.pla: 0007:   byte i, j, k, w, fmi, fmk, color
					; i -> [0]
					; j -> [1]
					; k -> [2]
					; w -> [3]
					; fmi -> [4]
					; fmk -> [5]
					; color -> [6]
; samplesrc/rod.pla: 0008: 
; samplesrc/rod.pla: 0009:   while TRUE
	!BYTE	$58,$07,$00		; ENTER	7,0
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; samplesrc/rod.pla: 0010:     for w = 3 to 50
	!BYTE	$2A,$32			; CB	50
	!BYTE	$06			; CN	3
_B005 
	!BYTE	$6C,$03			; DLB	[3]
; samplesrc/rod.pla: 0011:       for i = 1 to 19
	!BYTE	$2A,$13			; CB	19
	!BYTE	$02			; CN	1
_B008 
	!BYTE	$6C,$00			; DLB	[0]
; samplesrc/rod.pla: 0012:         for j = 0 to 19
	!BYTE	$2A,$13			; CB	19
	!BYTE	$00			; CN	0
_B011 
	!BYTE	$6C,$01			; DLB	[1]
; samplesrc/rod.pla: 0013:           k = i + j
; samplesrc/rod.pla: 0014:           color = (j * 3) / (i + 3) + i * w / 12
; samplesrc/rod.pla: 0015:           fmi = 40 - i
; samplesrc/rod.pla: 0016:           fmk = 40 - k
; samplesrc/rod.pla: 0017:           conio:grcolor(color)
; samplesrc/rod.pla: 0018:           conio:grplot(i, k)
; samplesrc/rod.pla: 0019:           conio:grplot(k, i)
; samplesrc/rod.pla: 0020:           conio:grplot(fmi, fmk)
; samplesrc/rod.pla: 0021:           conio:grplot(fmk, fmi)
; samplesrc/rod.pla: 0022:           conio:grplot(k, fmi)
; samplesrc/rod.pla: 0023:           conio:grplot(fmi, k)
; samplesrc/rod.pla: 0024:           conio:grplot(i, fmk)
; samplesrc/rod.pla: 0025:           conio:grplot(fmk, i)
; samplesrc/rod.pla: 0026:           if conio:keypressed()
; samplesrc/rod.pla: 0027:             getc
; samplesrc/rod.pla: 0028:             return
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$B0,$01			; ADDLB	[1]
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$06			; CN	3
	!BYTE	$86			; MUL
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$88			; DIV
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$86			; MUL
	!BYTE	$18			; CN	12
	!BYTE	$88			; DIV
	!BYTE	$82			; ADD 
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$2A,$28			; CB	40
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$84			; SUB 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$2A,$28			; CB	40
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$84			; SUB 
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$6A			; LAW	_X028+18
_F000 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$6A			; LAW	_X028+20
_F001 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$6A			; LAW	_X028+20
_F002 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$6A			; LAW	_X028+20
_F003 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$6A			; LAW	_X028+20
_F004 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$6A			; LAW	_X028+20
_F005 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$6A			; LAW	_X028+20
_F006 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$6A			; LAW	_X028+20
_F007 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$6A			; LAW	_X028+20
_F008 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_X028+0
_F009 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$54			; CALL	_X006
_F010 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$32			; DROP2
	!BYTE	$32			; DROP2
	!BYTE	$32			; DROP2
	!BYTE	$5A,$07			; LEAVE	7
; samplesrc/rod.pla: 0029:           fin
_B013 
_B014 
; samplesrc/rod.pla: 0030:         next
_B012 
	!BYTE	$A4			; INCBRLE	_B011
	!WORD	_B011-*
_B010 
	!BYTE	$74,$01			; SLB	[1]
	!BYTE	$30			; DROP 
; samplesrc/rod.pla: 0031:       next
_B009 
	!BYTE	$A4			; INCBRLE	_B008
	!WORD	_B008-*
_B007 
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$30			; DROP 
; samplesrc/rod.pla: 0032:     next
_B006 
	!BYTE	$A4			; INCBRLE	_B005
	!WORD	_B005-*
_B004 
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$30			; DROP 
; samplesrc/rod.pla: 0033:   loop
_B003 
	!BYTE	$50			; BRNCH	_B001
	!WORD	_B001-*
_B002 
; samplesrc/rod.pla: 0034: end
	!BYTE	$5A,$07			; LEAVE	7
; samplesrc/rod.pla: 0035: 
; samplesrc/rod.pla: 0036: conio:grmode(TRUE)
_INIT 
; samplesrc/rod.pla: 0037: conio:gotoxy(11, 1)
; samplesrc/rod.pla: 0038: puts("Press any key to exit.")
	!BYTE	$20			; MINUS ONE
	!BYTE	$6A			; LAW	_X028+16
_F011 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$16			; CN	11
	!BYTE	$02			; CN	1
	!BYTE	$6A			; LAW	_X028+8
_F012 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$16
	!BYTE	$50,$72,$65,$73,$73,$20,$61,$6E
	!BYTE	$79,$20,$6B,$65,$79,$20,$74,$6F
	!BYTE	$20,$65,$78,$69,$74,$2E
	!BYTE	$54			; CALL	_X004
_F013 	!WORD	0		
; samplesrc/rod.pla: 0039: rod
; samplesrc/rod.pla: 0040: conio:textmode(40)
; samplesrc/rod.pla: 0041: puts("That's all, folks!\n")
	!BYTE	$54			; CALL	_C000
_F014 	!WORD	_C000		
	!BYTE	$2A,$28			; CB	40
	!BYTE	$6A			; LAW	_X028+14
_F015 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$13
	!BYTE	$54,$68,$61,$74,$27,$73,$20,$61
	!BYTE	$6C,$6C,$2C,$20,$66,$6F,$6C,$6B
	!BYTE	$73,$21,$0D
	!BYTE	$54			; CALL	_X004
_F016 	!WORD	0		
; samplesrc/rod.pla: 0042: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	!BYTE	$00			; END OF ESD
