; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/rogue.combat.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/rogue.combat.pla: 0001: 
; samplesrc/rogue.combat.pla: 0002: include "inc/conio.plh"
; inc/conio.plh: 0001: import conio
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
					; CONIO -> X028
; inc/conio.plh: 0002:     const NORMAL   = $FF
					; NORMAL = 255
; inc/conio.plh: 0003:     const INVERSE  = $3F
					; INVERSE = 63
; inc/conio.plh: 0004:     const FLASH    = $7F
					; FLASH = 127
; inc/conio.plh: 0005:     const ECHO_ON  = $80
					; ECHO_ON = 128
; inc/conio.plh: 0006:     const ECHO_OFF = $00
					; ECHO_OFF = 0
; inc/conio.plh: 0007:     struc t_conio
; inc/conio.plh: 0008:         word keypressed
					; keypressed = 0
; inc/conio.plh: 0009:         word getkey
					; getkey = 2
; inc/conio.plh: 0010:         word echo
					; echo = 4
; inc/conio.plh: 0011:         word home
					; home = 6
; inc/conio.plh: 0012:         word gotoxy
					; gotoxy = 8
; inc/conio.plh: 0013:         word viewport
					; viewport = 10
; inc/conio.plh: 0014:         word texttype
					; texttype = 12
; inc/conio.plh: 0015:         word textmode
					; textmode = 14
; inc/conio.plh: 0016:         word grmode
					; grmode = 16
; inc/conio.plh: 0017:         word grcolor
					; grcolor = 18
; inc/conio.plh: 0018:         word grplot
					; grplot = 20
; inc/conio.plh: 0019:         word tone
					; tone = 22
; inc/conio.plh: 0020:         word rnd
					; rnd = 24
; inc/conio.plh: 0021:     end
					; t_conio = 26
; inc/conio.plh: 0022: end
; samplesrc/rogue.combat.pla: 0002: 
; samplesrc/rogue.combat.pla: 0003: 
; samplesrc/rogue.combat.pla: 0004: import roguemap
	; DCI STRING: ROGUEMAP
	!BYTE	$D2,$CF,$C7,$D5,$C5,$CD,$C1,$50
					; ROGUEMAP -> X029
; samplesrc/rogue.combat.pla: 0005:   predef moveplayer
					; MOVEPLAYER -> X030
; samplesrc/rogue.combat.pla: 0006: end
; samplesrc/rogue.combat.pla: 0007: 
; samplesrc/rogue.combat.pla: 0008: struc t_pos
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; samplesrc/rogue.combat.pla: 0009:   byte xpos
					; xpos = 0
; samplesrc/rogue.combat.pla: 0010:   byte ypos
					; ypos = 1
; samplesrc/rogue.combat.pla: 0011: end
					; t_pos = 2
; samplesrc/rogue.combat.pla: 0012: 
; samplesrc/rogue.combat.pla: 0013: //
; samplesrc/rogue.combat.pla: 0014: // Player
; samplesrc/rogue.combat.pla: 0015: //
; samplesrc/rogue.combat.pla: 0016: 
; samplesrc/rogue.combat.pla: 0017: struc t_player
; samplesrc/rogue.combat.pla: 0018:   byte[t_pos]
; samplesrc/rogue.combat.pla: 0019:   byte     angle
					; angle = 2
; samplesrc/rogue.combat.pla: 0020:   byte     lamp
					; lamp = 3
; samplesrc/rogue.combat.pla: 0021:   byte     fov
					; fov = 4
; samplesrc/rogue.combat.pla: 0022:   byte     skill
					; skill = 5
; samplesrc/rogue.combat.pla: 0023:   byte     health
					; health = 6
; samplesrc/rogue.combat.pla: 0024:   byte     energy
					; energy = 7
; samplesrc/rogue.combat.pla: 0025:   word     oil
					; oil = 8
; samplesrc/rogue.combat.pla: 0026:   byte     gold
					; gold = 10
; samplesrc/rogue.combat.pla: 0027:   byte     key
					; key = 11
; samplesrc/rogue.combat.pla: 0028:   byte     raft
					; raft = 12
; samplesrc/rogue.combat.pla: 0029:   byte[32] name[32]
					; name = 13
; samplesrc/rogue.combat.pla: 0030: end
					; t_player = 1037
; samplesrc/rogue.combat.pla: 0031: 
; samplesrc/rogue.combat.pla: 0032: //
; samplesrc/rogue.combat.pla: 0033: // ASCII Warrior
; samplesrc/rogue.combat.pla: 0034: //
; samplesrc/rogue.combat.pla: 0035: 
; samplesrc/rogue.combat.pla: 0036: byte[] ascii_warrior
_D031 					; ascii_warrior
; samplesrc/rogue.combat.pla: 0037: byte = "   |      "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$7C,$20,$20,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0038: byte = "   T      "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$54,$20,$20,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0039: byte = "   \\ ()   "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$5C,$20,$28,$29,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0040: byte = "    \\^    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$5C,$5E,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0041: byte = "     #\\_] "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$20,$23,$5C,$5F
	!BYTE	$5D,$20
; samplesrc/rogue.combat.pla: 0042: byte = "     #  ] "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$20,$23,$20,$20
	!BYTE	$5D,$20
; samplesrc/rogue.combat.pla: 0043: byte = "    /\\    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$2F,$5C,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0044: byte = "   /  \\   "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$2F,$20,$20,$5C,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0045: byte = "   /  /   "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$2F,$20,$20,$2F,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0046: byte = "   =  =   "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$3D,$20,$20,$3D,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0047: 
; samplesrc/rogue.combat.pla: 0048: //
; samplesrc/rogue.combat.pla: 0049: // Other monsters
; samplesrc/rogue.combat.pla: 0050: //
; samplesrc/rogue.combat.pla: 0051: 
; samplesrc/rogue.combat.pla: 0052: struc t_other
; samplesrc/rogue.combat.pla: 0053:   byte[t_pos]
; samplesrc/rogue.combat.pla: 0054:   byte kind
					; kind = 2
; samplesrc/rogue.combat.pla: 0055:   byte tileid
					; tileid = 3
; samplesrc/rogue.combat.pla: 0056:   byte life
					; life = 4
; samplesrc/rogue.combat.pla: 0057:   byte power
					; power = 5
; samplesrc/rogue.combat.pla: 0058:   word prev_other
					; prev_other = 6
; samplesrc/rogue.combat.pla: 0059:   word next_other
					; next_other = 8
; samplesrc/rogue.combat.pla: 0060: end
					; t_other = 10
; samplesrc/rogue.combat.pla: 0061: 
; samplesrc/rogue.combat.pla: 0062: //
; samplesrc/rogue.combat.pla: 0063: // ASCII Enemy Art
; samplesrc/rogue.combat.pla: 0064: //
; samplesrc/rogue.combat.pla: 0065: byte[] ascii_thief
_D032 					; ascii_thief
; samplesrc/rogue.combat.pla: 0066: byte = "          "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$20,$20,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0067: byte = "          "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$20,$20,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0068: byte = "   ____   "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$5F,$5F,$5F,$5F,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0069: byte = "  /o_o\\\\  "
	!BYTE	$0A
	!BYTE	$20,$20,$2F,$6F,$5F,$6F,$5C,$5C
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0070: byte = "| \\ = //  "
	!BYTE	$0A
	!BYTE	$7C,$20,$5C,$20,$3D,$20,$2F,$2F
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0071: byte = "T /###|\\\\ "
	!BYTE	$0A
	!BYTE	$54,$20,$2F,$23,$23,$23,$7C,$5C
	!BYTE	$5C,$20
; samplesrc/rogue.combat.pla: 0072: byte = "@==###||| "
	!BYTE	$0A
	!BYTE	$40,$3D,$3D,$23,$23,$23,$7C,$7C
	!BYTE	$7C,$20
; samplesrc/rogue.combat.pla: 0073: byte = "   xxx@// "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$78,$78,$78,$40,$2F
	!BYTE	$2F,$20
; samplesrc/rogue.combat.pla: 0074: byte = "   #|#|\\\\ "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$23,$7C,$23,$7C,$5C
	!BYTE	$5C,$20
; samplesrc/rogue.combat.pla: 0075: byte = "   #|#| \\\\"
	!BYTE	$0A
	!BYTE	$20,$20,$20,$23,$7C,$23,$7C,$20
	!BYTE	$5C,$5C
; samplesrc/rogue.combat.pla: 0076: 
; samplesrc/rogue.combat.pla: 0077: byte[] ascii_ogre
_D033 					; ascii_ogre
; samplesrc/rogue.combat.pla: 0078: byte = "    :^;   "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$3A,$5E,$3B,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0079: byte = " @  }\"{   "
	!BYTE	$0A
	!BYTE	$20,$40,$20,$20,$7D,$22,$7B,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0080: byte = " #  /'\\   "
	!BYTE	$0A
	!BYTE	$20,$23,$20,$20,$2F,$27,$5C,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0081: byte = " ##=<#>=##"
	!BYTE	$0A
	!BYTE	$20,$23,$23,$3D,$3C,$23,$3E,$3D
	!BYTE	$23,$23
; samplesrc/rogue.combat.pla: 0082: byte = "   ===== #"
	!BYTE	$0A
	!BYTE	$20,$20,$20,$3D,$3D,$3D,$3D,$3D
	!BYTE	$20,$23
; samplesrc/rogue.combat.pla: 0083: byte = "   \\===/ ?"
	!BYTE	$0A
	!BYTE	$20,$20,$20,$5C,$3D,$3D,$3D,$2F
	!BYTE	$20,$3F
; samplesrc/rogue.combat.pla: 0084: byte = "   ===== :"
	!BYTE	$0A
	!BYTE	$20,$20,$20,$3D,$3D,$3D,$3D,$3D
	!BYTE	$20,$3A
; samplesrc/rogue.combat.pla: 0085: byte = "   ()^() :"
	!BYTE	$0A
	!BYTE	$20,$20,$20,$28,$29,$5E,$28,$29
	!BYTE	$20,$3A
; samplesrc/rogue.combat.pla: 0086: byte = "   () () *"
	!BYTE	$0A
	!BYTE	$20,$20,$20,$28,$29,$20,$28,$29
	!BYTE	$20,$2A
; samplesrc/rogue.combat.pla: 0087: byte = "  {{} {}} "
	!BYTE	$0A
	!BYTE	$20,$20,$7B,$7B,$7D,$20,$7B,$7D
	!BYTE	$7D,$20
; samplesrc/rogue.combat.pla: 0088: 
; samplesrc/rogue.combat.pla: 0089: byte[] ascii_zombie
_D034 					; ascii_zombie
; samplesrc/rogue.combat.pla: 0090: byte = "   \\\\/    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$5C,$5C,$2F,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0091: byte = "  {o|0}   "
	!BYTE	$0A
	!BYTE	$20,$20,$7B,$6F,$7C,$30,$7D,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0092: byte = "  { ^ }   "
	!BYTE	$0A
	!BYTE	$20,$20,$7B,$20,$5E,$20,$7D,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0093: byte = "   ###    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$23,$23,$23,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0094: byte = "   /:\\    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$2F,$3A,$5C,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0095: byte = " /%%%%%\\  "
	!BYTE	$0A
	!BYTE	$20,$2F,$25,$25,$25,$25,$25,$5C
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0096: byte = "|%%%//%%|\\"
	!BYTE	$0A
	!BYTE	$7C,$25,$25,$25,$2F,$2F,$25,$25
	!BYTE	$7C,$5C
; samplesrc/rogue.combat.pla: 0097: byte = "|%%%\\%%%||"
	!BYTE	$0A
	!BYTE	$7C,$25,$25,$25,$5C,$25,$25,$25
	!BYTE	$7C,$7C
; samplesrc/rogue.combat.pla: 0098: byte = "|%%//%%%/|"
	!BYTE	$0A
	!BYTE	$7C,$25,$25,$2F,$2F,$25,$25,$25
	!BYTE	$2F,$7C
; samplesrc/rogue.combat.pla: 0099: byte = "<===|@___/"
	!BYTE	$0A
	!BYTE	$3C,$3D,$3D,$3D,$7C,$40,$5F,$5F
	!BYTE	$5F,$2F
; samplesrc/rogue.combat.pla: 0100: 
; samplesrc/rogue.combat.pla: 0101: byte[] ascii_rogue
_D035 					; ascii_rogue
; samplesrc/rogue.combat.pla: 0102: byte = "          "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$20,$20,$20,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0103: byte = "   \\ /    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$5C,$20,$2F,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0104: byte = " < - - >  "
	!BYTE	$0A
	!BYTE	$20,$3C,$20,$2D,$20,$2D,$20,$3E
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0105: byte = " (  \"  )  "
	!BYTE	$0A
	!BYTE	$20,$28,$20,$20,$22,$20,$20,$29
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0106: byte = "  \\VVV/   "
	!BYTE	$0A
	!BYTE	$20,$20,$5C,$56,$56,$56,$2F,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0107: byte = "   \\M/    "
	!BYTE	$0A
	!BYTE	$20,$20,$20,$5C,$4D,$2F,$20,$20
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0108: byte = "  ^^^^^^  "
	!BYTE	$0A
	!BYTE	$20,$20,$5E,$5E,$5E,$5E,$5E,$5E
	!BYTE	$20,$20
; samplesrc/rogue.combat.pla: 0109: byte = " /      \\ "
	!BYTE	$0A
	!BYTE	$20,$2F,$20,$20,$20,$20,$20,$20
	!BYTE	$5C,$20
; samplesrc/rogue.combat.pla: 0110: byte = "( ) ^^>--="
	!BYTE	$0A
	!BYTE	$28,$20,$29,$20,$5E,$5E,$3E,$2D
	!BYTE	$2D,$3D
; samplesrc/rogue.combat.pla: 0111: byte = "( ) WW>--//"
	!BYTE	$0B
	!BYTE	$28,$20,$29,$20,$57,$57,$3E,$2D
	!BYTE	$2D,$2F,$2F
; samplesrc/rogue.combat.pla: 0112: 
; samplesrc/rogue.combat.pla: 0113: word ascii_entity = @ascii_thief, @ascii_ogre, @ascii_zombie, @ascii_rogue
_D036 					; ascii_entity = @ascii_thief, @ascii_ogre, @ascii_zombie, @ascii_rogue
_F000 	!WORD	_D032
_F001 	!WORD	_D033
_F002 	!WORD	_D034
_F003 	!WORD	_D035
; samplesrc/rogue.combat.pla: 0114: //
; samplesrc/rogue.combat.pla: 0115: // Monster types
; samplesrc/rogue.combat.pla: 0116: //
; samplesrc/rogue.combat.pla: 0117: byte thief    = "Thief",  5
_D037 					; thief    = "Thief",  5
	!BYTE	$05
	!BYTE	$54,$68,$69,$65,$66
	!BYTE	$05
; samplesrc/rogue.combat.pla: 0118: byte ogre     = "Ogre",   20
_D038 					; ogre     = "Ogre",   20
	!BYTE	$04
	!BYTE	$4F,$67,$72,$65
	!BYTE	$14
; samplesrc/rogue.combat.pla: 0119: byte zombie   = "Zombie", 40
_D039 					; zombie   = "Zombie", 40
	!BYTE	$06
	!BYTE	$5A,$6F,$6D,$62,$69,$65
	!BYTE	$28
; samplesrc/rogue.combat.pla: 0120: byte rogue    = "Rogue",  80
_D040 					; rogue    = "Rogue",  80
	!BYTE	$05
	!BYTE	$52,$6F,$67,$75,$65
	!BYTE	$50
; samplesrc/rogue.combat.pla: 0121: export word entity   = @thief, @ogre, @zombie, @rogue
_D041 					; entity   = @thief, @ogre, @zombie, @rogue
_F004 	!WORD	_D037
_F005 	!WORD	_D038
_F006 	!WORD	_D039
_F007 	!WORD	_D040
; samplesrc/rogue.combat.pla: 0122: export word entities = 0
_D042 					; entities = 0
	!WORD	$0000
; samplesrc/rogue.combat.pla: 0123: 
; samplesrc/rogue.combat.pla: 0124: //
; samplesrc/rogue.combat.pla: 0125: // Combat  Return 1 if running away, 0 if end of fight
; samplesrc/rogue.combat.pla: 0126: //
; samplesrc/rogue.combat.pla: 0127: 
; samplesrc/rogue.combat.pla: 0128: def win#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_C000 					; win()
; samplesrc/rogue.combat.pla: 0129:   conio:tone(30, 15)
; samplesrc/rogue.combat.pla: 0130:   conio:tone(5, 15)
; samplesrc/rogue.combat.pla: 0131:   conio:tone(5, 15)
; samplesrc/rogue.combat.pla: 0132:   conio:tone(30, 5)
; samplesrc/rogue.combat.pla: 0133: end
	!BYTE	$2A,$1E			; CB	30
	!BYTE	$1E			; CN	15
	!BYTE	$6A			; LAW	_X028+22
_F008 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$0A			; CN	5
	!BYTE	$1E			; CN	15
	!BYTE	$6A			; LAW	_X028+22
_F009 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$0A			; CN	5
	!BYTE	$1E			; CN	15
	!BYTE	$6A			; LAW	_X028+22
_F010 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2A,$1E			; CB	30
	!BYTE	$0A			; CN	5
	!BYTE	$6A			; LAW	_X028+22
_F011 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$5C			; RET
; samplesrc/rogue.combat.pla: 0134: 
; samplesrc/rogue.combat.pla: 0135: export def fight(player, enemy)
					; player -> [0]
					; enemy -> [2]
_C001 					; fight()
; samplesrc/rogue.combat.pla: 0136:   word p_atck, e_atck
					; p_atck -> [4]
					; e_atck -> [6]
; samplesrc/rogue.combat.pla: 0137: 
; samplesrc/rogue.combat.pla: 0138:   conio:echo(ECHO_ON)
	!BYTE	$58,$08,$02		; ENTER	8,2
; samplesrc/rogue.combat.pla: 0139:   repeat
	!BYTE	$2A,$80			; CB	128
	!BYTE	$6A			; LAW	_X028+4
_F012 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B002 
; samplesrc/rogue.combat.pla: 0140:     conio:home()
; samplesrc/rogue.combat.pla: 0141:     conio:gotoxy(0, 0)
; samplesrc/rogue.combat.pla: 0142:     puts(player+name)
; samplesrc/rogue.combat.pla: 0143:     conio:gotoxy(1, 2)
; samplesrc/rogue.combat.pla: 0144:     puts("Skill  :"); puti(player->skill)
	!BYTE	$6A			; LAW	_X028+6
_F013 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+8
_F014 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$0D			; ADDI	13
	!BYTE	$54			; CALL	_X004
_F015 	!WORD	0		
	!BYTE	$02			; CN	1
	!BYTE	$04			; CN	2
	!BYTE	$6A			; LAW	_X028+8
_F016 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$53,$6B,$69,$6C,$6C,$20,$20,$3A
	!BYTE	$54			; CALL	_X004
_F017 	!WORD	0		
; samplesrc/rogue.combat.pla: 0145:     conio:gotoxy(1, 3)
; samplesrc/rogue.combat.pla: 0146:     puts("Health :"); puti(player->health)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F018 	!WORD	0		
	!BYTE	$02			; CN	1
	!BYTE	$06			; CN	3
	!BYTE	$6A			; LAW	_X028+8
_F019 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$48,$65,$61,$6C,$74,$68,$20,$3A
	!BYTE	$54			; CALL	_X004
_F020 	!WORD	0		
; samplesrc/rogue.combat.pla: 0147:     conio:gotoxy(1, 4)
; samplesrc/rogue.combat.pla: 0148:     puts("Energy :"); puti(player->energy)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F021 	!WORD	0		
	!BYTE	$02			; CN	1
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_X028+8
_F022 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$45,$6E,$65,$72,$67,$79,$20,$3A
	!BYTE	$54			; CALL	_X004
_F023 	!WORD	0		
; samplesrc/rogue.combat.pla: 0149:     conio:gotoxy(20, 0)
; samplesrc/rogue.combat.pla: 0150:     puts(entity[enemy->kind])
; samplesrc/rogue.combat.pla: 0151:     conio:gotoxy(21, 2)
; samplesrc/rogue.combat.pla: 0152:     puts("Power  :"); puti(enemy->power)
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F024 	!WORD	0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+8
_F025 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D041+0
_F026 	!WORD	_D041+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X004
_F027 	!WORD	0		
	!BYTE	$2A,$15			; CB	21
	!BYTE	$04			; CN	2
	!BYTE	$6A			; LAW	_X028+8
_F028 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$50,$6F,$77,$65,$72,$20,$20,$3A
	!BYTE	$54			; CALL	_X004
_F029 	!WORD	0		
; samplesrc/rogue.combat.pla: 0153:     conio:gotoxy(21, 3)
; samplesrc/rogue.combat.pla: 0154:     puts("Life   :");  puti(enemy->life)
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F030 	!WORD	0		
	!BYTE	$2A,$15			; CB	21
	!BYTE	$06			; CN	3
	!BYTE	$6A			; LAW	_X028+8
_F031 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$4C,$69,$66,$65,$20,$20,$20,$3A
	!BYTE	$54			; CALL	_X004
_F032 	!WORD	0		
; samplesrc/rogue.combat.pla: 0155:     for e_atck = 0 to 9
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F033 	!WORD	0		
	!BYTE	$12			; CN	9
	!BYTE	$00			; CN	0
_B005 
	!BYTE	$6E,$06			; DLW	[6]
; samplesrc/rogue.combat.pla: 0156:       conio:gotoxy(0, 10 + e_atck)
; samplesrc/rogue.combat.pla: 0157:       puts(@ascii_warrior + e_atck * 11)
; samplesrc/rogue.combat.pla: 0158:       conio:gotoxy(20, 10 + e_atck)
; samplesrc/rogue.combat.pla: 0159:       puts(ascii_entity[enemy->kind] + e_atck * 11)
; samplesrc/rogue.combat.pla: 0160:     next
	!BYTE	$00			; CN	0
	!BYTE	$14			; CN	10
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$6A			; LAW	_X028+8
_F034 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D031+0
_F035 	!WORD	_D031+0		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$16			; CN	11
	!BYTE	$86			; MUL
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X004
_F036 	!WORD	0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$14			; CN	10
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$6A			; LAW	_X028+8
_F037 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D036+0
_F038 	!WORD	_D036+0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$16			; CN	11
	!BYTE	$86			; MUL
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X004
_F039 	!WORD	0		
_B006 
	!BYTE	$A4			; INCBRLE	_B005
	!WORD	_B005-*
_B004 
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$30			; DROP 
; samplesrc/rogue.combat.pla: 0161:     conio:gotoxy(12, 8); puts("F)ight or R)un?")
	!BYTE	$18			; CN	12
	!BYTE	$10			; CN	8
	!BYTE	$6A			; LAW	_X028+8
_F040 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$0F
	!BYTE	$46,$29,$69,$67,$68,$74,$20,$6F
	!BYTE	$72,$20,$52,$29,$75,$6E,$3F
	!BYTE	$54			; CALL	_X004
_F041 	!WORD	0		
; samplesrc/rogue.combat.pla: 0162:     if toupper(conio:getkey()) == 'R'
; samplesrc/rogue.combat.pla: 0163:       conio:echo(ECHO_OFF)
; samplesrc/rogue.combat.pla: 0164:       return 1
	!BYTE	$6A			; LAW	_X028+2
_F042 	!WORD	0+2		
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_X021
_F043 	!WORD	0		
	!BYTE	$2A,$52			; CB	82
	!BYTE	$24			; BRNE	_B007
	!WORD	_B007-*
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+4
_F044 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$02			; CN	1
	!BYTE	$5A,$08			; LEAVE	8
; samplesrc/rogue.combat.pla: 0165:     fin
_B007 
_B008 
; samplesrc/rogue.combat.pla: 0166:     //
; samplesrc/rogue.combat.pla: 0167:     // Turn player in random direction
; samplesrc/rogue.combat.pla: 0168:     //
; samplesrc/rogue.combat.pla: 0169:     player->angle = conio:rnd() & 7
; samplesrc/rogue.combat.pla: 0170:     //
; samplesrc/rogue.combat.pla: 0171:     // Calculate attack (with a little random variation)
; samplesrc/rogue.combat.pla: 0172:     //
; samplesrc/rogue.combat.pla: 0173:     p_atck = player->skill + player->energy / 10 - enemy->power / 25  + (conio:rnd() & 7)
; samplesrc/rogue.combat.pla: 0174:     e_atck = enemy->power  - player->skill / 5   - player->energy / 20 + (conio:rnd() & 7)
; samplesrc/rogue.combat.pla: 0175:     if enemy->life > p_atck
; samplesrc/rogue.combat.pla: 0176:       enemy->life = enemy->life - p_atck
; samplesrc/rogue.combat.pla: 0177:     else
	!BYTE	$6A			; LAW	_X028+24
_F045 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$3C,$07			; ANDI	7
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$2A,$19			; CB	25
	!BYTE	$88			; DIV
	!BYTE	$6A			; LAW	_X028+24
_F046 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$3C,$07			; ANDI	7
	!BYTE	$82			; ADD 
	!BYTE	$84			; SUB 
	!BYTE	$82			; ADD 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$0A			; CN	5
	!BYTE	$88			; DIV
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$2A,$14			; CB	20
	!BYTE	$88			; DIV
	!BYTE	$6A			; LAW	_X028+24
_F047 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$3C,$07			; ANDI	7
	!BYTE	$82			; ADD 
	!BYTE	$84			; SUB 
	!BYTE	$84			; SUB 
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$60			; LB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$60			; LB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$84			; SUB 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B009 
; samplesrc/rogue.combat.pla: 0178:       win
; samplesrc/rogue.combat.pla: 0179:       enemy->life = 0
; samplesrc/rogue.combat.pla: 0180:       p_atck      = player->skill + enemy->power / 3
; samplesrc/rogue.combat.pla: 0181:       if p_atck > 100 // Limit skill
; samplesrc/rogue.combat.pla: 0182:         p_atck = 100
; samplesrc/rogue.combat.pla: 0183:       fin
	!BYTE	$54			; CALL	_C000
_F048 	!WORD	_C000		
	!BYTE	$00			; CN	0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$60			; LB
	!BYTE	$06			; CN	3
	!BYTE	$88			; DIV
	!BYTE	$82			; ADD 
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$2A,$64			; CB	100
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$2A,$64			; CB	100
	!BYTE	$76,$04			; SLW	[4]
_B011 
_B012 
; samplesrc/rogue.combat.pla: 0184:       player->skill = p_atck
; samplesrc/rogue.combat.pla: 0185:       //
; samplesrc/rogue.combat.pla: 0186:       // Unlink dead enemy from entities list
; samplesrc/rogue.combat.pla: 0187:       //
; samplesrc/rogue.combat.pla: 0188:       if enemy == entities
; samplesrc/rogue.combat.pla: 0189:         entities = enemy=>next_other
; samplesrc/rogue.combat.pla: 0190:       fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D042+0
_F049 	!WORD	_D042+0		
	!BYTE	$24			; BRNE	_B013
	!WORD	_B013-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$62			; LW
	!BYTE	$7A			; SAW	_D042+0
_F050 	!WORD	_D042+0		
_B013 
_B014 
; samplesrc/rogue.combat.pla: 0191:       if enemy=>next_other
; samplesrc/rogue.combat.pla: 0192:         enemy=>next_other=>prev_other = enemy=>prev_other
; samplesrc/rogue.combat.pla: 0193:       fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$62			; LW
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$72			; SW
_B015 
_B016 
; samplesrc/rogue.combat.pla: 0194:       if enemy=>prev_other
; samplesrc/rogue.combat.pla: 0195:         enemy=>prev_other=>next_other = enemy=>next_other
; samplesrc/rogue.combat.pla: 0196:       fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$62			; LW
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$62			; LW
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$72			; SW
_B017 
_B018 
; samplesrc/rogue.combat.pla: 0197:     fin
_B010 
; samplesrc/rogue.combat.pla: 0198:     if player->health > e_atck
; samplesrc/rogue.combat.pla: 0199:       player->health = player->health - e_atck
; samplesrc/rogue.combat.pla: 0200:     else
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B019
	!WORD	_B019-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$84			; SUB 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B020
	!WORD	_B020-*
_B019 
; samplesrc/rogue.combat.pla: 0201:       player->energy = 0
; samplesrc/rogue.combat.pla: 0202:       player->health = 0
; samplesrc/rogue.combat.pla: 0203:     fin
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$70			; SB
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$70			; SB
_B020 
; samplesrc/rogue.combat.pla: 0204:     if player->energy >= 4
; samplesrc/rogue.combat.pla: 0205:       player->energy = player->energy - 4
; samplesrc/rogue.combat.pla: 0206:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$08			; CN	4
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$60			; LB
	!BYTE	$3A,$04			; SUBI	4
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$70			; SB
_B021 
_B022 
; samplesrc/rogue.combat.pla: 0207:   until player->health == 0 or enemy->life == 0
_B003 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B023
	!WORD	_B023-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$60			; LB
	!BYTE	$80			; NOT
_B023 
	!BYTE	$4C			; BRFLS	_B002
	!WORD	_B002-*
_B001 
; samplesrc/rogue.combat.pla: 0208:   conio:echo(ECHO_OFF)
; samplesrc/rogue.combat.pla: 0209:   return 0
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+4
_F051 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; samplesrc/rogue.combat.pla: 0210: end
; samplesrc/rogue.combat.pla: 0211: 
; samplesrc/rogue.combat.pla: 0212: done
_INIT 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	3
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: CONIO
	!BYTE	$C3,$CF,$CE,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	; DCI STRING: ENTITY
	!BYTE	$C5,$CE,$D4,$C9,$D4,$59
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_D041		
	; DCI STRING: ENTITIES
	!BYTE	$C5,$CE,$D4,$C9,$D4,$C9,$C5,$53
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_D042		
	; DCI STRING: FIGHT
	!BYTE	$C6,$C9,$C7,$C8,$54
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C001		
	!BYTE	$00			; END OF ESD
