; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/sanity.pla: 0001: //
; samplesrc/sanity.pla: 0002: // SANE library test program
; samplesrc/sanity.pla: 0003: //
; samplesrc/sanity.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/sanity.pla: 0004: 
; samplesrc/sanity.pla: 0005: include "inc/sane.plh"
; inc/sane.plh: 0001: import sane
	; DCI STRING: SANE
	!BYTE	$D3,$C1,$CE,$45
					; SANE -> X028
; inc/sane.plh: 0002: //-----------------------------------------------------------
; inc/sane.plh: 0003: // Operation code masks.
; inc/sane.plh: 0004: //-----------------------------------------------------------
; inc/sane.plh: 0005: const FOADD     = $0000     // add
					; FOADD = 0
; inc/sane.plh: 0006: const FOSUB     = $0002     // subtract
					; FOSUB = 2
; inc/sane.plh: 0007: const FOMUL     = $0004     // multiply
					; FOMUL = 4
; inc/sane.plh: 0008: const FODIV     = $0006     // divide
					; FODIV = 6
; inc/sane.plh: 0009: const FOCMP     = $0008     // compare, no exception from unordered
					; FOCMP = 8
; inc/sane.plh: 0010: const FOCPX     = $000A     // compare, signal invalid if unordered
					; FOCPX = 10
; inc/sane.plh: 0011: const FOREM     = $000C     // remainder
					; FOREM = 12
; inc/sane.plh: 0012: const FOZ2X     = $000E     // convert to extended
					; FOZ2X = 14
; inc/sane.plh: 0013: const FOX2Z     = $0010     // convert from extended
					; FOX2Z = 16
; inc/sane.plh: 0014: const FOSQRT    = $0012     // square root
					; FOSQRT = 18
; inc/sane.plh: 0015: const FORTI     = $0014     // round to integral value
					; FORTI = 20
; inc/sane.plh: 0016: const FOTTI     = $0016     // truncate to integral value
					; FOTTI = 22
; inc/sane.plh: 0017: const FOSCALB   = $0018     // binary scale
					; FOSCALB = 24
; inc/sane.plh: 0018: const FOLOGB    = $001A     // binary log
					; FOLOGB = 26
; inc/sane.plh: 0019: const FOCLASS   = $001C     // classify
					; FOCLASS = 28
; inc/sane.plh: 0020: const FONEXT    = $001E     // next-after
					; FONEXT = 30
; inc/sane.plh: 0021: //
; inc/sane.plh: 0022: const FOSETENV  = $0001     // set environment
					; FOSETENV = 1
; inc/sane.plh: 0023: const FOGETENV  = $0003     // get environment
					; FOGETENV = 3
; inc/sane.plh: 0024: const FOSETHV   = $0005     // set halt vector
					; FOSETHV = 5
; inc/sane.plh: 0025: const FOGETHV   = $0007     // get halt vector
					; FOGETHV = 7
; inc/sane.plh: 0026: const FOD2B     = $0009     // convert decimal to binary
					; FOD2B = 9
; inc/sane.plh: 0027: const FOB2D     = $000B     // convert binary to decimal
					; FOB2D = 11
; inc/sane.plh: 0028: const FONEG     = $000D     // negate
					; FONEG = 13
; inc/sane.plh: 0029: const FOABS     = $000F     // absolute value
					; FOABS = 15
; inc/sane.plh: 0030: const FOCPYSGN  = $0011     // copy sign
					; FOCPYSGN = 17
; inc/sane.plh: 0031: // UNDEFINED    = $0013
; inc/sane.plh: 0032: const FOSETXCP  = $0015     // set exception
					; FOSETXCP = 21
; inc/sane.plh: 0033: const FOPROCENTRY = $0017   // procedure-entry
					; FOPROCENTRY = 23
; inc/sane.plh: 0034: const FOPROCEXIT = $0019    // procedure-exit
					; FOPROCEXIT = 25
; inc/sane.plh: 0035: const FOTESTXCP = $001B     // test exception
					; FOTESTXCP = 27
; inc/sane.plh: 0036: // UNDEFINED    = $001D
; inc/sane.plh: 0037: // UNDEFINED    = $001F
; inc/sane.plh: 0038: //-----------------------------------------------------------
; inc/sane.plh: 0039: // Operand format masks.
; inc/sane.plh: 0040: //-----------------------------------------------------------
; inc/sane.plh: 0041: const FFEXT     = $0000     // extended -- 80-bit float
					; FFEXT = 0
; inc/sane.plh: 0042: const FFDBL     = $0100     // double   -- 64-bit float
					; FFDBL = 256
; inc/sane.plh: 0043: const FFSGL     = $0200     // single   -- 32-bit float
					; FFSGL = 512
; inc/sane.plh: 0044: // UNDEFINED    = $0300
; inc/sane.plh: 0045: const FFINT     = $0400     // integer  -- 16-bit integer
					; FFINT = 1024
; inc/sane.plh: 0046: const FFCOMP    = $0500     // comp     -- 64-bit integer
					; FFCOMP = 1280
; inc/sane.plh: 0047: // UNDEFINED    = $0600
; inc/sane.plh: 0048: // UNDEFINED    = $0700
; inc/sane.plh: 0049: //-----------------------------------------------------------
; inc/sane.plh: 0050: // Class.
; inc/sane.plh: 0051: //-----------------------------------------------------------
; inc/sane.plh: 0052: const FCSNAN    = $FC       // -4: signaling NAN
					; FCSNAN = 252
; inc/sane.plh: 0053: const FCQNAN    = $FD       // -3: quiet NAN
					; FCQNAN = 253
; inc/sane.plh: 0054: const FCINF     = $FE       // -2: infinite
					; FCINF = 254
; inc/sane.plh: 0055: const FCZERO    = $FF       // -1: zero
					; FCZERO = 255
; inc/sane.plh: 0056: const FCNORM    = $00       //  0: normal
					; FCNORM = 0
; inc/sane.plh: 0057: const FCDENORM  = $01       //  1: denormal
					; FCDENORM = 1
; inc/sane.plh: 0058: //-----------------------------------------------------------
; inc/sane.plh: 0059: // Exceptions.
; inc/sane.plh: 0060: //-----------------------------------------------------------
; inc/sane.plh: 0061: const FBINVALID = $01
					; FBINVALID = 1
; inc/sane.plh: 0062: const FBUFLOW   = $02
					; FBUFLOW = 2
; inc/sane.plh: 0063: const FBOFLOW   = $04
					; FBOFLOW = 4
; inc/sane.plh: 0064: const FBDIVZER  = $08
					; FBDIVZER = 8
; inc/sane.plh: 0065: const FBINEXACT = $10
					; FBINEXACT = 16
; inc/sane.plh: 0066: //-----------------------------------------------------------
; inc/sane.plh: 0067: // Elementary function operation code masks.
; inc/sane.plh: 0068: //-----------------------------------------------------------
; inc/sane.plh: 0069: const FOLNX     = $0000     // base-e log
					; FOLNX = 0
; inc/sane.plh: 0070: const FOLOG2X   = $0002     // base-2 log
					; FOLOG2X = 2
; inc/sane.plh: 0071: const FOLN1X    = $0004     // ln (1 + x)
					; FOLN1X = 4
; inc/sane.plh: 0072: const FOLOG21X  = $0006     // log2 (1 + x)
					; FOLOG21X = 6
; inc/sane.plh: 0073: const FOEXPX    = $0008     // base-e exponential
					; FOEXPX = 8
; inc/sane.plh: 0074: const FOEXP2X   = $000A     // base-2 exponential
					; FOEXP2X = 10
; inc/sane.plh: 0075: const FOEXP1X   = $000C     // exp (x) - 1
					; FOEXP1X = 12
; inc/sane.plh: 0076: const FOEXP21X  = $000E     // exp2 (x) - 1
					; FOEXP21X = 14
; inc/sane.plh: 0077: const FOXPWRI   = $0010     // integer exponentiation
					; FOXPWRI = 16
; inc/sane.plh: 0078: const FOXPWRY   = $0012     // general exponentiation
					; FOXPWRY = 18
; inc/sane.plh: 0079: const FOCOMPND  = $0014     // compound
					; FOCOMPND = 20
; inc/sane.plh: 0080: const FOANNUIT  = $0016     // annuity
					; FOANNUIT = 22
; inc/sane.plh: 0081: const FOATANX   = $0018     // arctangent
					; FOATANX = 24
; inc/sane.plh: 0082: const FOSINX    = $001A     // sine
					; FOSINX = 26
; inc/sane.plh: 0083: const FOCOSX    = $001C     // cosine
					; FOCOSX = 28
; inc/sane.plh: 0084: const FOTANX    = $001E     // tangent
					; FOTANX = 30
; inc/sane.plh: 0085: const FORANDX   = $0020     // random
					; FORANDX = 32
; inc/sane.plh: 0086: //-----------------------------------------------------------
; inc/sane.plh: 0087: // NaN error codes.
; inc/sane.plh: 0088: //-----------------------------------------------------------
; inc/sane.plh: 0089: const NANSQRT   = 1         // Invalid square root such as sqrt(-1).
					; NANSQRT = 1
; inc/sane.plh: 0090: const NANADD    = 2         // Invalid addition such as +INF - +INF.
					; NANADD = 2
; inc/sane.plh: 0091: const NANDIV    = 4         // Invalid division such as 0/0.
					; NANDIV = 4
; inc/sane.plh: 0092: const NANMUL    = 8         // Invalid multiply such as 0 * INF.
					; NANMUL = 8
; inc/sane.plh: 0093: const NANREM    = 9         // Invalid remainder or mod such as x REM 0.
					; NANREM = 9
; inc/sane.plh: 0094: const NANASCBIN = 17        // Attempt to convert invalid ASCII string.
					; NANASCBIN = 17
; inc/sane.plh: 0095: const NANCOMP   = 20        // Result of converting comp NaN to floating.
					; NANCOMP = 20
; inc/sane.plh: 0096: const NANZERO   = 21        // Attempt to create a NaN with a zero code.
					; NANZERO = 21
; inc/sane.plh: 0097: const NANTRIG   = 33        // Invalid argument to trig routine.
					; NANTRIG = 33
; inc/sane.plh: 0098: const NANINVTRIG = 34       // Invalid argument to inverse trig routine.
					; NANINVTRIG = 34
; inc/sane.plh: 0099: const NANLOG    = 36        // Invalid argument to log routine.
					; NANLOG = 36
; inc/sane.plh: 0100: const NANPOWER  = 37        // Invalid argument to x^i or x^y routine.
					; NANPOWER = 37
; inc/sane.plh: 0101: const NANFINAN  = 38        // Invalid argument to financial function.
					; NANFINAN = 38
; inc/sane.plh: 0102: const NANINIT   = 255       // Uninitialized storage.
					; NANINIT = 255
; inc/sane.plh: 0103: //-----------------------------------------------------------
; inc/sane.plh: 0104: // Comparison results.
; inc/sane.plh: 0105: //-----------------------------------------------------------
; inc/sane.plh: 0106: const FCMPGT    = $4040     // Greater Than
					; FCMPGT = 16448
; inc/sane.plh: 0107: const FCMPLT    = $8080     // Less Than
					; FCMPLT = 32896
; inc/sane.plh: 0108: const FCMPEQ    = $0002     // EQual
					; FCMPEQ = 2
; inc/sane.plh: 0109: const FCMPUN    = $0101     // UNordered
					; FCMPUN = 257
; inc/sane.plh: 0110: //-----------------------------------------------------------
; inc/sane.plh: 0111: //
; inc/sane.plh: 0112: // Data types
; inc/sane.plh: 0113: //
; inc/sane.plh: 0114: struc t_single
; inc/sane.plh: 0115:     byte[3] s_mantissa
					; s_mantissa = 0
; inc/sane.plh: 0116:     byte    s_exponent
					; s_exponent = 3
; inc/sane.plh: 0117: end
					; t_single = 4
; inc/sane.plh: 0118: struc t_double
; inc/sane.plh: 0119:     byte[6] d_mantissa
					; d_mantissa = 0
; inc/sane.plh: 0120:     word    d_exponent
					; d_exponent = 6
; inc/sane.plh: 0121: end
					; t_double = 8
; inc/sane.plh: 0122: struc t_extended
; inc/sane.plh: 0123:     byte[8] x_mantissa
					; x_mantissa = 0
; inc/sane.plh: 0124:     word    x_exponent
					; x_exponent = 8
; inc/sane.plh: 0125: end
					; t_extended = 10
; inc/sane.plh: 0126: struc t_bigint
; inc/sane.plh: 0127:     byte[8] l_int
					; l_int = 0
; inc/sane.plh: 0128: end
					; t_bigint = 8
; inc/sane.plh: 0129: //
; inc/sane.plh: 0130: // SANE PLASMA interface
; inc/sane.plh: 0131: //
; inc/sane.plh: 0132: struc t_sane
; inc/sane.plh: 0133:     word initFP
					; initFP = 0
; inc/sane.plh: 0134:     word haltFP
					; haltFP = 2
; inc/sane.plh: 0135:     word op0FP
					; op0FP = 4
; inc/sane.plh: 0136:     word op1FP
					; op1FP = 6
; inc/sane.plh: 0137:     word op2FP
					; op2FP = 8
; inc/sane.plh: 0138:     word op3FP
					; op3FP = 10
; inc/sane.plh: 0139:     word op1ELEM
					; op1ELEM = 12
; inc/sane.plh: 0140:     word op2ELEM
					; op2ELEM = 14
; inc/sane.plh: 0141:     word op3ELEM
					; op3ELEM = 16
; inc/sane.plh: 0142:     word saveZP
					; saveZP = 18
; inc/sane.plh: 0143:     word restoreZP
					; restoreZP = 20
; inc/sane.plh: 0144: end
					; t_sane = 22
; inc/sane.plh: 0145: end
; samplesrc/sanity.pla: 0005: 
; samplesrc/sanity.pla: 0006: 
; samplesrc/sanity.pla: 0007: struc t_decrecord
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; samplesrc/sanity.pla: 0008:     word sgn
					; sgn = 0
; samplesrc/sanity.pla: 0009:     word exp
					; exp = 2
; samplesrc/sanity.pla: 0010:     byte sig[29]
					; sig = 4
; samplesrc/sanity.pla: 0011: end
					; t_decrecord = 33
; samplesrc/sanity.pla: 0012: struc t_decformat
; samplesrc/sanity.pla: 0013:     word style
					; style = 0
; samplesrc/sanity.pla: 0014:     word digits
					; digits = 2
; samplesrc/sanity.pla: 0015: end
					; t_decformat = 4
; samplesrc/sanity.pla: 0016: //
; samplesrc/sanity.pla: 0017: // Test values
; samplesrc/sanity.pla: 0018: //
; samplesrc/sanity.pla: 0019: word iA, iB, iC, zero, fpEnv
_D029 	!FILL	2			; iA, iB, iC, zero, fpEnv
_D030 	!FILL	2			; iB, iC, zero, fpEnv
_D031 	!FILL	2			; iC, zero, fpEnv
_D032 	!FILL	2			; zero, fpEnv
_D033 	!FILL	2			; fpEnv
; samplesrc/sanity.pla: 0020: byte xT[t_extended]
_D034 	!FILL	10			; xT[t_extended]
; samplesrc/sanity.pla: 0021: byte strNum = "-100.25"
_D035 					; strNum = "-100.25"
	!BYTE	$07
	!BYTE	$2D,$31,$30,$30,$2E,$32,$35
; samplesrc/sanity.pla: 0022: byte strA[16]
_D036 	!FILL	16			; strA[16]
; samplesrc/sanity.pla: 0023: def prbyte(h)#0
_SUBSEG 				; BYTECODE STARTS
					; h -> [0]
_C000 					; prbyte()
; samplesrc/sanity.pla: 0024:     putc('$')
	!BYTE	$58,$02,$01		; ENTER	2,1
; samplesrc/sanity.pla: 0025:     call($FDDA, h, 0, 0, 0)
; samplesrc/sanity.pla: 0026: end
	!BYTE	$2A,$24			; CB	36
	!BYTE	$54			; CALL	_X002
_F000 	!WORD	0		
	!BYTE	$2C,$DA,$FD		; CW	64986
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F001 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; samplesrc/sanity.pla: 0027: def prword(h)#0
					; h -> [0]
_C001 					; prword()
; samplesrc/sanity.pla: 0028:     putc('$')
	!BYTE	$58,$02,$01		; ENTER	2,1
; samplesrc/sanity.pla: 0029:     call($F941, h >> 8, h, 0, 0)
; samplesrc/sanity.pla: 0030: end
	!BYTE	$2A,$24			; CB	36
	!BYTE	$54			; CALL	_X002
_F002 	!WORD	0		
	!BYTE	$2C,$41,$F9		; CW	63809
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X010
_F003 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$5A,$02			; LEAVE	2
; samplesrc/sanity.pla: 0031: //
; samplesrc/sanity.pla: 0032: // Parse string into decrecord
; samplesrc/sanity.pla: 0033: //
; samplesrc/sanity.pla: 0034: def str2ext(str, ext)
					; str -> [0]
					; ext -> [2]
_C002 					; str2ext()
; samplesrc/sanity.pla: 0035:     byte i, s, d
					; i -> [4]
					; s -> [5]
					; d -> [6]
; samplesrc/sanity.pla: 0036:     byte decrec[t_decrecord]
					; decrec -> [7]
; samplesrc/sanity.pla: 0037:     word sgnadj, expadj
					; sgnadj -> [40]
					; expadj -> [42]
; samplesrc/sanity.pla: 0038: 
; samplesrc/sanity.pla: 0039:     decrec:sgn  = 0
	!BYTE	$58,$2C,$02		; ENTER	44,2
; samplesrc/sanity.pla: 0040:     decrec:exp  = 0
; samplesrc/sanity.pla: 0041:     decrec.sig  = 0
; samplesrc/sanity.pla: 0042:     s           = 1
; samplesrc/sanity.pla: 0043:     i           = 1
; samplesrc/sanity.pla: 0044:     //
; samplesrc/sanity.pla: 0045:     // Skip whitespace
; samplesrc/sanity.pla: 0046:     //
; samplesrc/sanity.pla: 0047:     while ^(str+i) <= ' ' and i <= ^str; i++; loop
	!BYTE	$00			; CN	0
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$00			; CN	0
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$00			; CN	0
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$02			; CN	1
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$02			; CN	1
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
	!BYTE	$74,$04			; SLB	[4]
_B003 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
	!BYTE	$AC			; BRAND	_B004
	!WORD	_B004-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
_B004 
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; samplesrc/sanity.pla: 0048:     //
; samplesrc/sanity.pla: 0049:     // Check for sign
; samplesrc/sanity.pla: 0050:     //
; samplesrc/sanity.pla: 0051:     if ^(str+i) == '-'
; samplesrc/sanity.pla: 0052:         decrec:sgn = 1
; samplesrc/sanity.pla: 0053:         i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$24			; BRNE	_B005
	!WORD	_B005-*
	!BYTE	$02			; CN	1
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0054:     elsif ^(str+i) == '+'
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B005 
; samplesrc/sanity.pla: 0055:         i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$24			; BRNE	_B007
	!WORD	_B007-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0056:     fin
	!BYTE	$74,$04			; SLB	[4]
_B007 
_B006 
; samplesrc/sanity.pla: 0057:     //
; samplesrc/sanity.pla: 0058:     // Skip leading zeros
; samplesrc/sanity.pla: 0059:     //
; samplesrc/sanity.pla: 0060:     while i <= ^str and ^(str+i) == '0'
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B008 
; samplesrc/sanity.pla: 0061:         i++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0062:     loop
	!BYTE	$74,$04			; SLB	[4]
_B010 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$AC			; BRAND	_B011
	!WORD	_B011-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B011 
	!BYTE	$4E			; BRTRU	_B008
	!WORD	_B008-*
_B009 
; samplesrc/sanity.pla: 0063:     //
; samplesrc/sanity.pla: 0064:     // Parse number
; samplesrc/sanity.pla: 0065:     //
; samplesrc/sanity.pla: 0066:     while i <= ^str
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B012 
; samplesrc/sanity.pla: 0067:         d = toupper(^(str+i))
; samplesrc/sanity.pla: 0068:         if d >= '0' and d <= '9'
; samplesrc/sanity.pla: 0069:             //
; samplesrc/sanity.pla: 0070:             // Parse digit
; samplesrc/sanity.pla: 0071:             //
; samplesrc/sanity.pla: 0072:             decrec.sig[s] = ^(str+i)
; samplesrc/sanity.pla: 0073:             decrec:sig++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F004 	!WORD	0		
	!BYTE	$6C,$06			; DLB	[6]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B015
	!WORD	_B015-*
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B015 
	!BYTE	$4C			; BRFLS	_B016
	!WORD	_B016-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$B0,$05			; ADDLB	[5]
	!BYTE	$70			; SB
	!BYTE	$66,$0B			; LLW	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0074:             s++
	!BYTE	$76,$0B			; SLW	[11]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0075:         elsif d == '.'
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B016 
; samplesrc/sanity.pla: 0076:             //
; samplesrc/sanity.pla: 0077:             // Parse decimal point
; samplesrc/sanity.pla: 0078:             //
; samplesrc/sanity.pla: 0079:             i++
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B018
	!WORD	_B018-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0080:             while i <= ^str
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B021
	!WORD	_B021-*
_B019 
; samplesrc/sanity.pla: 0081:                 d = toupper(^(str+i))
; samplesrc/sanity.pla: 0082:                 if d >= '0' and d <= '9'
; samplesrc/sanity.pla: 0083:                     decrec.sig[s] = ^(str+i)
; samplesrc/sanity.pla: 0084:                     decrec.sig++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F005 	!WORD	0		
	!BYTE	$6C,$06			; DLB	[6]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B022
	!WORD	_B022-*
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B022 
	!BYTE	$4C			; BRFLS	_B023
	!WORD	_B023-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$B0,$05			; ADDLB	[5]
	!BYTE	$70			; SB
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0085:                     decrec:exp--
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$8E			; DECR
; samplesrc/sanity.pla: 0086:                     s++
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0087:                 elsif d == 'E'
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$50			; BRNCH	_B024
	!WORD	_B024-*
_B023 
; samplesrc/sanity.pla: 0088:                     i--
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$45			; CB	69
	!BYTE	$24			; BRNE	_B025
	!WORD	_B025-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8E			; DECR
; samplesrc/sanity.pla: 0089:                     break
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B020
	!WORD	_B020-*
; samplesrc/sanity.pla: 0090:                 else
	!BYTE	$50			; BRNCH	_B024
	!WORD	_B024-*
_B025 
; samplesrc/sanity.pla: 0091:                     i = ^str
; samplesrc/sanity.pla: 0092:                 fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
_B024 
; samplesrc/sanity.pla: 0093:                 i++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0094:             loop
	!BYTE	$74,$04			; SLB	[4]
_B021 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$4E			; BRTRU	_B019
	!WORD	_B019-*
_B020 
; samplesrc/sanity.pla: 0095:         elsif d == 'E'
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B018 
; samplesrc/sanity.pla: 0096:             //
; samplesrc/sanity.pla: 0097:             // Parse exponent
; samplesrc/sanity.pla: 0098:             //
; samplesrc/sanity.pla: 0099:             i++
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$45			; CB	69
	!BYTE	$24			; BRNE	_B026
	!WORD	_B026-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0100:             expadj = 0
; samplesrc/sanity.pla: 0101:             sgnadj = 1
; samplesrc/sanity.pla: 0102:             if ^(str+i) == '-'
; samplesrc/sanity.pla: 0103:                 sgnadj = -1
; samplesrc/sanity.pla: 0104:                 i++
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$00			; CN	0
	!BYTE	$76,$2A			; SLW	[42]
	!BYTE	$02			; CN	1
	!BYTE	$76,$28			; SLW	[40]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$24			; BRNE	_B027
	!WORD	_B027-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$28			; SLW	[40]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0105:             elsif ^(str+i) == '+'
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$50			; BRNCH	_B028
	!WORD	_B028-*
_B027 
; samplesrc/sanity.pla: 0106:                 i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$24			; BRNE	_B029
	!WORD	_B029-*
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0107:             fin
	!BYTE	$74,$04			; SLB	[4]
_B029 
_B028 
; samplesrc/sanity.pla: 0108:             while i <= ^str
	!BYTE	$50			; BRNCH	_B032
	!WORD	_B032-*
_B030 
; samplesrc/sanity.pla: 0109:                 d = ^(str+i)
; samplesrc/sanity.pla: 0110:                 i++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0111:                 if d >= '0' and d <= '9'
; samplesrc/sanity.pla: 0112:                     expadj = expadj * 10 + (d - '0')
; samplesrc/sanity.pla: 0113:                 else
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B033
	!WORD	_B033-*
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B033 
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
	!BYTE	$66,$2A			; LLW	[42]
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$3A,$30			; SUBI	48
	!BYTE	$82			; ADD 
	!BYTE	$76,$2A			; SLW	[42]
	!BYTE	$50			; BRNCH	_B035
	!WORD	_B035-*
_B034 
; samplesrc/sanity.pla: 0114:                     i = ^str
; samplesrc/sanity.pla: 0115:                 fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
_B035 
; samplesrc/sanity.pla: 0116:             loop
_B032 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$4E			; BRTRU	_B030
	!WORD	_B030-*
_B031 
; samplesrc/sanity.pla: 0117:             decrec:exp = decrec:exp + (sgnadj * expadj)
; samplesrc/sanity.pla: 0118:         else
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$66,$28			; LLW	[40]
	!BYTE	$66,$2A			; LLW	[42]
	!BYTE	$86			; MUL
	!BYTE	$82			; ADD 
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$50			; BRNCH	_B017
	!WORD	_B017-*
_B026 
; samplesrc/sanity.pla: 0119:             i = ^str
; samplesrc/sanity.pla: 0120:         fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
_B017 
; samplesrc/sanity.pla: 0121:         i++
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0122:     loop
	!BYTE	$74,$04			; SLB	[4]
_B014 
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4A			; ISLE
	!BYTE	$4E			; BRTRU	_B012
	!WORD	_B012-*
_B013 
; samplesrc/sanity.pla: 0123:     //
; samplesrc/sanity.pla: 0124:     // Strip leading zeros from sig
; samplesrc/sanity.pla: 0125:     //
; samplesrc/sanity.pla: 0126:     while decrec.sig > 1 and decrec.sig.1 == '0'
	!BYTE	$50			; BRNCH	_B038
	!WORD	_B038-*
_B036 
; samplesrc/sanity.pla: 0127:         decrec.sig--
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8E			; DECR
; samplesrc/sanity.pla: 0128:         if decrec:exp < 0
; samplesrc/sanity.pla: 0129:             decrec:exp--
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B040
	!WORD	_B040-*
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$8E			; DECR
; samplesrc/sanity.pla: 0130:         fin
	!BYTE	$76,$09			; SLW	[9]
_B040 
_B041 
; samplesrc/sanity.pla: 0131:         memcpy(@decrec.sig.1, @decrec.sig.2, decrec.sig)
; samplesrc/sanity.pla: 0132:     loop
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$8C			; INCR
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$54			; CALL	_X018
_F006 	!WORD	0		
_B038 
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B039
	!WORD	_B039-*
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B039 
	!BYTE	$4E			; BRTRU	_B036
	!WORD	_B036-*
_B037 
; samplesrc/sanity.pla: 0133:     //
; samplesrc/sanity.pla: 0134:     // Check for zero
; samplesrc/sanity.pla: 0135:     //
; samplesrc/sanity.pla: 0136:     if !decrec.sig
; samplesrc/sanity.pla: 0137:         decrec.sig = 1
; samplesrc/sanity.pla: 0138:         decrec.sig.1 = '0'
; samplesrc/sanity.pla: 0139:     fin
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$4E			; BRTRU	_B042
	!WORD	_B042-*
	!BYTE	$02			; CN	1
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
_B042 
_B043 
; samplesrc/sanity.pla: 0140:     //putc(decrec.sgn ?? '-' :: '+'); puts(@decrec.sig); putc('e'); puti(decrec:exp); putln
; samplesrc/sanity.pla: 0141:     sane:saveZP()
; samplesrc/sanity.pla: 0142:     return sane:restoreZP(sane:op2FP(FFEXT|FOD2B, ext, @decrec))
	!BYTE	$6A			; LAW	_X028+18
_F007 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$12			; CN	9
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$28,$07			; LLA	[7]
	!BYTE	$6A			; LAW	_X028+8
_F008 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F009 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$5A,$2C			; LEAVE	44
; samplesrc/sanity.pla: 0143: end
; samplesrc/sanity.pla: 0144: def ext2str(ext, str, intdigits, fracdigits, format)
					; ext -> [0]
					; str -> [2]
					; intdigits -> [4]
					; fracdigits -> [6]
					; format -> [8]
_C003 					; ext2str()
; samplesrc/sanity.pla: 0145:     byte d, i, sigdigits, numdigits
					; d -> [10]
					; i -> [11]
					; sigdigits -> [12]
					; numdigits -> [13]
; samplesrc/sanity.pla: 0146:     word dp, tens
					; dp -> [14]
					; tens -> [16]
; samplesrc/sanity.pla: 0147:     byte decform[t_decformat]
					; decform -> [18]
; samplesrc/sanity.pla: 0148:     byte decrec[t_decrecord]
					; decrec -> [22]
; samplesrc/sanity.pla: 0149: 
; samplesrc/sanity.pla: 0150:     numdigits = intdigits + fracdigits
	!BYTE	$58,$37,$05		; ENTER	55,5
; samplesrc/sanity.pla: 0151:     decform:style  = format & $01
; samplesrc/sanity.pla: 0152:     decform:digits = decform:style ?? fracdigits :: numdigits
; samplesrc/sanity.pla: 0153:     sane:saveZP()
; samplesrc/sanity.pla: 0154:     sane:restoreZP(sane:op3FP(FFEXT|FOB2D, @decrec, ext, @decform))
; samplesrc/sanity.pla: 0155:     ^(str+1) = decrec.sgn ?? '-' :: ' '
; samplesrc/sanity.pla: 0156:     if decrec.sig.1 == 'I'
; samplesrc/sanity.pla: 0157:         ^(str+2) = 'I'
; samplesrc/sanity.pla: 0158:         ^(str+3) = 'n'
; samplesrc/sanity.pla: 0159:         ^(str+4) = 'f'
; samplesrc/sanity.pla: 0160:         ^str     = 4
; samplesrc/sanity.pla: 0161:         return str
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$74,$0D			; SLB	[13]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$6E,$12			; DLW	[18]
	!BYTE	$4C			; BRFLS	_B044
	!WORD	_B044-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$50			; BRNCH	_B045
	!WORD	_B045-*
_B044 
	!BYTE	$64,$0D			; LLB	[13]
_B045 
	!BYTE	$76,$14			; SLW	[20]
	!BYTE	$6A			; LAW	_X028+18
_F010 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$16			; CN	11
	!BYTE	$28,$16			; LLA	[22]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$6A			; LAW	_X028+10
_F011 	!WORD	0+10		
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X028+20
_F012 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$64,$16			; LLB	[22]
	!BYTE	$4C			; BRFLS	_B046
	!WORD	_B046-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$50			; BRNCH	_B047
	!WORD	_B047-*
_B046 
	!BYTE	$2A,$20			; CB	32
_B047 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$49			; CB	73
	!BYTE	$24			; BRNE	_B048
	!WORD	_B048-*
	!BYTE	$2A,$49			; CB	73
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2A,$6E			; CB	110
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2A,$66			; CB	102
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$08			; CN	4
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$37			; LEAVE	55
; samplesrc/sanity.pla: 0162:     fin
_B048 
_B049 
; samplesrc/sanity.pla: 0163:     if decrec.sig.1 == 'N'
; samplesrc/sanity.pla: 0164:         ^(str+2) = 'N'
; samplesrc/sanity.pla: 0165:         ^(str+3) = 'a'
; samplesrc/sanity.pla: 0166:         ^(str+4) = 'N'
; samplesrc/sanity.pla: 0167:         ^str     = 4
; samplesrc/sanity.pla: 0168:         return str
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$4E			; CB	78
	!BYTE	$24			; BRNE	_B050
	!WORD	_B050-*
	!BYTE	$2A,$4E			; CB	78
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2A,$61			; CB	97
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$2A,$4E			; CB	78
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$70			; SB
	!BYTE	$08			; CN	4
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$37			; LEAVE	55
; samplesrc/sanity.pla: 0169:     fin
_B050 
_B051 
; samplesrc/sanity.pla: 0170:     if decrec.sig.1 == '0'
; samplesrc/sanity.pla: 0171:         while decrec.sig < fracdigits
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$24			; BRNE	_B052
	!WORD	_B052-*
	!BYTE	$50			; BRNCH	_B056
	!WORD	_B056-*
_B054 
; samplesrc/sanity.pla: 0172:             decrec.sig++
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0173:             decrec.sig[decrec.sig] = '0'
; samplesrc/sanity.pla: 0174:         loop
	!BYTE	$74,$1A			; SLB	[26]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$1A			; ADDLB	[26]
	!BYTE	$70			; SB
_B056 
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B054
	!WORD	_B054-*
_B055 
; samplesrc/sanity.pla: 0175:         decrec:exp = -decrec.sig
; samplesrc/sanity.pla: 0176:     fin
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$90			; NEG
	!BYTE	$76,$18			; SLW	[24]
_B052 
_B053 
; samplesrc/sanity.pla: 0177:     dp = decrec.sig + decrec:exp
; samplesrc/sanity.pla: 0178:     sigdigits = decrec.sig
; samplesrc/sanity.pla: 0179:     if decrec:exp < 0 and format & $02
; samplesrc/sanity.pla: 0180:         //
; samplesrc/sanity.pla: 0181:         // Strip off trailing fractional zeros
; samplesrc/sanity.pla: 0182:         //
; samplesrc/sanity.pla: 0183:         while sigdigits > dp and decrec.sig[sigdigits] == '0'
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$B2,$18			; ADDLW	[24]
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$64,$1A			; LLB	[26]
	!BYTE	$74,$0C			; SLB	[12]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$AC			; BRAND	_B057
	!WORD	_B057-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$02			; ANDI	2
_B057 
	!BYTE	$4C			; BRFLS	_B058
	!WORD	_B058-*
	!BYTE	$50			; BRNCH	_B062
	!WORD	_B062-*
_B060 
; samplesrc/sanity.pla: 0184:             sigdigits--
	!BYTE	$64,$0C			; LLB	[12]
	!BYTE	$8E			; DECR
; samplesrc/sanity.pla: 0185:             decrec:exp++
	!BYTE	$74,$0C			; SLB	[12]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0186:         loop
	!BYTE	$76,$18			; SLW	[24]
_B062 
	!BYTE	$64,$0C			; LLB	[12]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B063
	!WORD	_B063-*
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$0C			; ADDLB	[12]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$40			; ISEQ
_B063 
	!BYTE	$4E			; BRTRU	_B060
	!WORD	_B060-*
_B061 
; samplesrc/sanity.pla: 0187:     fin
_B058 
_B059 
; samplesrc/sanity.pla: 0188:     //puts("sigdigits: "); puti(sigdigits); putln
; samplesrc/sanity.pla: 0189:     //putc(decrec.sgn ?? '-' :: '+'); puts(@decrec.sig); putc('e'); puti(decrec:exp); putln
; samplesrc/sanity.pla: 0190:     //if sigdigits - decrec:exp > numdigits or decrec:exp > 0 or format & $04
; samplesrc/sanity.pla: 0191:     if -decrec:exp > numdigits or decrec:exp > 0 or format & $04
; samplesrc/sanity.pla: 0192:         //
; samplesrc/sanity.pla: 0193:         // Convert to exponential format
; samplesrc/sanity.pla: 0194:         //
; samplesrc/sanity.pla: 0195:         ^(str+2) = decrec.sig.1
; samplesrc/sanity.pla: 0196:         ^(str+3) = '.'
; samplesrc/sanity.pla: 0197:         i = 3
; samplesrc/sanity.pla: 0198:         for d = 0 to fracdigits//decrec.sig
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$90			; NEG
	!BYTE	$64,$0D			; LLB	[13]
	!BYTE	$44			; ISGT
	!BYTE	$AE			; BROR	_B064
	!WORD	_B064-*
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$AE			; BROR	_B065
	!WORD	_B065-*
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$3C,$04			; ANDI	4
_B065 
_B064 
	!BYTE	$4C			; BRFLS	_B066
	!WORD	_B066-*
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$70			; SB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$70			; SB
	!BYTE	$06			; CN	3
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B068
	!WORD	_B068-*
_B069 
	!BYTE	$6C,$0A			; DLB	[10]
; samplesrc/sanity.pla: 0199:             i++
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0200:             ^(str+i) = decrec.sig.2[d]
; samplesrc/sanity.pla: 0201:         next
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
_B070 
	!BYTE	$A4			; INCBRLE	_B069
	!WORD	_B069-*
_B068 
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$30			; DROP 
; samplesrc/sanity.pla: 0202:         //
; samplesrc/sanity.pla: 0203:         // Copy over all significant digits
; samplesrc/sanity.pla: 0204:         //
; samplesrc/sanity.pla: 0205:         if ^(str+i) == '.'; i--; fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$60			; LB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B071
	!WORD	_B071-*
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8E			; DECR
	!BYTE	$74,$0B			; SLB	[11]
_B071 
_B072 
; samplesrc/sanity.pla: 0206:         i++
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0207:         ^(str+i) = 'E'
; samplesrc/sanity.pla: 0208:         i++
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$2A,$45			; CB	69
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0209:         dp--
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8E			; DECR
; samplesrc/sanity.pla: 0210:         if dp < 0
; samplesrc/sanity.pla: 0211:             ^(str+i) = '-'
; samplesrc/sanity.pla: 0212:             dp = -dp
; samplesrc/sanity.pla: 0213:         else
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B073
	!WORD	_B073-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$90			; NEG
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$50			; BRNCH	_B074
	!WORD	_B074-*
_B073 
; samplesrc/sanity.pla: 0214:             ^(str+i) = '+'
; samplesrc/sanity.pla: 0215:             if dp == 0
; samplesrc/sanity.pla: 0216:                 i++
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$4E			; BRTRU	_B075
	!WORD	_B075-*
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0217:                 ^(str+i) = '0'
; samplesrc/sanity.pla: 0218:             fin
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
_B075 
_B076 
; samplesrc/sanity.pla: 0219:         fin
_B074 
; samplesrc/sanity.pla: 0220:         //
; samplesrc/sanity.pla: 0221:         // Pretty output the exponent (preceding zero for values less than 10)
; samplesrc/sanity.pla: 0222:         d    = 0
; samplesrc/sanity.pla: 0223:         tens = 10000
; samplesrc/sanity.pla: 0224:         while dp
	!BYTE	$00			; CN	0
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$2C,$10,$27		; CW	10000
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$50			; BRNCH	_B079
	!WORD	_B079-*
_B077 
; samplesrc/sanity.pla: 0225:             d = d or tens <= 10
; samplesrc/sanity.pla: 0226:             if dp >= tens or d
; samplesrc/sanity.pla: 0227:                 d = 1
; samplesrc/sanity.pla: 0228:                 i++
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$AE			; BROR	_B080
	!WORD	_B080-*
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$14			; CN	10
	!BYTE	$4A			; ISLE
_B080 
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$48			; ISGE
	!BYTE	$AE			; BROR	_B081
	!WORD	_B081-*
	!BYTE	$64,$0A			; LLB	[10]
_B081 
	!BYTE	$4C			; BRFLS	_B082
	!WORD	_B082-*
	!BYTE	$02			; CN	1
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0229:                 ^(str+i) = (dp / tens) + '0'
; samplesrc/sanity.pla: 0230:             fin
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$88			; DIV
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
_B082 
_B083 
; samplesrc/sanity.pla: 0231:             dp = dp % tens
; samplesrc/sanity.pla: 0232:             tens = tens / 10
; samplesrc/sanity.pla: 0233:             if !tens; break; fin
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$8A			; MOD
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$6E,$10			; DLW	[16]
	!BYTE	$4E			; BRTRU	_B084
	!WORD	_B084-*
	!BYTE	$50			; BRNCH	_B078
	!WORD	_B078-*
_B084 
_B085 
; samplesrc/sanity.pla: 0234:         loop
_B079 
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$4E			; BRTRU	_B077
	!WORD	_B077-*
_B078 
; samplesrc/sanity.pla: 0235:         //puts("DP=");puti(dp);puts(" digits="); puti(decrec.sig); puts(" exp="); puti(decrec:exp); putln
; samplesrc/sanity.pla: 0236:     else
	!BYTE	$50			; BRNCH	_B067
	!WORD	_B067-*
_B066 
; samplesrc/sanity.pla: 0237:         //
; samplesrc/sanity.pla: 0238:         // Convert as floating point
; samplesrc/sanity.pla: 0239:         //
; samplesrc/sanity.pla: 0240:         //puts("DP=");puti(dp);puts(" digits="); puti(decrec.sig); puts(" exp="); puti(decrec:exp); putln
; samplesrc/sanity.pla: 0241:         i = 1
; samplesrc/sanity.pla: 0242:         if dp <= 0
; samplesrc/sanity.pla: 0243:             *(str+2) = '0'|('.'<<8)
; samplesrc/sanity.pla: 0244:             i = 3
; samplesrc/sanity.pla: 0245:             while dp < 0
	!BYTE	$02			; CN	1
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B086
	!WORD	_B086-*
	!BYTE	$2C,$30,$2E		; CW	11824
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$72			; SW
	!BYTE	$06			; CN	3
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$50			; BRNCH	_B090
	!WORD	_B090-*
_B088 
; samplesrc/sanity.pla: 0246:                 dp++
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0247:                 i++
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0248:                 ^(str+i) = '0'
; samplesrc/sanity.pla: 0249:             loop
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$2A,$30			; CB	48
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
_B090 
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B088
	!WORD	_B088-*
_B089 
; samplesrc/sanity.pla: 0250:         fin
_B086 
_B087 
; samplesrc/sanity.pla: 0251:         for d = 1 to sigdigits
	!BYTE	$64,$0C			; LLB	[12]
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B091
	!WORD	_B091-*
_B092 
	!BYTE	$6C,$0A			; DLB	[10]
; samplesrc/sanity.pla: 0252:             i++
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0253:             ^(str+i) = decrec.sig[d]
; samplesrc/sanity.pla: 0254:             if d == dp
; samplesrc/sanity.pla: 0255:                 i++
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$B0,$0A			; ADDLB	[10]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
	!BYTE	$64,$0A			; LLB	[10]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$24			; BRNE	_B094
	!WORD	_B094-*
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8C			; INCR
; samplesrc/sanity.pla: 0256:                 ^(str+i) = '.'
; samplesrc/sanity.pla: 0257:             fin
	!BYTE	$74,$0B			; SLB	[11]
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$70			; SB
_B094 
_B095 
; samplesrc/sanity.pla: 0258:         next
_B093 
	!BYTE	$A4			; INCBRLE	_B092
	!WORD	_B092-*
_B091 
	!BYTE	$74,$0A			; SLB	[10]
	!BYTE	$30			; DROP 
; samplesrc/sanity.pla: 0259:         if ^(str+i) == '.'; i--; fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$0B			; ADDLB	[11]
	!BYTE	$60			; LB
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$24			; BRNE	_B096
	!WORD	_B096-*
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$8E			; DECR
	!BYTE	$74,$0B			; SLB	[11]
_B096 
_B097 
; samplesrc/sanity.pla: 0260:     fin
_B067 
; samplesrc/sanity.pla: 0261:     ^str = i
; samplesrc/sanity.pla: 0262:     return str
	!BYTE	$64,$0B			; LLB	[11]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$37			; LEAVE	55
; samplesrc/sanity.pla: 0263: end
; samplesrc/sanity.pla: 0264: def divstri(strNum, denom, format)#0
					; strNum -> [0]
					; denom -> [2]
					; format -> [4]
_C004 					; divstri()
; samplesrc/sanity.pla: 0265:     byte strResult[20]
					; strResult -> [6]
; samplesrc/sanity.pla: 0266:     byte xResult[t_extended]
					; xResult -> [26]
; samplesrc/sanity.pla: 0267: 
; samplesrc/sanity.pla: 0268:     //
; samplesrc/sanity.pla: 0269:     // Convert string to and from SANE
; samplesrc/sanity.pla: 0270:     //
; samplesrc/sanity.pla: 0271:     str2ext(strNum, @xResult)
	!BYTE	$58,$24,$03		; ENTER	36,3
; samplesrc/sanity.pla: 0272:     sane:saveZP()
; samplesrc/sanity.pla: 0273:     sane:op2FP(FFINT|FODIV, @xResult, @denom) // Div int denom into ext Result
; samplesrc/sanity.pla: 0274:     sane:restoreZP(0)
; samplesrc/sanity.pla: 0275:     ext2str(@xResult, @strResult, 6, 4, format)//format & $05 ?? 1 :: 6, 4, format)
; samplesrc/sanity.pla: 0276:     puts(strNum); putc('/'); puti(denom); putc('='); puts(@strResult); putln
; samplesrc/sanity.pla: 0277: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$54			; CALL	_C002
_F013 	!WORD	_C002		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_X028+18
_F014 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$06,$04		; CW	1030
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$6A			; LAW	_X028+8
_F015 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F016 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$28,$1A			; LLA	[26]
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$0C			; CN	6
	!BYTE	$08			; CN	4
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_C003
_F017 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F018 	!WORD	0		
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$54			; CALL	_X002
_F019 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F020 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F021 	!WORD	0		
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_X004
_F022 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F023 	!WORD	0		
	!BYTE	$5A,$24			; LEAVE	36
; samplesrc/sanity.pla: 0278: //
; samplesrc/sanity.pla: 0279: // My custom SANE exception handler
; samplesrc/sanity.pla: 0280: //
; samplesrc/sanity.pla: 0281: def myException(pstatus)
					; pstatus -> [0]
_C005 					; myException()
; samplesrc/sanity.pla: 0282:     sane:restoreZP(0)
	!BYTE	$58,$02,$01		; ENTER	2,1
; samplesrc/sanity.pla: 0283:     puts("Floating point exception:")
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F024 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$19
	!BYTE	$46,$6C,$6F,$61,$74,$69,$6E,$67
	!BYTE	$20,$70,$6F,$69,$6E,$74,$20,$65
	!BYTE	$78,$63,$65,$70,$74,$69,$6F,$6E
	!BYTE	$3A
	!BYTE	$54			; CALL	_X004
_F025 	!WORD	0		
; samplesrc/sanity.pla: 0284:     if pstatus->8 & FBINVALID; puts(" INVALID"); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$60			; LB
	!BYTE	$3C,$01			; ANDI	1
	!BYTE	$4C			; BRFLS	_B098
	!WORD	_B098-*
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$20,$49,$4E,$56,$41,$4C,$49,$44
	!BYTE	$54			; CALL	_X004
_F026 	!WORD	0		
_B098 
_B099 
; samplesrc/sanity.pla: 0285:     if pstatus->8 & FBUFLOW;   puts(" UNDERFLOW"); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$60			; LB
	!BYTE	$3C,$02			; ANDI	2
	!BYTE	$4C			; BRFLS	_B100
	!WORD	_B100-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$20,$55,$4E,$44,$45,$52,$46,$4C
	!BYTE	$4F,$57
	!BYTE	$54			; CALL	_X004
_F027 	!WORD	0		
_B100 
_B101 
; samplesrc/sanity.pla: 0286:     if pstatus->8 & FBOFLOW;   puts(" OVERFLOW"); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$60			; LB
	!BYTE	$3C,$04			; ANDI	4
	!BYTE	$4C			; BRFLS	_B102
	!WORD	_B102-*
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$20,$4F,$56,$45,$52,$46,$4C,$4F
	!BYTE	$57
	!BYTE	$54			; CALL	_X004
_F028 	!WORD	0		
_B102 
_B103 
; samplesrc/sanity.pla: 0287:     if pstatus->8 & FBDIVZER;  puts(" DIV_BY_ZERO"); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$60			; LB
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$4C			; BRFLS	_B104
	!WORD	_B104-*
	!BYTE	$2E			; CS
	!BYTE	$0C
	!BYTE	$20,$44,$49,$56,$5F,$42,$59,$5F
	!BYTE	$5A,$45,$52,$4F
	!BYTE	$54			; CALL	_X004
_F029 	!WORD	0		
_B104 
_B105 
; samplesrc/sanity.pla: 0288:     if pstatus->8 & FBINEXACT; puts(" INEXACT"); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$60			; LB
	!BYTE	$3C,$10			; ANDI	16
	!BYTE	$4C			; BRFLS	_B106
	!WORD	_B106-*
	!BYTE	$2E			; CS
	!BYTE	$08
	!BYTE	$20,$49,$4E,$45,$58,$41,$43,$54
	!BYTE	$54			; CALL	_X004
_F030 	!WORD	0		
_B106 
_B107 
; samplesrc/sanity.pla: 0289:     putln
; samplesrc/sanity.pla: 0290:     sane:saveZP()
; samplesrc/sanity.pla: 0291:     return pstatus=>4
	!BYTE	$54			; CALL	_X003
_F031 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+18
_F032 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$62			; LW
	!BYTE	$5A,$02			; LEAVE	2
; samplesrc/sanity.pla: 0292: end
; samplesrc/sanity.pla: 0293: 
; samplesrc/sanity.pla: 0294: 
; samplesrc/sanity.pla: 0295: iA = 3
_INIT 
; samplesrc/sanity.pla: 0296: iB = 4
; samplesrc/sanity.pla: 0297: iC = -1
; samplesrc/sanity.pla: 0298: zero = 0
; samplesrc/sanity.pla: 0299: puts("SANE sanity test...\n")
	!BYTE	$06			; CN	3
	!BYTE	$7A			; SAW	_D029+0
_F033 	!WORD	_D029+0		
	!BYTE	$08			; CN	4
	!BYTE	$7A			; SAW	_D030+0
_F034 	!WORD	_D030+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$7A			; SAW	_D031+0
_F035 	!WORD	_D031+0		
	!BYTE	$00			; CN	0
	!BYTE	$7A			; SAW	_D032+0
_F036 	!WORD	_D032+0		
	!BYTE	$2E			; CS
	!BYTE	$14
	!BYTE	$53,$41,$4E,$45,$20,$73,$61,$6E
	!BYTE	$69,$74,$79,$20,$74,$65,$73,$74
	!BYTE	$2E,$2E,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F037 	!WORD	0		
; samplesrc/sanity.pla: 0300: sane:initFP()
; samplesrc/sanity.pla: 0301: sane:saveZP()
; samplesrc/sanity.pla: 0302: sane:op2FP(FFINT|FOZ2X, @xT, @iA) // Convert int A to ext T
; samplesrc/sanity.pla: 0303: sane:op2FP(FFINT|FOADD, @xT, @iB) // Add int B to ext T
; samplesrc/sanity.pla: 0304: sane:op2FP(FFINT|FOX2Z, @iC, @xT) // Convert ext T to int C
; samplesrc/sanity.pla: 0305: sane:restoreZP(0)
; samplesrc/sanity.pla: 0306: puti(iA); putc('+'); puti(iB); putc('='); puti(iC); putc('\n')
; samplesrc/sanity.pla: 0307: sane:saveZP()
; samplesrc/sanity.pla: 0308: sane:op2FP(FFINT|FOZ2X, @xT, @iA) // Convert int A to ext T
; samplesrc/sanity.pla: 0309: sane:op2FP(FFINT|FOSUB, @xT, @iB) // Sub int B from ext T
; samplesrc/sanity.pla: 0310: sane:op2FP(FFINT|FOX2Z, @iC, @xT) // Convert ext T to int C
; samplesrc/sanity.pla: 0311: sane:restoreZP(0)
; samplesrc/sanity.pla: 0312: puti(iA); putc('-'); puti(iB); putc('='); puti(iC); putc('\n')
; samplesrc/sanity.pla: 0313: sane:saveZP()
; samplesrc/sanity.pla: 0314: sane:op2FP(FFINT|FOZ2X, @xT, @iA) // Convert int A to ext T
; samplesrc/sanity.pla: 0315: sane:op2FP(FFINT|FOMUL, @xT, @iB) // Mul int B by ext T
; samplesrc/sanity.pla: 0316: sane:op2FP(FFINT|FOX2Z, @iC, @xT) // Convert ext T to int C
; samplesrc/sanity.pla: 0317: sane:restoreZP(0)
; samplesrc/sanity.pla: 0318: puti(iA); putc('*'); puti(iB); putc('='); puti(iC); putc('\n')
; samplesrc/sanity.pla: 0319: sane:saveZP()
; samplesrc/sanity.pla: 0320: sane:op2FP(FFINT|FOZ2X, @xT, @iA) // Convert int A to ext T
; samplesrc/sanity.pla: 0321: sane:op2FP(FFINT|FODIV, @xT, @iB) // Div int B into ext T
; samplesrc/sanity.pla: 0322: sane:op2FP(FFINT|FOX2Z, @iC, @xT) // Convert ext T to int C
; samplesrc/sanity.pla: 0323: sane:restoreZP(0)
; samplesrc/sanity.pla: 0324: puti(iA); putc('/'); puti(iB); putc('='); puti(iC); putc('\n')
; samplesrc/sanity.pla: 0325: //
; samplesrc/sanity.pla: 0326: // Hook custom HALT exception handler and divide by zero :-)
; samplesrc/sanity.pla: 0327: // Enable all exceptions
; samplesrc/sanity.pla: 0328: //
; samplesrc/sanity.pla: 0329: sane:saveZP()
; samplesrc/sanity.pla: 0330: sane:haltFP = @myException
; samplesrc/sanity.pla: 0331: fpEnv = sane:op0FP(FOGETENV)
; samplesrc/sanity.pla: 0332: sane:op1FP(FOSETENV, fpEnv | FBINVALID | FBUFLOW | FBOFLOW | FBDIVZER | FBINEXACT)
; samplesrc/sanity.pla: 0333: sane:restoreZP(0)
; samplesrc/sanity.pla: 0334: //
; samplesrc/sanity.pla: 0335: // String conversion tests
; samplesrc/sanity.pla: 0336: //
; samplesrc/sanity.pla: 0337: divstri("-3", 0, 2)
	!BYTE	$6A			; LAW	_X028+0
_F038 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_X028+18
_F039 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$26			; LA	_D034+0
_F040 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D029+0
_F041 	!WORD	_D029+0		
	!BYTE	$6A			; LAW	_X028+8
_F042 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$00,$04		; CW	1024
	!BYTE	$26			; LA	_D034+0
_F043 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D030+0
_F044 	!WORD	_D030+0		
	!BYTE	$6A			; LAW	_X028+8
_F045 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$04		; CW	1040
	!BYTE	$26			; LA	_D031+0
_F046 	!WORD	_D031+0		
	!BYTE	$26			; LA	_D034+0
_F047 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X028+8
_F048 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F049 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D029+0
_F050 	!WORD	_D029+0		
	!BYTE	$54			; CALL	_X005
_F051 	!WORD	0		
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$54			; CALL	_X002
_F052 	!WORD	0		
	!BYTE	$6A			; LAW	_D030+0
_F053 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X005
_F054 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F055 	!WORD	0		
	!BYTE	$6A			; LAW	_D031+0
_F056 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X005
_F057 	!WORD	0		
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_X002
_F058 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+18
_F059 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$26			; LA	_D034+0
_F060 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D029+0
_F061 	!WORD	_D029+0		
	!BYTE	$6A			; LAW	_X028+8
_F062 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$02,$04		; CW	1026
	!BYTE	$26			; LA	_D034+0
_F063 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D030+0
_F064 	!WORD	_D030+0		
	!BYTE	$6A			; LAW	_X028+8
_F065 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$04		; CW	1040
	!BYTE	$26			; LA	_D031+0
_F066 	!WORD	_D031+0		
	!BYTE	$26			; LA	_D034+0
_F067 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X028+8
_F068 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F069 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D029+0
_F070 	!WORD	_D029+0		
	!BYTE	$54			; CALL	_X005
_F071 	!WORD	0		
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$54			; CALL	_X002
_F072 	!WORD	0		
	!BYTE	$6A			; LAW	_D030+0
_F073 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X005
_F074 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F075 	!WORD	0		
	!BYTE	$6A			; LAW	_D031+0
_F076 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X005
_F077 	!WORD	0		
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_X002
_F078 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+18
_F079 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$26			; LA	_D034+0
_F080 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D029+0
_F081 	!WORD	_D029+0		
	!BYTE	$6A			; LAW	_X028+8
_F082 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$04,$04		; CW	1028
	!BYTE	$26			; LA	_D034+0
_F083 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D030+0
_F084 	!WORD	_D030+0		
	!BYTE	$6A			; LAW	_X028+8
_F085 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$04		; CW	1040
	!BYTE	$26			; LA	_D031+0
_F086 	!WORD	_D031+0		
	!BYTE	$26			; LA	_D034+0
_F087 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X028+8
_F088 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F089 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D029+0
_F090 	!WORD	_D029+0		
	!BYTE	$54			; CALL	_X005
_F091 	!WORD	0		
	!BYTE	$2A,$2A			; CB	42
	!BYTE	$54			; CALL	_X002
_F092 	!WORD	0		
	!BYTE	$6A			; LAW	_D030+0
_F093 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X005
_F094 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F095 	!WORD	0		
	!BYTE	$6A			; LAW	_D031+0
_F096 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X005
_F097 	!WORD	0		
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_X002
_F098 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+18
_F099 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$0E,$04		; CW	1038
	!BYTE	$26			; LA	_D034+0
_F100 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D029+0
_F101 	!WORD	_D029+0		
	!BYTE	$6A			; LAW	_X028+8
_F102 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$06,$04		; CW	1030
	!BYTE	$26			; LA	_D034+0
_F103 	!WORD	_D034+0		
	!BYTE	$26			; LA	_D030+0
_F104 	!WORD	_D030+0		
	!BYTE	$6A			; LAW	_X028+8
_F105 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$10,$04		; CW	1040
	!BYTE	$26			; LA	_D031+0
_F106 	!WORD	_D031+0		
	!BYTE	$26			; LA	_D034+0
_F107 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X028+8
_F108 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F109 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D029+0
_F110 	!WORD	_D029+0		
	!BYTE	$54			; CALL	_X005
_F111 	!WORD	0		
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$54			; CALL	_X002
_F112 	!WORD	0		
	!BYTE	$6A			; LAW	_D030+0
_F113 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X005
_F114 	!WORD	0		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$54			; CALL	_X002
_F115 	!WORD	0		
	!BYTE	$6A			; LAW	_D031+0
_F116 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X005
_F117 	!WORD	0		
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_X002
_F118 	!WORD	0		
	!BYTE	$6A			; LAW	_X028+18
_F119 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_C005+0
_F120 	!WORD	_C005+0		
	!BYTE	$7A			; SAW	_X028+2
_F121 	!WORD	0+2		
	!BYTE	$06			; CN	3
	!BYTE	$6A			; LAW	_X028+4
_F122 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$7A			; SAW	_D033+0
_F123 	!WORD	_D033+0		
	!BYTE	$02			; CN	1
	!BYTE	$6A			; LAW	_D033+0
_F124 	!WORD	_D033+0		
	!BYTE	$3E,$01			; ORI	1
	!BYTE	$3E,$02			; ORI	2
	!BYTE	$3E,$04			; ORI	4
	!BYTE	$3E,$08			; ORI	8
	!BYTE	$3E,$10			; ORI	16
	!BYTE	$6A			; LAW	_X028+6
_F125 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X028+20
_F126 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2D,$33
	!BYTE	$00			; CN	0
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_C004
_F127 	!WORD	_C004		
; samplesrc/sanity.pla: 0338: divstri("3", 0, 2)
	!BYTE	$2E			; CS
	!BYTE	$01
	!BYTE	$33
	!BYTE	$00			; CN	0
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_C004
_F128 	!WORD	_C004		
; samplesrc/sanity.pla: 0339: divstri("-100.5", 4, 2)
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$2D,$31,$30,$30,$2E,$35
	!BYTE	$08			; CN	4
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_C004
_F129 	!WORD	_C004		
; samplesrc/sanity.pla: 0340: divstri("00.5", 2, 2)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$30,$30,$2E,$35
	!BYTE	$04			; CN	2
	!BYTE	$34			; DUP
	!BYTE	$54			; CALL	_C004
_F130 	!WORD	_C004		
; samplesrc/sanity.pla: 0341: divstri(".5", 10, 3)
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2E,$35
	!BYTE	$14			; CN	10
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_C004
_F131 	!WORD	_C004		
; samplesrc/sanity.pla: 0342: divstri("800000", 2, 2)
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$38,$30,$30,$30,$30,$30
	!BYTE	$04			; CN	2
	!BYTE	$34			; DUP
	!BYTE	$54			; CALL	_C004
_F132 	!WORD	_C004		
; samplesrc/sanity.pla: 0343: divstri("800000", 2, 4)
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$38,$30,$30,$30,$30,$30
	!BYTE	$04			; CN	2
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_C004
_F133 	!WORD	_C004		
; samplesrc/sanity.pla: 0344: divstri("1e+2", 2, 2)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$31,$65,$2B,$32
	!BYTE	$04			; CN	2
	!BYTE	$34			; DUP
	!BYTE	$54			; CALL	_C004
_F134 	!WORD	_C004		
; samplesrc/sanity.pla: 0345: divstri("-1e-2", 2, 2)
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$2D,$31,$65,$2D,$32
	!BYTE	$04			; CN	2
	!BYTE	$34			; DUP
	!BYTE	$54			; CALL	_C004
_F135 	!WORD	_C004		
; samplesrc/sanity.pla: 0346: divstri("0", 1, 2)
	!BYTE	$2E			; CS
	!BYTE	$01
	!BYTE	$30
	!BYTE	$02			; CN	1
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_C004
_F136 	!WORD	_C004		
; samplesrc/sanity.pla: 0347: divstri("1000", 1, 1)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$31,$30,$30,$30
	!BYTE	$02			; CN	1
	!BYTE	$34			; DUP
	!BYTE	$54			; CALL	_C004
_F137 	!WORD	_C004		
; samplesrc/sanity.pla: 0348: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	7
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	10			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	28			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: CALL
	!BYTE	$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	10			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: SANE
	!BYTE	$D3,$C1,$CE,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	28			; ESD INDEX
	!BYTE	$00			; END OF ESD
