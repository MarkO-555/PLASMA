; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/sfm.pla: 0001: //
; samplesrc/sfm.pla: 0002: // Ziggy Stardust and the Spiders from Mars
; samplesrc/sfm.pla: 0003: //
; samplesrc/sfm.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/sfm.pla: 0004: 
; samplesrc/sfm.pla: 0005: include "inc/hgrlib.plh"
; inc/hgrlib.plh: 0001: import hgrlib
	; DCI STRING: HGRLIB
	!BYTE	$C8,$C7,$D2,$CC,$C9,$42
					; HGRLIB -> X028
; inc/hgrlib.plh: 0002:     predef divmod7(x)#2
					; DIVMOD7 -> X029
; inc/hgrlib.plh: 0003:     predef hgrPlot(x, y)#0
					; HGRPLOT -> X030
; inc/hgrlib.plh: 0004:     predef hgrOrPlot(x, y)#0
					; HGRORPLOT -> X031
; inc/hgrlib.plh: 0005:     predef hgrXorPlot(x, y)#0
					; HGRXORPLOT -> X032
; inc/hgrlib.plh: 0006:     predef hgrHLin(x1, x2, y)#0
					; HGRHLIN -> X033
; inc/hgrlib.plh: 0007:     predef hgrVLin(y1, y2, x)#0
					; HGRVLIN -> X034
; inc/hgrlib.plh: 0008:     predef hgrXorHLin(x1, x2, y)#0
					; HGRXORHLIN -> X035
; inc/hgrlib.plh: 0009:     predef hgrXorVLin(y1, y2, x)#0
					; HGRXORVLIN -> X036
; inc/hgrlib.plh: 0010:     predef hgrRect(x1, y1, x2, y2)#0
					; HGRRECT -> X037
; inc/hgrlib.plh: 0011:     predef hgrXorRect(x1, y1, x2, y2)#0
					; HGRXORRECT -> X038
; inc/hgrlib.plh: 0012:     predef hgrBLT(x, y, width, height, srcptr)#0
					; HGRBLT -> X039
; inc/hgrlib.plh: 0013:     predef hgrCopySrc(ofst, y, w, h, srcptr)#0
					; HGRCOPYSRC -> X040
; inc/hgrlib.plh: 0014:     predef hgrAndSrc(ofst, y, w, h, srcptr)#0
					; HGRANDSRC -> X041
; inc/hgrlib.plh: 0015:     predef hgrXorSrc(ofst, y, w, h, srcptr)#0
					; HGRXORSRC -> X042
; inc/hgrlib.plh: 0016:     predef hgrOrSrc(ofst, y, w, h, srcptr)#0
					; HGRORSRC -> X043
; inc/hgrlib.plh: 0017:     predef hgrCopyDst(ofst, y, w, h, dstptr)#0
					; HGRCOPYDST -> X044
; inc/hgrlib.plh: 0018:     predef hgrMode(mode)#1
					; HGRMODE -> X045
; inc/hgrlib.plh: 0019:     predef hgrClear#0
					; HGRCLEAR -> X046
; inc/hgrlib.plh: 0020:     predef hgrShow(page)#1
					; HGRSHOW -> X047
; inc/hgrlib.plh: 0021:     predef hgrSwap#1
					; HGRSWAP -> X048
; inc/hgrlib.plh: 0022:     predef hgrDrawBuf(page)#1
					; HGRDRAWBUF -> X049
; inc/hgrlib.plh: 0023:     predef hgrColor(clr)#0
					; HGRCOLOR -> X050
; inc/hgrlib.plh: 0024: end
; samplesrc/sfm.pla: 0005: 
; samplesrc/sfm.pla: 0006: include "inc/hgrsprite.plh"
; inc/hgrsprite.plh: 0001: import hgrsprite
	; DCI STRING: HGRSPRITE
	!BYTE	$C8,$C7,$D2,$D3,$D0,$D2,$C9,$D4,$45
					; HGRSPRITE -> X051
; inc/hgrsprite.plh: 0002:     predef spriteCompile(w, h, xcenter, ycenter, srcptr)#1
					; SPRITECOMPILE -> X052
; inc/hgrsprite.plh: 0003:     predef spriteDup(sprtsrc)#1
					; SPRITEDUP -> X053
; inc/hgrsprite.plh: 0004:     predef spriteRead(filestr)#1
					; SPRITEREAD -> X054
; inc/hgrsprite.plh: 0005:     predef spriteSave(filestr, sprtptr)#1
					; SPRITESAVE -> X055
; inc/hgrsprite.plh: 0006:     predef spriteDraw(sprtptr)#0
					; SPRITEDRAW -> X056
; inc/hgrsprite.plh: 0007:     predef spriteDrawXor(sprtptr)#0
					; SPRITEDRAWXOR -> X057
; inc/hgrsprite.plh: 0008:     predef spriteUnDraw(sprtptr)#0
					; SPRITEUNDRAW -> X058
; inc/hgrsprite.plh: 0009:     predef spriteUnDrawXor(sprtptr)#0
					; SPRITEUNDRAWXOR -> X059
; inc/hgrsprite.plh: 0010:     predef spritePos(x, y, sprtptr)#0
					; SPRITEPOS -> X060
; inc/hgrsprite.plh: 0011:     predef spritePosIndex(x, y, i)#0
					; SPRITEPOSINDEX -> X061
; inc/hgrsprite.plh: 0012:     predef spriteUnDrawList#0
					; SPRITEUNDRAWLIST -> X062
; inc/hgrsprite.plh: 0013:     predef spriteUnDrawXorList#0
					; SPRITEUNDRAWXORLIST -> X063
; inc/hgrsprite.plh: 0014:     predef spriteDrawList#0
					; SPRITEDRAWLIST -> X064
; inc/hgrsprite.plh: 0015:     predef spriteDrawXorList#0
					; SPRITEDRAWXORLIST -> X065
; inc/hgrsprite.plh: 0016:     predef spriteAdd(i, sprtptr)#1
					; SPRITEADD -> X066
; inc/hgrsprite.plh: 0017:     predef spriteDel(i)#1
					; SPRITEDEL -> X067
; inc/hgrsprite.plh: 0018:     predef spriteDrawBuf(page)#1
					; SPRITEDRAWBUF -> X068
; inc/hgrsprite.plh: 0019: end
; samplesrc/sfm.pla: 0006: 
; samplesrc/sfm.pla: 0007: include "inc/joybuzz.plh"
; inc/joybuzz.plh: 0001: import joybuzz
	; DCI STRING: JOYBUZZ
	!BYTE	$CA,$CF,$D9,$C2,$D5,$DA,$5A
					; JOYBUZZ -> X069
; inc/joybuzz.plh: 0002:     const MAX_JOY = 79
					; MAX_JOY = 79
; inc/joybuzz.plh: 0003:     predef joypos(buzz)#4
					; JOYPOS -> X070
; inc/joybuzz.plh: 0004: end
; samplesrc/sfm.pla: 0007: 
; samplesrc/sfm.pla: 0008: sysflags reshgr1 // Reserve HGR page 1
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_SYSFLAGS	=	$0010		; SYSTEM FLAGS
; samplesrc/sfm.pla: 0009: 
; samplesrc/sfm.pla: 0010: const NUMSTARS         = 32
					; NUMSTARS = 32
; samplesrc/sfm.pla: 0011: const SHIP_SPRTNUM     = 0
					; SHIP_SPRTNUM = 0
; samplesrc/sfm.pla: 0012: const MISSLE_SPRTNUM   = 1
					; MISSLE_SPRTNUM = 1
; samplesrc/sfm.pla: 0013: const WEB_SPRTBASE     = 2
					; WEB_SPRTBASE = 2
; samplesrc/sfm.pla: 0014: const SPIDER_SPRTEBASE = 8
					; SPIDER_SPRTEBASE = 8
; samplesrc/sfm.pla: 0015: const LASER_RECHARGE   = 20
					; LASER_RECHARGE = 20
; samplesrc/sfm.pla: 0016: const MISSLE_RELOAD    = 10
					; MISSLE_RELOAD = 10
; samplesrc/sfm.pla: 0017: const ATTACK_SPEED     = 12
					; ATTACK_SPEED = 12
; samplesrc/sfm.pla: 0018: const SWARM_LIMIT      = 52
					; SWARM_LIMIT = 52
; samplesrc/sfm.pla: 0019: const FASTMOVE_LIMIT   = 120
					; FASTMOVE_LIMIT = 120
; samplesrc/sfm.pla: 0020: const WEB_LIMIT        = 152
					; WEB_LIMIT = 152
; samplesrc/sfm.pla: 0021: const YSHIP            = 180
					; YSHIP = 180
; samplesrc/sfm.pla: 0022: const LASER_BUZZ       = 20
					; LASER_BUZZ = 20
; samplesrc/sfm.pla: 0023: const ATTACK_BUZZ      = 5
					; ATTACK_BUZZ = 5
; samplesrc/sfm.pla: 0024: const WEB1_BUZZ        = 10
					; WEB1_BUZZ = 10
; samplesrc/sfm.pla: 0025: const WEB2_BUZZ        = 12
					; WEB2_BUZZ = 12
; samplesrc/sfm.pla: 0026: const WEB3_BUZZ        = 14
					; WEB3_BUZZ = 14
; samplesrc/sfm.pla: 0027: const SPLAT_BUZZ       = 40
					; SPLAT_BUZZ = 40
; samplesrc/sfm.pla: 0028: 
; samplesrc/sfm.pla: 0029: var sprtEgg1, sprtEgg2, sprtEgg3, sprtEgg
_D071 	!FILL	2			; sprtEgg1, sprtEgg2, sprtEgg3, sprtEgg
_D072 	!FILL	2			; sprtEgg2, sprtEgg3, sprtEgg
_D073 	!FILL	2			; sprtEgg3, sprtEgg
_D074 	!FILL	2			; sprtEgg
; samplesrc/sfm.pla: 0030: var sprtSpider1, sprtSpider2, sprtSpider3, sprtSpider
_D075 	!FILL	2			; sprtSpider1, sprtSpider2, sprtSpider3, sprtSpider
_D076 	!FILL	2			; sprtSpider2, sprtSpider3, sprtSpider
_D077 	!FILL	2			; sprtSpider3, sprtSpider
_D078 	!FILL	2			; sprtSpider
; samplesrc/sfm.pla: 0031: var sprtSplat1, sprtSplat2
_D079 	!FILL	2			; sprtSplat1, sprtSplat2
_D080 	!FILL	2			; sprtSplat2
; samplesrc/sfm.pla: 0032: var sprtWeb1, sprtWeb2, sprtWeb3
_D081 	!FILL	2			; sprtWeb1, sprtWeb2, sprtWeb3
_D082 	!FILL	2			; sprtWeb2, sprtWeb3
_D083 	!FILL	2			; sprtWeb3
; samplesrc/sfm.pla: 0033: var sprtShip, sprtMissle, sprtDummy, heapstart
_D084 	!FILL	2			; sprtShip, sprtMissle, sprtDummy, heapstart
_D085 	!FILL	2			; sprtMissle, sprtDummy, heapstart
_D086 	!FILL	2			; sprtDummy, heapstart
_D087 	!FILL	2			; heapstart
; samplesrc/sfm.pla: 0034: var[NUMSTARS]  xstar
_D088 	!FILL	64			; xstar
; samplesrc/sfm.pla: 0035: byte[NUMSTARS] ystar
_D089 	!FILL	32			; ystar
; samplesrc/sfm.pla: 0036: byte curstar, buzz
_D090 	!FILL	1			; curstar, buzz
_D091 	!FILL	1			; buzz
; samplesrc/sfm.pla: 0037: 
; samplesrc/sfm.pla: 0038: //
; samplesrc/sfm.pla: 0039: // Apple II speaker tone generator routine
; samplesrc/sfm.pla: 0040: //
; samplesrc/sfm.pla: 0041: //asm spkrTone(pitch, duration)#0
; samplesrc/sfm.pla: 0042: byte _spkrTone[]
_D092 					; _spkrTone[]
; samplesrc/sfm.pla: 0043: byte = $86, $E5         // STX ESP
	!BYTE	$86
	!BYTE	$E5
; samplesrc/sfm.pla: 0044: byte = $B4, $C0         // LDY ESTKH,X 
	!BYTE	$B4
	!BYTE	$C0
; samplesrc/sfm.pla: 0045: byte = $B5, $D0         // LDA ESTKL,X
	!BYTE	$B5
	!BYTE	$D0
; samplesrc/sfm.pla: 0046: byte = $F0, $01         // BEQ +1
	!BYTE	$F0
	!BYTE	$01
; samplesrc/sfm.pla: 0047: byte = $C8              // INY
	!BYTE	$C8
; samplesrc/sfm.pla: 0048: byte = $85, $08         // STA DSTL
	!BYTE	$85
	!BYTE	$08
; samplesrc/sfm.pla: 0049: byte = $84, $09         // STY DSTH
	!BYTE	$84
	!BYTE	$09
; samplesrc/sfm.pla: 0050: byte = $B4, $C1         // LDY ESTKL+1,X
	!BYTE	$B4
	!BYTE	$C1
; samplesrc/sfm.pla: 0051: byte = $B5, $D1         // LDA ESTKL+1,X
	!BYTE	$B5
	!BYTE	$D1
; samplesrc/sfm.pla: 0052: byte = $F0, $01         // BEQ +1
	!BYTE	$F0
	!BYTE	$01
; samplesrc/sfm.pla: 0053: byte = $C8              // INY
	!BYTE	$C8
; samplesrc/sfm.pla: 0054: byte = $85, $E7         // STA TMPL
	!BYTE	$85
	!BYTE	$E7
; samplesrc/sfm.pla: 0055: byte = $84, $E8         // STY TMPH
	!BYTE	$84
	!BYTE	$E8
; samplesrc/sfm.pla: 0056: byte = $AA              // TAX
	!BYTE	$AA
; samplesrc/sfm.pla: 0057: byte = $A9, $FF         // LDA #$FF
	!BYTE	$A9
	!BYTE	$FF
; samplesrc/sfm.pla: 0058: byte = $08              // PHP
	!BYTE	$08
; samplesrc/sfm.pla: 0059: byte = $78              // SEI
	!BYTE	$78
; samplesrc/sfm.pla: 0060: byte = $EA              // NOP
	!BYTE	$EA
; samplesrc/sfm.pla: 0061: byte = $EA              // NOP
	!BYTE	$EA
; samplesrc/sfm.pla: 0062: byte = $B0, $00         // BCS +0
	!BYTE	$B0
	!BYTE	$00
; samplesrc/sfm.pla: 0063: byte = $38              // SEC
	!BYTE	$38
; samplesrc/sfm.pla: 0064: byte = $CA              // DEX
	!BYTE	$CA
; samplesrc/sfm.pla: 0065: byte = $D0, $18         // BNE +18
	!BYTE	$D0
	!BYTE	$18
; samplesrc/sfm.pla: 0066: byte = $88              // DEY
	!BYTE	$88
; samplesrc/sfm.pla: 0067: byte = $D0, $17         // BNE +17
	!BYTE	$D0
	!BYTE	$17
; samplesrc/sfm.pla: 0068: byte = $2C, $30, $C0    // BIT $C030
	!BYTE	$2C
	!BYTE	$30
	!BYTE	$C0
; samplesrc/sfm.pla: 0069: byte = $A6, $E7         // LDX TMPL
	!BYTE	$A6
	!BYTE	$E7
; samplesrc/sfm.pla: 0070: byte = $A4, $E8         // LDY TMPH
	!BYTE	$A4
	!BYTE	$E8
; samplesrc/sfm.pla: 0071: byte = $E9, $01         // SBC #$01
	!BYTE	$E9
	!BYTE	$01
; samplesrc/sfm.pla: 0072: byte = $B0, $EA         // BCS -EA
	!BYTE	$B0
	!BYTE	$EA
; samplesrc/sfm.pla: 0073: byte = $C6, $08         // DEC DSTL
	!BYTE	$C6
	!BYTE	$08
; samplesrc/sfm.pla: 0074: byte = $D0, $EA         // BNE -EA
	!BYTE	$D0
	!BYTE	$EA
; samplesrc/sfm.pla: 0075: byte = $C6, $09         // DEC DSTH
	!BYTE	$C6
	!BYTE	$09
; samplesrc/sfm.pla: 0076: byte = $D0, $E6         // BNE -E6
	!BYTE	$D0
	!BYTE	$E6
; samplesrc/sfm.pla: 0077: byte = $F0, $07         // BEQ +8
	!BYTE	$F0
	!BYTE	$07
; samplesrc/sfm.pla: 0078: byte = $EA              // NOP
	!BYTE	$EA
; samplesrc/sfm.pla: 0079: byte = $EA              // NOP
	!BYTE	$EA
; samplesrc/sfm.pla: 0080: byte = $EA, $EA         // BIT $C000 (nope)
	!BYTE	$EA
	!BYTE	$EA
; samplesrc/sfm.pla: 0081: byte = $EA              // NOP
	!BYTE	$EA
; samplesrc/sfm.pla: 0082: byte = $D0, $EB         // BNE -EA
	!BYTE	$D0
	!BYTE	$EB
; samplesrc/sfm.pla: 0083: byte = $28              // PLP
	!BYTE	$28
; samplesrc/sfm.pla: 0084: byte = $A6, $E5         // LDX ESP
	!BYTE	$A6
	!BYTE	$E5
; samplesrc/sfm.pla: 0085: byte = $E8              // INX
	!BYTE	$E8
; samplesrc/sfm.pla: 0086: byte = $E8              // INX
	!BYTE	$E8
; samplesrc/sfm.pla: 0087: byte = $60              // RTS
	!BYTE	$60
; samplesrc/sfm.pla: 0088: 
; samplesrc/sfm.pla: 0089: def game(spdrcnt)#1
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; spdrcnt -> [0]
_C000 					; game()
; samplesrc/sfm.pla: 0090:   var[8] xspdr, yspdr, ixspdr, iyspdr, hatch
					; xspdr -> [2]
					; yspdr -> [18]
					; ixspdr -> [34]
					; iyspdr -> [50]
					; hatch -> [66]
; samplesrc/sfm.pla: 0091:   var xship, xmissle, leftxlaser, rightxlaser, attack
					; xship -> [82]
					; xmissle -> [84]
					; leftxlaser -> [86]
					; rightxlaser -> [88]
					; attack -> [90]
; samplesrc/sfm.pla: 0092:   byte[8] life, death
					; life -> [92]
					; death -> [100]
; samplesrc/sfm.pla: 0093:   byte lasercharging, missleloading, misslecnt, ymissle
					; lasercharging -> [108]
					; missleloading -> [109]
					; misslecnt -> [110]
					; ymissle -> [111]
; samplesrc/sfm.pla: 0094:   byte leftylaser, rightylaser, lefthit, righthit, sprtnum[], width
					; leftylaser -> [112]
					; rightylaser -> [113]
					; lefthit -> [114]
					; righthit -> [115]
					; sprtnum -> [116]
					; width -> [116]
; samplesrc/sfm.pla: 0095:   byte spdrnum, k, xdelta, ydelta, btn0, btn1, webstate
					; spdrnum -> [117]
					; k -> [118]
					; xdelta -> [119]
					; ydelta -> [120]
					; btn0 -> [121]
					; btn1 -> [122]
					; webstate -> [123]
; samplesrc/sfm.pla: 0096: 
; samplesrc/sfm.pla: 0097:   xship         = 140
	!BYTE	$58,$7C,$01		; ENTER	124,1
; samplesrc/sfm.pla: 0098:   ymissle       = 255 // Not active value
; samplesrc/sfm.pla: 0099:   misslecnt     = 6
; samplesrc/sfm.pla: 0100:   missleloading = FALSE
; samplesrc/sfm.pla: 0101:   lasercharging = FALSE
; samplesrc/sfm.pla: 0102:   //
; samplesrc/sfm.pla: 0103:   // Initialize the spiders (first is special)
; samplesrc/sfm.pla: 0104:   //
; samplesrc/sfm.pla: 0105:   xspdr[0]  = 100
; samplesrc/sfm.pla: 0106:   ixspdr[0] = 1
; samplesrc/sfm.pla: 0107:   yspdr[0]  = 60
; samplesrc/sfm.pla: 0108:   iyspdr[0] = -1
; samplesrc/sfm.pla: 0109:   hatch[0]  = 1
; samplesrc/sfm.pla: 0110:   life[0]   = 3
; samplesrc/sfm.pla: 0111:   death[0]  = 0
; samplesrc/sfm.pla: 0112:   attack    = -1
; samplesrc/sfm.pla: 0113:   webstate  = 0
; samplesrc/sfm.pla: 0114:   //
; samplesrc/sfm.pla: 0115:   // Initialize spiders
; samplesrc/sfm.pla: 0116:   //
; samplesrc/sfm.pla: 0117:   spdrnum   = spdrcnt - 1
; samplesrc/sfm.pla: 0118:   for k = 1 to spdrnum
	!BYTE	$2A,$8C			; CB	140
	!BYTE	$76,$52			; SLW	[82]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$74,$6F			; SLB	[111]
	!BYTE	$0C			; CN	6
	!BYTE	$74,$6E			; SLB	[110]
	!BYTE	$00			; CN	0
	!BYTE	$74,$6D			; SLB	[109]
	!BYTE	$00			; CN	0
	!BYTE	$74,$6C			; SLB	[108]
	!BYTE	$2A,$64			; CB	100
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$76,$22			; SLW	[34]
	!BYTE	$2A,$3C			; CB	60
	!BYTE	$76,$12			; SLW	[18]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$32			; SLW	[50]
	!BYTE	$02			; CN	1
	!BYTE	$76,$42			; SLW	[66]
	!BYTE	$06			; CN	3
	!BYTE	$74,$5C			; SLB	[92]
	!BYTE	$00			; CN	0
	!BYTE	$74,$64			; SLB	[100]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$5A			; SLW	[90]
	!BYTE	$00			; CN	0
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
	!BYTE	$6C,$75			; DLB	[117]
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B001
	!WORD	_B001-*
_B002 
	!BYTE	$6C,$76			; DLB	[118]
; samplesrc/sfm.pla: 0119:     spriteAdd(k + SPIDER_SPRTEBASE, spriteDup(sprtEgg3))
; samplesrc/sfm.pla: 0120:     xspdr[k]  = ((xspdr[k - 1] ^ 37) + 97) & 255
; samplesrc/sfm.pla: 0121:     ixspdr[k] = -ixspdr[k - 1]
; samplesrc/sfm.pla: 0122:     yspdr[k]  = ((yspdr[k - 1] ^ 29) + 53) & 63
; samplesrc/sfm.pla: 0123:     iyspdr[k] = -iyspdr[k - 1]
; samplesrc/sfm.pla: 0124:     hatch[k]  = k / 2 + 1//hatch[k - 1] + 1
; samplesrc/sfm.pla: 0125:     life[k]   = 3
; samplesrc/sfm.pla: 0126:     death[k]  = 0
; samplesrc/sfm.pla: 0127:   next
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$6A			; LAW	_D073+0
_F000 	!WORD	_D073+0		
	!BYTE	$54			; CALL	_X053
_F001 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F002 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$8E			; DECR
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$2A,$25			; CB	37
	!BYTE	$98			; XOR
	!BYTE	$38,$61			; ADDI	97
	!BYTE	$3C,$FF			; ANDI	255
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$28,$22			; LLA	[34]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$8E			; DECR
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$90			; NEG
	!BYTE	$28,$22			; LLA	[34]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$8E			; DECR
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$2A,$1D			; CB	29
	!BYTE	$98			; XOR
	!BYTE	$38,$35			; ADDI	53
	!BYTE	$3C,$3F			; ANDI	63
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$8E			; DECR
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$90			; NEG
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$8C			; INCR
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$06			; CN	3
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$70			; SB
	!BYTE	$00			; CN	0
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$70			; SB
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$76			; SLB	[118]
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0128:   //
; samplesrc/sfm.pla: 0129:   // Initialize missle display
; samplesrc/sfm.pla: 0130:   //
; samplesrc/sfm.pla: 0131:   hgrColor(3)
; samplesrc/sfm.pla: 0132:   hgrRect(0, YSHIP+3, 279, 191)
; samplesrc/sfm.pla: 0133:   for k = 0 to misslecnt-1
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X050
_F003 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$2A,$B7			; CB	183
	!BYTE	$2C,$17,$01		; CW	279
	!BYTE	$2A,$BF			; CB	191
	!BYTE	$54			; CALL	_X037
_F004 	!WORD	0		
	!BYTE	$64,$6E			; LLB	[110]
	!BYTE	$8E			; DECR
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B004
	!WORD	_B004-*
_B005 
	!BYTE	$6C,$76			; DLB	[118]
; samplesrc/sfm.pla: 0134:     spritePos(k * 16 + 160, 184, sprtMissle)
; samplesrc/sfm.pla: 0135:     spriteDrawXor(sprtMissle)
; samplesrc/sfm.pla: 0136:   next
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$38,$A0			; ADDI	160
	!BYTE	$2A,$B8			; CB	184
	!BYTE	$6A			; LAW	_D085+0
_F005 	!WORD	_D085+0		
	!BYTE	$54			; CALL	_X060
_F006 	!WORD	0		
	!BYTE	$6A			; LAW	_D085+0
_F007 	!WORD	_D085+0		
	!BYTE	$54			; CALL	_X057
_F008 	!WORD	0		
_B006 
	!BYTE	$A4			; INCBRLE	_B005
	!WORD	_B005-*
_B004 
	!BYTE	$74,$76			; SLB	[118]
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0137:   hgrColor(1)
; samplesrc/sfm.pla: 0138:   hgrRect(4, YSHIP+6, LASER_RECHARGE * 4 + 4, 188)
; samplesrc/sfm.pla: 0139:   //
; samplesrc/sfm.pla: 0140:   // Main game loop
; samplesrc/sfm.pla: 0141:   //
; samplesrc/sfm.pla: 0142:   repeat
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X050
_F009 	!WORD	0		
	!BYTE	$08			; CN	4
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$2A,$50			; CB	80
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$2A,$BC			; CB	188
	!BYTE	$54			; CALL	_X037
_F010 	!WORD	0		
_B008 
; samplesrc/sfm.pla: 0143:     //
; samplesrc/sfm.pla: 0144:     // Move living spiders
; samplesrc/sfm.pla: 0145:     //
; samplesrc/sfm.pla: 0146:     for k = 0 to spdrnum
	!BYTE	$64,$75			; LLB	[117]
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B010
	!WORD	_B010-*
_B011 
	!BYTE	$6C,$76			; DLB	[118]
; samplesrc/sfm.pla: 0147:       if life[k]
; samplesrc/sfm.pla: 0148:         yspdr[k] = yspdr[k] + iyspdr[k]
; samplesrc/sfm.pla: 0149:         if yspdr[k] < -5
; samplesrc/sfm.pla: 0150:           //
; samplesrc/sfm.pla: 0151:           // Above screen
; samplesrc/sfm.pla: 0152:           //
; samplesrc/sfm.pla: 0153:           iyspdr[k] = 1
; samplesrc/sfm.pla: 0154:           if hatch[k]
; samplesrc/sfm.pla: 0155:             hatch[k]--
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$82			; ADD 
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$5E,$FB			; CFFB	-5
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$02			; CN	1
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0156:             if hatch[k] == 0
; samplesrc/sfm.pla: 0157:               //
; samplesrc/sfm.pla: 0158:               // Hatch this egg into a spider
; samplesrc/sfm.pla: 0159:               //
; samplesrc/sfm.pla: 0160:               life[k] = 3 // Reset life
; samplesrc/sfm.pla: 0161:               spriteAdd(k + SPIDER_SPRTEBASE, spriteDup(sprtSpider3))
; samplesrc/sfm.pla: 0162:             fin
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$4E			; BRTRU	_B019
	!WORD	_B019-*
	!BYTE	$06			; CN	3
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$70			; SB
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$6A			; LAW	_D077+0
_F011 	!WORD	_D077+0		
	!BYTE	$54			; CALL	_X053
_F012 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F013 	!WORD	0		
	!BYTE	$30			; DROP 
_B019 
_B020 
; samplesrc/sfm.pla: 0163:           fin
_B017 
_B018 
; samplesrc/sfm.pla: 0164:         fin
_B015 
_B016 
; samplesrc/sfm.pla: 0165:         if yspdr[k] > SWARM_LIMIT
; samplesrc/sfm.pla: 0166:           //
; samplesrc/sfm.pla: 0167:           // Attack or not?
; samplesrc/sfm.pla: 0168:           //
; samplesrc/sfm.pla: 0169:           if hatch[k] == 0 and attack < 0
; samplesrc/sfm.pla: 0170:             attack = k
; samplesrc/sfm.pla: 0171:             iyspdr[k] = ATTACK_SPEED
; samplesrc/sfm.pla: 0172:           fin
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$34			; CB	52
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B023
	!WORD	_B023-*
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
_B023 
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$76,$5A			; SLW	[90]
	!BYTE	$18			; CN	12
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
_B024 
_B025 
; samplesrc/sfm.pla: 0173:           if attack == k
; samplesrc/sfm.pla: 0174:             //
; samplesrc/sfm.pla: 0175:             // Attacking
; samplesrc/sfm.pla: 0176:             //
; samplesrc/sfm.pla: 0177:             if yspdr[k] > WEB_LIMIT
; samplesrc/sfm.pla: 0178:               //
; samplesrc/sfm.pla: 0179:               // Iterate through web sequence
; samplesrc/sfm.pla: 0180:               //
; samplesrc/sfm.pla: 0181:               when webstate
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$24			; BRNE	_B026
	!WORD	_B026-*
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$64,$7B			; LLB	[123]
	!BYTE	$52			; SEL
	!WORD	_B031-*
; samplesrc/sfm.pla: 0182:                 is 10
_B032 
; samplesrc/sfm.pla: 0183:                   iyspdr[k] = -8 // Retreat
; samplesrc/sfm.pla: 0184:                   yspdr[k]  = WEB_LIMIT
; samplesrc/sfm.pla: 0185:                   spriteDel(2)
; samplesrc/sfm.pla: 0186:                   spriteDel(3)
; samplesrc/sfm.pla: 0187:                   spriteDel(4)
; samplesrc/sfm.pla: 0188:                   webstate = 0
; samplesrc/sfm.pla: 0189:                   break
	!BYTE	$5E,$F8			; CFFB	-8
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X067
_F014 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X067
_F015 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X067
_F016 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
; samplesrc/sfm.pla: 0190:                 is 0
_B033 
; samplesrc/sfm.pla: 0191:                   iyspdr[k] = 0
; samplesrc/sfm.pla: 0192:                   spriteAdd(2, sprtWeb1)
; samplesrc/sfm.pla: 0193:                   spritePosIndex(xspdr[k], WEB_LIMIT+7, 2)
; samplesrc/sfm.pla: 0194:                   buzz = WEB1_BUZZ
; samplesrc/sfm.pla: 0195:                   webstate = 1
; samplesrc/sfm.pla: 0196:                   break
	!BYTE	$00			; CN	0
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$04			; CN	2
	!BYTE	$6A			; LAW	_D081+0
_F017 	!WORD	_D081+0		
	!BYTE	$54			; CALL	_X066
_F018 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$9F			; CB	159
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X061
_F019 	!WORD	0		
	!BYTE	$14			; CN	10
	!BYTE	$78			; SAB	_D091+0
_F020 	!WORD	_D091+0		
	!BYTE	$02			; CN	1
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
; samplesrc/sfm.pla: 0197:                 is 1
_B034 
; samplesrc/sfm.pla: 0198:                   spriteAdd(3, sprtWeb2)
; samplesrc/sfm.pla: 0199:                   spritePosIndex(xspdr[k], WEB_LIMIT+15, 3)
; samplesrc/sfm.pla: 0200:                   buzz = WEB2_BUZZ
; samplesrc/sfm.pla: 0201:                   webstate = 2
; samplesrc/sfm.pla: 0202:                   break
	!BYTE	$06			; CN	3
	!BYTE	$6A			; LAW	_D082+0
_F021 	!WORD	_D082+0		
	!BYTE	$54			; CALL	_X066
_F022 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$A7			; CB	167
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X061
_F023 	!WORD	0		
	!BYTE	$18			; CN	12
	!BYTE	$78			; SAB	_D091+0
_F024 	!WORD	_D091+0		
	!BYTE	$04			; CN	2
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$50			; BRNCH	_B030
	!WORD	_B030-*
; samplesrc/sfm.pla: 0203:                 is 2
_B035 
; samplesrc/sfm.pla: 0204:                   spriteAdd(4, sprtWeb3)
; samplesrc/sfm.pla: 0205:                   spritePosIndex(xspdr[k], WEB_LIMIT+22, 4)
; samplesrc/sfm.pla: 0206:                   webstate = 3
; samplesrc/sfm.pla: 0207:                 otherwise
	!BYTE	$08			; CN	4
	!BYTE	$6A			; LAW	_D083+0
_F025 	!WORD	_D083+0		
	!BYTE	$54			; CALL	_X066
_F026 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$AE			; CB	174
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X061
_F027 	!WORD	0		
	!BYTE	$06			; CN	3
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$50			; BRNCH	_B036
	!WORD	_B036-*
_B031 
	!BYTE	$04			; CASEBLOCK
	!WORD	$0000
	!WORD	_B033-*
	!WORD	$0001
	!WORD	_B034-*
	!WORD	$0002
	!WORD	_B035-*
	!WORD	$000A
	!WORD	_B032-*
_B036 
; samplesrc/sfm.pla: 0208:                   //
; samplesrc/sfm.pla: 0209:                   // States 3..9 just repeat this
; samplesrc/sfm.pla: 0210:                   //
; samplesrc/sfm.pla: 0211:                   if xship >= xspdr[k] - 17 and xship <= xspdr[k] + 17
; samplesrc/sfm.pla: 0212:                     //
; samplesrc/sfm.pla: 0213:                     // Capture ship
; samplesrc/sfm.pla: 0214:                     //
; samplesrc/sfm.pla: 0215:                     return FALSE
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$3A,$11			; SUBI	17
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B037
	!WORD	_B037-*
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$38,$11			; ADDI	17
	!BYTE	$4A			; ISLE
_B037 
	!BYTE	$4C			; BRFLS	_B038
	!WORD	_B038-*
	!BYTE	$32			; DROP2
	!BYTE	$00			; CN	0
	!BYTE	$5A,$7C			; LEAVE	124
; samplesrc/sfm.pla: 0216:                   fin
_B038 
_B039 
; samplesrc/sfm.pla: 0217:                   buzz = WEB3_BUZZ
; samplesrc/sfm.pla: 0218:                   webstate++
	!BYTE	$1C			; CN	14
	!BYTE	$78			; SAB	_D091+0
_F028 	!WORD	_D091+0		
	!BYTE	$64,$7B			; LLB	[123]
	!BYTE	$8C			; INCR
; samplesrc/sfm.pla: 0219:               wend
	!BYTE	$74,$7B			; SLB	[123]
_B030 
; samplesrc/sfm.pla: 0220:             else
	!BYTE	$50			; BRNCH	_B029
	!WORD	_B029-*
_B028 
; samplesrc/sfm.pla: 0221:               if iyspdr[k] > 0
; samplesrc/sfm.pla: 0222:                 //
; samplesrc/sfm.pla: 0223:                 // Move towards player during attack, but not too fast
; samplesrc/sfm.pla: 0224:                 //
; samplesrc/sfm.pla: 0225:                 xdelta   = yspdr[k] > FASTMOVE_LIMIT ?? 2 :: 4
; samplesrc/sfm.pla: 0226:                 xspdr[k] = xspdr[k] + (xship - xspdr[k]) / xdelta
; samplesrc/sfm.pla: 0227:                 buzz = ATTACK_BUZZ
; samplesrc/sfm.pla: 0228:               else
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B040
	!WORD	_B040-*
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$78			; CB	120
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B042
	!WORD	_B042-*
	!BYTE	$04			; CN	2
	!BYTE	$50			; BRNCH	_B043
	!WORD	_B043-*
_B042 
	!BYTE	$08			; CN	4
_B043 
	!BYTE	$74,$77			; SLB	[119]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$64,$77			; LLB	[119]
	!BYTE	$88			; DIV
	!BYTE	$82			; ADD 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$0A			; CN	5
	!BYTE	$78			; SAB	_D091+0
_F029 	!WORD	_D091+0		
	!BYTE	$50			; BRNCH	_B041
	!WORD	_B041-*
_B040 
; samplesrc/sfm.pla: 0229:                 //
; samplesrc/sfm.pla: 0230:                 // Retreat at a progressively faster rate
; samplesrc/sfm.pla: 0231:                 //
; samplesrc/sfm.pla: 0232:                 if ixspdr[k] > 0
; samplesrc/sfm.pla: 0233:                   xspdr[k] = xspdr[k] + (WEB_LIMIT - yspdr[k]) / 8
; samplesrc/sfm.pla: 0234:                 else
	!BYTE	$28,$22			; LLA	[34]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B044
	!WORD	_B044-*
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$06			; CN	3
	!BYTE	$9C			; SHR
	!BYTE	$82			; ADD 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B045
	!WORD	_B045-*
_B044 
; samplesrc/sfm.pla: 0235:                   xspdr[k] = xspdr[k] - (WEB_LIMIT - yspdr[k]) / 8
; samplesrc/sfm.pla: 0236:                 fin
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2A,$98			; CB	152
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$84			; SUB 
	!BYTE	$06			; CN	3
	!BYTE	$9C			; SHR
	!BYTE	$84			; SUB 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
_B045 
; samplesrc/sfm.pla: 0237:               fin
_B041 
; samplesrc/sfm.pla: 0238:             fin
_B029 
; samplesrc/sfm.pla: 0239:           else
	!BYTE	$50			; BRNCH	_B027
	!WORD	_B027-*
_B026 
; samplesrc/sfm.pla: 0240:             //
; samplesrc/sfm.pla: 0241:             // Just reverse direction towards top of screen
; samplesrc/sfm.pla: 0242:             //
; samplesrc/sfm.pla: 0243:             iyspdr[k] = -1
; samplesrc/sfm.pla: 0244:           fin
	!BYTE	$20			; MINUS ONE
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
_B027 
; samplesrc/sfm.pla: 0245:         else
	!BYTE	$50			; BRNCH	_B022
	!WORD	_B022-*
_B021 
; samplesrc/sfm.pla: 0246:           if attack == k
; samplesrc/sfm.pla: 0247:             //
; samplesrc/sfm.pla: 0248:             // Retreated back to swarm zone so stop attack
; samplesrc/sfm.pla: 0249:             //
; samplesrc/sfm.pla: 0250:             attack    = -1
; samplesrc/sfm.pla: 0251:             iyspdr[k] = -1
; samplesrc/sfm.pla: 0252:           fin
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$24			; BRNE	_B046
	!WORD	_B046-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$5A			; SLW	[90]
	!BYTE	$20			; MINUS ONE
	!BYTE	$28,$32			; LLA	[50]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
_B046 
_B047 
; samplesrc/sfm.pla: 0253:           //
; samplesrc/sfm.pla: 0254:           // Swarm movement
; samplesrc/sfm.pla: 0255:           //
; samplesrc/sfm.pla: 0256:           if ixspdr[k] > 0
; samplesrc/sfm.pla: 0257:             xspdr[k] = xspdr[k] + yspdr[k] / 8
; samplesrc/sfm.pla: 0258:           else
	!BYTE	$28,$22			; LLA	[34]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B048
	!WORD	_B048-*
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$06			; CN	3
	!BYTE	$9C			; SHR
	!BYTE	$82			; ADD 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B049
	!WORD	_B049-*
_B048 
; samplesrc/sfm.pla: 0259:             xspdr[k] = xspdr[k] - yspdr[k] / 8
; samplesrc/sfm.pla: 0260:           fin
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$06			; CN	3
	!BYTE	$9C			; SHR
	!BYTE	$84			; SUB 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
_B049 
; samplesrc/sfm.pla: 0261:           if xspdr[k] < -5 or xspdr[k] > 284
; samplesrc/sfm.pla: 0262:             if xspdr[k] < -5
; samplesrc/sfm.pla: 0263:               xspdr[k]  = -5
; samplesrc/sfm.pla: 0264:               ixspdr[k] = 1
; samplesrc/sfm.pla: 0265:             else
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$5E,$FB			; CFFB	-5
	!BYTE	$46			; ISLT
	!BYTE	$AE			; BROR	_B050
	!WORD	_B050-*
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$2C,$1C,$01		; CW	284
	!BYTE	$44			; ISGT
_B050 
	!BYTE	$4C			; BRFLS	_B051
	!WORD	_B051-*
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$5E,$FB			; CFFB	-5
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B053
	!WORD	_B053-*
	!BYTE	$5E,$FB			; CFFB	-5
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$02			; CN	1
	!BYTE	$28,$22			; LLA	[34]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$50			; BRNCH	_B054
	!WORD	_B054-*
_B053 
; samplesrc/sfm.pla: 0266:               xspdr[k]  = 284
; samplesrc/sfm.pla: 0267:               ixspdr[k] = -1
; samplesrc/sfm.pla: 0268:             fin
	!BYTE	$2C,$1C,$01		; CW	284
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
	!BYTE	$20			; MINUS ONE
	!BYTE	$28,$22			; LLA	[34]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$72			; SW
_B054 
; samplesrc/sfm.pla: 0269:           fin
_B051 
_B052 
; samplesrc/sfm.pla: 0270:         fin
_B022 
; samplesrc/sfm.pla: 0271:         spritePosIndex(xspdr[k], yspdr[k], k+SPIDER_SPRTEBASE)
; samplesrc/sfm.pla: 0272:       elsif death[k]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$54			; CALL	_X061
_F030 	!WORD	0		
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B013 
; samplesrc/sfm.pla: 0273:         //
; samplesrc/sfm.pla: 0274:         // Splat sequence
; samplesrc/sfm.pla: 0275:         //
; samplesrc/sfm.pla: 0276:         death[k]--
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B055
	!WORD	_B055-*
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0277:         if death[k]
; samplesrc/sfm.pla: 0278:           spriteAdd(k+SPIDER_SPRTEBASE, spriteDup(sprtSplat2))
; samplesrc/sfm.pla: 0279:           spritePosIndex(xspdr[k], yspdr[k], k+SPIDER_SPRTEBASE)
; samplesrc/sfm.pla: 0280:         else
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$70			; SB
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B056
	!WORD	_B056-*
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$6A			; LAW	_D080+0
_F031 	!WORD	_D080+0		
	!BYTE	$54			; CALL	_X053
_F032 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F033 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$54			; CALL	_X061
_F034 	!WORD	0		
	!BYTE	$50			; BRNCH	_B057
	!WORD	_B057-*
_B056 
; samplesrc/sfm.pla: 0281:           spriteAdd(k+SPIDER_SPRTEBASE, spriteDup(sprtDummy))
; samplesrc/sfm.pla: 0282:           spritePosIndex(0, 0, k+SPIDER_SPRTEBASE)
; samplesrc/sfm.pla: 0283:           spdrcnt--
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$6A			; LAW	_D086+0
_F035 	!WORD	_D086+0		
	!BYTE	$54			; CALL	_X053
_F036 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F037 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$54			; CALL	_X061
_F038 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0284:           if not spdrcnt
; samplesrc/sfm.pla: 0285:              return TRUE
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$4E			; BRTRU	_B058
	!WORD	_B058-*
	!BYTE	$32			; DROP2
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$7C			; LEAVE	124
; samplesrc/sfm.pla: 0286:           fin
_B058 
_B059 
; samplesrc/sfm.pla: 0287:           buzz = SPLAT_BUZZ
; samplesrc/sfm.pla: 0288:         fin
	!BYTE	$2A,$28			; CB	40
	!BYTE	$78			; SAB	_D091+0
_F039 	!WORD	_D091+0		
_B057 
; samplesrc/sfm.pla: 0289:       fin
_B055 
_B014 
; samplesrc/sfm.pla: 0290:     next
_B012 
	!BYTE	$A4			; INCBRLE	_B011
	!WORD	_B011-*
_B010 
	!BYTE	$74,$76			; SLB	[118]
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0291:     //
; samplesrc/sfm.pla: 0292:     // Move ship
; samplesrc/sfm.pla: 0293:     //
; samplesrc/sfm.pla: 0294:     xdelta, ydelta, btn0, btn1 = joypos(buzz)
; samplesrc/sfm.pla: 0295:     buzz  = spdrcnt * 4
; samplesrc/sfm.pla: 0296:     xship = xship + ((xdelta + 4) / 8 - 5)
; samplesrc/sfm.pla: 0297:     if xship < 0;   xship = 0;   fin
	!BYTE	$68			; LAB	_D091+0
_F040 	!WORD	_D091+0		
	!BYTE	$54			; CALL	_X070
_F041 	!WORD	0		
	!BYTE	$74,$7A			; SLB	[122]
	!BYTE	$74,$79			; SLB	[121]
	!BYTE	$74,$78			; SLB	[120]
	!BYTE	$74,$77			; SLB	[119]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$04			; CN	2
	!BYTE	$9A			; SHL
	!BYTE	$78			; SAB	_D091+0
_F042 	!WORD	_D091+0		
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$64,$77			; LLB	[119]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$06			; CN	3
	!BYTE	$9C			; SHR
	!BYTE	$3A,$05			; SUBI	5
	!BYTE	$82			; ADD 
	!BYTE	$6E,$52			; DLW	[82]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B060
	!WORD	_B060-*
	!BYTE	$00			; CN	0
	!BYTE	$76,$52			; SLW	[82]
_B060 
_B061 
; samplesrc/sfm.pla: 0298:     if xship > 279; xship = 279; fin
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$2C,$17,$01		; CW	279
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B062
	!WORD	_B062-*
	!BYTE	$2C,$17,$01		; CW	279
	!BYTE	$76,$52			; SLW	[82]
_B062 
_B063 
; samplesrc/sfm.pla: 0299:     spritePosIndex(xship, YSHIP, SHIP_SPRTNUM)
; samplesrc/sfm.pla: 0300:     //
; samplesrc/sfm.pla: 0301:     // Missle
; samplesrc/sfm.pla: 0302:     //
; samplesrc/sfm.pla: 0303:     if misslecnt and missleloading
; samplesrc/sfm.pla: 0304:         missleloading--
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$2A,$B4			; CB	180
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X061
_F043 	!WORD	0		
	!BYTE	$64,$6E			; LLB	[110]
	!BYTE	$AC			; BRAND	_B064
	!WORD	_B064-*
	!BYTE	$64,$6D			; LLB	[109]
_B064 
	!BYTE	$4C			; BRFLS	_B065
	!WORD	_B065-*
	!BYTE	$64,$6D			; LLB	[109]
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0305:     fin
	!BYTE	$74,$6D			; SLB	[109]
_B065 
_B066 
; samplesrc/sfm.pla: 0306:     if btn1 and not missleloading and ymissle == 255
; samplesrc/sfm.pla: 0307:       //
; samplesrc/sfm.pla: 0308:       // Fire missle
; samplesrc/sfm.pla: 0309:       //
; samplesrc/sfm.pla: 0310:       xmissle       = xship
; samplesrc/sfm.pla: 0311:       ymissle       = YSHIP-15
; samplesrc/sfm.pla: 0312:       missleloading = MISSLE_RELOAD
; samplesrc/sfm.pla: 0313:       misslecnt--
	!BYTE	$64,$7A			; LLB	[122]
	!BYTE	$AC			; BRAND	_B067
	!WORD	_B067-*
	!BYTE	$64,$6D			; LLB	[109]
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B068
	!WORD	_B068-*
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$40			; ISEQ
_B068 
_B067 
	!BYTE	$4C			; BRFLS	_B069
	!WORD	_B069-*
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$76,$54			; SLW	[84]
	!BYTE	$2A,$A5			; CB	165
	!BYTE	$74,$6F			; SLB	[111]
	!BYTE	$14			; CN	10
	!BYTE	$74,$6D			; SLB	[109]
	!BYTE	$64,$6E			; LLB	[110]
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0314:       spritePos(misslecnt * 16 + 160, 184, sprtMissle) // Erase from armory
; samplesrc/sfm.pla: 0315:       spriteDrawXor(sprtMissle)
; samplesrc/sfm.pla: 0316:       spriteAdd(1, sprtMissle)
; samplesrc/sfm.pla: 0317:     fin
	!BYTE	$6C,$6E			; DLB	[110]
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$38,$A0			; ADDI	160
	!BYTE	$2A,$B8			; CB	184
	!BYTE	$6A			; LAW	_D085+0
_F044 	!WORD	_D085+0		
	!BYTE	$54			; CALL	_X060
_F045 	!WORD	0		
	!BYTE	$6A			; LAW	_D085+0
_F046 	!WORD	_D085+0		
	!BYTE	$54			; CALL	_X057
_F047 	!WORD	0		
	!BYTE	$02			; CN	1
	!BYTE	$6A			; LAW	_D085+0
_F048 	!WORD	_D085+0		
	!BYTE	$54			; CALL	_X066
_F049 	!WORD	0		
	!BYTE	$30			; DROP 
_B069 
_B070 
; samplesrc/sfm.pla: 0318:     if ymissle <> 255
; samplesrc/sfm.pla: 0319:       if ymissle < 8
; samplesrc/sfm.pla: 0320:         //
; samplesrc/sfm.pla: 0321:         // Missle off top of screen
; samplesrc/sfm.pla: 0322:         //
; samplesrc/sfm.pla: 0323:         spriteDel(1)
; samplesrc/sfm.pla: 0324:         ymissle = 255
; samplesrc/sfm.pla: 0325:       else
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$22			; BREQ	_B071
	!WORD	_B071-*
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$10			; CN	8
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B073
	!WORD	_B073-*
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X067
_F050 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$74,$6F			; SLB	[111]
	!BYTE	$50			; BRNCH	_B074
	!WORD	_B074-*
_B073 
; samplesrc/sfm.pla: 0326:         ymissle = ymissle - 8
; samplesrc/sfm.pla: 0327:         spritePosIndex(xmissle, ymissle, MISSLE_SPRTNUM)
; samplesrc/sfm.pla: 0328:         for k = 0 to spdrnum
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$3A,$08			; SUBI	8
	!BYTE	$74,$6F			; SLB	[111]
	!BYTE	$66,$54			; LLW	[84]
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X061
_F051 	!WORD	0		
	!BYTE	$64,$75			; LLB	[117]
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B075
	!WORD	_B075-*
_B076 
	!BYTE	$6C,$76			; DLB	[118]
; samplesrc/sfm.pla: 0329:           if life[k]
; samplesrc/sfm.pla: 0330:             //
; samplesrc/sfm.pla: 0331:             // Hit test will all living spiders
; samplesrc/sfm.pla: 0332:             //
; samplesrc/sfm.pla: 0333:             if ymissle >= yspdr[k] - 15 and ymissle <= yspdr[k] + 5
; samplesrc/sfm.pla: 0334:               if hatch[k]
; samplesrc/sfm.pla: 0335:                 width = 7 // Egg width
; samplesrc/sfm.pla: 0336:               else
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B078
	!WORD	_B078-*
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$3A,$0F			; SUBI	15
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B080
	!WORD	_B080-*
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$4A			; ISLE
_B080 
	!BYTE	$4C			; BRFLS	_B081
	!WORD	_B081-*
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B083
	!WORD	_B083-*
	!BYTE	$0E			; CN	7
	!BYTE	$74,$74			; SLB	[116]
	!BYTE	$50			; BRNCH	_B084
	!WORD	_B084-*
_B083 
; samplesrc/sfm.pla: 0337:                 width = 10 // Spider width
; samplesrc/sfm.pla: 0338:               fin
	!BYTE	$14			; CN	10
	!BYTE	$74,$74			; SLB	[116]
_B084 
; samplesrc/sfm.pla: 0339:               if xmissle >= xspdr[k] - width and xmissle <= xspdr[k] + width
; samplesrc/sfm.pla: 0340:                 //
; samplesrc/sfm.pla: 0341:                 // Hit & kill spider
; samplesrc/sfm.pla: 0342:                 //
; samplesrc/sfm.pla: 0343:                 life[k]  = 0
; samplesrc/sfm.pla: 0344:                 death[k] = 2
; samplesrc/sfm.pla: 0345:                 spriteAdd(k+SPIDER_SPRTEBASE, spriteDup(sprtSplat1))
; samplesrc/sfm.pla: 0346:                 spritePosIndex(xspdr[k], yspdr[k], k+SPIDER_SPRTEBASE)
; samplesrc/sfm.pla: 0347:                 if attack == k // Was it attacking?
; samplesrc/sfm.pla: 0348:                   attack = -1
; samplesrc/sfm.pla: 0349:                   spriteDel(2)
; samplesrc/sfm.pla: 0350:                   spriteDel(3)
; samplesrc/sfm.pla: 0351:                   spriteDel(4)
; samplesrc/sfm.pla: 0352:                   webstate = 0
; samplesrc/sfm.pla: 0353:                 fin
	!BYTE	$66,$54			; LLW	[84]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$84			; SUB 
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B085
	!WORD	_B085-*
	!BYTE	$66,$54			; LLW	[84]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$B0,$74			; ADDLB	[116]
	!BYTE	$4A			; ISLE
_B085 
	!BYTE	$4C			; BRFLS	_B086
	!WORD	_B086-*
	!BYTE	$00			; CN	0
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$70			; SB
	!BYTE	$04			; CN	2
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$70			; SB
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$6A			; LAW	_D079+0
_F052 	!WORD	_D079+0		
	!BYTE	$54			; CALL	_X053
_F053 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F054 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$54			; CALL	_X061
_F055 	!WORD	0		
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$24			; BRNE	_B088
	!WORD	_B088-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$5A			; SLW	[90]
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X067
_F056 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X067
_F057 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X067
_F058 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$7B			; SLB	[123]
_B088 
_B089 
; samplesrc/sfm.pla: 0354:                 //
; samplesrc/sfm.pla: 0355:                 // Remove missle
; samplesrc/sfm.pla: 0356:                 //
; samplesrc/sfm.pla: 0357:                 spriteDel(MISSLE_SPRTNUM)
; samplesrc/sfm.pla: 0358:                 ymissle = 255
; samplesrc/sfm.pla: 0359:               fin
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X067
_F059 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$74,$6F			; SLB	[111]
_B086 
_B087 
; samplesrc/sfm.pla: 0360:             fin
_B081 
_B082 
; samplesrc/sfm.pla: 0361:           fin
_B078 
_B079 
; samplesrc/sfm.pla: 0362:         next
_B077 
	!BYTE	$A4			; INCBRLE	_B076
	!WORD	_B076-*
_B075 
	!BYTE	$74,$76			; SLB	[118]
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0363:         buzz = ymissle/4
; samplesrc/sfm.pla: 0364:       fin
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$04			; CN	2
	!BYTE	$9C			; SHR
	!BYTE	$78			; SAB	_D091+0
_F060 	!WORD	_D091+0		
_B074 
; samplesrc/sfm.pla: 0365:     fin
_B071 
_B072 
; samplesrc/sfm.pla: 0366:     //
; samplesrc/sfm.pla: 0367:     // Update sprites
; samplesrc/sfm.pla: 0368:     //
; samplesrc/sfm.pla: 0369:     spriteDrawXorList()
; samplesrc/sfm.pla: 0370:     //
; samplesrc/sfm.pla: 0371:     // Lasers
; samplesrc/sfm.pla: 0372:     //
; samplesrc/sfm.pla: 0373:     if lasercharging
; samplesrc/sfm.pla: 0374:       lasercharging--
	!BYTE	$54			; CALL	_X065
_F061 	!WORD	0		
	!BYTE	$64,$6C			; LLB	[108]
	!BYTE	$4C			; BRFLS	_B090
	!WORD	_B090-*
	!BYTE	$64,$6C			; LLB	[108]
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0375:       hgrColor(1)
; samplesrc/sfm.pla: 0376:       hgrRect(81 - lasercharging*4, YSHIP+6, 84 - lasercharging*4, 188)
; samplesrc/sfm.pla: 0377:     fin
	!BYTE	$74,$6C			; SLB	[108]
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X050
_F062 	!WORD	0		
	!BYTE	$2A,$51			; CB	81
	!BYTE	$64,$6C			; LLB	[108]
	!BYTE	$04			; CN	2
	!BYTE	$9A			; SHL
	!BYTE	$84			; SUB 
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$2A,$54			; CB	84
	!BYTE	$64,$6C			; LLB	[108]
	!BYTE	$04			; CN	2
	!BYTE	$9A			; SHL
	!BYTE	$84			; SUB 
	!BYTE	$2A,$BC			; CB	188
	!BYTE	$54			; CALL	_X037
_F063 	!WORD	0		
_B090 
_B091 
; samplesrc/sfm.pla: 0378:     if btn0 and not lasercharging
; samplesrc/sfm.pla: 0379:       //
; samplesrc/sfm.pla: 0380:       // Fire laser
; samplesrc/sfm.pla: 0381:       //
; samplesrc/sfm.pla: 0382:       hgrColor(0)
; samplesrc/sfm.pla: 0383:       hgrRect(4, YSHIP+6, LASER_RECHARGE * 4 + 4, 188)
; samplesrc/sfm.pla: 0384:       lasercharging = LASER_RECHARGE
; samplesrc/sfm.pla: 0385:       leftxlaser    = xship - 7
; samplesrc/sfm.pla: 0386:       rightxlaser   = xship + 7
; samplesrc/sfm.pla: 0387:       leftylaser    = 0
; samplesrc/sfm.pla: 0388:       rightylaser   = 0
; samplesrc/sfm.pla: 0389:       lefthit       = 255
; samplesrc/sfm.pla: 0390:       righthit      = 255
; samplesrc/sfm.pla: 0391:       for k = 0 to spdrnum
	!BYTE	$64,$79			; LLB	[121]
	!BYTE	$AC			; BRAND	_B092
	!WORD	_B092-*
	!BYTE	$64,$6C			; LLB	[108]
	!BYTE	$80			; NOT
_B092 
	!BYTE	$4C			; BRFLS	_B093
	!WORD	_B093-*
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X050
_F064 	!WORD	0		
	!BYTE	$08			; CN	4
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$2A,$50			; CB	80
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$2A,$BC			; CB	188
	!BYTE	$54			; CALL	_X037
_F065 	!WORD	0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$74,$6C			; SLB	[108]
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$3A,$07			; SUBI	7
	!BYTE	$76,$56			; SLW	[86]
	!BYTE	$66,$52			; LLW	[82]
	!BYTE	$38,$07			; ADDI	7
	!BYTE	$76,$58			; SLW	[88]
	!BYTE	$00			; CN	0
	!BYTE	$74,$70			; SLB	[112]
	!BYTE	$00			; CN	0
	!BYTE	$74,$71			; SLB	[113]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$74,$72			; SLB	[114]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$74,$73			; SLB	[115]
	!BYTE	$64,$75			; LLB	[117]
	!BYTE	$00			; CN	0
	!BYTE	$A0			; BRGT	_B095
	!WORD	_B095-*
_B096 
	!BYTE	$6C,$76			; DLB	[118]
; samplesrc/sfm.pla: 0392:         if life[k]
; samplesrc/sfm.pla: 0393:           //
; samplesrc/sfm.pla: 0394:           // Hit test will all living spiders
; samplesrc/sfm.pla: 0395:           //
; samplesrc/sfm.pla: 0396:           if hatch[k]
; samplesrc/sfm.pla: 0397:             width = 7 // Egg width
; samplesrc/sfm.pla: 0398:           else
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$76			; ADDLB	[118]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B098
	!WORD	_B098-*
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B100
	!WORD	_B100-*
	!BYTE	$0E			; CN	7
	!BYTE	$74,$74			; SLB	[116]
	!BYTE	$50			; BRNCH	_B101
	!WORD	_B101-*
_B100 
; samplesrc/sfm.pla: 0399:             width = 10 // Spider width
; samplesrc/sfm.pla: 0400:           fin
	!BYTE	$14			; CN	10
	!BYTE	$74,$74			; SLB	[116]
_B101 
; samplesrc/sfm.pla: 0401:           if leftxlaser >= xspdr[k]-width and leftxlaser <= xspdr[k]+width
; samplesrc/sfm.pla: 0402:             if yspdr[k] + 5 > leftylaser
; samplesrc/sfm.pla: 0403:               lefthit    = k
; samplesrc/sfm.pla: 0404:               leftylaser = yspdr[k] + 5
; samplesrc/sfm.pla: 0405:             fin
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$84			; SUB 
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B102
	!WORD	_B102-*
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$B0,$74			; ADDLB	[116]
	!BYTE	$4A			; ISLE
_B102 
	!BYTE	$4C			; BRFLS	_B103
	!WORD	_B103-*
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$64,$70			; LLB	[112]
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B105
	!WORD	_B105-*
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$74,$72			; SLB	[114]
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$74,$70			; SLB	[112]
_B105 
_B106 
; samplesrc/sfm.pla: 0406:           fin
_B103 
_B104 
; samplesrc/sfm.pla: 0407:           if rightxlaser >= xspdr[k]-width and rightxlaser <= xspdr[k]+width
; samplesrc/sfm.pla: 0408:             if yspdr[k] + 5 > rightylaser
; samplesrc/sfm.pla: 0409:               righthit    = k
; samplesrc/sfm.pla: 0410:               rightylaser = yspdr[k] + 5
; samplesrc/sfm.pla: 0411:             fin
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$84			; SUB 
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B107
	!WORD	_B107-*
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$B0,$74			; ADDLB	[116]
	!BYTE	$4A			; ISLE
_B107 
	!BYTE	$4C			; BRFLS	_B108
	!WORD	_B108-*
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$64,$71			; LLB	[113]
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B110
	!WORD	_B110-*
	!BYTE	$64,$76			; LLB	[118]
	!BYTE	$74,$73			; SLB	[115]
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$76			; IDXLB	[118]
	!BYTE	$62			; LW
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$74,$71			; SLB	[113]
_B110 
_B111 
; samplesrc/sfm.pla: 0412:           fin
_B108 
_B109 
; samplesrc/sfm.pla: 0413:         fin
_B098 
_B099 
; samplesrc/sfm.pla: 0414:       next
_B097 
	!BYTE	$A4			; INCBRLE	_B096
	!WORD	_B096-*
_B095 
	!BYTE	$74,$76			; SLB	[118]
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0415:       //
; samplesrc/sfm.pla: 0416:       // Draw Laser beams
; samplesrc/sfm.pla: 0417:       //
; samplesrc/sfm.pla: 0418:       hgrColor(3)
; samplesrc/sfm.pla: 0419:       if leftxlaser >= 0
; samplesrc/sfm.pla: 0420:         hgrXorVLin(leftylaser,  YSHIP-8, leftxlaser)
; samplesrc/sfm.pla: 0421:         hgrXorVLin(leftylaser,  YSHIP-8, leftxlaser+1)
; samplesrc/sfm.pla: 0422:       fin
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X050
_F066 	!WORD	0		
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$00			; CN	0
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B112
	!WORD	_B112-*
	!BYTE	$64,$70			; LLB	[112]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$54			; CALL	_X036
_F067 	!WORD	0		
	!BYTE	$64,$70			; LLB	[112]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_X036
_F068 	!WORD	0		
_B112 
_B113 
; samplesrc/sfm.pla: 0423:       if rightxlaser < 280
; samplesrc/sfm.pla: 0424:         hgrXorVLin(rightylaser,  YSHIP-8, rightxlaser)
; samplesrc/sfm.pla: 0425:         hgrXorVLin(rightylaser,  YSHIP-8, rightxlaser-1)
; samplesrc/sfm.pla: 0426:       fin
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$2C,$18,$01		; CW	280
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B114
	!WORD	_B114-*
	!BYTE	$64,$71			; LLB	[113]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$54			; CALL	_X036
_F069 	!WORD	0		
	!BYTE	$64,$71			; LLB	[113]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$8E			; DECR
	!BYTE	$54			; CALL	_X036
_F070 	!WORD	0		
_B114 
_B115 
; samplesrc/sfm.pla: 0427:       buzz = LASER_BUZZ
; samplesrc/sfm.pla: 0428:       (@_spkrTone)(15, 1)#0
; samplesrc/sfm.pla: 0429:       if lefthit <> 255
; samplesrc/sfm.pla: 0430:         sprtnum = lefthit + SPIDER_SPRTEBASE
; samplesrc/sfm.pla: 0431:         //
; samplesrc/sfm.pla: 0432:         // Hit
; samplesrc/sfm.pla: 0433:         //
; samplesrc/sfm.pla: 0434:         life[lefthit]--
	!BYTE	$2A,$14			; CB	20
	!BYTE	$78			; SAB	_D091+0
_F071 	!WORD	_D091+0		
	!BYTE	$1E			; CN	15
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_D092
_F072 	!WORD	_D092		
	!BYTE	$64,$72			; LLB	[114]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$22			; BREQ	_B116
	!WORD	_B116-*
	!BYTE	$64,$72			; LLB	[114]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$74,$74			; SLB	[116]
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$72			; ADDLB	[114]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0435:         if not life[lefthit]
; samplesrc/sfm.pla: 0436:           //
; samplesrc/sfm.pla: 0437:           // Kill spider
; samplesrc/sfm.pla: 0438:           //
; samplesrc/sfm.pla: 0439:           death[lefthit] = 2
; samplesrc/sfm.pla: 0440:           spriteAdd(sprtnum, spriteDup(sprtSplat1))
; samplesrc/sfm.pla: 0441:           spritePosIndex(xspdr[lefthit], yspdr[lefthit], sprtnum)
; samplesrc/sfm.pla: 0442:           if attack == lefthit // Was it attacking?
; samplesrc/sfm.pla: 0443:             spriteDel(2)
; samplesrc/sfm.pla: 0444:             spriteDel(3)
; samplesrc/sfm.pla: 0445:             spriteDel(4)
; samplesrc/sfm.pla: 0446:             webstate = 0
; samplesrc/sfm.pla: 0447:             attack   = -1
; samplesrc/sfm.pla: 0448:           fin
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$72			; ADDLB	[114]
	!BYTE	$70			; SB
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$72			; ADDLB	[114]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B118
	!WORD	_B118-*
	!BYTE	$04			; CN	2
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$72			; ADDLB	[114]
	!BYTE	$70			; SB
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$6A			; LAW	_D079+0
_F073 	!WORD	_D079+0		
	!BYTE	$54			; CALL	_X053
_F074 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F075 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$72			; IDXLB	[114]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$72			; IDXLB	[114]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$54			; CALL	_X061
_F076 	!WORD	0		
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$64,$72			; LLB	[114]
	!BYTE	$24			; BRNE	_B120
	!WORD	_B120-*
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X067
_F077 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X067
_F078 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X067
_F079 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$5A			; SLW	[90]
_B120 
_B121 
; samplesrc/sfm.pla: 0449:         else
	!BYTE	$50			; BRNCH	_B119
	!WORD	_B119-*
_B118 
; samplesrc/sfm.pla: 0450:           //
; samplesrc/sfm.pla: 0451:           // Dim color to show life status
; samplesrc/sfm.pla: 0452:           //
; samplesrc/sfm.pla: 0453:           if hatch[lefthit]
; samplesrc/sfm.pla: 0454:             sprtEgg = life[lefthit] == 2 ?? sprtEgg2 :: sprtEgg1
; samplesrc/sfm.pla: 0455:             spriteAdd(sprtnum, spriteDup(sprtEgg))
; samplesrc/sfm.pla: 0456:           else
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$72			; IDXLB	[114]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B122
	!WORD	_B122-*
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$72			; ADDLB	[114]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$24			; BRNE	_B124
	!WORD	_B124-*
	!BYTE	$6A			; LAW	_D072+0
_F080 	!WORD	_D072+0		
	!BYTE	$50			; BRNCH	_B125
	!WORD	_B125-*
_B124 
	!BYTE	$6A			; LAW	_D071+0
_F081 	!WORD	_D071+0		
_B125 
	!BYTE	$7A			; SAW	_D074+0
_F082 	!WORD	_D074+0		
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$6A			; LAW	_D074+0
_F083 	!WORD	_D074+0		
	!BYTE	$54			; CALL	_X053
_F084 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F085 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B123
	!WORD	_B123-*
_B122 
; samplesrc/sfm.pla: 0457:             sprtSpider = life[lefthit] == 2 ?? sprtSpider2 :: sprtSpider1
; samplesrc/sfm.pla: 0458:             spriteAdd(sprtnum, spriteDup(sprtSpider))
; samplesrc/sfm.pla: 0459:           fin
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$72			; ADDLB	[114]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$24			; BRNE	_B126
	!WORD	_B126-*
	!BYTE	$6A			; LAW	_D076+0
_F086 	!WORD	_D076+0		
	!BYTE	$50			; BRNCH	_B127
	!WORD	_B127-*
_B126 
	!BYTE	$6A			; LAW	_D075+0
_F087 	!WORD	_D075+0		
_B127 
	!BYTE	$7A			; SAW	_D078+0
_F088 	!WORD	_D078+0		
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$6A			; LAW	_D078+0
_F089 	!WORD	_D078+0		
	!BYTE	$54			; CALL	_X053
_F090 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F091 	!WORD	0		
	!BYTE	$30			; DROP 
_B123 
; samplesrc/sfm.pla: 0460:           spritePosIndex(xspdr[lefthit], yspdr[lefthit], sprtnum)
; samplesrc/sfm.pla: 0461:         fin
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$72			; IDXLB	[114]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$72			; IDXLB	[114]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$54			; CALL	_X061
_F092 	!WORD	0		
_B119 
; samplesrc/sfm.pla: 0462:       fin
_B116 
_B117 
; samplesrc/sfm.pla: 0463:       if righthit <> 255 and life[righthit]
; samplesrc/sfm.pla: 0464:         sprtnum = righthit + SPIDER_SPRTEBASE
; samplesrc/sfm.pla: 0465:         //
; samplesrc/sfm.pla: 0466:         // Hit
; samplesrc/sfm.pla: 0467:         //
; samplesrc/sfm.pla: 0468:         life[righthit]--
	!BYTE	$64,$73			; LLB	[115]
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$42			; ISNE
	!BYTE	$AC			; BRAND	_B128
	!WORD	_B128-*
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$60			; LB
_B128 
	!BYTE	$4C			; BRFLS	_B129
	!WORD	_B129-*
	!BYTE	$64,$73			; LLB	[115]
	!BYTE	$38,$08			; ADDI	8
	!BYTE	$74,$74			; SLB	[116]
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; samplesrc/sfm.pla: 0469:         if not life[righthit]
; samplesrc/sfm.pla: 0470:           //
; samplesrc/sfm.pla: 0471:           // Kill spider
; samplesrc/sfm.pla: 0472:           //
; samplesrc/sfm.pla: 0473:           death[righthit] = 2
; samplesrc/sfm.pla: 0474:           spriteAdd(sprtnum, spriteDup(sprtSplat1))
; samplesrc/sfm.pla: 0475:           spritePosIndex(xspdr[righthit], yspdr[righthit], sprtnum)
; samplesrc/sfm.pla: 0476:           if attack == righthit // Was it attacking?
; samplesrc/sfm.pla: 0477:             spriteDel(2)
; samplesrc/sfm.pla: 0478:             spriteDel(3)
; samplesrc/sfm.pla: 0479:             spriteDel(4)
; samplesrc/sfm.pla: 0480:             webstate = 0
; samplesrc/sfm.pla: 0481:             attack   = -1
; samplesrc/sfm.pla: 0482:           fin
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$70			; SB
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B131
	!WORD	_B131-*
	!BYTE	$04			; CN	2
	!BYTE	$28,$64			; LLA	[100]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$70			; SB
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$6A			; LAW	_D079+0
_F093 	!WORD	_D079+0		
	!BYTE	$54			; CALL	_X053
_F094 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F095 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$73			; IDXLB	[115]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$73			; IDXLB	[115]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$54			; CALL	_X061
_F096 	!WORD	0		
	!BYTE	$66,$5A			; LLW	[90]
	!BYTE	$64,$73			; LLB	[115]
	!BYTE	$24			; BRNE	_B133
	!WORD	_B133-*
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X067
_F097 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X067
_F098 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$08			; CN	4
	!BYTE	$54			; CALL	_X067
_F099 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$7B			; SLB	[123]
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$5A			; SLW	[90]
_B133 
_B134 
; samplesrc/sfm.pla: 0483:         else
	!BYTE	$50			; BRNCH	_B132
	!WORD	_B132-*
_B131 
; samplesrc/sfm.pla: 0484:           //
; samplesrc/sfm.pla: 0485:           // Dim color to show life status
; samplesrc/sfm.pla: 0486:           //
; samplesrc/sfm.pla: 0487:           if hatch[righthit]
; samplesrc/sfm.pla: 0488:             sprtEgg = life[righthit] == 2 ?? sprtEgg2 :: sprtEgg1
; samplesrc/sfm.pla: 0489:             spriteAdd(sprtnum, spriteDup(sprtEgg))
; samplesrc/sfm.pla: 0490:           else
	!BYTE	$28,$42			; LLA	[66]
	!BYTE	$B8,$73			; IDXLB	[115]
	!BYTE	$62			; LW
	!BYTE	$4C			; BRFLS	_B135
	!WORD	_B135-*
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$24			; BRNE	_B137
	!WORD	_B137-*
	!BYTE	$6A			; LAW	_D072+0
_F100 	!WORD	_D072+0		
	!BYTE	$50			; BRNCH	_B138
	!WORD	_B138-*
_B137 
	!BYTE	$6A			; LAW	_D071+0
_F101 	!WORD	_D071+0		
_B138 
	!BYTE	$7A			; SAW	_D074+0
_F102 	!WORD	_D074+0		
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$6A			; LAW	_D074+0
_F103 	!WORD	_D074+0		
	!BYTE	$54			; CALL	_X053
_F104 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F105 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B136
	!WORD	_B136-*
_B135 
; samplesrc/sfm.pla: 0491:             sprtSpider = life[righthit] == 2 ?? sprtSpider2 :: sprtSpider1
; samplesrc/sfm.pla: 0492:             spriteAdd(sprtnum, spriteDup(sprtSpider))
; samplesrc/sfm.pla: 0493:           fin
	!BYTE	$28,$5C			; LLA	[92]
	!BYTE	$B0,$73			; ADDLB	[115]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$24			; BRNE	_B139
	!WORD	_B139-*
	!BYTE	$6A			; LAW	_D076+0
_F106 	!WORD	_D076+0		
	!BYTE	$50			; BRNCH	_B140
	!WORD	_B140-*
_B139 
	!BYTE	$6A			; LAW	_D075+0
_F107 	!WORD	_D075+0		
_B140 
	!BYTE	$7A			; SAW	_D078+0
_F108 	!WORD	_D078+0		
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$6A			; LAW	_D078+0
_F109 	!WORD	_D078+0		
	!BYTE	$54			; CALL	_X053
_F110 	!WORD	0		
	!BYTE	$54			; CALL	_X066
_F111 	!WORD	0		
	!BYTE	$30			; DROP 
_B136 
; samplesrc/sfm.pla: 0494:           spritePosIndex(xspdr[righthit], yspdr[righthit], sprtnum)
; samplesrc/sfm.pla: 0495:         fin
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B8,$73			; IDXLB	[115]
	!BYTE	$62			; LW
	!BYTE	$28,$12			; LLA	[18]
	!BYTE	$B8,$73			; IDXLB	[115]
	!BYTE	$62			; LW
	!BYTE	$64,$74			; LLB	[116]
	!BYTE	$54			; CALL	_X061
_F112 	!WORD	0		
_B132 
; samplesrc/sfm.pla: 0496:       fin
_B129 
_B130 
; samplesrc/sfm.pla: 0497:       //
; samplesrc/sfm.pla: 0498:       // Undraw lasers
; samplesrc/sfm.pla: 0499:       //
; samplesrc/sfm.pla: 0500:       hgrColor(3)
; samplesrc/sfm.pla: 0501:       if leftxlaser >= 0
; samplesrc/sfm.pla: 0502:         hgrXorVLin(leftylaser,  YSHIP-8, leftxlaser)
; samplesrc/sfm.pla: 0503:         hgrXorVLin(leftylaser,  YSHIP-8, leftxlaser+1)
; samplesrc/sfm.pla: 0504:       fin
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X050
_F113 	!WORD	0		
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$00			; CN	0
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B141
	!WORD	_B141-*
	!BYTE	$64,$70			; LLB	[112]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$54			; CALL	_X036
_F114 	!WORD	0		
	!BYTE	$64,$70			; LLB	[112]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$56			; LLW	[86]
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_X036
_F115 	!WORD	0		
_B141 
_B142 
; samplesrc/sfm.pla: 0505:       if rightxlaser < 280
; samplesrc/sfm.pla: 0506:         hgrXorVLin(rightylaser,  YSHIP-8, rightxlaser)
; samplesrc/sfm.pla: 0507:         hgrXorVLin(rightylaser,  YSHIP-8, rightxlaser-1)
; samplesrc/sfm.pla: 0508:       fin
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$2C,$18,$01		; CW	280
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B143
	!WORD	_B143-*
	!BYTE	$64,$71			; LLB	[113]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$54			; CALL	_X036
_F116 	!WORD	0		
	!BYTE	$64,$71			; LLB	[113]
	!BYTE	$2A,$AC			; CB	172
	!BYTE	$66,$58			; LLW	[88]
	!BYTE	$8E			; DECR
	!BYTE	$54			; CALL	_X036
_F117 	!WORD	0		
_B143 
_B144 
; samplesrc/sfm.pla: 0509:     fin
_B093 
_B094 
; samplesrc/sfm.pla: 0510:     //
; samplesrc/sfm.pla: 0511:     // Update stars
; samplesrc/sfm.pla: 0512:     //
; samplesrc/sfm.pla: 0513:     hgrColor(3)
; samplesrc/sfm.pla: 0514:     hgrXorPlot(xstar[curstar], ystar[curstar])
; samplesrc/sfm.pla: 0515:     ystar[curstar]++
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X050
_F118 	!WORD	0		
	!BYTE	$26			; LA	_D088+0
_F119 	!WORD	_D088+0		
	!BYTE	$BC			; IDXAB	_D090+0
_F120 	!WORD	_D090+0		
	!BYTE	$62			; LW
	!BYTE	$26			; LA	_D089+0
_F121 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F122 	!WORD	_D090+0		
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X032
_F123 	!WORD	0		
	!BYTE	$26			; LA	_D089+0
_F124 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F125 	!WORD	_D090+0		
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
; samplesrc/sfm.pla: 0516:     if ystar[curstar] > YSHIP
; samplesrc/sfm.pla: 0517:         ystar[curstar] = 0
; samplesrc/sfm.pla: 0518:     fin
	!BYTE	$26			; LA	_D089+0
_F126 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F127 	!WORD	_D090+0		
	!BYTE	$70			; SB
	!BYTE	$26			; LA	_D089+0
_F128 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F129 	!WORD	_D090+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$B4			; CB	180
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B145
	!WORD	_B145-*
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D089+0
_F130 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F131 	!WORD	_D090+0		
	!BYTE	$70			; SB
_B145 
_B146 
; samplesrc/sfm.pla: 0519:     hgrXorPlot(xstar[curstar], ystar[curstar])
; samplesrc/sfm.pla: 0520:     curstar++
	!BYTE	$26			; LA	_D088+0
_F132 	!WORD	_D088+0		
	!BYTE	$BC			; IDXAB	_D090+0
_F133 	!WORD	_D090+0		
	!BYTE	$62			; LW
	!BYTE	$26			; LA	_D089+0
_F134 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F135 	!WORD	_D090+0		
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X032
_F136 	!WORD	0		
	!BYTE	$68			; LAB	_D090+0
_F137 	!WORD	_D090+0		
	!BYTE	$8C			; INCR
; samplesrc/sfm.pla: 0521:     if curstar >= NUMSTARS; curstar = 0; fin
	!BYTE	$7C			; DAB	_D090+0
_F138 	!WORD	_D090+0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B147
	!WORD	_B147-*
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D090+0
_F139 	!WORD	_D090+0		
_B147 
_B148 
; samplesrc/sfm.pla: 0522:   until ^$C000 == $9B // ESCape key pressed
_B009 
	!BYTE	$68,$00,$C0		; LAB	49152
	!BYTE	$2A,$9B			; CB	155
	!BYTE	$24			; BRNE	_B008
	!WORD	_B008-*
_B007 
; samplesrc/sfm.pla: 0523:   getc
; samplesrc/sfm.pla: 0524:   return FALSE
	!BYTE	$54			; CALL	_X006
_F140 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5A,$7C			; LEAVE	124
; samplesrc/sfm.pla: 0525: end
; samplesrc/sfm.pla: 0526: //
; samplesrc/sfm.pla: 0527: // Initialization
; samplesrc/sfm.pla: 0528: //
; samplesrc/sfm.pla: 0529: puts("Loading");
_INIT 
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$4C,$6F,$61,$64,$69,$6E,$67
	!BYTE	$54			; CALL	_X004
_F141 	!WORD	0		
; samplesrc/sfm.pla: 0530: putc('.')
; samplesrc/sfm.pla: 0531: sprtShip = spriteRead("SHIP")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F142 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$53,$48,$49,$50
	!BYTE	$54			; CALL	_X054
_F143 	!WORD	0		
	!BYTE	$7A			; SAW	_D084+0
_F144 	!WORD	_D084+0		
; samplesrc/sfm.pla: 0532: if not sprtShip
; samplesrc/sfm.pla: 0533:   cmdsys:modexec("SFMSPRT")
	!BYTE	$6A			; LAW	_D084+0
_F145 	!WORD	_D084+0		
	!BYTE	$4E			; BRTRU	_B149
	!WORD	_B149-*
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$46,$4D,$53,$50,$52,$54
	!BYTE	$6A			; LAW	_X000+6
_F146 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0534:   sprtShip = spriteRead("SHIP")
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$53,$48,$49,$50
	!BYTE	$54			; CALL	_X054
_F147 	!WORD	0		
	!BYTE	$7A			; SAW	_D084+0
_F148 	!WORD	_D084+0		
; samplesrc/sfm.pla: 0535:   if not sprtShip
; samplesrc/sfm.pla: 0536:     puts("\nError: Unable to compile sprites.\n")
	!BYTE	$6A			; LAW	_D084+0
_F149 	!WORD	_D084+0		
	!BYTE	$4E			; BRTRU	_B151
	!WORD	_B151-*
	!BYTE	$2E			; CS
	!BYTE	$23
	!BYTE	$0D,$45,$72,$72,$6F,$72,$3A,$20
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$63,$6F,$6D,$70,$69,$6C
	!BYTE	$65,$20,$73,$70,$72,$69,$74,$65
	!BYTE	$73,$2E,$0D
	!BYTE	$54			; CALL	_X004
_F150 	!WORD	0		
; samplesrc/sfm.pla: 0537:     return -1
	!BYTE	$20			; MINUS ONE
	!BYTE	$5C			; RET
; samplesrc/sfm.pla: 0538:   fin
_B151 
_B152 
; samplesrc/sfm.pla: 0539: fin
_B149 
_B150 
; samplesrc/sfm.pla: 0540: putc('.')
; samplesrc/sfm.pla: 0541: sprtMissle = spriteRead("MISSLE")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F151 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$4D,$49,$53,$53,$4C,$45
	!BYTE	$54			; CALL	_X054
_F152 	!WORD	0		
	!BYTE	$7A			; SAW	_D085+0
_F153 	!WORD	_D085+0		
; samplesrc/sfm.pla: 0542: putc('.')
; samplesrc/sfm.pla: 0543: sprtEgg3   = spriteRead("EGG3")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F154 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$45,$47,$47,$33
	!BYTE	$54			; CALL	_X054
_F155 	!WORD	0		
	!BYTE	$7A			; SAW	_D073+0
_F156 	!WORD	_D073+0		
; samplesrc/sfm.pla: 0544: putc('.')
; samplesrc/sfm.pla: 0545: sprtEgg2   = spriteRead("EGG2")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F157 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$45,$47,$47,$32
	!BYTE	$54			; CALL	_X054
_F158 	!WORD	0		
	!BYTE	$7A			; SAW	_D072+0
_F159 	!WORD	_D072+0		
; samplesrc/sfm.pla: 0546: putc('.')
; samplesrc/sfm.pla: 0547: sprtEgg1   = spriteRead("EGG1")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F160 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$45,$47,$47,$31
	!BYTE	$54			; CALL	_X054
_F161 	!WORD	0		
	!BYTE	$7A			; SAW	_D071+0
_F162 	!WORD	_D071+0		
; samplesrc/sfm.pla: 0548: putc('.')
; samplesrc/sfm.pla: 0549: sprtSpider3= spriteRead("SPIDER3")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F163 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$50,$49,$44,$45,$52,$33
	!BYTE	$54			; CALL	_X054
_F164 	!WORD	0		
	!BYTE	$7A			; SAW	_D077+0
_F165 	!WORD	_D077+0		
; samplesrc/sfm.pla: 0550: putc('.')
; samplesrc/sfm.pla: 0551: sprtSpider2= spriteRead("SPIDER2")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F166 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$50,$49,$44,$45,$52,$32
	!BYTE	$54			; CALL	_X054
_F167 	!WORD	0		
	!BYTE	$7A			; SAW	_D076+0
_F168 	!WORD	_D076+0		
; samplesrc/sfm.pla: 0552: putc('.')
; samplesrc/sfm.pla: 0553: sprtSpider1= spriteRead("SPIDER1")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F169 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$50,$49,$44,$45,$52,$31
	!BYTE	$54			; CALL	_X054
_F170 	!WORD	0		
	!BYTE	$7A			; SAW	_D075+0
_F171 	!WORD	_D075+0		
; samplesrc/sfm.pla: 0554: putc('.')
; samplesrc/sfm.pla: 0555: sprtWeb1   = spriteRead("WEB1")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F172 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$57,$45,$42,$31
	!BYTE	$54			; CALL	_X054
_F173 	!WORD	0		
	!BYTE	$7A			; SAW	_D081+0
_F174 	!WORD	_D081+0		
; samplesrc/sfm.pla: 0556: putc('.')
; samplesrc/sfm.pla: 0557: sprtWeb2   = spriteRead("WEB2")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F175 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$57,$45,$42,$32
	!BYTE	$54			; CALL	_X054
_F176 	!WORD	0		
	!BYTE	$7A			; SAW	_D082+0
_F177 	!WORD	_D082+0		
; samplesrc/sfm.pla: 0558: putc('.')
; samplesrc/sfm.pla: 0559: sprtWeb3   = spriteRead("WEB3")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F178 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$57,$45,$42,$33
	!BYTE	$54			; CALL	_X054
_F179 	!WORD	0		
	!BYTE	$7A			; SAW	_D083+0
_F180 	!WORD	_D083+0		
; samplesrc/sfm.pla: 0560: putc('.')
; samplesrc/sfm.pla: 0561: sprtSplat1 = spriteRead("SPLAT1")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F181 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$53,$50,$4C,$41,$54,$31
	!BYTE	$54			; CALL	_X054
_F182 	!WORD	0		
	!BYTE	$7A			; SAW	_D079+0
_F183 	!WORD	_D079+0		
; samplesrc/sfm.pla: 0562: putc('.')
; samplesrc/sfm.pla: 0563: sprtSplat2 = spriteRead("SPLAT2")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F184 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$53,$50,$4C,$41,$54,$32
	!BYTE	$54			; CALL	_X054
_F185 	!WORD	0		
	!BYTE	$7A			; SAW	_D080+0
_F186 	!WORD	_D080+0		
; samplesrc/sfm.pla: 0564: putc('.')
; samplesrc/sfm.pla: 0565: sprtDummy  = spriteRead("DUMMY")
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F187 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$44,$55,$4D,$4D,$59
	!BYTE	$54			; CALL	_X054
_F188 	!WORD	0		
	!BYTE	$7A			; SAW	_D086+0
_F189 	!WORD	_D086+0		
; samplesrc/sfm.pla: 0566: //
; samplesrc/sfm.pla: 0567: // Heat up JIT compiler
; samplesrc/sfm.pla: 0568: //
; samplesrc/sfm.pla: 0569: for curstar = 0 to 50
	!BYTE	$2A,$32			; CB	50
	!BYTE	$00			; CN	0
_B154 
	!BYTE	$7C			; DAB	_D090+0
_F190 	!WORD	_D090+0		
; samplesrc/sfm.pla: 0570:   putc('.')
; samplesrc/sfm.pla: 0571:   spriteAdd(0, sprtDummy)
; samplesrc/sfm.pla: 0572:   spritePosIndex(0, 0, 0)
; samplesrc/sfm.pla: 0573:   spriteDrawXorList()
; samplesrc/sfm.pla: 0574: next
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_X002
_F191 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D086+0
_F192 	!WORD	_D086+0		
	!BYTE	$54			; CALL	_X066
_F193 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X061
_F194 	!WORD	0		
	!BYTE	$54			; CALL	_X065
_F195 	!WORD	0		
_B155 
	!BYTE	$A4			; INCBRLE	_B154
	!WORD	_B154-*
_B153 
	!BYTE	$78			; SAB	_D090+0
_F196 	!WORD	_D090+0		
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0575: heapstart = heapmark()
; samplesrc/sfm.pla: 0576: //puts("\nBeginning available memory: "); puti(heapavail()); putln
; samplesrc/sfm.pla: 0577: repeat
	!BYTE	$54			; CALL	_X012
_F197 	!WORD	0		
	!BYTE	$7A			; SAW	_D087+0
_F198 	!WORD	_D087+0		
_B157 
; samplesrc/sfm.pla: 0578:   hgrMode(TRUE)
; samplesrc/sfm.pla: 0579:   spriteDrawBuf(hgrDrawBuf(0)) // Single buffered
; samplesrc/sfm.pla: 0580:   spriteAdd(SHIP_SPRTNUM, sprtShip)
; samplesrc/sfm.pla: 0581:   spriteAdd(SPIDER_SPRTEBASE, sprtEgg3)
; samplesrc/sfm.pla: 0582:   //
; samplesrc/sfm.pla: 0583:   // Init stars
; samplesrc/sfm.pla: 0584:   //
; samplesrc/sfm.pla: 0585:   xstar[0] = 99
; samplesrc/sfm.pla: 0586:   ystar[0] = 10
; samplesrc/sfm.pla: 0587:   hgrColor(3)
; samplesrc/sfm.pla: 0588:   hgrXorPlot(xstar[0], ystar[0])
; samplesrc/sfm.pla: 0589:   for curstar = 1 to NUMSTARS-1
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X045
_F199 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X049
_F200 	!WORD	0		
	!BYTE	$54			; CALL	_X068
_F201 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D084+0
_F202 	!WORD	_D084+0		
	!BYTE	$54			; CALL	_X066
_F203 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$10			; CN	8
	!BYTE	$6A			; LAW	_D073+0
_F204 	!WORD	_D073+0		
	!BYTE	$54			; CALL	_X066
_F205 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$63			; CB	99
	!BYTE	$7A			; SAW	_D088+0
_F206 	!WORD	_D088+0		
	!BYTE	$14			; CN	10
	!BYTE	$78			; SAB	_D089+0
_F207 	!WORD	_D089+0		
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X050
_F208 	!WORD	0		
	!BYTE	$6A			; LAW	_D088+0
_F209 	!WORD	_D088+0		
	!BYTE	$68			; LAB	_D089+0
_F210 	!WORD	_D089+0		
	!BYTE	$54			; CALL	_X032
_F211 	!WORD	0		
	!BYTE	$2A,$1F			; CB	31
	!BYTE	$02			; CN	1
_B160 
	!BYTE	$7C			; DAB	_D090+0
_F212 	!WORD	_D090+0		
; samplesrc/sfm.pla: 0590:     xstar[curstar] = (xstar[curstar - 1] + 97 - curstar) % 280
; samplesrc/sfm.pla: 0591:     ystar[curstar] = (ystar[curstar - 1] + 19 + curstar) % YSHIP
; samplesrc/sfm.pla: 0592:     hgrXorPlot(xstar[curstar], ystar[curstar])
; samplesrc/sfm.pla: 0593:   next
	!BYTE	$26			; LA	_D088+0
_F213 	!WORD	_D088+0		
	!BYTE	$68			; LAB	_D090+0
_F214 	!WORD	_D090+0		
	!BYTE	$8E			; DECR
	!BYTE	$9E			; IDXW
	!BYTE	$62			; LW
	!BYTE	$38,$61			; ADDI	97
	!BYTE	$68			; LAB	_D090+0
_F215 	!WORD	_D090+0		
	!BYTE	$84			; SUB 
	!BYTE	$2C,$18,$01		; CW	280
	!BYTE	$8A			; MOD
	!BYTE	$26			; LA	_D088+0
_F216 	!WORD	_D088+0		
	!BYTE	$BC			; IDXAB	_D090+0
_F217 	!WORD	_D090+0		
	!BYTE	$72			; SW
	!BYTE	$26			; LA	_D089+0
_F218 	!WORD	_D089+0		
	!BYTE	$68			; LAB	_D090+0
_F219 	!WORD	_D090+0		
	!BYTE	$8E			; DECR
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$38,$13			; ADDI	19
	!BYTE	$B4			; ADDAB	_D090+0
_F220 	!WORD	_D090+0		
	!BYTE	$2A,$B4			; CB	180
	!BYTE	$8A			; MOD
	!BYTE	$26			; LA	_D089+0
_F221 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F222 	!WORD	_D090+0		
	!BYTE	$70			; SB
	!BYTE	$26			; LA	_D088+0
_F223 	!WORD	_D088+0		
	!BYTE	$BC			; IDXAB	_D090+0
_F224 	!WORD	_D090+0		
	!BYTE	$62			; LW
	!BYTE	$26			; LA	_D089+0
_F225 	!WORD	_D089+0		
	!BYTE	$B4			; ADDAB	_D090+0
_F226 	!WORD	_D090+0		
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X032
_F227 	!WORD	0		
_B161 
	!BYTE	$A4			; INCBRLE	_B160
	!WORD	_B160-*
_B159 
	!BYTE	$78			; SAB	_D090+0
_F228 	!WORD	_D090+0		
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0594:   curstar = 0
; samplesrc/sfm.pla: 0595:   if game(8)
; samplesrc/sfm.pla: 0596:     //
; samplesrc/sfm.pla: 0597:     // Won
; samplesrc/sfm.pla: 0598:     //
; samplesrc/sfm.pla: 0599:     spriteDrawXorList()
; samplesrc/sfm.pla: 0600:     (@_spkrTone)(100, 20)#0
; samplesrc/sfm.pla: 0601:     (@_spkrTone)(75,  20)#0
; samplesrc/sfm.pla: 0602:     (@_spkrTone)(15,  20)#0
; samplesrc/sfm.pla: 0603:     (@_spkrTone)(25,  100)#0
; samplesrc/sfm.pla: 0604:     puts("\nZiggy Stardust has saved Earth!\n")
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D090+0
_F229 	!WORD	_D090+0		
	!BYTE	$10			; CN	8
	!BYTE	$54			; CALL	_C000
_F230 	!WORD	_C000		
	!BYTE	$4C			; BRFLS	_B162
	!WORD	_B162-*
	!BYTE	$54			; CALL	_X065
_F231 	!WORD	0		
	!BYTE	$2A,$64			; CB	100
	!BYTE	$2A,$14			; CB	20
	!BYTE	$54			; CALL	_D092
_F232 	!WORD	_D092		
	!BYTE	$2A,$4B			; CB	75
	!BYTE	$2A,$14			; CB	20
	!BYTE	$54			; CALL	_D092
_F233 	!WORD	_D092		
	!BYTE	$1E			; CN	15
	!BYTE	$2A,$14			; CB	20
	!BYTE	$54			; CALL	_D092
_F234 	!WORD	_D092		
	!BYTE	$2A,$19			; CB	25
	!BYTE	$2A,$64			; CB	100
	!BYTE	$54			; CALL	_D092
_F235 	!WORD	_D092		
	!BYTE	$2E			; CS
	!BYTE	$21
	!BYTE	$0D,$5A,$69,$67,$67,$79,$20,$53
	!BYTE	$74,$61,$72,$64,$75,$73,$74,$20
	!BYTE	$68,$61,$73,$20,$73,$61,$76,$65
	!BYTE	$64,$20,$45,$61,$72,$74,$68,$21
	!BYTE	$0D
	!BYTE	$54			; CALL	_X004
_F236 	!WORD	0		
; samplesrc/sfm.pla: 0605:   else
	!BYTE	$50			; BRNCH	_B163
	!WORD	_B163-*
_B162 
; samplesrc/sfm.pla: 0606:     //
; samplesrc/sfm.pla: 0607:     // Lost
; samplesrc/sfm.pla: 0608:     //
; samplesrc/sfm.pla: 0609:     spriteDrawXorList()
; samplesrc/sfm.pla: 0610:     (@_spkrTone)(100, 50)#0
; samplesrc/sfm.pla: 0611:     spriteDrawXor(sprtShip)
; samplesrc/sfm.pla: 0612:     (@_spkrTone)(150, 50)#0
; samplesrc/sfm.pla: 0613:     spriteDrawXor(sprtShip)
; samplesrc/sfm.pla: 0614:     (@_spkrTone)(100, 50)#0
; samplesrc/sfm.pla: 0615:     spriteDrawXor(sprtShip)
; samplesrc/sfm.pla: 0616:     (@_spkrTone)(150, 50)#0
; samplesrc/sfm.pla: 0617:     puts("\nEarth has been overrun")
	!BYTE	$54			; CALL	_X065
_F237 	!WORD	0		
	!BYTE	$2A,$64			; CB	100
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_D092
_F238 	!WORD	_D092		
	!BYTE	$6A			; LAW	_D084+0
_F239 	!WORD	_D084+0		
	!BYTE	$54			; CALL	_X057
_F240 	!WORD	0		
	!BYTE	$2A,$96			; CB	150
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_D092
_F241 	!WORD	_D092		
	!BYTE	$6A			; LAW	_D084+0
_F242 	!WORD	_D084+0		
	!BYTE	$54			; CALL	_X057
_F243 	!WORD	0		
	!BYTE	$2A,$64			; CB	100
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_D092
_F244 	!WORD	_D092		
	!BYTE	$6A			; LAW	_D084+0
_F245 	!WORD	_D084+0		
	!BYTE	$54			; CALL	_X057
_F246 	!WORD	0		
	!BYTE	$2A,$96			; CB	150
	!BYTE	$2A,$32			; CB	50
	!BYTE	$54			; CALL	_D092
_F247 	!WORD	_D092		
	!BYTE	$2E			; CS
	!BYTE	$17
	!BYTE	$0D,$45,$61,$72,$74,$68,$20,$68
	!BYTE	$61,$73,$20,$62,$65,$65,$6E,$20
	!BYTE	$6F,$76,$65,$72,$72,$75,$6E
	!BYTE	$54			; CALL	_X004
_F248 	!WORD	0		
; samplesrc/sfm.pla: 0618:     puts("\nby the Spiders from Mars\n")
	!BYTE	$2E			; CS
	!BYTE	$1A
	!BYTE	$0D,$62,$79,$20,$74,$68,$65,$20
	!BYTE	$53,$70,$69,$64,$65,$72,$73,$20
	!BYTE	$66,$72,$6F,$6D,$20,$4D,$61,$72
	!BYTE	$73,$0D
	!BYTE	$54			; CALL	_X004
_F249 	!WORD	0		
; samplesrc/sfm.pla: 0619:   fin
_B163 
; samplesrc/sfm.pla: 0620:   hgrMode(FALSE)
; samplesrc/sfm.pla: 0621:   //
; samplesrc/sfm.pla: 0622:   // Clear sprite lists
; samplesrc/sfm.pla: 0623:   //
; samplesrc/sfm.pla: 0624:   for curstar = 0 to 15
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X045
_F250 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
_B165 
	!BYTE	$7C			; DAB	_D090+0
_F251 	!WORD	_D090+0		
; samplesrc/sfm.pla: 0625:     spriteDel(curstar)
; samplesrc/sfm.pla: 0626:   next
	!BYTE	$68			; LAB	_D090+0
_F252 	!WORD	_D090+0		
	!BYTE	$54			; CALL	_X067
_F253 	!WORD	0		
	!BYTE	$30			; DROP 
_B166 
	!BYTE	$A4			; INCBRLE	_B165
	!WORD	_B165-*
_B164 
	!BYTE	$78			; SAB	_D090+0
_F254 	!WORD	_D090+0		
	!BYTE	$30			; DROP 
; samplesrc/sfm.pla: 0627:   spriteDrawXorList()
; samplesrc/sfm.pla: 0628:   spriteDrawXorList()
; samplesrc/sfm.pla: 0629:   //
; samplesrc/sfm.pla: 0630:   // Reset heap
; samplesrc/sfm.pla: 0631:   //
; samplesrc/sfm.pla: 0632:   heaprelease(heapstart)
; samplesrc/sfm.pla: 0633:   //puts("\nAvailable memory: "); puti(heapavail()); putln
; samplesrc/sfm.pla: 0634:   puts("Play again (Y/N)?")
	!BYTE	$54			; CALL	_X065
_F255 	!WORD	0		
	!BYTE	$54			; CALL	_X065
_F256 	!WORD	0		
	!BYTE	$6A			; LAW	_D087+0
_F257 	!WORD	_D087+0		
	!BYTE	$54			; CALL	_X015
_F258 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$11
	!BYTE	$50,$6C,$61,$79,$20,$61,$67,$61
	!BYTE	$69,$6E,$20,$28,$59,$2F,$4E,$29
	!BYTE	$3F
	!BYTE	$54			; CALL	_X004
_F259 	!WORD	0		
; samplesrc/sfm.pla: 0635: until toupper(getc) <> 'Y'
_B158 
	!BYTE	$54			; CALL	_X006
_F260 	!WORD	0		
	!BYTE	$54			; CALL	_X021
_F261 	!WORD	0		
	!BYTE	$2A,$59			; CB	89
	!BYTE	$22			; BREQ	_B157
	!WORD	_B157-*
_B156 
; samplesrc/sfm.pla: 0636: putln
; samplesrc/sfm.pla: 0637: done
	!BYTE	$54			; CALL	_X003
_F262 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	60			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	57			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	70			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	60			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	57			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	65			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	37			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	53			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F138-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F139-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F140-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F141-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F142-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F143-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F144-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F145-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F146-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F147-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F148-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F149-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F150-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F151-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F152-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F153-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F154-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F155-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F156-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F157-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F158-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F159-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F160-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F161-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F162-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F163-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F164-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F165-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F166-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F167-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F168-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F169-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F170-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F171-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F172-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F173-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F174-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F175-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F176-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F177-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F178-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F179-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F180-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F181-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F182-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F183-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F184-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F185-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F186-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F187-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F188-_SEGBEGIN		
	!BYTE	54			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F189-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F190-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F191-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F192-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F193-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F194-_SEGBEGIN		
	!BYTE	61			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F195-_SEGBEGIN		
	!BYTE	65			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F196-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F197-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F198-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F199-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F200-_SEGBEGIN		
	!BYTE	49			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F201-_SEGBEGIN		
	!BYTE	68			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F202-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F203-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F204-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F205-_SEGBEGIN		
	!BYTE	66			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F206-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F207-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F208-_SEGBEGIN		
	!BYTE	50			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F209-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F210-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F211-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F212-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F213-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F214-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F215-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F216-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F217-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F218-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F219-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F220-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F221-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F222-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F223-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F224-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F225-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F226-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F227-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F228-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F229-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F230-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F231-_SEGBEGIN		
	!BYTE	65			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F232-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F233-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F234-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F235-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F236-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F237-_SEGBEGIN		
	!BYTE	65			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F238-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F239-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F240-_SEGBEGIN		
	!BYTE	57			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F241-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F242-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F243-_SEGBEGIN		
	!BYTE	57			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F244-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F245-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F246-_SEGBEGIN		
	!BYTE	57			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F247-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F248-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F249-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F250-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F251-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F252-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F253-_SEGBEGIN		
	!BYTE	67			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F254-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F255-_SEGBEGIN		
	!BYTE	65			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F256-_SEGBEGIN		
	!BYTE	65			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F257-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F258-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F259-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F260-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F261-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F262-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: HEAPMARK
	!BYTE	$C8,$C5,$C1,$D0,$CD,$C1,$D2,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	12			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: HGRXORPLOT
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D0,$CC,$CF,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: HGRXORVLIN
	!BYTE	$C8,$C7,$D2,$D8,$CF,$D2,$D6,$CC,$C9,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	36			; ESD INDEX
	; DCI STRING: HGRRECT
	!BYTE	$C8,$C7,$D2,$D2,$C5,$C3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	37			; ESD INDEX
	; DCI STRING: HGRMODE
	!BYTE	$C8,$C7,$D2,$CD,$CF,$C4,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	45			; ESD INDEX
	; DCI STRING: HGRDRAWBUF
	!BYTE	$C8,$C7,$D2,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	49			; ESD INDEX
	; DCI STRING: HGRCOLOR
	!BYTE	$C8,$C7,$D2,$C3,$CF,$CC,$CF,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	50			; ESD INDEX
	; DCI STRING: SPRITEDUP
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D5,$50
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	53			; ESD INDEX
	; DCI STRING: SPRITEREAD
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D2,$C5,$C1,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	54			; ESD INDEX
	; DCI STRING: SPRITEDRAWXOR
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$D8,$CF,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	57			; ESD INDEX
	; DCI STRING: SPRITEPOS
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D0,$CF,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	60			; ESD INDEX
	; DCI STRING: SPRITEPOSINDEX
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D0,$CF,$D3,$C9,$CE,$C4,$C5,$58
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	61			; ESD INDEX
	; DCI STRING: SPRITEDRAWXORLIST
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$D8,$CF,$D2,$CC,$C9,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	65			; ESD INDEX
	; DCI STRING: SPRITEADD
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C1,$C4,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	66			; ESD INDEX
	; DCI STRING: SPRITEDEL
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$C5,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	67			; ESD INDEX
	; DCI STRING: SPRITEDRAWBUF
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	68			; ESD INDEX
	; DCI STRING: JOYPOS
	!BYTE	$CA,$CF,$D9,$D0,$CF,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	70			; ESD INDEX
	!BYTE	$00			; END OF ESD
