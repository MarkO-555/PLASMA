; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/sfmsprt.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/sfmsprt.pla: 0001: 
; samplesrc/sfmsprt.pla: 0002: include "inc/hgrlib.plh"
; inc/hgrlib.plh: 0001: import hgrlib
	; DCI STRING: HGRLIB
	!BYTE	$C8,$C7,$D2,$CC,$C9,$42
					; HGRLIB -> X028
; inc/hgrlib.plh: 0002:     predef divmod7(x)#2
					; DIVMOD7 -> X029
; inc/hgrlib.plh: 0003:     predef hgrPlot(x, y)#0
					; HGRPLOT -> X030
; inc/hgrlib.plh: 0004:     predef hgrOrPlot(x, y)#0
					; HGRORPLOT -> X031
; inc/hgrlib.plh: 0005:     predef hgrXorPlot(x, y)#0
					; HGRXORPLOT -> X032
; inc/hgrlib.plh: 0006:     predef hgrHLin(x1, x2, y)#0
					; HGRHLIN -> X033
; inc/hgrlib.plh: 0007:     predef hgrVLin(y1, y2, x)#0
					; HGRVLIN -> X034
; inc/hgrlib.plh: 0008:     predef hgrXorHLin(x1, x2, y)#0
					; HGRXORHLIN -> X035
; inc/hgrlib.plh: 0009:     predef hgrXorVLin(y1, y2, x)#0
					; HGRXORVLIN -> X036
; inc/hgrlib.plh: 0010:     predef hgrRect(x1, y1, x2, y2)#0
					; HGRRECT -> X037
; inc/hgrlib.plh: 0011:     predef hgrXorRect(x1, y1, x2, y2)#0
					; HGRXORRECT -> X038
; inc/hgrlib.plh: 0012:     predef hgrBLT(x, y, width, height, srcptr)#0
					; HGRBLT -> X039
; inc/hgrlib.plh: 0013:     predef hgrCopySrc(ofst, y, w, h, srcptr)#0
					; HGRCOPYSRC -> X040
; inc/hgrlib.plh: 0014:     predef hgrAndSrc(ofst, y, w, h, srcptr)#0
					; HGRANDSRC -> X041
; inc/hgrlib.plh: 0015:     predef hgrXorSrc(ofst, y, w, h, srcptr)#0
					; HGRXORSRC -> X042
; inc/hgrlib.plh: 0016:     predef hgrOrSrc(ofst, y, w, h, srcptr)#0
					; HGRORSRC -> X043
; inc/hgrlib.plh: 0017:     predef hgrCopyDst(ofst, y, w, h, dstptr)#0
					; HGRCOPYDST -> X044
; inc/hgrlib.plh: 0018:     predef hgrMode(mode)#1
					; HGRMODE -> X045
; inc/hgrlib.plh: 0019:     predef hgrClear#0
					; HGRCLEAR -> X046
; inc/hgrlib.plh: 0020:     predef hgrShow(page)#1
					; HGRSHOW -> X047
; inc/hgrlib.plh: 0021:     predef hgrSwap#1
					; HGRSWAP -> X048
; inc/hgrlib.plh: 0022:     predef hgrDrawBuf(page)#1
					; HGRDRAWBUF -> X049
; inc/hgrlib.plh: 0023:     predef hgrColor(clr)#0
					; HGRCOLOR -> X050
; inc/hgrlib.plh: 0024: end
; samplesrc/sfmsprt.pla: 0002: 
; samplesrc/sfmsprt.pla: 0003: include "inc/hgrsprite.plh"
; inc/hgrsprite.plh: 0001: import hgrsprite
	; DCI STRING: HGRSPRITE
	!BYTE	$C8,$C7,$D2,$D3,$D0,$D2,$C9,$D4,$45
					; HGRSPRITE -> X051
; inc/hgrsprite.plh: 0002:     predef spriteCompile(w, h, xcenter, ycenter, srcptr)#1
					; SPRITECOMPILE -> X052
; inc/hgrsprite.plh: 0003:     predef spriteDup(sprtsrc)#1
					; SPRITEDUP -> X053
; inc/hgrsprite.plh: 0004:     predef spriteRead(filestr)#1
					; SPRITEREAD -> X054
; inc/hgrsprite.plh: 0005:     predef spriteSave(filestr, sprtptr)#1
					; SPRITESAVE -> X055
; inc/hgrsprite.plh: 0006:     predef spriteDraw(sprtptr)#0
					; SPRITEDRAW -> X056
; inc/hgrsprite.plh: 0007:     predef spriteDrawXor(sprtptr)#0
					; SPRITEDRAWXOR -> X057
; inc/hgrsprite.plh: 0008:     predef spriteUnDraw(sprtptr)#0
					; SPRITEUNDRAW -> X058
; inc/hgrsprite.plh: 0009:     predef spriteUnDrawXor(sprtptr)#0
					; SPRITEUNDRAWXOR -> X059
; inc/hgrsprite.plh: 0010:     predef spritePos(x, y, sprtptr)#0
					; SPRITEPOS -> X060
; inc/hgrsprite.plh: 0011:     predef spritePosIndex(x, y, i)#0
					; SPRITEPOSINDEX -> X061
; inc/hgrsprite.plh: 0012:     predef spriteUnDrawList#0
					; SPRITEUNDRAWLIST -> X062
; inc/hgrsprite.plh: 0013:     predef spriteUnDrawXorList#0
					; SPRITEUNDRAWXORLIST -> X063
; inc/hgrsprite.plh: 0014:     predef spriteDrawList#0
					; SPRITEDRAWLIST -> X064
; inc/hgrsprite.plh: 0015:     predef spriteDrawXorList#0
					; SPRITEDRAWXORLIST -> X065
; inc/hgrsprite.plh: 0016:     predef spriteAdd(i, sprtptr)#1
					; SPRITEADD -> X066
; inc/hgrsprite.plh: 0017:     predef spriteDel(i)#1
					; SPRITEDEL -> X067
; inc/hgrsprite.plh: 0018:     predef spriteDrawBuf(page)#1
					; SPRITEDRAWBUF -> X068
; inc/hgrsprite.plh: 0019: end
; samplesrc/sfmsprt.pla: 0003: 
; samplesrc/sfmsprt.pla: 0004: sysflags reshgr1 // Reserve HGR page 1
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_SYSFLAGS	=	$0010		; SYSTEM FLAGS
; samplesrc/sfmsprt.pla: 0005: 
; samplesrc/sfmsprt.pla: 0006: 
; samplesrc/sfmsprt.pla: 0007: byte egg3   = $88,$88,$83,$33,$38,$88,$88
_D069 					; egg3   = $88,$88,$83,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0008: byte        = $88,$83,$33,$11,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$11
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0009: byte        = $83,$31,$11,$11,$11,$13,$38
	!BYTE	$83
	!BYTE	$31
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$13
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0010: byte        = $33,$11,$11,$11,$11,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0011: byte        = $33,$11,$11,$11,$11,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0012: byte        = $33,$11,$11,$11,$11,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0013: byte        = $33,$11,$11,$11,$11,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0014: byte        = $33,$11,$11,$11,$11,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0015: byte        = $33,$11,$11,$11,$11,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0016: byte        = $83,$31,$11,$11,$11,$13,$38
	!BYTE	$83
	!BYTE	$31
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$13
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0017: byte        = $88,$83,$33,$11,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$11
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0018: byte        = $88,$88,$83,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0019: byte egg2   = $88,$88,$83,$33,$38,$88,$88
_D070 					; egg2   = $88,$88,$83,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0020: byte        = $88,$83,$33,$11,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$11
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0021: byte        = $83,$30,$11,$00,$11,$13,$38
	!BYTE	$83
	!BYTE	$30
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$13
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0022: byte        = $33,$11,$00,$11,$00,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0023: byte        = $33,$00,$11,$00,$11,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0024: byte        = $33,$11,$00,$11,$00,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0025: byte        = $33,$00,$11,$00,$11,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0026: byte        = $33,$11,$00,$11,$00,$11,$33
	!BYTE	$33
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0027: byte        = $33,$00,$11,$00,$11,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0028: byte        = $83,$31,$00,$11,$00,$13,$38
	!BYTE	$83
	!BYTE	$31
	!BYTE	$00
	!BYTE	$11
	!BYTE	$00
	!BYTE	$13
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0029: byte        = $88,$83,$33,$00,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$00
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0030: byte        = $88,$88,$83,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0031: byte egg1   = $88,$88,$83,$33,$38,$88,$88
_D071 					; egg1   = $88,$88,$83,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0032: byte        = $88,$83,$33,$00,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$00
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0033: byte        = $83,$30,$00,$00,$00,$03,$38
	!BYTE	$83
	!BYTE	$30
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$03
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0034: byte        = $33,$00,$00,$00,$00,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0035: byte        = $33,$00,$00,$00,$00,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0036: byte        = $33,$00,$00,$00,$00,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0037: byte        = $33,$00,$00,$00,$00,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0038: byte        = $33,$00,$00,$00,$00,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0039: byte        = $33,$00,$00,$00,$00,$00,$33
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0040: byte        = $83,$30,$00,$00,$00,$03,$38
	!BYTE	$83
	!BYTE	$30
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$03
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0041: byte        = $88,$83,$33,$11,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$11
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0042: byte        = $88,$88,$83,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0043: byte spider3 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
_D072 					; spider3 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0044: byte         = $33,$88,$83,$32,$22,$22,$23,$38,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$83
	!BYTE	$32
	!BYTE	$22
	!BYTE	$22
	!BYTE	$23
	!BYTE	$38
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0045: byte         = $83,$38,$83,$32,$22,$22,$23,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$32
	!BYTE	$22
	!BYTE	$22
	!BYTE	$23
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0046: byte         = $88,$83,$33,$22,$22,$22,$22,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0047: byte         = $33,$88,$33,$22,$22,$22,$22,$33,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0048: byte         = $88,$33,$38,$33,$22,$22,$33,$83,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$38
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$83
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0049: byte         = $88,$88,$83,$33,$22,$22,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0050: byte         = $88,$33,$33,$33,$22,$22,$33,$33,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0051: byte         = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0052: byte         = $88,$88,$33,$33,$22,$22,$33,$33,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0053: byte         = $88,$33,$88,$33,$22,$22,$33,$88,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$22
	!BYTE	$22
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0054: byte         = $33,$88,$88,$83,$32,$23,$38,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$32
	!BYTE	$23
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0055: byte         = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0056: byte spider2 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
_D073 					; spider2 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0057: byte         = $33,$88,$83,$30,$02,$20,$03,$38,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$83
	!BYTE	$30
	!BYTE	$02
	!BYTE	$20
	!BYTE	$03
	!BYTE	$38
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0058: byte         = $83,$38,$83,$32,$20,$02,$23,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$32
	!BYTE	$20
	!BYTE	$02
	!BYTE	$23
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0059: byte         = $88,$83,$33,$20,$02,$20,$02,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$20
	!BYTE	$02
	!BYTE	$20
	!BYTE	$02
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0060: byte         = $33,$88,$33,$02,$20,$02,$20,$33,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$02
	!BYTE	$20
	!BYTE	$02
	!BYTE	$20
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0061: byte         = $88,$33,$38,$30,$02,$20,$03,$83,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$38
	!BYTE	$30
	!BYTE	$02
	!BYTE	$20
	!BYTE	$03
	!BYTE	$83
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0062: byte         = $88,$88,$83,$33,$20,$02,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$20
	!BYTE	$02
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0063: byte         = $88,$33,$33,$30,$02,$20,$03,$33,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$30
	!BYTE	$02
	!BYTE	$20
	!BYTE	$03
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0064: byte         = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0065: byte         = $88,$88,$33,$30,$02,$20,$03,$33,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$30
	!BYTE	$02
	!BYTE	$20
	!BYTE	$03
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0066: byte         = $88,$33,$88,$33,$20,$02,$33,$88,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$20
	!BYTE	$02
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0067: byte         = $33,$88,$88,$83,$32,$23,$38,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$32
	!BYTE	$23
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0068: byte         = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0069: byte spider1 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
_D074 					; spider1 = $33,$88,$88,$33,$33,$33,$33,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0070: byte         = $33,$88,$83,$30,$00,$00,$03,$38,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$83
	!BYTE	$30
	!BYTE	$00
	!BYTE	$00
	!BYTE	$03
	!BYTE	$38
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0071: byte         = $83,$38,$83,$30,$00,$00,$03,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$30
	!BYTE	$00
	!BYTE	$00
	!BYTE	$03
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0072: byte         = $88,$83,$33,$00,$00,$00,$00,$33,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0073: byte         = $33,$88,$33,$00,$00,$00,$00,$33,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0074: byte         = $88,$33,$38,$33,$00,$00,$33,$83,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$38
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
	!BYTE	$83
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0075: byte         = $88,$88,$83,$33,$00,$00,$33,$38,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0076: byte         = $88,$33,$33,$30,$00,$00,$03,$33,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$30
	!BYTE	$00
	!BYTE	$00
	!BYTE	$03
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0077: byte         = $33,$88,$88,$88,$33,$33,$88,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0078: byte         = $88,$88,$33,$30,$00,$00,$03,$33,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$30
	!BYTE	$00
	!BYTE	$00
	!BYTE	$03
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0079: byte         = $88,$33,$88,$33,$00,$00,$33,$88,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$00
	!BYTE	$00
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0080: byte         = $33,$88,$88,$83,$30,$03,$38,$88,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$30
	!BYTE	$03
	!BYTE	$38
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0081: byte         = $88,$88,$88,$88,$33,$33,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0082: byte web1    =             $88,$83,$38,$88
_D075 					; web1    =             $88,$83,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0083: byte         =             $88,$38,$83,$88
	!BYTE	$88
	!BYTE	$38
	!BYTE	$83
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0084: byte         =             $88,$38,$83,$88
	!BYTE	$88
	!BYTE	$38
	!BYTE	$83
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0085: byte         =             $88,$33,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0086: byte         =             $83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0087: byte         =             $83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0088: byte         =             $83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0089: byte         =             $33,$33,$33,$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0090: byte web2    =         $88,$33,$83,$38,$33,$88
_D076 					; web2    =         $88,$33,$83,$38,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$83
	!BYTE	$38
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0091: byte         =         $88,$38,$83,$38,$83,$88
	!BYTE	$88
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0092: byte         =         $83,$38,$83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0093: byte         =         $83,$33,$33,$33,$33,$38
	!BYTE	$83
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0094: byte         =         $83,$38,$83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0095: byte         =         $83,$38,$83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0096: byte         =         $33,$88,$83,$38,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$83
	!BYTE	$38
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0097: byte         =         $33,$33,$33,$33,$33,$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0098: byte web3    = $88,$83,$38,$83,$38,$83,$38,$83,$38,$88
_D077 					; web3    = $88,$83,$38,$83,$38,$83,$38,$83,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0099: byte         = $88,$83,$38,$83,$38,$83,$38,$83,$38,$88
	!BYTE	$88
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0100: byte         = $88,$33,$88,$33,$88,$88,$33,$88,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0101: byte         = $88,$33,$33,$33,$33,$33,$33,$33,$33,$88
	!BYTE	$88
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0102: byte         = $83,$38,$88,$33,$83,$38,$33,$88,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$88
	!BYTE	$33
	!BYTE	$83
	!BYTE	$38
	!BYTE	$33
	!BYTE	$88
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0103: byte         = $83,$38,$83,$38,$83,$38,$83,$38,$83,$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
; samplesrc/sfmsprt.pla: 0104: byte         = $33,$88,$83,$38,$83,$38,$83,$38,$88,$33
	!BYTE	$33
	!BYTE	$88
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$83
	!BYTE	$38
	!BYTE	$88
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0105: byte         = $33,$38,$33,$33,$33,$33,$33,$33,$33,$33
	!BYTE	$33
	!BYTE	$38
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
	!BYTE	$33
; samplesrc/sfmsprt.pla: 0106: byte splat1 = $88,$88,$88,$22,$22,$22,$22,$88,$88,$88
_D078 					; splat1 = $88,$88,$88,$22,$22,$22,$22,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0107: byte        = $88,$88,$88,$22,$11,$11,$22,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0108: byte        = $88,$88,$88,$22,$11,$11,$22,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0109: byte        = $88,$82,$22,$11,$11,$11,$11,$22,$28,$88
	!BYTE	$88
	!BYTE	$82
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$28
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0110: byte        = $22,$22,$22,$11,$11,$11,$11,$22,$22,$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
; samplesrc/sfmsprt.pla: 0111: byte        = $88,$22,$28,$22,$11,$11,$22,$82,$22,$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$28
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$82
	!BYTE	$22
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0112: byte        = $88,$88,$82,$22,$11,$11,$22,$28,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$82
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$28
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0113: byte        = $88,$22,$22,$22,$11,$11,$22,$22,$22,$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0114: byte        = $22,$22,$88,$88,$22,$22,$88,$88,$22,$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
; samplesrc/sfmsprt.pla: 0115: byte        = $88,$88,$22,$22,$11,$11,$22,$22,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0116: byte        = $88,$22,$22,$22,$11,$11,$22,$22,$22,$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0117: byte        = $22,$22,$88,$82,$21,$12,$28,$88,$22,$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$82
	!BYTE	$21
	!BYTE	$12
	!BYTE	$28
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
; samplesrc/sfmsprt.pla: 0118: byte        = $88,$88,$88,$88,$22,$22,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0119: byte splat2 = $88,$88,$88,$88,$22,$22,$22,$22,$88,$88,$88,$88
_D079 					; splat2 = $88,$88,$88,$88,$22,$22,$22,$22,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0120: byte        = $88,$88,$88,$88,$22,$11,$11,$22,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0121: byte        = $88,$88,$88,$82,$22,$11,$11,$22,$88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$82
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0122: byte        = $88,$88,$88,$22,$11,$11,$11,$11,$22,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0123: byte        = $88,$88,$82,$22,$11,$18,$81,$11,$22,$28,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$82
	!BYTE	$22
	!BYTE	$11
	!BYTE	$18
	!BYTE	$81
	!BYTE	$11
	!BYTE	$22
	!BYTE	$28
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0124: byte        = $88,$22,$22,$22,$11,$88,$88,$11,$22,$22,$22,$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$88
	!BYTE	$88
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0125: byte        = $22,$28,$82,$22,$11,$88,$88,$11,$22,$28,$82,$22
	!BYTE	$22
	!BYTE	$28
	!BYTE	$82
	!BYTE	$22
	!BYTE	$11
	!BYTE	$88
	!BYTE	$88
	!BYTE	$11
	!BYTE	$22
	!BYTE	$28
	!BYTE	$82
	!BYTE	$22
; samplesrc/sfmsprt.pla: 0126: byte        = $88,$88,$22,$28,$88,$88,$88,$88,$82,$22,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$28
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$82
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0127: byte        = $88,$88,$88,$22,$88,$88,$88,$11,$22,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0128: byte        = $88,$88,$22,$22,$11,$88,$88,$11,$22,$22,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$88
	!BYTE	$88
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0129: byte        = $88,$22,$22,$22,$11,$18,$81,$11,$22,$22,$22,$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$18
	!BYTE	$81
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0130: byte        = $88,$88,$88,$22,$11,$18,$81,$11,$22,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$11
	!BYTE	$18
	!BYTE	$81
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0131: byte        = $88,$88,$22,$22,$11,$11,$11,$11,$22,$22,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0132: byte        = $88,$22,$22,$88,$22,$11,$11,$22,$88,$22,$22,$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0133: byte        = $22,$28,$88,$88,$88,$22,$22,$88,$88,$88,$82,$22
	!BYTE	$22
	!BYTE	$28
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$82
	!BYTE	$22
; samplesrc/sfmsprt.pla: 0134: byte        = $88,$88,$22,$22,$22,$11,$11,$22,$22,$22,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$22
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0135: byte        = $88,$88,$22,$28,$22,$11,$11,$22,$82,$22,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$22
	!BYTE	$28
	!BYTE	$22
	!BYTE	$11
	!BYTE	$11
	!BYTE	$22
	!BYTE	$82
	!BYTE	$22
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0136: byte ship = $CC,$CC,$CC,$77,$CC,$CC,$CC
_D080 					; ship = $CC,$CC,$CC,$77,$CC,$CC,$CC
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0137: byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$C7
	!BYTE	$77
	!BYTE	$7C
	!BYTE	$CC
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0138: byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$C7
	!BYTE	$77
	!BYTE	$7C
	!BYTE	$CC
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0139: byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$C7
	!BYTE	$77
	!BYTE	$7C
	!BYTE	$CC
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0140: byte      = $CC,$CC,$C7,$77,$7C,$CC,$CC
	!BYTE	$CC
	!BYTE	$CC
	!BYTE	$C7
	!BYTE	$77
	!BYTE	$7C
	!BYTE	$CC
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0141: byte      = $77,$CC,$77,$66,$77,$CC,$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$66
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0142: byte      = $77,$CC,$77,$66,$77,$CC,$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$66
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0143: byte      = $77,$CC,$77,$66,$77,$CC,$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$66
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0144: byte      = $77,$CC,$77,$77,$77,$CC,$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0145: byte      = $77,$CC,$77,$77,$77,$CC,$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0146: byte      = $77,$CC,$77,$77,$77,$CC,$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
	!BYTE	$77
	!BYTE	$77
	!BYTE	$CC
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0147: byte      = $77,$C7,$77,$77,$77,$7C,$77
	!BYTE	$77
	!BYTE	$C7
	!BYTE	$77
	!BYTE	$77
	!BYTE	$77
	!BYTE	$7C
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0148: byte      = $77,$77,$75,$55,$57,$77,$77
	!BYTE	$77
	!BYTE	$77
	!BYTE	$75
	!BYTE	$55
	!BYTE	$57
	!BYTE	$77
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0149: byte      = $77,$77,$75,$55,$57,$77,$77
	!BYTE	$77
	!BYTE	$77
	!BYTE	$75
	!BYTE	$55
	!BYTE	$57
	!BYTE	$77
	!BYTE	$77
; samplesrc/sfmsprt.pla: 0150: byte missle = $CC,$55,$CC
_D081 					; missle = $CC,$55,$CC
	!BYTE	$CC
	!BYTE	$55
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0151: byte        = $CC,$55,$CC
	!BYTE	$CC
	!BYTE	$55
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0152: byte        = $CC,$55,$CC
	!BYTE	$CC
	!BYTE	$55
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0153: byte        = $CC,$55,$CC
	!BYTE	$CC
	!BYTE	$55
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0154: byte        = $CC,$55,$CC
	!BYTE	$CC
	!BYTE	$55
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0155: byte        = $CC,$55,$CC
	!BYTE	$CC
	!BYTE	$55
	!BYTE	$CC
; samplesrc/sfmsprt.pla: 0156: byte        = $C5,$55,$5C
	!BYTE	$C5
	!BYTE	$55
	!BYTE	$5C
; samplesrc/sfmsprt.pla: 0157: byte        = $55,$55,$55
	!BYTE	$55
	!BYTE	$55
	!BYTE	$55
; samplesrc/sfmsprt.pla: 0158: byte dummy = $88,$88,$88,$88
_D082 					; dummy = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0159: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0160: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0161: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0162: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0163: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0164: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0165: byte       = $88,$88,$88,$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
	!BYTE	$88
; samplesrc/sfmsprt.pla: 0166: var sprtEgg1, sprtEgg2, sprtEgg3
_D083 	!FILL	2			; sprtEgg1, sprtEgg2, sprtEgg3
_D084 	!FILL	2			; sprtEgg2, sprtEgg3
_D085 	!FILL	2			; sprtEgg3
; samplesrc/sfmsprt.pla: 0167: var sprtSpider1, sprtSpider2, sprtSpider3
_D086 	!FILL	2			; sprtSpider1, sprtSpider2, sprtSpider3
_D087 	!FILL	2			; sprtSpider2, sprtSpider3
_D088 	!FILL	2			; sprtSpider3
; samplesrc/sfmsprt.pla: 0168: var sprtSplat1, sprtSplat2
_D089 	!FILL	2			; sprtSplat1, sprtSplat2
_D090 	!FILL	2			; sprtSplat2
; samplesrc/sfmsprt.pla: 0169: var sprtWeb1, sprtWeb2, sprtWeb3
_D091 	!FILL	2			; sprtWeb1, sprtWeb2, sprtWeb3
_D092 	!FILL	2			; sprtWeb2, sprtWeb3
_D093 	!FILL	2			; sprtWeb3
; samplesrc/sfmsprt.pla: 0170: var sprtShip, sprtMissle, sprtDummy
_D094 	!FILL	2			; sprtShip, sprtMissle, sprtDummy
_D095 	!FILL	2			; sprtMissle, sprtDummy
_D096 	!FILL	2			; sprtDummy
; samplesrc/sfmsprt.pla: 0171: 
; samplesrc/sfmsprt.pla: 0172: hgrMode(TRUE)
_SUBSEG 				; BYTECODE STARTS
_INIT 
; samplesrc/sfmsprt.pla: 0173: spriteDrawBuf(hgrDrawBuf(0)) // So we can see the compile process
; samplesrc/sfmsprt.pla: 0174: sprtShip   = spriteCompile(14, 14,  7, 13, @ship)
; samplesrc/sfmsprt.pla: 0175: sprtMissle = spriteCompile( 6,  8,  3,  0, @missle)
; samplesrc/sfmsprt.pla: 0176: sprtEgg3   = spriteCompile(14, 12,  7,  6, @egg3)
; samplesrc/sfmsprt.pla: 0177: sprtEgg2   = spriteCompile(14, 12,  7,  6, @egg2)
; samplesrc/sfmsprt.pla: 0178: sprtEgg1   = spriteCompile(14, 12,  7,  6, @egg1)
; samplesrc/sfmsprt.pla: 0179: sprtSpider3= spriteCompile(20, 13, 10,  6, @spider3)
; samplesrc/sfmsprt.pla: 0180: sprtSpider2= spriteCompile(20, 13, 10,  6, @spider2)
; samplesrc/sfmsprt.pla: 0181: sprtSpider1= spriteCompile(20, 13, 10,  6, @spider1)
; samplesrc/sfmsprt.pla: 0182: sprtWeb1   = spriteCompile( 8,  8,  4,  0, @web1)
; samplesrc/sfmsprt.pla: 0183: sprtWeb2   = spriteCompile(12,  8,  6,  0, @web2)
; samplesrc/sfmsprt.pla: 0184: sprtWeb3   = spriteCompile(20,  8, 10,  0, @web3)
; samplesrc/sfmsprt.pla: 0185: sprtSplat1 = spriteCompile(20, 13, 10,  6, @splat1)
; samplesrc/sfmsprt.pla: 0186: sprtSplat2 = spriteCompile(24, 17, 12,  8, @splat2)
; samplesrc/sfmsprt.pla: 0187: sprtDummy  = spriteCompile( 7,  8,  0,  0, @dummy)
; samplesrc/sfmsprt.pla: 0188: hgrMode(FALSE)
; samplesrc/sfmsprt.pla: 0189: spriteSave("SHIP", sprtShip)
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X045
_F000 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X049
_F001 	!WORD	0		
	!BYTE	$54			; CALL	_X068
_F002 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$1C			; CN	14
	!BYTE	$34			; DUP
	!BYTE	$0E			; CN	7
	!BYTE	$1A			; CN	13
	!BYTE	$26			; LA	_D080+0
_F003 	!WORD	_D080+0		
	!BYTE	$54			; CALL	_X052
_F004 	!WORD	0		
	!BYTE	$7A			; SAW	_D094+0
_F005 	!WORD	_D094+0		
	!BYTE	$0C			; CN	6
	!BYTE	$10			; CN	8
	!BYTE	$06			; CN	3
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D081+0
_F006 	!WORD	_D081+0		
	!BYTE	$54			; CALL	_X052
_F007 	!WORD	0		
	!BYTE	$7A			; SAW	_D095+0
_F008 	!WORD	_D095+0		
	!BYTE	$1C			; CN	14
	!BYTE	$18			; CN	12
	!BYTE	$0E			; CN	7
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D069+0
_F009 	!WORD	_D069+0		
	!BYTE	$54			; CALL	_X052
_F010 	!WORD	0		
	!BYTE	$7A			; SAW	_D085+0
_F011 	!WORD	_D085+0		
	!BYTE	$1C			; CN	14
	!BYTE	$18			; CN	12
	!BYTE	$0E			; CN	7
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D070+0
_F012 	!WORD	_D070+0		
	!BYTE	$54			; CALL	_X052
_F013 	!WORD	0		
	!BYTE	$7A			; SAW	_D084+0
_F014 	!WORD	_D084+0		
	!BYTE	$1C			; CN	14
	!BYTE	$18			; CN	12
	!BYTE	$0E			; CN	7
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D071+0
_F015 	!WORD	_D071+0		
	!BYTE	$54			; CALL	_X052
_F016 	!WORD	0		
	!BYTE	$7A			; SAW	_D083+0
_F017 	!WORD	_D083+0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$1A			; CN	13
	!BYTE	$14			; CN	10
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D072+0
_F018 	!WORD	_D072+0		
	!BYTE	$54			; CALL	_X052
_F019 	!WORD	0		
	!BYTE	$7A			; SAW	_D088+0
_F020 	!WORD	_D088+0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$1A			; CN	13
	!BYTE	$14			; CN	10
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D073+0
_F021 	!WORD	_D073+0		
	!BYTE	$54			; CALL	_X052
_F022 	!WORD	0		
	!BYTE	$7A			; SAW	_D087+0
_F023 	!WORD	_D087+0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$1A			; CN	13
	!BYTE	$14			; CN	10
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D074+0
_F024 	!WORD	_D074+0		
	!BYTE	$54			; CALL	_X052
_F025 	!WORD	0		
	!BYTE	$7A			; SAW	_D086+0
_F026 	!WORD	_D086+0		
	!BYTE	$10			; CN	8
	!BYTE	$34			; DUP
	!BYTE	$08			; CN	4
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D075+0
_F027 	!WORD	_D075+0		
	!BYTE	$54			; CALL	_X052
_F028 	!WORD	0		
	!BYTE	$7A			; SAW	_D091+0
_F029 	!WORD	_D091+0		
	!BYTE	$18			; CN	12
	!BYTE	$10			; CN	8
	!BYTE	$0C			; CN	6
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D076+0
_F030 	!WORD	_D076+0		
	!BYTE	$54			; CALL	_X052
_F031 	!WORD	0		
	!BYTE	$7A			; SAW	_D092+0
_F032 	!WORD	_D092+0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$10			; CN	8
	!BYTE	$14			; CN	10
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D077+0
_F033 	!WORD	_D077+0		
	!BYTE	$54			; CALL	_X052
_F034 	!WORD	0		
	!BYTE	$7A			; SAW	_D093+0
_F035 	!WORD	_D093+0		
	!BYTE	$2A,$14			; CB	20
	!BYTE	$1A			; CN	13
	!BYTE	$14			; CN	10
	!BYTE	$0C			; CN	6
	!BYTE	$26			; LA	_D078+0
_F036 	!WORD	_D078+0		
	!BYTE	$54			; CALL	_X052
_F037 	!WORD	0		
	!BYTE	$7A			; SAW	_D089+0
_F038 	!WORD	_D089+0		
	!BYTE	$2A,$18			; CB	24
	!BYTE	$2A,$11			; CB	17
	!BYTE	$18			; CN	12
	!BYTE	$10			; CN	8
	!BYTE	$26			; LA	_D079+0
_F039 	!WORD	_D079+0		
	!BYTE	$54			; CALL	_X052
_F040 	!WORD	0		
	!BYTE	$7A			; SAW	_D090+0
_F041 	!WORD	_D090+0		
	!BYTE	$0E			; CN	7
	!BYTE	$10			; CN	8
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_D082+0
_F042 	!WORD	_D082+0		
	!BYTE	$54			; CALL	_X052
_F043 	!WORD	0		
	!BYTE	$7A			; SAW	_D096+0
_F044 	!WORD	_D096+0		
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X045
_F045 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$53,$48,$49,$50
	!BYTE	$6A			; LAW	_D094+0
_F046 	!WORD	_D094+0		
	!BYTE	$54			; CALL	_X055
_F047 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0190: spriteSave("MISSLE", sprtMissle)
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$4D,$49,$53,$53,$4C,$45
	!BYTE	$6A			; LAW	_D095+0
_F048 	!WORD	_D095+0		
	!BYTE	$54			; CALL	_X055
_F049 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0191: spriteSave("EGG3", sprtEgg3)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$45,$47,$47,$33
	!BYTE	$6A			; LAW	_D085+0
_F050 	!WORD	_D085+0		
	!BYTE	$54			; CALL	_X055
_F051 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0192: spriteSave("EGG2", sprtEgg2)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$45,$47,$47,$32
	!BYTE	$6A			; LAW	_D084+0
_F052 	!WORD	_D084+0		
	!BYTE	$54			; CALL	_X055
_F053 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0193: spriteSave("EGG1", sprtEgg1)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$45,$47,$47,$31
	!BYTE	$6A			; LAW	_D083+0
_F054 	!WORD	_D083+0		
	!BYTE	$54			; CALL	_X055
_F055 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0194: spriteSave("SPIDER1", sprtSpider1)
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$50,$49,$44,$45,$52,$31
	!BYTE	$6A			; LAW	_D086+0
_F056 	!WORD	_D086+0		
	!BYTE	$54			; CALL	_X055
_F057 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0195: spriteSave("SPIDER2", sprtSpider2)
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$50,$49,$44,$45,$52,$32
	!BYTE	$6A			; LAW	_D087+0
_F058 	!WORD	_D087+0		
	!BYTE	$54			; CALL	_X055
_F059 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0196: spriteSave("SPIDER3", sprtSpider3)
	!BYTE	$2E			; CS
	!BYTE	$07
	!BYTE	$53,$50,$49,$44,$45,$52,$33
	!BYTE	$6A			; LAW	_D088+0
_F060 	!WORD	_D088+0		
	!BYTE	$54			; CALL	_X055
_F061 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0197: spriteSave("WEB1", sprtWeb1)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$57,$45,$42,$31
	!BYTE	$6A			; LAW	_D091+0
_F062 	!WORD	_D091+0		
	!BYTE	$54			; CALL	_X055
_F063 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0198: spriteSave("WEB2", sprtWeb2)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$57,$45,$42,$32
	!BYTE	$6A			; LAW	_D092+0
_F064 	!WORD	_D092+0		
	!BYTE	$54			; CALL	_X055
_F065 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0199: spriteSave("WEB3", sprtWeb3)
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$57,$45,$42,$33
	!BYTE	$6A			; LAW	_D093+0
_F066 	!WORD	_D093+0		
	!BYTE	$54			; CALL	_X055
_F067 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0200: spriteSave("SPLAT1", sprtSplat1)
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$53,$50,$4C,$41,$54,$31
	!BYTE	$6A			; LAW	_D089+0
_F068 	!WORD	_D089+0		
	!BYTE	$54			; CALL	_X055
_F069 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0201: spriteSave("SPLAT2", sprtSplat2)
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$53,$50,$4C,$41,$54,$32
	!BYTE	$6A			; LAW	_D090+0
_F070 	!WORD	_D090+0		
	!BYTE	$54			; CALL	_X055
_F071 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0202: spriteSave("DUMMY", sprtDummy)
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$44,$55,$4D,$4D,$59
	!BYTE	$6A			; LAW	_D096+0
_F072 	!WORD	_D096+0		
	!BYTE	$54			; CALL	_X055
_F073 	!WORD	0		
	!BYTE	$30			; DROP 
; samplesrc/sfmsprt.pla: 0203: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_DEFCNT	=	1
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	49			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	68			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	52			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	45			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	55			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: HGRMODE
	!BYTE	$C8,$C7,$D2,$CD,$CF,$C4,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	45			; ESD INDEX
	; DCI STRING: HGRDRAWBUF
	!BYTE	$C8,$C7,$D2,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	49			; ESD INDEX
	; DCI STRING: SPRITECOMPILE
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C3,$CF,$CD,$D0,$C9,$CC,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	52			; ESD INDEX
	; DCI STRING: SPRITESAVE
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$D3,$C1,$D6,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	55			; ESD INDEX
	; DCI STRING: SPRITEDRAWBUF
	!BYTE	$D3,$D0,$D2,$C9,$D4,$C5,$C4,$D2,$C1,$D7,$C2,$D5,$46
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	68			; ESD INDEX
	!BYTE	$00			; END OF ESD
