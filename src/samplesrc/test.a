; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/test.pla: 0001: //
; samplesrc/test.pla: 0002: // Include all imported modules and their data/functions.
; samplesrc/test.pla: 0003: //
; samplesrc/test.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/test.pla: 0004: 
; samplesrc/test.pla: 0005: include "inc/testlib.plh"
; inc/testlib.plh: 0001: import testlib
	; DCI STRING: TESTLIB
	!BYTE	$D4,$C5,$D3,$D4,$CC,$C9,$42
					; TESTLIB -> X028
; inc/testlib.plh: 0002:   word print
					; PRINT -> X029
; inc/testlib.plh: 0003:   const dec = 0
					; dec = 0
; inc/testlib.plh: 0004:   const hex = 2
					; hex = 2
; inc/testlib.plh: 0005:   const newln = 4
					; newln = 4
; inc/testlib.plh: 0006:   const str = 6
					; str = 6
; inc/testlib.plh: 0007:   const chr = 8
					; chr = 8
; inc/testlib.plh: 0008: end
; samplesrc/test.pla: 0005: 
; samplesrc/test.pla: 0006: //
; samplesrc/test.pla: 0007: // Structure definition.
; samplesrc/test.pla: 0008: //
; samplesrc/test.pla: 0009: struc mystruc
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; samplesrc/test.pla: 0010:   byte cmd
					; cmd = 0
; samplesrc/test.pla: 0011:   word param
					; param = 1
; samplesrc/test.pla: 0012:   byte[3]
; samplesrc/test.pla: 0013:   word data
					; data = 6
; samplesrc/test.pla: 0014: end
					; mystruc = 8
; samplesrc/test.pla: 0015: //
; samplesrc/test.pla: 0016: // Const expression
; samplesrc/test.pla: 0017: //
; samplesrc/test.pla: 0018: const constval = 2*(2+3) // a test expression should evaluate to 10
					; constval = 10
; samplesrc/test.pla: 0019: //
; samplesrc/test.pla: 0020: // Declare all global variables for this module.
; samplesrc/test.pla: 0021: // Note that arrays are declared with prefix []. postfix [], or no [].
; samplesrc/test.pla: 0022: // Only arrays with predclared sizes need [ and ], such as "int[3] a".
; samplesrc/test.pla: 0023: //
; samplesrc/test.pla: 0024: byte[] hello = "Hello, Apple "
_D030 					; hello = "Hello, Apple "
	!BYTE	$0D
	!BYTE	$48,$65,$6C,$6C,$6F,$2C,$20,$41
	!BYTE	$70,$70,$6C,$65,$20
; samplesrc/test.pla: 0025: byte[] a1 = "1"
_D031 					; a1 = "1"
	!BYTE	$01
	!BYTE	$31
; samplesrc/test.pla: 0026: byte[] a2 = "]["
_D032 					; a2 = "]["
	!BYTE	$02
	!BYTE	$5D,$5B
; samplesrc/test.pla: 0027: byte[] a2p = "][+"
_D033 					; a2p = "][+"
	!BYTE	$03
	!BYTE	$5D,$5B,$2B
; samplesrc/test.pla: 0028: byte[] a2e = "//e"
_D034 					; a2e = "//e"
	!BYTE	$03
	!BYTE	$2F,$2F,$65
; samplesrc/test.pla: 0029: byte[] a2c = "//c"
_D035 					; a2c = "//c"
	!BYTE	$03
	!BYTE	$2F,$2F,$63
; samplesrc/test.pla: 0030: byte[] a3 = "///"
_D036 					; a3 = "///"
	!BYTE	$03
	!BYTE	$2F,$2F,$2F
; samplesrc/test.pla: 0031: byte   constr = "Constant expression = "
_D037 					; constr = "Constant expression = "
	!BYTE	$16
	!BYTE	$43,$6F,$6E,$73,$74,$61,$6E,$74
	!BYTE	$20,$65,$78,$70,$72,$65,$73,$73
	!BYTE	$69,$6F,$6E,$20,$3D,$20
; samplesrc/test.pla: 0032: byte[] offsets = "Structure offsets:"
_D038 					; offsets = "Structure offsets:"
	!BYTE	$12
	!BYTE	$53,$74,$72,$75,$63,$74,$75,$72
	!BYTE	$65,$20,$6F,$66,$66,$73,$65,$74
	!BYTE	$73,$3A
; samplesrc/test.pla: 0033: word array[] = 1, 10, 100, 1000, 10000
_D039 					; array[] = 1, 10, 100, 1000, 10000
	!WORD	$0001
	!WORD	$000A
	!WORD	$0064
	!WORD	$03E8
	!WORD	$2710
; samplesrc/test.pla: 0034: word ptr
_D040 	!FILL	2			; ptr
; samplesrc/test.pla: 0035: //
; samplesrc/test.pla: 0036: // Define functions.
; samplesrc/test.pla: 0037: //
; samplesrc/test.pla: 0038: def tens(start)#0
_SUBSEG 				; BYTECODE STARTS
					; start -> [0]
_C000 					; tens()
; samplesrc/test.pla: 0039:   word i, pptr
					; i -> [2]
					; pptr -> [4]
; samplesrc/test.pla: 0040: 
; samplesrc/test.pla: 0041:   i = start
	!BYTE	$58,$06,$01		; ENTER	6,1
; samplesrc/test.pla: 0042:   pptr = @print
; samplesrc/test.pla: 0043:   repeat
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$26			; LA	_X029+0
_F000 	!WORD	0+0		
	!BYTE	$76,$04			; SLW	[4]
_B002 
; samplesrc/test.pla: 0044:     print:hex(i)#0
; samplesrc/test.pla: 0045:     print:str("   ")#0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_X029+2
_F001 	!WORD	0+2		
	!BYTE	$56			; ICAL
	!BYTE	$2E			; CS
	!BYTE	$03
	!BYTE	$20,$20,$20
	!BYTE	$6A			; LAW	_X029+6
_F002 	!WORD	0+6		
	!BYTE	$56			; ICAL
; samplesrc/test.pla: 0046:     pptr=>dec(i)#0
; samplesrc/test.pla: 0047:     print:newln()#0
; samplesrc/test.pla: 0048:     i = i / 10
; samplesrc/test.pla: 0049:   until i == 0
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$62			; LW
	!BYTE	$56			; ICAL
	!BYTE	$6A			; LAW	_X029+4
_F003 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$76,$02			; SLW	[2]
_B003 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$4E			; BRTRU	_B002
	!WORD	_B002-*
_B001 
; samplesrc/test.pla: 0050: end
	!BYTE	$5A,$06			; LEAVE	6
; samplesrc/test.pla: 0051: def ascii#0
_C001 					; ascii()
; samplesrc/test.pla: 0052:   byte i
					; i -> [0]
; samplesrc/test.pla: 0053:   i = 32
	!BYTE	$58,$01,$00		; ENTER	1,0
; samplesrc/test.pla: 0054:   while i < 128
	!BYTE	$2A,$20			; CB	32
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B004 
; samplesrc/test.pla: 0055:     putc(i)
; samplesrc/test.pla: 0056:     i = i + 1
; samplesrc/test.pla: 0057:   loop
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$54			; CALL	_X002
_F004 	!WORD	0		
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$8C			; INCR
	!BYTE	$74,$00			; SLB	[0]
_B006 
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$2A,$80			; CB	128
	!BYTE	$46			; ISLT
	!BYTE	$4E			; BRTRU	_B004
	!WORD	_B004-*
_B005 
; samplesrc/test.pla: 0058: end
	!BYTE	$5A,$01			; LEAVE	1
; samplesrc/test.pla: 0059: def nums(range)#0
					; range -> [0]
_C002 					; nums()
; samplesrc/test.pla: 0060:   word i
					; i -> [2]
; samplesrc/test.pla: 0061:   byte j
					; j -> [4]
; samplesrc/test.pla: 0062:   for i = range downto -range step range/10
	!BYTE	$58,$05,$01		; ENTER	5,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$90			; NEG
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$A2			; BRLT	_B007
	!WORD	_B007-*
_B008 
	!BYTE	$6E,$02			; DLW	[2]
; samplesrc/test.pla: 0063:     puti(i)
; samplesrc/test.pla: 0064:     putln
; samplesrc/test.pla: 0065:   next
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F005 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F006 	!WORD	0		
_B009 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$AA			; SUBBRGE	_B008
	!WORD	_B008-*
_B007 
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$30			; DROP 
; samplesrc/test.pla: 0066:   puti(array[0]);putln
; samplesrc/test.pla: 0067:   puti(array[1]);putln
; samplesrc/test.pla: 0068:   i++
	!BYTE	$6A			; LAW	_D039+0
_F007 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F008 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F009 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+2
_F010 	!WORD	_D039+2		
	!BYTE	$54			; CALL	_X005
_F011 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F012 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
; samplesrc/test.pla: 0069:   j = 2
; samplesrc/test.pla: 0070:   j++
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$04			; CN	2
	!BYTE	$6C,$04			; DLB	[4]
	!BYTE	$8C			; INCR
; samplesrc/test.pla: 0071:   array[1]++
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$6A			; LAW	_D039+2
_F013 	!WORD	_D039+2		
	!BYTE	$8C			; INCR
; samplesrc/test.pla: 0072:   array[0] = array[0] + 1
; samplesrc/test.pla: 0073:   array++
	!BYTE	$7A			; SAW	_D039+2
_F014 	!WORD	_D039+2		
	!BYTE	$6A			; LAW	_D039+0
_F015 	!WORD	_D039+0		
	!BYTE	$8C			; INCR
	!BYTE	$7E			; DAW	_D039+0
_F016 	!WORD	_D039+0		
	!BYTE	$8C			; INCR
; samplesrc/test.pla: 0074:   a1[0]++
	!BYTE	$7A			; SAW	_D039+0
_F017 	!WORD	_D039+0		
	!BYTE	$68			; LAB	_D031+0
_F018 	!WORD	_D031+0		
	!BYTE	$8C			; INCR
; samplesrc/test.pla: 0075:   a1++
	!BYTE	$7C			; DAB	_D031+0
_F019 	!WORD	_D031+0		
	!BYTE	$8C			; INCR
; samplesrc/test.pla: 0076:   puti(array[0]);putln
; samplesrc/test.pla: 0077:   puti(array[1]);putln
; samplesrc/test.pla: 0078: end
	!BYTE	$78			; SAB	_D031+0
_F020 	!WORD	_D031+0		
	!BYTE	$6A			; LAW	_D039+0
_F021 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F022 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F023 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+2
_F024 	!WORD	_D039+2		
	!BYTE	$54			; CALL	_X005
_F025 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F026 	!WORD	0		
	!BYTE	$5A,$05			; LEAVE	5
; samplesrc/test.pla: 0079: def printfunc(a, b, lambda)#0
					; a -> [0]
					; b -> [2]
					; lambda -> [4]
_C003 					; printfunc()
; samplesrc/test.pla: 0080:   puts("func(a,b)=")
	!BYTE	$58,$06,$03		; ENTER	6,3
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$66,$75,$6E,$63,$28,$61,$2C,$62
	!BYTE	$29,$3D
	!BYTE	$54			; CALL	_X004
_F027 	!WORD	0		
; samplesrc/test.pla: 0081:   puti(lambda(a,b))
; samplesrc/test.pla: 0082:   putln
; samplesrc/test.pla: 0083: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_X005
_F028 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F029 	!WORD	0		
	!BYTE	$5A,$06			; LEAVE	6
; samplesrc/test.pla: 0084: def vals123#3
_C004 					; vals123()
; samplesrc/test.pla: 0085:   return 1, 2, 3
	!BYTE	$02			; CN	1
	!BYTE	$04			; CN	2
	!BYTE	$06			; CN	3
	!BYTE	$5C			; RET
; samplesrc/test.pla: 0086: end
; samplesrc/test.pla: 0087: export def main(range)#0
					; range -> [0]
_C005 					; main()
; samplesrc/test.pla: 0088:   word a, b, c
					; a -> [2]
					; b -> [4]
					; c -> [6]
; samplesrc/test.pla: 0089:   word lambda
					; lambda -> [8]
; samplesrc/test.pla: 0090: 
; samplesrc/test.pla: 0091:   a = 10
	!BYTE	$58,$0A,$01		; ENTER	10,1
; samplesrc/test.pla: 0092:   nums(*range)
; samplesrc/test.pla: 0093:   tens(*range*10)
; samplesrc/test.pla: 0094:   ascii
; samplesrc/test.pla: 0095:   putln
; samplesrc/test.pla: 0096:   puts("10 * 8 = "); puti(a * 8); putln
	!BYTE	$14			; CN	10
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C002
_F030 	!WORD	_C002		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$54			; CALL	_C000
_F031 	!WORD	_C000		
	!BYTE	$54			; CALL	_C001
_F032 	!WORD	_C001		
	!BYTE	$54			; CALL	_X003
_F033 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$31,$30,$20,$2A,$20,$38,$20,$3D
	!BYTE	$20
	!BYTE	$54			; CALL	_X004
_F034 	!WORD	0		
; samplesrc/test.pla: 0097:   puts("10 / 2 = "); puti(a / 2); putln
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$06			; CN	3
	!BYTE	$9A			; SHL
	!BYTE	$54			; CALL	_X005
_F035 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F036 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$31,$30,$20,$2F,$20,$32,$20,$3D
	!BYTE	$20
	!BYTE	$54			; CALL	_X004
_F037 	!WORD	0		
; samplesrc/test.pla: 0098:   puts(@hello)
; samplesrc/test.pla: 0099:   when MACHID & $C8
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$54			; CALL	_X005
_F038 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F039 	!WORD	0		
	!BYTE	$26			; LA	_D030+0
_F040 	!WORD	_D030+0		
	!BYTE	$54			; CALL	_X004
_F041 	!WORD	0		
	!BYTE	$68			; LAB	_X001+0
_F042 	!WORD	0+0		
	!BYTE	$3C,$C8			; ANDI	200
	!BYTE	$52			; SEL
	!WORD	_B011-*
; samplesrc/test.pla: 0100:     is $08
_B012 
; samplesrc/test.pla: 0101:       puts(@a1)
; samplesrc/test.pla: 0102:       break
	!BYTE	$26			; LA	_D031+0
_F043 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X004
_F044 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
; samplesrc/test.pla: 0103:     is $00
_B013 
; samplesrc/test.pla: 0104:       puts(@a2)
; samplesrc/test.pla: 0105:       break
	!BYTE	$26			; LA	_D032+0
_F045 	!WORD	_D032+0		
	!BYTE	$54			; CALL	_X004
_F046 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
; samplesrc/test.pla: 0106:     is $40
_B014 
; samplesrc/test.pla: 0107:       puts(@a2p)
; samplesrc/test.pla: 0108:       break
	!BYTE	$26			; LA	_D033+0
_F047 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_X004
_F048 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
; samplesrc/test.pla: 0109:     is $80
_B015 
; samplesrc/test.pla: 0110:       puts(@a2e)
; samplesrc/test.pla: 0111:       break
	!BYTE	$26			; LA	_D034+0
_F049 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_X004
_F050 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
; samplesrc/test.pla: 0112:     is $88
_B016 
; samplesrc/test.pla: 0113:       puts(@a2c)
; samplesrc/test.pla: 0114:       break
	!BYTE	$26			; LA	_D035+0
_F051 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_X004
_F052 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
; samplesrc/test.pla: 0115:     is $C0
_B017 
; samplesrc/test.pla: 0116:       puts(@a3)
; samplesrc/test.pla: 0117:       break
	!BYTE	$26			; LA	_D036+0
_F053 	!WORD	_D036+0		
	!BYTE	$54			; CALL	_X004
_F054 	!WORD	0		
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
; samplesrc/test.pla: 0118:     otherwise
_B011 
	!BYTE	$06			; CASEBLOCK
	!WORD	$0000
	!WORD	_B013-*
	!WORD	$0008
	!WORD	_B012-*
	!WORD	$0040
	!WORD	_B014-*
	!WORD	$0080
	!WORD	_B015-*
	!WORD	$0088
	!WORD	_B016-*
	!WORD	$00C0
	!WORD	_B017-*
; samplesrc/test.pla: 0119:       putc('?')
; samplesrc/test.pla: 0120:   wend
	!BYTE	$2A,$3F			; CB	63
	!BYTE	$54			; CALL	_X002
_F055 	!WORD	0		
_B010 
; samplesrc/test.pla: 0121:   putln
; samplesrc/test.pla: 0122:   printfunc(1, 2, &(a,b) a+b)
					; a -> [0]
					; b -> [2]
					; a -> [0]
					; b -> [2]
; samplesrc/test.pla: 0123:   printfunc(1, 2, &(a,b) (a-b))
					; a -> [0]
					; b -> [2]
					; a -> [0]
					; b -> [2]
; samplesrc/test.pla: 0124:   lambda = &(x,y) x * y
					; x -> [0]
					; y -> [2]
; samplesrc/test.pla: 0125:   puti(lambda(2,3));putln
; samplesrc/test.pla: 0126:   a             = vals123
; samplesrc/test.pla: 0127:   drop, b, drop = vals123
; samplesrc/test.pla: 0128:   drop, drop, c = vals123
; samplesrc/test.pla: 0129:   puts("a, b, c = "); puti(a); puts(", "); puti(b); puts(", "); puti(c); putln
	!BYTE	$54			; CALL	_X003
_F056 	!WORD	0		
	!BYTE	$02			; CN	1
	!BYTE	$04			; CN	2
	!BYTE	$26			; LA	_C006+0
_F057 	!WORD	_C006+0		
	!BYTE	$54			; CALL	_C003
_F058 	!WORD	_C003		
	!BYTE	$02			; CN	1
	!BYTE	$04			; CN	2
	!BYTE	$26			; LA	_C007+0
_F059 	!WORD	_C007+0		
	!BYTE	$54			; CALL	_C003
_F060 	!WORD	_C003		
	!BYTE	$26			; LA	_C008+0
_F061 	!WORD	_C008+0		
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$04			; CN	2
	!BYTE	$06			; CN	3
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$56			; ICAL
	!BYTE	$54			; CALL	_X005
_F062 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F063 	!WORD	0		
	!BYTE	$54			; CALL	_C004
_F064 	!WORD	_C004		
	!BYTE	$30			; DROP 
	!BYTE	$30			; DROP 
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$54			; CALL	_C004
_F065 	!WORD	_C004		
	!BYTE	$30			; DROP 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_C004
_F066 	!WORD	_C004		
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$30			; DROP 
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$61,$2C,$20,$62,$2C,$20,$63,$20
	!BYTE	$3D,$20
	!BYTE	$54			; CALL	_X004
_F067 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F068 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F069 	!WORD	0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X005
_F070 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F071 	!WORD	0		
; samplesrc/test.pla: 0130:   puts(" 7 /  3 = "); puti(7/3);   puts(" ;  7 %  3 = "); puti(7%3); putln
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X005
_F072 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F073 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$20,$37,$20,$2F,$20,$20,$33,$20
	!BYTE	$3D,$20
	!BYTE	$54			; CALL	_X004
_F074 	!WORD	0		
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X005
_F075 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0D
	!BYTE	$20,$3B,$20,$20,$37,$20,$25,$20
	!BYTE	$20,$33,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F076 	!WORD	0		
; samplesrc/test.pla: 0131:   puts(" 7 / -3 = "); puti(7/-3);  puts(";  7 % -3 = "); puti(7%-3); putln
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X005
_F077 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F078 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$20,$37,$20,$2F,$20,$2D,$33,$20
	!BYTE	$3D,$20
	!BYTE	$54			; CALL	_X004
_F079 	!WORD	0		
	!BYTE	$5E,$FE			; CFFB	-2
	!BYTE	$54			; CALL	_X005
_F080 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0C
	!BYTE	$3B,$20,$20,$37,$20,$25,$20,$2D
	!BYTE	$33,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F081 	!WORD	0		
; samplesrc/test.pla: 0132:   puts("-7 /  3 = "); puti(-7/3);  puts("; -7 %  3 = "); puti(-7%3); putln
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X005
_F082 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F083 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$2D,$37,$20,$2F,$20,$20,$33,$20
	!BYTE	$3D,$20
	!BYTE	$54			; CALL	_X004
_F084 	!WORD	0		
	!BYTE	$5E,$FE			; CFFB	-2
	!BYTE	$54			; CALL	_X005
_F085 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0C
	!BYTE	$3B,$20,$2D,$37,$20,$25,$20,$20
	!BYTE	$33,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F086 	!WORD	0		
; samplesrc/test.pla: 0133:   puts("-7 / -3 = "); puti(-7/-3); puts(" ; -7 % -3 = "); puti(-7%-3); putln
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X005
_F087 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F088 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$2D,$37,$20,$2F,$20,$2D,$33,$20
	!BYTE	$3D,$20
	!BYTE	$54			; CALL	_X004
_F089 	!WORD	0		
	!BYTE	$04			; CN	2
	!BYTE	$54			; CALL	_X005
_F090 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$0D
	!BYTE	$20,$3B,$20,$2D,$37,$20,$25,$20
	!BYTE	$2D,$33,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F091 	!WORD	0		
; samplesrc/test.pla: 0134:   a,b=divmod(7,3);  puts("divmod( 7, 3) = "); puti(a); puts(", "); puti(b); putln
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X005
_F092 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F093 	!WORD	0		
	!BYTE	$0E			; CN	7
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X023
_F094 	!WORD	0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$64,$69,$76,$6D,$6F,$64,$28,$20
	!BYTE	$37,$2C,$20,$33,$29,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F095 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F096 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F097 	!WORD	0		
; samplesrc/test.pla: 0135:   a,b=divmod(7,-3); puts("divmod( 7,-3) = "); puti(a); puts(", "); puti(b); putln
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X005
_F098 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F099 	!WORD	0		
	!BYTE	$0E			; CN	7
	!BYTE	$5E,$FD			; CFFB	-3
	!BYTE	$54			; CALL	_X023
_F100 	!WORD	0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$64,$69,$76,$6D,$6F,$64,$28,$20
	!BYTE	$37,$2C,$2D,$33,$29,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F101 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F102 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F103 	!WORD	0		
; samplesrc/test.pla: 0136:   a,b=divmod(-7,3); puts("divmod(-7, 3) = "); puti(a); puts(", "); puti(b); putln
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X005
_F104 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F105 	!WORD	0		
	!BYTE	$5E,$F9			; CFFB	-7
	!BYTE	$06			; CN	3
	!BYTE	$54			; CALL	_X023
_F106 	!WORD	0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$64,$69,$76,$6D,$6F,$64,$28,$2D
	!BYTE	$37,$2C,$20,$33,$29,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F107 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F108 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F109 	!WORD	0		
; samplesrc/test.pla: 0137:   a,b=divmod(-7,-3);puts("divmod(-7,-3) = "); puti(a); puts(", "); puti(b); putln
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X005
_F110 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F111 	!WORD	0		
	!BYTE	$5E,$F9			; CFFB	-7
	!BYTE	$5E,$FD			; CFFB	-3
	!BYTE	$54			; CALL	_X023
_F112 	!WORD	0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$64,$69,$76,$6D,$6F,$64,$28,$2D
	!BYTE	$37,$2C,$2D,$33,$29,$20,$3D,$20
	!BYTE	$54			; CALL	_X004
_F113 	!WORD	0		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X005
_F114 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$2C,$20
	!BYTE	$54			; CALL	_X004
_F115 	!WORD	0		
; samplesrc/test.pla: 0138: end
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X005
_F116 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F117 	!WORD	0		
	!BYTE	$5A,$0A			; LEAVE	10
_C006 					; _LAMBDA0000()
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$5A,$04			; LEAVE	4
_C007 					; _LAMBDA0001()
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$84			; SUB 
	!BYTE	$5A,$04			; LEAVE	4
_C008 					; _LAMBDA0002()
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$86			; MUL
	!BYTE	$5A,$04			; LEAVE	4
; samplesrc/test.pla: 0139: 
; samplesrc/test.pla: 0140: def dummy(zz)#2
					; zz -> [0]
_C009 					; dummy()
; samplesrc/test.pla: 0141:   puts("dummy func"); putln
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$64,$75,$6D,$6D,$79,$20,$66,$75
	!BYTE	$6E,$63
	!BYTE	$54			; CALL	_X004
_F118 	!WORD	0		
; samplesrc/test.pla: 0142:   return 0
	!BYTE	$54			; CALL	_X003
_F119 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; samplesrc/test.pla: 0143: end
; samplesrc/test.pla: 0144: 
; samplesrc/test.pla: 0145: def value1
_C010 					; value1()
; samplesrc/test.pla: 0146:     return 1
	!BYTE	$02			; CN	1
	!BYTE	$5C			; RET
; samplesrc/test.pla: 0147: end
; samplesrc/test.pla: 0148: 
; samplesrc/test.pla: 0149: puti(array[0]);putc(' ')
_INIT 
; samplesrc/test.pla: 0150: puti(array[1]);putc(' ')
; samplesrc/test.pla: 0151: puti(array[2]);putc(' ')
; samplesrc/test.pla: 0152: puti(array[3]);putc(' ')
; samplesrc/test.pla: 0153: puti(array[4]);putln
; samplesrc/test.pla: 0154: puti((@array)=>0);putc(' ')
; samplesrc/test.pla: 0155: puti((@array)=>2);putc(' ')
; samplesrc/test.pla: 0156: puti((@array)=>4);putc(' ')
; samplesrc/test.pla: 0157: puti((@array)=>6);putc(' ')
; samplesrc/test.pla: 0158: puti((@array)=>8);putln
; samplesrc/test.pla: 0159: ptr = @main
; samplesrc/test.pla: 0160: ptr(@array:6)#0
; samplesrc/test.pla: 0161: ptr = @array
; samplesrc/test.pla: 0162: puti((ptr):6)
; samplesrc/test.pla: 0163: putln
; samplesrc/test.pla: 0164: puti(ptr=>6)
; samplesrc/test.pla: 0165: putln
; samplesrc/test.pla: 0166: puti((ptr).6)
; samplesrc/test.pla: 0167: putln
; samplesrc/test.pla: 0168: puti(ptr->6)
; samplesrc/test.pla: 0169: putln
; samplesrc/test.pla: 0170: puts(@offsets)
; samplesrc/test.pla: 0171: putln
; samplesrc/test.pla: 0172: puti(cmd)
; samplesrc/test.pla: 0173: putln
; samplesrc/test.pla: 0174: puti(param)
; samplesrc/test.pla: 0175: putln
; samplesrc/test.pla: 0176: puti(data)
; samplesrc/test.pla: 0177: putln
; samplesrc/test.pla: 0178: puti(mystruc)
; samplesrc/test.pla: 0179: putln
; samplesrc/test.pla: 0180: puts(@constr); puti(constval); putln
; samplesrc/test.pla: 0181: puts("Signed byte constant:"); puti(-3); putln
	!BYTE	$6A			; LAW	_D039+0
_F120 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F121 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F122 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+2
_F123 	!WORD	_D039+2		
	!BYTE	$54			; CALL	_X005
_F124 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F125 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+4
_F126 	!WORD	_D039+4		
	!BYTE	$54			; CALL	_X005
_F127 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F128 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+6
_F129 	!WORD	_D039+6		
	!BYTE	$54			; CALL	_X005
_F130 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F131 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+8
_F132 	!WORD	_D039+8		
	!BYTE	$54			; CALL	_X005
_F133 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F134 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F135 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F136 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F137 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+2
_F138 	!WORD	_D039+2		
	!BYTE	$54			; CALL	_X005
_F139 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F140 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+4
_F141 	!WORD	_D039+4		
	!BYTE	$54			; CALL	_X005
_F142 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F143 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+6
_F144 	!WORD	_D039+6		
	!BYTE	$54			; CALL	_X005
_F145 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F146 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+8
_F147 	!WORD	_D039+8		
	!BYTE	$54			; CALL	_X005
_F148 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F149 	!WORD	0		
	!BYTE	$26			; LA	_C005+0
_F150 	!WORD	_C005+0		
	!BYTE	$7A			; SAW	_D040+0
_F151 	!WORD	_D040+0		
	!BYTE	$26			; LA	_D039+6
_F152 	!WORD	_D039+6		
	!BYTE	$6A			; LAW	_D040+0
_F153 	!WORD	_D040+0		
	!BYTE	$56			; ICAL
	!BYTE	$26			; LA	_D039+0
_F154 	!WORD	_D039+0		
	!BYTE	$7E			; DAW	_D040+0
_F155 	!WORD	_D040+0		
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X005
_F156 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F157 	!WORD	0		
	!BYTE	$6A			; LAW	_D040+0
_F158 	!WORD	_D040+0		
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X005
_F159 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F160 	!WORD	0		
	!BYTE	$6A			; LAW	_D040+0
_F161 	!WORD	_D040+0		
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F162 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F163 	!WORD	0		
	!BYTE	$6A			; LAW	_D040+0
_F164 	!WORD	_D040+0		
	!BYTE	$38,$06			; ADDI	6
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X005
_F165 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F166 	!WORD	0		
	!BYTE	$26			; LA	_D038+0
_F167 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_X004
_F168 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F169 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X005
_F170 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F171 	!WORD	0		
	!BYTE	$02			; CN	1
	!BYTE	$54			; CALL	_X005
_F172 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F173 	!WORD	0		
	!BYTE	$0C			; CN	6
	!BYTE	$54			; CALL	_X005
_F174 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F175 	!WORD	0		
	!BYTE	$10			; CN	8
	!BYTE	$54			; CALL	_X005
_F176 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F177 	!WORD	0		
	!BYTE	$26			; LA	_D037+0
_F178 	!WORD	_D037+0		
	!BYTE	$54			; CALL	_X004
_F179 	!WORD	0		
	!BYTE	$14			; CN	10
	!BYTE	$54			; CALL	_X005
_F180 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F181 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$15
	!BYTE	$53,$69,$67,$6E,$65,$64,$20,$62
	!BYTE	$79,$74,$65,$20,$63,$6F,$6E,$73
	!BYTE	$74,$61,$6E,$74,$3A
	!BYTE	$54			; CALL	_X004
_F182 	!WORD	0		
; samplesrc/test.pla: 0182: puts("Hello from in-line string!\$7F\n")
	!BYTE	$5E,$FD			; CFFB	-3
	!BYTE	$54			; CALL	_X005
_F183 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F184 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$1C
	!BYTE	$48,$65,$6C,$6C,$6F,$20,$66,$72
	!BYTE	$6F,$6D,$20,$69,$6E,$2D,$6C,$69
	!BYTE	$6E,$65,$20,$73,$74,$72,$69,$6E
	!BYTE	$67,$21,$7F,$0D
	!BYTE	$54			; CALL	_X004
_F185 	!WORD	0		
; samplesrc/test.pla: 0183: puti(array:0); puts(" == "); puti(array:1); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F186 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F187 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3D,$3D,$20
	!BYTE	$54			; CALL	_X004
_F188 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+1
_F189 	!WORD	_D039+1		
	!BYTE	$54			; CALL	_X005
_F190 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F191 	!WORD	0		
; samplesrc/test.pla: 0184: puts(array:0 == array:1 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F192 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_D039+1
_F193 	!WORD	_D039+1		
	!BYTE	$24			; BRNE	_B020
	!WORD	_B020-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B021
	!WORD	_B021-*
_B020 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B021 
	!BYTE	$54			; CALL	_X004
_F194 	!WORD	0		
; samplesrc/test.pla: 0185: puti(array:0); puts(" <> "); puti(array:1); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F195 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F196 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3C,$3E,$20
	!BYTE	$54			; CALL	_X004
_F197 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+1
_F198 	!WORD	_D039+1		
	!BYTE	$54			; CALL	_X005
_F199 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F200 	!WORD	0		
; samplesrc/test.pla: 0186: puts(array:0 <> array:1 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F201 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_D039+1
_F202 	!WORD	_D039+1		
	!BYTE	$22			; BREQ	_B024
	!WORD	_B024-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B025
	!WORD	_B025-*
_B024 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B025 
	!BYTE	$54			; CALL	_X004
_F203 	!WORD	0		
; samplesrc/test.pla: 0187: puti(array:0); puts(" >= "); puti(array:1); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F204 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F205 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3E,$3D,$20
	!BYTE	$54			; CALL	_X004
_F206 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+1
_F207 	!WORD	_D039+1		
	!BYTE	$54			; CALL	_X005
_F208 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F209 	!WORD	0		
; samplesrc/test.pla: 0188: puts(array:0 >= array:1 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F210 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_D039+1
_F211 	!WORD	_D039+1		
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B029
	!WORD	_B029-*
_B028 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B029 
	!BYTE	$54			; CALL	_X004
_F212 	!WORD	0		
; samplesrc/test.pla: 0189: puti(array:0); puts(" <= "); puti(array:1); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F213 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F214 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3C,$3D,$20
	!BYTE	$54			; CALL	_X004
_F215 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+1
_F216 	!WORD	_D039+1		
	!BYTE	$54			; CALL	_X005
_F217 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F218 	!WORD	0		
; samplesrc/test.pla: 0190: puts(array:0 <= array:1 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F219 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_D039+1
_F220 	!WORD	_D039+1		
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B032
	!WORD	_B032-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B033
	!WORD	_B033-*
_B032 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B033 
	!BYTE	$54			; CALL	_X004
_F221 	!WORD	0		
; samplesrc/test.pla: 0191: puti(array:0); puts(" >  "); puti(array:1); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F222 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F223 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3E,$20,$20
	!BYTE	$54			; CALL	_X004
_F224 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+1
_F225 	!WORD	_D039+1		
	!BYTE	$54			; CALL	_X005
_F226 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F227 	!WORD	0		
; samplesrc/test.pla: 0192: puts(array:0 >  array:1 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F228 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_D039+1
_F229 	!WORD	_D039+1		
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B036
	!WORD	_B036-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B037
	!WORD	_B037-*
_B036 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B037 
	!BYTE	$54			; CALL	_X004
_F230 	!WORD	0		
; samplesrc/test.pla: 0193: puti(array:0); puts(" <  "); puti(array:1); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F231 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F232 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3C,$20,$20
	!BYTE	$54			; CALL	_X004
_F233 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+1
_F234 	!WORD	_D039+1		
	!BYTE	$54			; CALL	_X005
_F235 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F236 	!WORD	0		
; samplesrc/test.pla: 0194: puts(array:0 <  array:1 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F237 	!WORD	_D039+0		
	!BYTE	$6A			; LAW	_D039+1
_F238 	!WORD	_D039+1		
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B040
	!WORD	_B040-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B041
	!WORD	_B041-*
_B040 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B041 
	!BYTE	$54			; CALL	_X004
_F239 	!WORD	0		
; samplesrc/test.pla: 0195: puti(array:0); puts(" == "); puti(array:0); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F240 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F241 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3D,$3D,$20
	!BYTE	$54			; CALL	_X004
_F242 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F243 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F244 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F245 	!WORD	0		
; samplesrc/test.pla: 0196: puts(array:0 == array:0 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F246 	!WORD	_D039+0		
	!BYTE	$34			; DUP
	!BYTE	$24			; BRNE	_B044
	!WORD	_B044-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B045
	!WORD	_B045-*
_B044 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B045 
	!BYTE	$54			; CALL	_X004
_F247 	!WORD	0		
; samplesrc/test.pla: 0197: puti(array:0); puts(" <> "); puti(array:0); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F248 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F249 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3C,$3E,$20
	!BYTE	$54			; CALL	_X004
_F250 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F251 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F252 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F253 	!WORD	0		
; samplesrc/test.pla: 0198: puts(array:0 <> array:0 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F254 	!WORD	_D039+0		
	!BYTE	$34			; DUP
	!BYTE	$22			; BREQ	_B048
	!WORD	_B048-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B049
	!WORD	_B049-*
_B048 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B049 
	!BYTE	$54			; CALL	_X004
_F255 	!WORD	0		
; samplesrc/test.pla: 0199: puti(array:0); puts(" >= "); puti(array:0); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F256 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F257 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3E,$3D,$20
	!BYTE	$54			; CALL	_X004
_F258 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F259 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F260 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F261 	!WORD	0		
; samplesrc/test.pla: 0200: puts(array:0 >= array:0 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F262 	!WORD	_D039+0		
	!BYTE	$34			; DUP
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B052
	!WORD	_B052-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B053
	!WORD	_B053-*
_B052 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B053 
	!BYTE	$54			; CALL	_X004
_F263 	!WORD	0		
; samplesrc/test.pla: 0201: puti(array:0); puts(" <= "); puti(array:0); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F264 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F265 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3C,$3D,$20
	!BYTE	$54			; CALL	_X004
_F266 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F267 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F268 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F269 	!WORD	0		
; samplesrc/test.pla: 0202: puts(array:0 <= array:0 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F270 	!WORD	_D039+0		
	!BYTE	$34			; DUP
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B056
	!WORD	_B056-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B057
	!WORD	_B057-*
_B056 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B057 
	!BYTE	$54			; CALL	_X004
_F271 	!WORD	0		
; samplesrc/test.pla: 0203: puti(array:0); puts(" >  "); puti(array:0); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F272 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F273 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3E,$20,$20
	!BYTE	$54			; CALL	_X004
_F274 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F275 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F276 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F277 	!WORD	0		
; samplesrc/test.pla: 0204: puts(array:0 >  array:0 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F278 	!WORD	_D039+0		
	!BYTE	$34			; DUP
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B060
	!WORD	_B060-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B061
	!WORD	_B061-*
_B060 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B061 
	!BYTE	$54			; CALL	_X004
_F279 	!WORD	0		
; samplesrc/test.pla: 0205: puti(array:0); puts(" <  "); puti(array:0); puts (" is ")
	!BYTE	$6A			; LAW	_D039+0
_F280 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F281 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$3C,$20,$20
	!BYTE	$54			; CALL	_X004
_F282 	!WORD	0		
	!BYTE	$6A			; LAW	_D039+0
_F283 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_X005
_F284 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$20,$69,$73,$20
	!BYTE	$54			; CALL	_X004
_F285 	!WORD	0		
; samplesrc/test.pla: 0206: puts(array:0 <  array:0 ?? "TRUE\n" :: "FALSE\n")
	!BYTE	$6A			; LAW	_D039+0
_F286 	!WORD	_D039+0		
	!BYTE	$34			; DUP
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B064
	!WORD	_B064-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$54,$52,$55,$45,$0D
	!BYTE	$50			; BRNCH	_B065
	!WORD	_B065-*
_B064 
	!BYTE	$2E			; CS
	!BYTE	$06
	!BYTE	$46,$41,$4C,$53,$45,$0D
_B065 
	!BYTE	$54			; CALL	_X004
_F287 	!WORD	0		
; samplesrc/test.pla: 0207: ptr = 5
; samplesrc/test.pla: 0208: puts("5*0="); puti(ptr*0); putln
	!BYTE	$0A			; CN	5
	!BYTE	$7A			; SAW	_D040+0
_F288 	!WORD	_D040+0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$35,$2A,$30,$3D
	!BYTE	$54			; CALL	_X004
_F289 	!WORD	0		
; samplesrc/test.pla: 0209: puts("5*1="); puti(ptr*1); putln
	!BYTE	$6A			; LAW	_D040+0
_F290 	!WORD	_D040+0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X005
_F291 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F292 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$35,$2A,$31,$3D
	!BYTE	$54			; CALL	_X004
_F293 	!WORD	0		
; samplesrc/test.pla: 0210: puts("5*2="); puti(ptr*2); putln
	!BYTE	$6A			; LAW	_D040+0
_F294 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X005
_F295 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F296 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$35,$2A,$32,$3D
	!BYTE	$54			; CALL	_X004
_F297 	!WORD	0		
; samplesrc/test.pla: 0211: puts("5/1="); puti(ptr/1); putln
	!BYTE	$6A			; LAW	_D040+0
_F298 	!WORD	_D040+0		
	!BYTE	$34			; DUP
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X005
_F299 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F300 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$35,$2F,$31,$3D
	!BYTE	$54			; CALL	_X004
_F301 	!WORD	0		
; samplesrc/test.pla: 0212: ptr = -1
; samplesrc/test.pla: 0213: puts("-1 * -1 = "); puti(ptr * ptr); putln
	!BYTE	$6A			; LAW	_D040+0
_F302 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_X005
_F303 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F304 	!WORD	0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$7A			; SAW	_D040+0
_F305 	!WORD	_D040+0		
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$2D,$31,$20,$2A,$20,$2D,$31,$20
	!BYTE	$3D,$20
	!BYTE	$54			; CALL	_X004
_F306 	!WORD	0		
; samplesrc/test.pla: 0214: done
	!BYTE	$6A			; LAW	_D040+0
_F307 	!WORD	_D040+0		
	!BYTE	$34			; DUP
	!BYTE	$86			; MUL
	!BYTE	$54			; CALL	_X005
_F308 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F309 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	12
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	1			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	23			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	23			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	23			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	23			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F138-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F139-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F140-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F141-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F142-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F143-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F144-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F145-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F146-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F147-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F148-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F149-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F150-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F151-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F152-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F153-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F154-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F155-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F156-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F157-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F158-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F159-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F160-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F161-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F162-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F163-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F164-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F165-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F166-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F167-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F168-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F169-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F170-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F171-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F172-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F173-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F174-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F175-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F176-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F177-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F178-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F179-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F180-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F181-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F182-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F183-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F184-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F185-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F186-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F187-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F188-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F189-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F190-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F191-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F192-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F193-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F194-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F195-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F196-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F197-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F198-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F199-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F200-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F201-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F202-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F203-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F204-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F205-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F206-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F207-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F208-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F209-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F210-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F211-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F212-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F213-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F214-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F215-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F216-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F217-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F218-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F219-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F220-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F221-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F222-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F223-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F224-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F225-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F226-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F227-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F228-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F229-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F230-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F231-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F232-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F233-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F234-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F235-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F236-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F237-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F238-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F239-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F240-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F241-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F242-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F243-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F244-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F245-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F246-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F247-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F248-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F249-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F250-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F251-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F252-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F253-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F254-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F255-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F256-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F257-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F258-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F259-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F260-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F261-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F262-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F263-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F264-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F265-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F266-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F267-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F268-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F269-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F270-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F271-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F272-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F273-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F274-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F275-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F276-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F277-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F278-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F279-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F280-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F281-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F282-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F283-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F284-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F285-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F286-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F287-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F288-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F289-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F290-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F291-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F292-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F293-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F294-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F295-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F296-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F297-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F298-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F299-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F300-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F301-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F302-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F303-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F304-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F305-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F306-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F307-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F308-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F309-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: MACHID
	!BYTE	$CD,$C1,$C3,$C8,$C9,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	1			; ESD INDEX
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: DIVMOD
	!BYTE	$C4,$C9,$D6,$CD,$CF,$44
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	23			; ESD INDEX
	; DCI STRING: PRINT
	!BYTE	$D0,$D2,$C9,$CE,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: MAIN
	!BYTE	$CD,$C1,$C9,$4E
	!BYTE	$08			; ENTRY SYMBOL FLAG
	!WORD	_C005		
	!BYTE	$00			; END OF ESD
