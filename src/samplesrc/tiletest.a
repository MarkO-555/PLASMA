; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; samplesrc/tiletest.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; samplesrc/tiletest.pla: 0001: 
; samplesrc/tiletest.pla: 0002: include "inc/hgrtile.plh"
; inc/hgrtile.plh: 0001: import hgrtile
	; DCI STRING: HGRTILE
	!BYTE	$C8,$C7,$D2,$D4,$C9,$CC,$45
					; HGRTILE -> X028
; inc/hgrtile.plh: 0002:     predef tileDraw(x, y, tileptr)#0
					; TILEDRAW -> X029
; inc/hgrtile.plh: 0003:     predef tileXorDraw(x, y, tileptr)#0
					; TILEXORDRAW -> X030
; inc/hgrtile.plh: 0004:     predef tileOrDraw(x, y, tileptr)#0
					; TILEORDRAW -> X031
; inc/hgrtile.plh: 0005:     predef tileAndDraw(x, y, tileptr)#0
					; TILEANDDRAW -> X032
; inc/hgrtile.plh: 0006:     predef tileDrawStr(x, y, strptr, strlen, tileset)#0
					; TILEDRAWSTR -> X033
; inc/hgrtile.plh: 0007:     predef tileFromText(txtpage, tileset)#0
					; TILEFROMTEXT -> X034
; inc/hgrtile.plh: 0008:     predef tileMode(mode)#1
					; TILEMODE -> X035
; inc/hgrtile.plh: 0009:     predef tileClear#0
					; TILECLEAR -> X036
; inc/hgrtile.plh: 0010:     predef tileShow(page)#1
					; TILESHOW -> X037
; inc/hgrtile.plh: 0011:     predef tileSwap#1
					; TILESWAP -> X038
; inc/hgrtile.plh: 0012:     predef tileDrawBuf(page)#1
					; TILEDRAWBUF -> X039
; inc/hgrtile.plh: 0013: end
; samplesrc/tiletest.pla: 0002: 
; samplesrc/tiletest.pla: 0003: include "inc/hgrfont.plh"
; inc/hgrfont.plh: 0001: import hgrfont
	; DCI STRING: HGRFONT
	!BYTE	$C8,$C7,$D2,$C6,$CF,$CE,$54
					; HGRFONT -> X040
; inc/hgrfont.plh: 0002:     predef hgrPutStr(x, y, strptr)#0
					; HGRPUTSTR -> X041
; inc/hgrfont.plh: 0003: end
; samplesrc/tiletest.pla: 0003: 
; samplesrc/tiletest.pla: 0004: sysflags reshgr1 // Reserve HGR page 1
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_SYSFLAGS	=	$0010		; SYSTEM FLAGS
; samplesrc/tiletest.pla: 0005: 
; samplesrc/tiletest.pla: 0006: tileMode(TRUE)
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_INIT 
; samplesrc/tiletest.pla: 0007: hgrPutStr(5, 1, "Hello HiRes Tile Demo")
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X035
_F000 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$0A			; CN	5
	!BYTE	$02			; CN	1
	!BYTE	$2E			; CS
	!BYTE	$15
	!BYTE	$48,$65,$6C,$6C,$6F,$20,$48,$69
	!BYTE	$52,$65,$73,$20,$54,$69,$6C,$65
	!BYTE	$20,$44,$65,$6D,$6F
	!BYTE	$54			; CALL	_X041
_F001 	!WORD	0		
; samplesrc/tiletest.pla: 0008: getc
; samplesrc/tiletest.pla: 0009: tileFromText(0, @hgrFont)
; samplesrc/tiletest.pla: 0010: getc
; samplesrc/tiletest.pla: 0011: tileMode(FALSE)
; samplesrc/tiletest.pla: 0012: done
	!BYTE	$54			; CALL	_X006
_F002 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$26			; LA	_X040+0
_F003 	!WORD	0+0		
	!BYTE	$54			; CALL	_X034
_F004 	!WORD	0		
	!BYTE	$54			; CALL	_X006
_F005 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_X035
_F006 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_DEFCNT	=	1
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	35			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	41			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	40			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	35			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: TILEFROMTEXT
	!BYTE	$D4,$C9,$CC,$C5,$C6,$D2,$CF,$CD,$D4,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	; DCI STRING: TILEMODE
	!BYTE	$D4,$C9,$CC,$C5,$CD,$CF,$C4,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	35			; ESD INDEX
	; DCI STRING: HGRFONT
	!BYTE	$C8,$C7,$D2,$C6,$CF,$CE,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	40			; ESD INDEX
	; DCI STRING: HGRPUTSTR
	!BYTE	$C8,$C7,$D2,$D0,$D5,$D4,$D3,$D4,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	41			; ESD INDEX
	!BYTE	$00			; END OF ESD
