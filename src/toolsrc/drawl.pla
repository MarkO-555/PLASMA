include "inc/cmdsys.plh"

def is_num(c); return c >= '0' and c <= '9'; end
def is_alpha(c); c=toupper(c); return c >= 'A' and c <= 'Z'; end
def is_alphanum(c); return is_alpha(c) or is_num(c); end

def num_parse(numptr)
  while ^numptr >= '0' and ^numptr <= '9'
    putc(^numptr)
    numptr++
  loop
  return numptr
end

def sym_parse(symptr)
  while is_alphanum(^symptr)
    putc(toupper(^symptr))
    symptr++
  loop
  return symptr
end

def expr_parse(evalptr, depth)
  while TRUE
    when ^evalptr
      is 0
        if depth > 0
          // Refill input buffer
          evalptr = gets('>'|$80)
          ^(evalptr + ^evalptr + 1) = 0
          evalptr++
        else
          return evalptr
        fin
        break
      is '!'
        return FALSE
      is ' '
        evalptr++
        break
      is '('
        putln
        evalptr++
        evalptr = expr_parse(evalptr, depth + 1)
        break
      is ')'
        putln
        return evalptr
      otherwise
        if depth == 0
          puts("Invalid S-Expression\n")
          ^evalptr = 0
          return evalptr
        fin
        if is_alpha(^evalptr)
          putc('.')
          evalptr = sym_parse(evalptr)
        elsif is_num(^evalptr)
          putc('.')
          evalptr = num_parse(evalptr)
        else
          putc('\\')
          putc(^evalptr)
          evalptr++
        fin
    wend
  loop
  return evalptr
end

def read
  word readline

  repeat
    readline = gets('?'|$80)
    ^(readline + ^readline + 1) = 0
    readline++
  until ^readline
  return expr_parse(readline, 0)
end

def eval(s_expr)
  return s_expr
end

def print(s_expr)
  return s_expr)
end

while print(eval(read)); loop
done
