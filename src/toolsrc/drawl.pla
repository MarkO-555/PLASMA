include "inc/cmdsys.plh"

const TYPE_MASK  = $70
const NIL        = $00
const BOOL_FALSE = $00
const BOOL_TRUE  = $01
const CONS_TYPE  = $10
const LIT_TYPE   = $20
const LIT_NUM    = $21
const LIT_CHR    = $22
const LIT_STR    = $23
const SYM_TYPE   = $30
const SYM_LEN    = $0F
const FUNC_TYPE  = $40
const FUNC_EXPR  = $41
const FUNC_NATV  = $42
const VAR_TYPE   = $50
const VAR_NUM    = $51
const VAR_CHR    = $52
const VAR_STR    = $53
const VAR_BOOL   = $54
const VAR_FALSE  = $55
const ARG_TYPE   = $60
const QUOTE      = $70

struc t_elem
  word link
  byte type
end
struc t_cons
  res[t_elem]
  word car
  word cdr
end
struc t_num
  res[t_elem]
  var numval
end
struc t_chr
  res[t_elem]
  char chrval
end
struc t_str
  res[t_elem]
  char[1] string
end
struc t_sym
  res[t_elem]
  word prop
  char[0] name
end
struc t_func
  res[t_elem]
  word lamda
end

var sym_true, sym_false, sym_nil, sym_quote
res[t_elem] pred_true  = 0, 0, BOOL_TRUE
res[t_elem] pred_false = 0, 0, BOOL_FALSE

var cons_list = NULL
var cons_free = NULL
var func_list = NULL
var func_free = NULL
var var_list  = NULL
var var_free  = NULL
var sym_list  = NULL
var sym_free  = NULL
var lit_list  = NULL
var lit_free  = NULL

byte quit = FALSE

//
// Build ATOMS
//

def new_cons
  var consptr

  consptr = heapalloc(t_cons)
  consptr=>link = cons_list
  cons_list     = consptr
  consptr->type = CONS_TYPE
  consptr=>car  = NULL
  consptr=>cdr  = NULL
  return consptr
end

def match_litnum(num)
  var numptr

  numptr = lit_list
  while numptr
    if numptr->type == LIT_NUM and numptr=>numval == num
      puts("Match number: ")
      puti(num); putln
      return numptr
    fin
    numptr = numptr=>link
  loop
  return NULL
end

def add_litnum(num)
  var numptr

  numptr = match_litnum(num)
  if numptr; return numptr; fin
  numptr = heapalloc(t_num)
  numptr=>link   = lit_list
  lit_list       = numptr
  numptr->type   = LIT_NUM
  numptr=>numval = num
  puts("New number: "); puti(num); putln
  return numptr
end

def match_sym(symstr)
  var symptr
  byte len, typelen, i

  len     = ^symstr
  typelen = SYM_TYPE | len
  len--; symstr++
  symptr  = sym_list
  while symptr
    if symptr->type == typelen
      for i = 0 to len
        if symptr->name[i] <> symstr->[i]; break; fin
      next
      if i > len
        puts("Match symbol: ")
        puts(symstr - 1); putln
        return symptr
      fin
    fin
    symptr = symptr=>link
  loop
  return NULL
end

def add_sym(symstr)
  var symptr

  symptr = match_sym(symstr)
  if symptr; return symptr; fin // Return already existing symbol
  symptr       = heapalloc(t_sym + ^symstr)
  symptr=>link = sym_list
  sym_list     = symptr
  symptr->type = ^symstr | SYM_TYPE
  symptr=>prop = NULL
  memcpy(symptr + name, symstr + 1, ^symstr)
  puts("New symbol: "); puts(symstr); putln
  return symptr
end

def add_natvfn(funstr, funaddr)
  var funsym, funptr

  funsym = add_sym(funstr)
  if funsym=>prop; puts(" Property already assinged:"); puts(funstr); putln; return 0; fin
  funptr = heapalloc(t_func)
  funptr=>link  = func_list
  func_list     = funptr
  funptr->type  = FUNC_NATV
  funptr=>lamda = funaddr
  funsym=>prop  = funptr
  puts("New native function: "); puts(funstr); putln
  return funstr
end

//
// Parse textual representation of S-expressions
//

def is_num(c); return c >= '0' and c <= '9'; end
def is_alphasym(c); c=toupper(c); return c >= '*' and c <= 'Z' and c <> '.'; end

def parse_num(evalptr)#2 // return evalptr, numptr
  var num, sign

  num  = 0
  sign = 1
  if ^evalptr == '-'
    sign = -1
    evalptr++
  fin
  while ^evalptr >= '0' and ^evalptr <= '9'
    num = num * 10 + ^evalptr - '0'
    evalptr++
  loop
  return evalptr, add_litnum(sign * num)
end

def parse_sym(evalptr)#2 // return evalptr, symptr
  var symstr
  symstr = evalptr - 1
  while is_alphasym(^evalptr)
    evalptr++
  loop
  ^symstr = evalptr - symstr - 1
  if ^symstr > 31; ^symstr = 31; fin
  return evalptr, add_sym(symstr)
end

def parse_expr(evalptr, level)#2 // return evalptr, exprptr
  var exprptr, consptr, elemptr, quotecons

  exprptr = NULL
  consptr = NULL
  while TRUE
    //
    // Parse textual S-expression
    //
    elemptr = NULL
    when ^evalptr
      is 0
        if level
          // Refill input buffer
          evalptr = gets('>'|$80)
          ^(evalptr + ^evalptr + 1) = 0
          evalptr++
        else
          return evalptr, exprptr
        fin
        break
      is ' '
        evalptr++
        break
      is ')'
        putln
        return evalptr + 1, exprptr
      is '('
        evalptr++
        if level == 0
          level++
        else
          evalptr, elemptr = parse_expr(evalptr, 1)
        fin
        break
      is '\''
        evalptr++
        evalptr, elemptr    = parse_expr(evalptr, 0)
        quotecons           = new_cons
        quotecons=>car      = sym_quote
        quotecons=>cdr      = new_cons
        quotecons=>cdr=>car = elemptr
        elemptr             = quotecons
        break
      is '.'
        evalptr++
        evalptr, elemptr = parse_expr(evalptr, 0)
        //
        // Add expression to CDR
        //
        if not (consptr and consptr=>car)
          puts("Invalid . operator\n")
          return evalptr, NULL
        fin
        consptr=>cdr = elemptr
        return evalptr, exprptr
      otherwise
        if (^evalptr == '-' and is_num(^(evalptr+1))) or is_num(^evalptr)
          evalptr, elemptr = parse_num(evalptr)
        elsif is_alphasym(^evalptr)
          evalptr, elemptr = parse_sym(evalptr)
        else
          putc('\\')
          putc(^evalptr)
          evalptr++
        fin
        if level == 0
          return evalptr, elemptr
        fin
    wend
    if elemptr
      //
      // Add element to S-expression
      //
      if not consptr
        consptr = new_cons
        exprptr = consptr
      else
        consptr=>cdr = new_cons
        consptr      = consptr=>cdr
      fin
      //
      // Add element to CAR
      //
      consptr=>car = elemptr
    fin
  loop
  return evalptr, exprptr
end

//
// REPL routines
//

def print(expr)#0
  char prstr[32]

  if not expr
    puts("NIL")
  else
    when expr->type & TYPE_MASK
      is CONS_TYPE
        putc('(')
        print(expr=>car)
        putc('.')
        print(expr=>cdr)
        putc(')')
        break
      is NIL
        putc(expr->type ?? 'T' :: 'F')
        break
      is LIT_TYPE
      is VAR_TYPE
        when expr->type
          is LIT_NUM
          is VAR_NUM
            puti(expr=>numval)
            break
        wend
        break
      is SYM_TYPE
        prstr = expr->type & SYM_LEN
        memcpy(@prstr + 1, expr + name, prstr)
        puts(@prstr)
        break;
    wend
  fin
end

def read
  var readline, expr

  repeat
    readline = gets('?'|$80)
    ^(readline + ^readline + 1) = 0
    readline++
  until ^readline
  if ^readline == '!'; quit = TRUE; return NULL; fin // Quick exit from REPL
  drop, expr = parse_expr(readline, 0)
  print(expr); putln // DEBUG - print parsed expression
  return expr
end

def eval(expr)
  if expr
    when expr->type & TYPE_MASK
      is CONS_TYPE
        if expr=>car->type & TYPE_MASK == SYM_TYPE and expr=>car=>prop->type == FUNC_NATV
          return expr=>car=>prop=>lamda(expr=>cdr)
        else
          puts("Bad function expression: \n"); print(expr); putln
          return NULL
        fin
    wend
  fin
  return expr
end

//
// Install default native functions
//

def natv_atom(expr)
  return expr->type <> CONS_TYPE ?? @pred_true :: @pred_false
end

def natv_eq(expr)
  var atom1, atom2, val1, val2

  atom1 = expr=>car=>prop
  atom2 = expr=>cdr=>car=>prop

  if atom1->type == LIT_NUM or atom1->type == VAR_NUM
    val1 = atom1=>numval
  fin
  if atom2->type == LIT_NUM or atom2->type == VAR_NUM
    val2 = atom2=>numval
  fin
  return NULL
end

def natv_cons(expr)
  return NULL
end

def natv_car(expr)
  if expr->TYPE == CONS_TYPE
    return expr=>car
  fin
  return NULL
end

def natv_cdr(expr)
  if expr->TYPE == CONS_TYPE
    return expr=>cdr
  fin
  return NULL
end

def natv_cadr(expr)
  if expr->TYPE == CONS_TYPE and expr=>cdr->type == CONS_TYPE
    return expr=>cdr=>car
  fin
  return NULL
end

def natv_evcon(expr)
  return NULL
end

def natv_defn(expr)
  return NULL
end

def eval_num(expr)
  var result

  result = expr=>car
  if result->type == CONS_TYPE
    result = eval(result)
  fin
  if result->type == LIT_NUM or result->type == VAR_NUM
    return result
  else
    puts("Not a number\n")
  fin
  return NULL
end

def natv_add(expr)
  var sum, result

  sum = 0
  while expr
    sum = sum + eval_num(expr)=>numval
    expr = expr=>cdr
  loop
  return add_litnum(sum)
end

def natv_sub(expr)
  var diff

  diff = eval_num(expr)=>numval
  expr = expr=>cdr
  while expr
    diff = diff - eval_num(expr)=>numval
    expr = expr=>cdr
  loop
  return add_litnum(diff)
end

def natv_mul(expr)
  var mults

  mults = eval_num(expr)=>numval
  expr = expr=>cdr
  while expr
    mults = mults * eval_num(expr)=>numval
    expr = expr=>cdr
  loop
  return add_litnum(mults)
end

def natv_div(expr)
  var divs

  divs = eval_num(expr)=>numval
  expr = expr=>cdr
  while expr
    divs = divs * eval_num(expr)=>numval
    expr = expr=>cdr
  loop
  return add_litnum(divs)
end

def add_defaults#0

  sym_true        = add_sym("T")
  sym_true=>prop  = @pred_true
  sym_false       = add_sym("F")
  sym_false=>prop = @pred_false
  sym_nil         = add_sym("NIL")
  sym_nil=>prop   = @pred_false
  sym_quote       = add_sym("QUOTE")
  add_natvfn("ATOM",   @natv_atom)
  add_natvfn("EQ",     @natv_eq)
  add_natvfn("CONS",   @natv_cons)
  add_natvfn("CAR",    @natv_car)
  add_natvfn("CDR",    @natv_cdr)
  add_natvfn("QUOTE",  @natv_cadr)
  add_natvfn("COND",   @natv_evcon)
  add_natvfn("DEFINE", @natv_defn)
  add_natvfn("+",      @natv_add)
  add_natvfn("-",      @natv_sub)
  add_natvfn("*",      @natv_mul)
  add_natvfn("/",      @natv_div)
end

add_defaults
while not quit; print(eval(read)); putln; loop
done
