; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; toolsrc/plforth.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; toolsrc/plforth.pla: 0001: 
; toolsrc/plforth.pla: 0002: 
; toolsrc/plforth.pla: 0003: //
; toolsrc/plforth.pla: 0004: // FORTH dictionary layout
; toolsrc/plforth.pla: 0005: //
; toolsrc/plforth.pla: 0006: //  bytes   usage
; toolsrc/plforth.pla: 0007: //  -----   -----
; toolsrc/plforth.pla: 0008: // [1..32] name string
; toolsrc/plforth.pla: 0009: // [2]     LFA (link field address)
; toolsrc/plforth.pla: 0010: // [2]     CFA (code field address)
; toolsrc/plforth.pla: 0011: // [2]     PFA (param field address)
; toolsrc/plforth.pla: 0012: //
; toolsrc/plforth.pla: 0013: 
; toolsrc/plforth.pla: 0014: //
; toolsrc/plforth.pla: 0015: // Predefine instrinsics
; toolsrc/plforth.pla: 0016: //
; toolsrc/plforth.pla: 0017: predef _drop_(a)#0, _swap_(a,b)#2
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; toolsrc/plforth.pla: 0018: predef _add_(a,b)#1, _sub_(a,b)#1, _mul_(a,b)#1, _div_(a,b)#1
; toolsrc/plforth.pla: 0019: predef _vlist_#0, _exit_#0
; toolsrc/plforth.pla: 0020: // DROP
; toolsrc/plforth.pla: 0021: char d_drop = "drop"
_D036 					; d_drop = "drop"
	!BYTE	$04
	!BYTE	$64,$72,$6F,$70
; toolsrc/plforth.pla: 0022: word = 0, @_drop_, 0
	!WORD	$0000
_F000 	!WORD	_P000
	!WORD	$0000
; toolsrc/plforth.pla: 0023: // SWAP
; toolsrc/plforth.pla: 0024: char d_swap = "swap"
_D037 					; d_swap = "swap"
	!BYTE	$04
	!BYTE	$73,$77,$61,$70
; toolsrc/plforth.pla: 0025: word = @d_drop, @_swap_
_F001 	!WORD	_D036
_F002 	!WORD	_P001
; toolsrc/plforth.pla: 0026: // ADD
; toolsrc/plforth.pla: 0027: char d_add = "+"
_D038 					; d_add = "+"
	!BYTE	$01
	!BYTE	$2B
; toolsrc/plforth.pla: 0028: word = @d_swap, @_add_
_F003 	!WORD	_D037
_F004 	!WORD	_P002
; toolsrc/plforth.pla: 0029: // SUB
; toolsrc/plforth.pla: 0030: char d_sub = "-"
_D039 					; d_sub = "-"
	!BYTE	$01
	!BYTE	$2D
; toolsrc/plforth.pla: 0031: word = @d_add, @_sub_
_F005 	!WORD	_D038
_F006 	!WORD	_P003
; toolsrc/plforth.pla: 0032: // MUL
; toolsrc/plforth.pla: 0033: char d_mul = "*"
_D040 					; d_mul = "*"
	!BYTE	$01
	!BYTE	$2A
; toolsrc/plforth.pla: 0034: word = @d_sub, @_mul_
_F007 	!WORD	_D039
_F008 	!WORD	_P004
; toolsrc/plforth.pla: 0035: // DIV
; toolsrc/plforth.pla: 0036: char d_div = "/"
_D041 					; d_div = "/"
	!BYTE	$01
	!BYTE	$2F
; toolsrc/plforth.pla: 0037: word = @d_mul, @_div_
_F009 	!WORD	_D040
_F010 	!WORD	_P005
; toolsrc/plforth.pla: 0038: // PRINT TOS
; toolsrc/plforth.pla: 0039: char d_prtos = "."
_D042 					; d_prtos = "."
	!BYTE	$01
	!BYTE	$2E
; toolsrc/plforth.pla: 0040: word = @d_div, @puti
_F011 	!WORD	_D041
_F012 	!WORD	0			; _X005
; toolsrc/plforth.pla: 0041: // EXIT
; toolsrc/plforth.pla: 0042: char d_exit = "exit"
_D043 					; d_exit = "exit"
	!BYTE	$04
	!BYTE	$65,$78,$69,$74
; toolsrc/plforth.pla: 0043: word = @d_prtos, @_exit_
_F013 	!WORD	_D042
_F014 	!WORD	_P007
; toolsrc/plforth.pla: 0044: // LIST VOCAB
; toolsrc/plforth.pla: 0045: char d_vlist = "vlist"
_D044 					; d_vlist = "vlist"
	!BYTE	$05
	!BYTE	$76,$6C,$69,$73,$74
; toolsrc/plforth.pla: 0046: word = @d_exit, @_vlist_
_F015 	!WORD	_D043
_F016 	!WORD	_P006
; toolsrc/plforth.pla: 0047: //
; toolsrc/plforth.pla: 0048: // Internal variables
; toolsrc/plforth.pla: 0049: //
; toolsrc/plforth.pla: 0050: word vocab=@d_vlist
_D045 					; vocab=@d_vlist
_F017 	!WORD	_D044
; toolsrc/plforth.pla: 0051: word inptr
_D046 	!FILL	2			; inptr
; toolsrc/plforth.pla: 0052: char exit = 0
_D047 					; exit = 0
	!BYTE	$00
; toolsrc/plforth.pla: 0053: //
; toolsrc/plforth.pla: 0054: // Intrinsics
; toolsrc/plforth.pla: 0055: //
; toolsrc/plforth.pla: 0056: def _drop_(a)#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; a -> [0]
_P000 					; _drop_(a)#0()
_C000 					; _drop_()
; toolsrc/plforth.pla: 0057:   return
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$5A,$02			; LEAVE	2
; toolsrc/plforth.pla: 0058: end
; toolsrc/plforth.pla: 0059: def _swap_(a,b)#2
					; a -> [0]
					; b -> [2]
_P001 					; _swap_(a,b)#2()
_C001 					; _swap_()
; toolsrc/plforth.pla: 0060:   return b,a
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0061: end
; toolsrc/plforth.pla: 0062: def _add_(a,b)#1
					; a -> [0]
					; b -> [2]
_P002 					; _add_(a,b)#1()
_C002 					; _add_()
; toolsrc/plforth.pla: 0063:   return a+b
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0064: end
; toolsrc/plforth.pla: 0065: def _sub_(a,b)#1
					; a -> [0]
					; b -> [2]
_P003 					; _sub_(a,b)#1()
_C003 					; _sub_()
; toolsrc/plforth.pla: 0066:   return a-b
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$84			; SUB 
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0067: end
; toolsrc/plforth.pla: 0068: def _mul_(a,b)#1
					; a -> [0]
					; b -> [2]
_P004 					; _mul_(a,b)#1()
_C004 					; _mul_()
; toolsrc/plforth.pla: 0069:   return a*b
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$86			; MUL
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0070: end
; toolsrc/plforth.pla: 0071: def _div_(a,b)#1
					; a -> [0]
					; b -> [2]
_P005 					; _div_(a,b)#1()
_C005 					; _div_()
; toolsrc/plforth.pla: 0072:   return a/b
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$88			; DIV
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0073: end
; toolsrc/plforth.pla: 0074: def _exit_#0
_P007 					; _exit_#0()
_C006 					; _exit_()
; toolsrc/plforth.pla: 0075:   exit = 1
; toolsrc/plforth.pla: 0076: end
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D047+0
_F018 	!WORD	_D047+0		
	!BYTE	$5C			; RET
; toolsrc/plforth.pla: 0077: def _vlist_#0
_P006 					; _vlist_#0()
_C007 					; _vlist_()
; toolsrc/plforth.pla: 0078:   word v
					; v -> [0]
; toolsrc/plforth.pla: 0079: 
; toolsrc/plforth.pla: 0080:   v = vocab
	!BYTE	$58,$02,$00		; ENTER	2,0
; toolsrc/plforth.pla: 0081:   while v
	!BYTE	$6A			; LAW	_D045+0
_F019 	!WORD	_D045+0		
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; toolsrc/plforth.pla: 0082:     puts(v); puts("  ")
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F020 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$20,$20
	!BYTE	$54			; CALL	_X004
_F021 	!WORD	0		
; toolsrc/plforth.pla: 0083:     v = *(v + ^v + 1)
; toolsrc/plforth.pla: 0084:   loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$00			; SLW	[0]
_B003 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; toolsrc/plforth.pla: 0085: end
	!BYTE	$5A,$02			; LEAVE	2
; toolsrc/plforth.pla: 0086: //
; toolsrc/plforth.pla: 0087: // Find match in vocabulary
; toolsrc/plforth.pla: 0088: //
; toolsrc/plforth.pla: 0089: def find#1
_C008 					; find()
; toolsrc/plforth.pla: 0090:   word v
					; v -> [0]
; toolsrc/plforth.pla: 0091:   byte len
					; len -> [2]
; toolsrc/plforth.pla: 0092: 
; toolsrc/plforth.pla: 0093:   inptr--
	!BYTE	$58,$03,$00		; ENTER	3,0
	!BYTE	$6A			; LAW	_D046+0
_F022 	!WORD	_D046+0		
	!BYTE	$8E			; DECR
; toolsrc/plforth.pla: 0094:   v = vocab
; toolsrc/plforth.pla: 0095:   while v
	!BYTE	$7A			; SAW	_D046+0
_F023 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_D045+0
_F024 	!WORD	_D045+0		
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$50			; BRNCH	_B006
	!WORD	_B006-*
_B004 
; toolsrc/plforth.pla: 0096:     for len = 1 to ^v
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B007
	!WORD	_B007-*
_B008 
	!BYTE	$6C,$02			; DLB	[2]
; toolsrc/plforth.pla: 0097:       if ^(inptr+len) <> ^(v+len)
; toolsrc/plforth.pla: 0098:         break
	!BYTE	$6A			; LAW	_D046+0
_F025 	!WORD	_D046+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$22			; BREQ	_B010
	!WORD	_B010-*
	!BYTE	$50			; BRNCH	_B007
	!WORD	_B007-*
; toolsrc/plforth.pla: 0099:       fin
_B010 
_B011 
; toolsrc/plforth.pla: 0100:     next
_B009 
	!BYTE	$A4			; INCBRLE	_B008
	!WORD	_B008-*
_B007 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; toolsrc/plforth.pla: 0101:     if len > ^v and ^(inptr+len) <= ' '
; toolsrc/plforth.pla: 0102:       //puts("[Found name = "); puts(v); puts("]\n")
; toolsrc/plforth.pla: 0103:       inptr = inptr + len
; toolsrc/plforth.pla: 0104:       return v + ^v + 3
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B012
	!WORD	_B012-*
	!BYTE	$6A			; LAW	_D046+0
_F026 	!WORD	_D046+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B012 
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$6A			; LAW	_D046+0
_F027 	!WORD	_D046+0		
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$7A			; SAW	_D046+0
_F028 	!WORD	_D046+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$5A,$03			; LEAVE	3
; toolsrc/plforth.pla: 0105:     fin
_B013 
_B014 
; toolsrc/plforth.pla: 0106:     v = *(v + ^v + 1)
; toolsrc/plforth.pla: 0107:   loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$76,$00			; SLW	[0]
_B006 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$4E			; BRTRU	_B004
	!WORD	_B004-*
_B005 
; toolsrc/plforth.pla: 0108:   // Not found
; toolsrc/plforth.pla: 0109:   inptr++
	!BYTE	$6A			; LAW	_D046+0
_F029 	!WORD	_D046+0		
	!BYTE	$8C			; INCR
; toolsrc/plforth.pla: 0110:   return 0
	!BYTE	$7A			; SAW	_D046+0
_F030 	!WORD	_D046+0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$03			; LEAVE	3
; toolsrc/plforth.pla: 0111: end
; toolsrc/plforth.pla: 0112: //
; toolsrc/plforth.pla: 0113: // Execute code in CFA
; toolsrc/plforth.pla: 0114: //
; toolsrc/plforth.pla: 0115: def exec(cfa)#0
					; cfa -> [0]
_C009 					; exec()
; toolsrc/plforth.pla: 0116:   word w
					; w -> [2]
; toolsrc/plforth.pla: 0117: 
; toolsrc/plforth.pla: 0118:   w = *cfa
	!BYTE	$58,$04,$01		; ENTER	4,1
; toolsrc/plforth.pla: 0119:   w()#0
; toolsrc/plforth.pla: 0120: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$56			; ICAL
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0121: //
; toolsrc/plforth.pla: 0122: // Convert input into number
; toolsrc/plforth.pla: 0123: //
; toolsrc/plforth.pla: 0124: def isnum#2
_C010 					; isnum()
; toolsrc/plforth.pla: 0125:   word num, sign
					; num -> [0]
					; sign -> [2]
; toolsrc/plforth.pla: 0126: 
; toolsrc/plforth.pla: 0127:   sign = 1
	!BYTE	$58,$04,$00		; ENTER	4,0
; toolsrc/plforth.pla: 0128:   if ^inptr == '-'
; toolsrc/plforth.pla: 0129:     sign = -1
; toolsrc/plforth.pla: 0130:     inptr++
	!BYTE	$02			; CN	1
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$6A			; LAW	_D046+0
_F031 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$24			; BRNE	_B015
	!WORD	_B015-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$6A			; LAW	_D046+0
_F032 	!WORD	_D046+0		
	!BYTE	$8C			; INCR
; toolsrc/plforth.pla: 0131:   fin
	!BYTE	$7A			; SAW	_D046+0
_F033 	!WORD	_D046+0		
_B015 
_B016 
; toolsrc/plforth.pla: 0132:   if ^inptr >= '0' and ^inptr <= '9'
; toolsrc/plforth.pla: 0133:     num = 0
; toolsrc/plforth.pla: 0134:     repeat
	!BYTE	$6A			; LAW	_D046+0
_F034 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B017
	!WORD	_B017-*
	!BYTE	$6A			; LAW	_D046+0
_F035 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B017 
	!BYTE	$4C			; BRFLS	_B018
	!WORD	_B018-*
	!BYTE	$00			; CN	0
	!BYTE	$76,$00			; SLW	[0]
_B021 
; toolsrc/plforth.pla: 0135:       num = num * 10 + ^inptr - '0'
; toolsrc/plforth.pla: 0136:       inptr++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$6A			; LAW	_D046+0
_F036 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$3A,$30			; SUBI	48
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$6A			; LAW	_D046+0
_F037 	!WORD	_D046+0		
	!BYTE	$8C			; INCR
; toolsrc/plforth.pla: 0137:     until ^inptr < '0' or ^inptr > '9'
	!BYTE	$7A			; SAW	_D046+0
_F038 	!WORD	_D046+0		
_B022 
	!BYTE	$6A			; LAW	_D046+0
_F039 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$46			; ISLT
	!BYTE	$AE			; BROR	_B023
	!WORD	_B023-*
	!BYTE	$6A			; LAW	_D046+0
_F040 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$39			; CB	57
	!BYTE	$44			; ISGT
_B023 
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
_B020 
; toolsrc/plforth.pla: 0138:     //if ^inptr <= ' '
; toolsrc/plforth.pla: 0139:     //  puts("[Found number = "); puti(num); puts("]\n")
; toolsrc/plforth.pla: 0140:     //fin
; toolsrc/plforth.pla: 0141:     return num * sign, ^inptr <= ' '
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$86			; MUL
	!BYTE	$6A			; LAW	_D046+0
_F041 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0142:   fin
_B018 
_B019 
; toolsrc/plforth.pla: 0143:   return 0, FALSE
	!BYTE	$00			; CN	0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$04			; LEAVE	4
; toolsrc/plforth.pla: 0144: end
; toolsrc/plforth.pla: 0145: //
; toolsrc/plforth.pla: 0146: // Quit and look for user input
; toolsrc/plforth.pla: 0147: //
; toolsrc/plforth.pla: 0148: def _quit_#0
_C011 					; _quit_()
; toolsrc/plforth.pla: 0149:   word cfa, __drop, __isnum
					; cfa -> [0]
					; __drop -> [2]
					; __isnum -> [4]
; toolsrc/plforth.pla: 0150: 
; toolsrc/plforth.pla: 0151:   __drop  = @_drop_
	!BYTE	$58,$06,$00		; ENTER	6,0
; toolsrc/plforth.pla: 0152:   __isnum = @isnum
; toolsrc/plforth.pla: 0153:   repeat
	!BYTE	$26			; LA	_C000+0
_F042 	!WORD	_C000+0		
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$26			; LA	_C010+0
_F043 	!WORD	_C010+0		
	!BYTE	$76,$04			; SLW	[4]
_B025 
; toolsrc/plforth.pla: 0154:     puts("\nOK")
	!BYTE	$2E			; CS
	!BYTE	$03
	!BYTE	$0D,$4F,$4B
	!BYTE	$54			; CALL	_X004
_F044 	!WORD	0		
; toolsrc/plforth.pla: 0155:     inptr = gets(':'|$80)
; toolsrc/plforth.pla: 0156:     if ^inptr
; toolsrc/plforth.pla: 0157:       ^(inptr + ^inptr + 1) = 0
; toolsrc/plforth.pla: 0158:       //
; toolsrc/plforth.pla: 0159:       // Clear high bit of input buffer
; toolsrc/plforth.pla: 0160:       //
; toolsrc/plforth.pla: 0161:       for cfa = 1 to ^inptr
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$54			; CALL	_X007
_F045 	!WORD	0		
	!BYTE	$7A			; SAW	_D046+0
_F046 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_D046+0
_F047 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B027
	!WORD	_B027-*
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D046+0
_F048 	!WORD	_D046+0		
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$6A			; LAW	_D046+0
_F049 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B029
	!WORD	_B029-*
_B030 
	!BYTE	$6E,$00			; DLW	[0]
; toolsrc/plforth.pla: 0162:         ^(inptr + cfa) = ^(inptr + cfa) & $7F
; toolsrc/plforth.pla: 0163:       next
	!BYTE	$6A			; LAW	_D046+0
_F050 	!WORD	_D046+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$60			; LB
	!BYTE	$3C,$7F			; ANDI	127
	!BYTE	$6A			; LAW	_D046+0
_F051 	!WORD	_D046+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$70			; SB
_B031 
	!BYTE	$A4			; INCBRLE	_B030
	!WORD	_B030-*
_B029 
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$30			; DROP 
; toolsrc/plforth.pla: 0164:       inptr++
	!BYTE	$6A			; LAW	_D046+0
_F052 	!WORD	_D046+0		
	!BYTE	$8C			; INCR
; toolsrc/plforth.pla: 0165:       repeat
	!BYTE	$7A			; SAW	_D046+0
_F053 	!WORD	_D046+0		
_B033 
; toolsrc/plforth.pla: 0166:         while ^inptr == ' '
	!BYTE	$50			; BRNCH	_B037
	!WORD	_B037-*
_B035 
; toolsrc/plforth.pla: 0167:           inptr++
	!BYTE	$6A			; LAW	_D046+0
_F054 	!WORD	_D046+0		
	!BYTE	$8C			; INCR
; toolsrc/plforth.pla: 0168:         loop
	!BYTE	$7A			; SAW	_D046+0
_F055 	!WORD	_D046+0		
_B037 
	!BYTE	$6A			; LAW	_D046+0
_F056 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$22			; BREQ	_B035
	!WORD	_B035-*
_B036 
; toolsrc/plforth.pla: 0169:         if ^inptr > ' '
; toolsrc/plforth.pla: 0170:           cfa = find
; toolsrc/plforth.pla: 0171:           if cfa
; toolsrc/plforth.pla: 0172:             (*cfa)()#0 //exec(*cfa)
; toolsrc/plforth.pla: 0173:           elsif not __isnum()#1
	!BYTE	$6A			; LAW	_D046+0
_F057 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B038
	!WORD	_B038-*
	!BYTE	$54			; CALL	_C008
_F058 	!WORD	_C008		
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$4C			; BRFLS	_B040
	!WORD	_B040-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$62			; LW
	!BYTE	$56			; ICAL
	!BYTE	$50			; BRNCH	_B041
	!WORD	_B041-*
_B040 
; toolsrc/plforth.pla: 0174:               __drop()#0
; toolsrc/plforth.pla: 0175:               puts("? No match\n")
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B042
	!WORD	_B042-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$56			; ICAL
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$3F,$20,$4E,$6F,$20,$6D,$61,$74
	!BYTE	$63,$68,$0D
	!BYTE	$54			; CALL	_X004
_F059 	!WORD	0		
; toolsrc/plforth.pla: 0176:           fin
_B042 
_B041 
; toolsrc/plforth.pla: 0177:         fin
_B038 
_B039 
; toolsrc/plforth.pla: 0178:       until ^inptr < ' '
_B034 
	!BYTE	$6A			; LAW	_D046+0
_F060 	!WORD	_D046+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B033
	!WORD	_B033-*
_B032 
; toolsrc/plforth.pla: 0179:     fin
_B027 
_B028 
; toolsrc/plforth.pla: 0180:   until exit
_B026 
	!BYTE	$68			; LAB	_D047+0
_F061 	!WORD	_D047+0		
	!BYTE	$4C			; BRFLS	_B025
	!WORD	_B025-*
_B024 
; toolsrc/plforth.pla: 0181: end
	!BYTE	$5A,$06			; LEAVE	6
; toolsrc/plforth.pla: 0182: _quit_
_INIT 
; toolsrc/plforth.pla: 0183: done
	!BYTE	$54			; CALL	_C011
_F062 	!WORD	_C011		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	13
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C011		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	7			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: GETS
	!BYTE	$C7,$C5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	7			; ESD INDEX
	!BYTE	$00			; END OF ESD
