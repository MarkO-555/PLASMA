include "inc/cmdsys.plh"

//
// FORTH dictionary layout
//
//  bytes   usage
//  -----   -----
// [1..32] name string
// [2]     LFA (link field address)
// [2]     CFA (code field address)
// [2]     PFA (param field address)
//

//
// Predefine instrinsics
//
predef _drop_(a)#0, _swap_(a,b)#2
predef _add_(a,b)#1, _sub_(a,b)#1, _mul_(a,b)#1, _div_(a,b)#1
predef _vlist_#0, _exit_#0
// DROP
char d_drop = "drop"
word = 0, @_drop_, 0
// SWAP
char d_swap = "swap"
word = @d_drop, @_swap_
// ADD
char d_add = "+"
word = @d_swap, @_add_
// SUB
char d_sub = "-"
word = @d_add, @_sub_
// MUL
char d_mul = "*"
word = @d_sub, @_mul_
// DIV
char d_div = "/"
word = @d_mul, @_div_
// PRINT TOS
char d_prtos = "."
word = @d_div, @puti
// EXIT
char d_exit = "exit"
word = @d_prtos, @_exit_
// LIST VOCAB
char d_vlist = "vlist"
word = @d_exit, @_vlist_
//
// Internal variables
//
word vocab=@d_vlist
word inptr
char exit = 0
//
// Intrinsics
//
def _drop_(a)#0
  return
end
def _swap_(a,b)#2
  return b,a
end
def _add_(a,b)#1
  return a+b
end
def _sub_(a,b)#1
  return a-b
end
def _mul_(a,b)#1
  return a*b
end
def _div_(a,b)#1
  return a/b
end
def _exit_#0
  exit = 1
end
def _vlist_#0
  word v

  v = vocab
  while v
    puts(v); puts("  ")
    v = *(v + ^v + 1)
  loop
end
//
// Find match in vocabulary
//
def find#1
  word v
  byte len

  inptr--
  v = vocab
  while v
    for len = 1 to ^v
      if ^(inptr+len) <> ^(v+len)
        break
      fin
    next
    if len > ^v and ^(inptr+len) <= ' '
      //puts("[Found name = "); puts(v); puts("]\n")
      inptr = inptr + len
      return v + ^v + 3
    fin
    v = *(v + ^v + 1)
  loop
  // Not found
  inptr++
  return 0
end
//
// Execute code in CFA
//
def exec(cfa)#0
  word w

  w = *cfa
  w()#0
end
//
// Convert input into number
//
def isnum#2
  word num, sign

  sign = 1
  if ^inptr == '-'
    sign = -1
    inptr++
  fin
  if ^inptr >= '0' and ^inptr <= '9'
    num = 0
    repeat
      num = num * 10 + ^inptr - '0'
      inptr++
    until ^inptr < '0' or ^inptr > '9'
    //if ^inptr <= ' '
    //  puts("[Found number = "); puti(num); puts("]\n")
    //fin
    return num * sign, ^inptr <= ' '
  fin
  return 0, FALSE
end
//
// Quit and look for user input
//
def _quit_#0
  word cfa, __drop, __isnum

  __drop  = @_drop_
  __isnum = @isnum
  repeat
    puts("\nOK")
    inptr = gets(':'|$80)
    if ^inptr
      ^(inptr + ^inptr + 1) = 0
      //
      // Clear high bit of input buffer
      //
      for cfa = 1 to ^inptr
        ^(inptr + cfa) = ^(inptr + cfa) & $7F
      next
      inptr++
      repeat
        while ^inptr == ' '
          inptr++
        loop
        if ^inptr > ' '
          cfa = find
          if cfa
            (*cfa)()#0 //exec(*cfa)
          elsif not __isnum()#1
              __drop()#0
              puts("? No match\n")
          fin
        fin
      until ^inptr < ' '
    fin
  until exit
end
_quit_
done
