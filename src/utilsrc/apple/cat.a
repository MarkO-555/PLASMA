; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; utilsrc/apple/cat.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; utilsrc/apple/cat.pla: 0001: 
; utilsrc/apple/cat.pla: 0002: include "inc/longjmp.plh"
; inc/longjmp.plh: 0001: import longjmp
	; DCI STRING: LONGJMP
	!BYTE	$CC,$CF,$CE,$C7,$CA,$CD,$50
					; LONGJMP -> X028
; inc/longjmp.plh: 0002:     const t_except = $0140
					; t_except = 320
; inc/longjmp.plh: 0003:     predef except(env), throw(env, retval)
					; EXCEPT -> X029
					; THROW -> X030
; inc/longjmp.plh: 0004: end
; utilsrc/apple/cat.pla: 0002: 
; utilsrc/apple/cat.pla: 0003: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X031
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X032
					; ARGNEXT -> X033
; inc/args.plh: 0003: end
; utilsrc/apple/cat.pla: 0003: 
; utilsrc/apple/cat.pla: 0004: include "inc/matchfiles.plh"
; inc/matchfiles.plh: 0001: import matchfiles
	; DCI STRING: MATCHFILES
	!BYTE	$CD,$C1,$D4,$C3,$C8,$C6,$C9,$CC,$C5,$53
					; MATCHFILES -> X034
; inc/matchfiles.plh: 0002:     predef matchName(src, exp)#1
					; MATCHNAME -> X035
; inc/matchfiles.plh: 0003:     predef matchList(pathptr, exp)#2
					; MATCHLIST -> X036
; inc/matchfiles.plh: 0004:     predef isWildName(exp)#1
					; ISWILDNAME -> X037
; inc/matchfiles.plh: 0005:     predef fileFromPath(filestr, pathstr)#0
					; FILEFROMPATH -> X038
; inc/matchfiles.plh: 0006: end
; utilsrc/apple/cat.pla: 0004: 
; utilsrc/apple/cat.pla: 0005: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X039
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X040
; inc/fileio.plh: 0080: end
; utilsrc/apple/cat.pla: 0005: 
; utilsrc/apple/cat.pla: 0006: include "inc/int32.plh"
; inc/int32.plh: 0001: import int32
	; DCI STRING: INT32
	!BYTE	$C9,$CE,$D4,$B3,$32
					; INT32 -> X041
; inc/int32.plh: 0002:     const t_i32 = 4
					; t_i32 = 4
; inc/int32.plh: 0003:     
; inc/int32.plh: 0004:     predef zero32#0
					; ZERO32 -> X042
; inc/int32.plh: 0005:     predef zext16to32#0
					; ZEXT16TO32 -> X043
; inc/int32.plh: 0006:     predef neg32#0
					; NEG32 -> X044
; inc/int32.plh: 0007:     predef load32(i32ptr)#0
					; LOAD32 -> X045
; inc/int32.plh: 0008:     predef loadi16(imm16)#0
					; LOADI16 -> X046
; inc/int32.plh: 0009:     predef store32(i32ptr)#0
					; STORE32 -> X047
; inc/int32.plh: 0010:     predef add32(i32ptr)#0
					; ADD32 -> X048
; inc/int32.plh: 0011:     predef addi16(imm16)#0
					; ADDI16 -> X049
; inc/int32.plh: 0012:     predef sub32(i32ptr)#0
					; SUB32 -> X050
; inc/int32.plh: 0013:     predef subi16(imm16)#0
					; SUBI16 -> X051
; inc/int32.plh: 0014:     predef shl32(imm8)#0
					; SHL32 -> X052
; inc/int32.plh: 0015:     predef shr32(imm8)#0
					; SHR32 -> X053
; inc/int32.plh: 0016:     predef mul32(i32ptr)#0
					; MUL32 -> X054
; inc/int32.plh: 0017:     predef muli16(imm16)#0
					; MULI16 -> X055
; inc/int32.plh: 0018:     predef div32(i32ptr)#2
					; DIV32 -> X056
; inc/int32.plh: 0019:     predef divi16(imm16)#2
					; DIVI16 -> X057
; inc/int32.plh: 0020:     predef iseq32(i32ptr)#1
					; ISEQ32 -> X058
; inc/int32.plh: 0021:     predef iseqi16(imm16)#1
					; ISEQI16 -> X059
; inc/int32.plh: 0022:     predef isge32(i32ptr)#1
					; ISGE32 -> X060
; inc/int32.plh: 0023:     predef isgei16(imm16)#1
					; ISGEI16 -> X061
; inc/int32.plh: 0024:     predef isle32(i32ptr)#1
					; ISLE32 -> X062
; inc/int32.plh: 0025:     predef islei16(imm16)#1
					; ISLEI16 -> X063
; inc/int32.plh: 0026:     predef isgt32(i32ptr)#1
					; ISGT32 -> X064
; inc/int32.plh: 0027:     predef isgti16(imm16)#1
					; ISGTI16 -> X065
; inc/int32.plh: 0028:     predef islt32(i32ptr)#1
					; ISLT32 -> X066
; inc/int32.plh: 0029:     predef islti16(imm16)#1
					; ISLTI16 -> X067
; inc/int32.plh: 0030:     predef i32tos(i32ptr, strptr)#1
					; I32TOS -> X068
; inc/int32.plh: 0031:     predef puti32(i32ptr)#0
					; PUTI32 -> X069
; inc/int32.plh: 0032: end
; utilsrc/apple/cat.pla: 0006: 
; utilsrc/apple/cat.pla: 0007: 
; utilsrc/apple/cat.pla: 0008: predef catalog(pathstr)#0
	!BYTE	$00			; END OF MODULE DEPENDENCIES
; utilsrc/apple/cat.pla: 0009: 
; utilsrc/apple/cat.pla: 0010: var arg, recurse, exit
_D071 	!FILL	2			; arg, recurse, exit
_D072 	!FILL	2			; recurse, exit
_D073 	!FILL	2			; exit
; utilsrc/apple/cat.pla: 0011: char[64] path, wildname
_D074 	!FILL	64			; path, wildname
_D075 	!FILL	64			; wildname
; utilsrc/apple/cat.pla: 0012: res[t_fileinfo] fileinfo
_D076 	!FILL	15			; fileinfo
; utilsrc/apple/cat.pla: 0013: res[t_fileentry] fileentry
_D077 	!FILL	39			; fileentry
; utilsrc/apple/cat.pla: 0014: //
; utilsrc/apple/cat.pla: 0015: // Copy string with upper case conversion
; utilsrc/apple/cat.pla: 0016: //
; utilsrc/apple/cat.pla: 0017: def struprcpy(dst, src)#0
_SUBSEG 				; BYTECODE STARTS
					; dst -> [0]
					; src -> [2]
_C000 					; struprcpy()
; utilsrc/apple/cat.pla: 0018:     byte i, chr
					; i -> [4]
					; chr -> [5]
; utilsrc/apple/cat.pla: 0019: 
; utilsrc/apple/cat.pla: 0020:     if ^src
	!BYTE	$58,$06,$02		; ENTER	6,2
; utilsrc/apple/cat.pla: 0021:         for i = 1 to ^src
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B003
	!WORD	_B003-*
_B004 
	!BYTE	$6C,$04			; DLB	[4]
; utilsrc/apple/cat.pla: 0022:             chr = src->[i]
; utilsrc/apple/cat.pla: 0023:             if chr >= 'a' and chr <= 'z'
; utilsrc/apple/cat.pla: 0024:                 dst->[i] =  chr - 'a' + 'A'
; utilsrc/apple/cat.pla: 0025:             else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$6C,$05			; DLB	[5]
	!BYTE	$2A,$61			; CB	97
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B006
	!WORD	_B006-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$7A			; CB	122
	!BYTE	$4A			; ISLE
_B006 
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$3A,$61			; SUBI	97
	!BYTE	$38,$41			; ADDI	65
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B007 
; utilsrc/apple/cat.pla: 0026:                 dst->[i] = chr
; utilsrc/apple/cat.pla: 0027:             fin
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
_B008 
; utilsrc/apple/cat.pla: 0028:         next
_B005 
	!BYTE	$A4			; INCBRLE	_B004
	!WORD	_B004-*
_B003 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; utilsrc/apple/cat.pla: 0029:     fin
_B001 
_B002 
; utilsrc/apple/cat.pla: 0030:     ^dst = ^src
; utilsrc/apple/cat.pla: 0031: end
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$5A,$06			; LEAVE	6
; utilsrc/apple/cat.pla: 0032: //
; utilsrc/apple/cat.pla: 0033: // Print out a directory entry
; utilsrc/apple/cat.pla: 0034: //
; utilsrc/apple/cat.pla: 0035: def printentry(entryptr)#0
					; entryptr -> [0]
_C001 					; printentry()
; utilsrc/apple/cat.pla: 0036:     char type, pad, eofstr[12]
					; type -> [2]
					; pad -> [3]
					; eofstr -> [4]
; utilsrc/apple/cat.pla: 0037: 
; utilsrc/apple/cat.pla: 0038:     puts(entryptr)
	!BYTE	$58,$10,$01		; ENTER	16,1
; utilsrc/apple/cat.pla: 0039:     when entryptr->entry_type
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F000 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$52			; SEL
	!WORD	_B010-*
; utilsrc/apple/cat.pla: 0040:         is $0F // Is it a directory?
_B011 
; utilsrc/apple/cat.pla: 0041:             type = '/'
; utilsrc/apple/cat.pla: 0042:             break
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$50			; BRNCH	_B009
	!WORD	_B009-*
; utilsrc/apple/cat.pla: 0043:         is $FF // SYSTEM file
_B012 
; utilsrc/apple/cat.pla: 0044:             type = '-'
; utilsrc/apple/cat.pla: 0045:             break
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$50			; BRNCH	_B009
	!WORD	_B009-*
; utilsrc/apple/cat.pla: 0046:         is $FE // REL file
_B013 
; utilsrc/apple/cat.pla: 0047:             type = '+'
; utilsrc/apple/cat.pla: 0048:             break
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$50			; BRNCH	_B009
	!WORD	_B009-*
; utilsrc/apple/cat.pla: 0049:         otherwise
_B010 
	!BYTE	$03			; CASEBLOCK
	!WORD	$000F
	!WORD	_B011-*
	!WORD	$00FE
	!WORD	_B013-*
	!WORD	$00FF
	!WORD	_B012-*
; utilsrc/apple/cat.pla: 0050:             type = ' '
; utilsrc/apple/cat.pla: 0051:     wend
	!BYTE	$2A,$20			; CB	32
	!BYTE	$74,$02			; SLB	[2]
_B009 
; utilsrc/apple/cat.pla: 0052:     putc(type)
; utilsrc/apple/cat.pla: 0053:     for pad = ^entryptr to 14
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_X002
_F001 	!WORD	0		
	!BYTE	$1C			; CN	14
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$A0			; BRGT	_B014
	!WORD	_B014-*
_B015 
	!BYTE	$6C,$03			; DLB	[3]
; utilsrc/apple/cat.pla: 0054:         putc(' ')
; utilsrc/apple/cat.pla: 0055:     next
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F002 	!WORD	0		
_B016 
	!BYTE	$A4			; INCBRLE	_B015
	!WORD	_B015-*
_B014 
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$30			; DROP 
; utilsrc/apple/cat.pla: 0056:     putc('$');  putb(entryptr->entry_type)
; utilsrc/apple/cat.pla: 0057:     puts("  $"); puth(entryptr=>entry_aux)
	!BYTE	$2A,$24			; CB	36
	!BYTE	$54			; CALL	_X002
_F003 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X008
_F004 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$03
	!BYTE	$20,$20,$24
	!BYTE	$54			; CALL	_X004
_F005 	!WORD	0		
; utilsrc/apple/cat.pla: 0058:     entryptr->entry_EOFH.1 = 0
; utilsrc/apple/cat.pla: 0059:     i32tos(entryptr+entry_EOFL, @eofstr)
; utilsrc/apple/cat.pla: 0060:     for pad = eofstr to 9
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$1F			; ADDI	31
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_X009
_F006 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$17			; ADDI	23
	!BYTE	$8C			; INCR
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$15			; ADDI	21
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X068
_F007 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$12			; CN	9
	!BYTE	$64,$04			; LLB	[4]
	!BYTE	$A0			; BRGT	_B017
	!WORD	_B017-*
_B018 
	!BYTE	$6C,$03			; DLB	[3]
; utilsrc/apple/cat.pla: 0061:         putc(' ')
; utilsrc/apple/cat.pla: 0062:     next
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F008 	!WORD	0		
_B019 
	!BYTE	$A4			; INCBRLE	_B018
	!WORD	_B018-*
_B017 
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$30			; DROP 
; utilsrc/apple/cat.pla: 0063:     puts(@eofstr)
; utilsrc/apple/cat.pla: 0064:     putln
; utilsrc/apple/cat.pla: 0065: end
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X004
_F009 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F010 	!WORD	0		
	!BYTE	$5A,$10			; LEAVE	16
; utilsrc/apple/cat.pla: 0066: def printentries(pathstr, entries, num)#0
					; pathstr -> [0]
					; entries -> [2]
					; num -> [4]
_C002 					; printentries()
; utilsrc/apple/cat.pla: 0067:     byte page
					; page -> [6]
; utilsrc/apple/cat.pla: 0068: 
; utilsrc/apple/cat.pla: 0069:     puts(pathstr); putln
	!BYTE	$58,$07,$03		; ENTER	7,3
; utilsrc/apple/cat.pla: 0070:     puts("=NAME==========TYPE===AUX====LENGTH=\n")
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F011 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F012 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$25
	!BYTE	$3D,$4E,$41,$4D,$45,$3D,$3D,$3D
	!BYTE	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$54
	!BYTE	$59,$50,$45,$3D,$3D,$3D,$41,$55
	!BYTE	$58,$3D,$3D,$3D,$3D,$4C,$45,$4E
	!BYTE	$47,$54,$48,$3D,$0D
	!BYTE	$54			; CALL	_X004
_F013 	!WORD	0		
; utilsrc/apple/cat.pla: 0071:     page = 20
; utilsrc/apple/cat.pla: 0072:     repeat
	!BYTE	$2A,$14			; CB	20
	!BYTE	$74,$06			; SLB	[6]
_B021 
; utilsrc/apple/cat.pla: 0073:         printentry(entries)
; utilsrc/apple/cat.pla: 0074:         entries = entries + t_fileentry
; utilsrc/apple/cat.pla: 0075:         //
; utilsrc/apple/cat.pla: 0076:         // Pause display every screenfull
; utilsrc/apple/cat.pla: 0077:         //
; utilsrc/apple/cat.pla: 0078:         if not page
; utilsrc/apple/cat.pla: 0079:             if toupper(getc()) == 'Q'
; utilsrc/apple/cat.pla: 0080:                 throw(exit, TRUE)
; utilsrc/apple/cat.pla: 0081:             fin
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C001
_F014 	!WORD	_C001		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$38,$27			; ADDI	39
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$4E			; BRTRU	_B023
	!WORD	_B023-*
	!BYTE	$54			; CALL	_X006
_F015 	!WORD	0		
	!BYTE	$54			; CALL	_X021
_F016 	!WORD	0		
	!BYTE	$2A,$51			; CB	81
	!BYTE	$24			; BRNE	_B025
	!WORD	_B025-*
	!BYTE	$6A			; LAW	_D073+0
_F017 	!WORD	_D073+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F018 	!WORD	0		
	!BYTE	$30			; DROP 
_B025 
_B026 
; utilsrc/apple/cat.pla: 0082:             page = 22
; utilsrc/apple/cat.pla: 0083:         else
	!BYTE	$2A,$16			; CB	22
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$50			; BRNCH	_B024
	!WORD	_B024-*
_B023 
; utilsrc/apple/cat.pla: 0084:             page--
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$8E			; DECR
; utilsrc/apple/cat.pla: 0085:         fin
	!BYTE	$74,$06			; SLB	[6]
_B024 
; utilsrc/apple/cat.pla: 0086:         num--
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8E			; DECR
; utilsrc/apple/cat.pla: 0087:     until not num
	!BYTE	$76,$04			; SLW	[4]
_B022 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$4E			; BRTRU	_B021
	!WORD	_B021-*
_B020 
; utilsrc/apple/cat.pla: 0088: end
	!BYTE	$5A,$07			; LEAVE	7
; utilsrc/apple/cat.pla: 0089: def catalog(pathstr)#0
					; pathstr -> [0]
_P000 					; catalog(pathstr)#0()
_C003 					; catalog()
; utilsrc/apple/cat.pla: 0090:     char recursepath[64]
					; recursepath -> [2]
; utilsrc/apple/cat.pla: 0091:     var entrylist, entryptr, entrycnt
					; entrylist -> [66]
					; entryptr -> [68]
					; entrycnt -> [70]
; utilsrc/apple/cat.pla: 0092: 
; utilsrc/apple/cat.pla: 0093:     entrylist, entrycnt = matchList(pathstr, @wildname)
	!BYTE	$58,$48,$01		; ENTER	72,1
; utilsrc/apple/cat.pla: 0094:     if entrylist
; utilsrc/apple/cat.pla: 0095:         printentries(pathstr, entrylist, entrycnt)
; utilsrc/apple/cat.pla: 0096:         if recurse
; utilsrc/apple/cat.pla: 0097:             entryptr = entrylist
; utilsrc/apple/cat.pla: 0098:             repeat
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D075+0
_F019 	!WORD	_D075+0		
	!BYTE	$54			; CALL	_X036
_F020 	!WORD	0		
	!BYTE	$76,$46			; SLW	[70]
	!BYTE	$6E,$42			; DLW	[66]
	!BYTE	$4C			; BRFLS	_B027
	!WORD	_B027-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$42			; LLW	[66]
	!BYTE	$66,$46			; LLW	[70]
	!BYTE	$54			; CALL	_C002
_F021 	!WORD	_C002		
	!BYTE	$6A			; LAW	_D072+0
_F022 	!WORD	_D072+0		
	!BYTE	$4C			; BRFLS	_B029
	!WORD	_B029-*
	!BYTE	$66,$42			; LLW	[66]
	!BYTE	$76,$44			; SLW	[68]
_B032 
; utilsrc/apple/cat.pla: 0099:                 if entryptr->entry_type == $0F
; utilsrc/apple/cat.pla: 0100:                     //
; utilsrc/apple/cat.pla: 0101:                     // A directory, so recurse
; utilsrc/apple/cat.pla: 0102:                     //
; utilsrc/apple/cat.pla: 0103:                     strcpy(@recursepath, pathstr)
; utilsrc/apple/cat.pla: 0104:                     strcat(@recursepath, entryptr)
; utilsrc/apple/cat.pla: 0105:                     recursepath++
	!BYTE	$66,$44			; LLW	[68]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B034
	!WORD	_B034-*
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X019
_F023 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$66,$44			; LLW	[68]
	!BYTE	$54			; CALL	_X020
_F024 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$8C			; INCR
; utilsrc/apple/cat.pla: 0106:                     recursepath[recursepath] = '/'
; utilsrc/apple/cat.pla: 0107:                     if toupper(getc()) == 'Q'
; utilsrc/apple/cat.pla: 0108:                         throw(exit, TRUE)
; utilsrc/apple/cat.pla: 0109:                     fin
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$70			; SB
	!BYTE	$54			; CALL	_X006
_F025 	!WORD	0		
	!BYTE	$54			; CALL	_X021
_F026 	!WORD	0		
	!BYTE	$2A,$51			; CB	81
	!BYTE	$24			; BRNE	_B036
	!WORD	_B036-*
	!BYTE	$6A			; LAW	_D073+0
_F027 	!WORD	_D073+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F028 	!WORD	0		
	!BYTE	$30			; DROP 
_B036 
_B037 
; utilsrc/apple/cat.pla: 0110:                     catalog(@recursepath)
; utilsrc/apple/cat.pla: 0111:                 fin
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_C003
_F029 	!WORD	_C003		
_B034 
_B035 
; utilsrc/apple/cat.pla: 0112:                 entryptr = entryptr + t_fileentry
; utilsrc/apple/cat.pla: 0113:                 entrycnt--
	!BYTE	$66,$44			; LLW	[68]
	!BYTE	$38,$27			; ADDI	39
	!BYTE	$76,$44			; SLW	[68]
	!BYTE	$66,$46			; LLW	[70]
	!BYTE	$8E			; DECR
; utilsrc/apple/cat.pla: 0114:             until not entrycnt
	!BYTE	$76,$46			; SLW	[70]
_B033 
	!BYTE	$66,$46			; LLW	[70]
	!BYTE	$4E			; BRTRU	_B032
	!WORD	_B032-*
_B031 
; utilsrc/apple/cat.pla: 0115:         fin
_B029 
_B030 
; utilsrc/apple/cat.pla: 0116:         heaprelease(entrylist)
; utilsrc/apple/cat.pla: 0117:     fin
	!BYTE	$66,$42			; LLW	[66]
	!BYTE	$54			; CALL	_X015
_F030 	!WORD	0		
	!BYTE	$30			; DROP 
_B027 
_B028 
; utilsrc/apple/cat.pla: 0118: end
	!BYTE	$5A,$48			; LEAVE	72
; utilsrc/apple/cat.pla: 0119: //
; utilsrc/apple/cat.pla: 0120: // Install error exit
; utilsrc/apple/cat.pla: 0121: //
; utilsrc/apple/cat.pla: 0122: exit = heapalloc(t_except)
_INIT 
; utilsrc/apple/cat.pla: 0123: if not except(exit)
; utilsrc/apple/cat.pla: 0124:     //
; utilsrc/apple/cat.pla: 0125:     // Check arguments and file types
; utilsrc/apple/cat.pla: 0126:     //
; utilsrc/apple/cat.pla: 0127:     arg = argNext(argFirst)
; utilsrc/apple/cat.pla: 0128:     if ^arg and arg->[1] == '-'
; utilsrc/apple/cat.pla: 0129:         if ^arg > 1 and toupper(arg->[2]) == 'R'
; utilsrc/apple/cat.pla: 0130:             recurse = TRUE
; utilsrc/apple/cat.pla: 0131:         fin
	!BYTE	$2C,$40,$01		; CW	320
	!BYTE	$54			; CALL	_X014
_F031 	!WORD	0		
	!BYTE	$7E			; DAW	_D073+0
_F032 	!WORD	_D073+0		
	!BYTE	$54			; CALL	_X029
_F033 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B038
	!WORD	_B038-*
	!BYTE	$54			; CALL	_X032
_F034 	!WORD	0		
	!BYTE	$54			; CALL	_X033
_F035 	!WORD	0		
	!BYTE	$7A			; SAW	_D071+0
_F036 	!WORD	_D071+0		
	!BYTE	$6A			; LAW	_D071+0
_F037 	!WORD	_D071+0		
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B040
	!WORD	_B040-*
	!BYTE	$6A			; LAW	_D071+0
_F038 	!WORD	_D071+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$40			; ISEQ
_B040 
	!BYTE	$4C			; BRFLS	_B041
	!WORD	_B041-*
	!BYTE	$6A			; LAW	_D071+0
_F039 	!WORD	_D071+0		
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B043
	!WORD	_B043-*
	!BYTE	$6A			; LAW	_D071+0
_F040 	!WORD	_D071+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F041 	!WORD	0		
	!BYTE	$2A,$52			; CB	82
	!BYTE	$40			; ISEQ
_B043 
	!BYTE	$4C			; BRFLS	_B044
	!WORD	_B044-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$7A			; SAW	_D072+0
_F042 	!WORD	_D072+0		
_B044 
_B045 
; utilsrc/apple/cat.pla: 0132:         arg = argNext(arg)
; utilsrc/apple/cat.pla: 0133:     fin
	!BYTE	$6A			; LAW	_D071+0
_F043 	!WORD	_D071+0		
	!BYTE	$54			; CALL	_X033
_F044 	!WORD	0		
	!BYTE	$7A			; SAW	_D071+0
_F045 	!WORD	_D071+0		
_B041 
_B042 
; utilsrc/apple/cat.pla: 0134:     if ^arg
; utilsrc/apple/cat.pla: 0135:         struprcpy(@path, arg)
; utilsrc/apple/cat.pla: 0136:         //
; utilsrc/apple/cat.pla: 0137:         // Check if cataloging a directory or volume
; utilsrc/apple/cat.pla: 0138:         //
; utilsrc/apple/cat.pla: 0139:         if fileio:getfileinfo(@path, @fileinfo) <> FILE_ERR_OK or (fileinfo.storage_type & $0D <> $0D)
; utilsrc/apple/cat.pla: 0140:             filefrompath(@wildname, @path)
; utilsrc/apple/cat.pla: 0141:         fin
	!BYTE	$6A			; LAW	_D071+0
_F046 	!WORD	_D071+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B046
	!WORD	_B046-*
	!BYTE	$26			; LA	_D074+0
_F047 	!WORD	_D074+0		
	!BYTE	$6A			; LAW	_D071+0
_F048 	!WORD	_D071+0		
	!BYTE	$54			; CALL	_C000
_F049 	!WORD	_C000		
	!BYTE	$26			; LA	_D074+0
_F050 	!WORD	_D074+0		
	!BYTE	$26			; LA	_D076+0
_F051 	!WORD	_D076+0		
	!BYTE	$6A			; LAW	_X039+4
_F052 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$AE			; BROR	_B048
	!WORD	_B048-*
	!BYTE	$68			; LAB	_D076+4
_F053 	!WORD	_D076+4		
	!BYTE	$3C,$0D			; ANDI	13
	!BYTE	$1A			; CN	13
	!BYTE	$42			; ISNE
_B048 
	!BYTE	$4C			; BRFLS	_B049
	!WORD	_B049-*
	!BYTE	$26			; LA	_D075+0
_F054 	!WORD	_D075+0		
	!BYTE	$26			; LA	_D074+0
_F055 	!WORD	_D074+0		
	!BYTE	$54			; CALL	_X038
_F056 	!WORD	0		
_B049 
_B050 
; utilsrc/apple/cat.pla: 0142:         path = path - wildname
; utilsrc/apple/cat.pla: 0143:     fin
	!BYTE	$68			; LAB	_D074+0
_F057 	!WORD	_D074+0		
	!BYTE	$68			; LAB	_D075+0
_F058 	!WORD	_D075+0		
	!BYTE	$84			; SUB 
	!BYTE	$78			; SAB	_D074+0
_F059 	!WORD	_D074+0		
_B046 
_B047 
; utilsrc/apple/cat.pla: 0144:     if not path
; utilsrc/apple/cat.pla: 0145:         fileio:getpfx(@path)
; utilsrc/apple/cat.pla: 0146:     fin
	!BYTE	$68			; LAB	_D074+0
_F060 	!WORD	_D074+0		
	!BYTE	$4E			; BRTRU	_B051
	!WORD	_B051-*
	!BYTE	$26			; LA	_D074+0
_F061 	!WORD	_D074+0		
	!BYTE	$6A			; LAW	_X039+0
_F062 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B051 
_B052 
; utilsrc/apple/cat.pla: 0147:     //
; utilsrc/apple/cat.pla: 0148:     // Check if directory exists
; utilsrc/apple/cat.pla: 0149:     //
; utilsrc/apple/cat.pla: 0150:     if fileio:getfileinfo(@path, @fileinfo) == FILE_ERR_OK
; utilsrc/apple/cat.pla: 0151:         catalog(@path)
; utilsrc/apple/cat.pla: 0152:     else
	!BYTE	$26			; LA	_D074+0
_F063 	!WORD	_D074+0		
	!BYTE	$26			; LA	_D076+0
_F064 	!WORD	_D076+0		
	!BYTE	$6A			; LAW	_X039+4
_F065 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B053
	!WORD	_B053-*
	!BYTE	$26			; LA	_D074+0
_F066 	!WORD	_D074+0		
	!BYTE	$54			; CALL	_C003
_F067 	!WORD	_C003		
	!BYTE	$50			; BRNCH	_B054
	!WORD	_B054-*
_B053 
; utilsrc/apple/cat.pla: 0153:         puts("Unable to open: "); puts(@path); putln
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$6F,$70,$65,$6E,$3A,$20
	!BYTE	$54			; CALL	_X004
_F068 	!WORD	0		
; utilsrc/apple/cat.pla: 0154:     fin
	!BYTE	$26			; LA	_D074+0
_F069 	!WORD	_D074+0		
	!BYTE	$54			; CALL	_X004
_F070 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F071 	!WORD	0		
_B054 
; utilsrc/apple/cat.pla: 0155: fin
_B038 
_B039 
; utilsrc/apple/cat.pla: 0156: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	5
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	8			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	68			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	36			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	6			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	39			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	38			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	39			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	39			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETC
	!BYTE	$C7,$C5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	6			; ESD INDEX
	; DCI STRING: PUTB
	!BYTE	$D0,$D5,$D4,$42
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	8			; ESD INDEX
	; DCI STRING: PUTH
	!BYTE	$D0,$D5,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	9			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: STRCAT
	!BYTE	$D3,$D4,$D2,$C3,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	20			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: EXCEPT
	!BYTE	$C5,$D8,$C3,$C5,$D0,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: THROW
	!BYTE	$D4,$C8,$D2,$CF,$57
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	; DCI STRING: MATCHLIST
	!BYTE	$CD,$C1,$D4,$C3,$C8,$CC,$C9,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	36			; ESD INDEX
	; DCI STRING: FILEFROMPATH
	!BYTE	$C6,$C9,$CC,$C5,$C6,$D2,$CF,$CD,$D0,$C1,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	38			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	39			; ESD INDEX
	; DCI STRING: I32TOS
	!BYTE	$C9,$B3,$B2,$D4,$CF,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	68			; ESD INDEX
	!BYTE	$00			; END OF ESD
