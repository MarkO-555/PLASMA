; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; utilsrc/apple/copy.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; utilsrc/apple/copy.pla: 0001: 
; utilsrc/apple/copy.pla: 0002: include "inc/longjmp.plh"
; inc/longjmp.plh: 0001: import longjmp
	; DCI STRING: LONGJMP
	!BYTE	$CC,$CF,$CE,$C7,$CA,$CD,$50
					; LONGJMP -> X028
; inc/longjmp.plh: 0002:     const t_except = $0140
					; t_except = 320
; inc/longjmp.plh: 0003:     predef except(env), throw(env, retval)
					; EXCEPT -> X029
					; THROW -> X030
; inc/longjmp.plh: 0004: end
; utilsrc/apple/copy.pla: 0002: 
; utilsrc/apple/copy.pla: 0003: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X031
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X032
					; ARGNEXT -> X033
; inc/args.plh: 0003: end
; utilsrc/apple/copy.pla: 0003: 
; utilsrc/apple/copy.pla: 0004: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X034
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X035
; inc/fileio.plh: 0080: end
; utilsrc/apple/copy.pla: 0004: 
; utilsrc/apple/copy.pla: 0005: include "inc/matchfiles.plh"
; inc/matchfiles.plh: 0001: import matchfiles
	; DCI STRING: MATCHFILES
	!BYTE	$CD,$C1,$D4,$C3,$C8,$C6,$C9,$CC,$C5,$53
					; MATCHFILES -> X036
; inc/matchfiles.plh: 0002:     predef matchName(src, exp)#1
					; MATCHNAME -> X037
; inc/matchfiles.plh: 0003:     predef matchList(pathptr, exp)#2
					; MATCHLIST -> X038
; inc/matchfiles.plh: 0004:     predef isWildName(exp)#1
					; ISWILDNAME -> X039
; inc/matchfiles.plh: 0005:     predef fileFromPath(filestr, pathstr)#0
					; FILEFROMPATH -> X040
; inc/matchfiles.plh: 0006: end
; utilsrc/apple/copy.pla: 0005: 
; utilsrc/apple/copy.pla: 0006: 
; utilsrc/apple/copy.pla: 0007: const MAXBUFSIZE = 16384
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; MAXBUFSIZE = 16384
; utilsrc/apple/copy.pla: 0008: var arg, exit, srcfilelist, srcfileptr, srccnt
_D041 	!FILL	2			; arg, exit, srcfilelist, srcfileptr, srccnt
_D042 	!FILL	2			; exit, srcfilelist, srcfileptr, srccnt
_D043 	!FILL	2			; srcfilelist, srcfileptr, srccnt
_D044 	!FILL	2			; srcfileptr, srccnt
_D045 	!FILL	2			; srccnt
; utilsrc/apple/copy.pla: 0009: var copybuff, copyrel, copysize
_D046 	!FILL	2			; copybuff, copyrel, copysize
_D047 	!FILL	2			; copyrel, copysize
_D048 	!FILL	2			; copysize
; utilsrc/apple/copy.pla: 0010: byte recurse, dstlen
_D049 	!FILL	1			; recurse, dstlen
_D050 	!FILL	1			; dstlen
; utilsrc/apple/copy.pla: 0011: char[64] curpath, dstpath
_D051 	!FILL	64			; curpath, dstpath
_D052 	!FILL	64			; dstpath
; utilsrc/apple/copy.pla: 0012: char[16] srcdir
_D053 	!FILL	16			; srcdir
; utilsrc/apple/copy.pla: 0013: res[t_fileinfo] srcfileinfo, dstfileinfo
_D054 	!FILL	15			; srcfileinfo, dstfileinfo
_D055 	!FILL	15			; dstfileinfo
; utilsrc/apple/copy.pla: 0014: //
; utilsrc/apple/copy.pla: 0015: // Copy path with upper case conversion
; utilsrc/apple/copy.pla: 0016: //
; utilsrc/apple/copy.pla: 0017: def pathcpy(dst, src)#0
_SUBSEG 				; BYTECODE STARTS
					; dst -> [0]
					; src -> [2]
_C000 					; pathcpy()
; utilsrc/apple/copy.pla: 0018:     byte i, chr
					; i -> [4]
					; chr -> [5]
; utilsrc/apple/copy.pla: 0019: 
; utilsrc/apple/copy.pla: 0020:     if ^src
	!BYTE	$58,$06,$02		; ENTER	6,2
; utilsrc/apple/copy.pla: 0021:         for i = 1 to ^src
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B003
	!WORD	_B003-*
_B004 
	!BYTE	$6C,$04			; DLB	[4]
; utilsrc/apple/copy.pla: 0022:             chr = src->[i]
; utilsrc/apple/copy.pla: 0023:             if chr >= 'a' and chr <= 'z'
; utilsrc/apple/copy.pla: 0024:                 dst->[i] =  chr - 'a' + 'A'
; utilsrc/apple/copy.pla: 0025:             else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$6C,$05			; DLB	[5]
	!BYTE	$2A,$61			; CB	97
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B006
	!WORD	_B006-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$7A			; CB	122
	!BYTE	$4A			; ISLE
_B006 
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$3A,$61			; SUBI	97
	!BYTE	$38,$41			; ADDI	65
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B007 
; utilsrc/apple/copy.pla: 0026:                 dst->[i] = chr
; utilsrc/apple/copy.pla: 0027:             fin
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
_B008 
; utilsrc/apple/copy.pla: 0028:         next
_B005 
	!BYTE	$A4			; INCBRLE	_B004
	!WORD	_B004-*
_B003 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; utilsrc/apple/copy.pla: 0029:     fin
_B001 
_B002 
; utilsrc/apple/copy.pla: 0030:     ^dst = ^src
; utilsrc/apple/copy.pla: 0031: end
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$5A,$06			; LEAVE	6
; utilsrc/apple/copy.pla: 0032: def abspath(abs, path)#0
					; abs -> [0]
					; path -> [2]
_C001 					; abspath()
; utilsrc/apple/copy.pla: 0033:     if ^path == 0 or path->[1] <> '/'
	!BYTE	$58,$04,$02		; ENTER	4,2
; utilsrc/apple/copy.pla: 0034:         //
; utilsrc/apple/copy.pla: 0035:         // Append relative path to absolute path
; utilsrc/apple/copy.pla: 0036:         //
; utilsrc/apple/copy.pla: 0037:         strcpy(abs, @curpath)
; utilsrc/apple/copy.pla: 0038:     else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B009
	!WORD	_B009-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$42			; ISNE
_B009 
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D051+0
_F000 	!WORD	_D051+0		
	!BYTE	$54			; CALL	_X019
_F001 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
_B010 
; utilsrc/apple/copy.pla: 0039:         //
; utilsrc/apple/copy.pla: 0040:         // Absolute path
; utilsrc/apple/copy.pla: 0041:         //
; utilsrc/apple/copy.pla: 0042:         ^abs = 0
; utilsrc/apple/copy.pla: 0043:     fin
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B011 
; utilsrc/apple/copy.pla: 0044:     strcat(abs, path)
; utilsrc/apple/copy.pla: 0045:     //
; utilsrc/apple/copy.pla: 0046:     // Strip trailing path seperator
; utilsrc/apple/copy.pla: 0047:     //
; utilsrc/apple/copy.pla: 0048:     if abs->[^abs] == '/'
; utilsrc/apple/copy.pla: 0049:         ^abs--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X020
_F002 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$24			; BRNE	_B012
	!WORD	_B012-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; utilsrc/apple/copy.pla: 0050:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B012 
_B013 
; utilsrc/apple/copy.pla: 0051: end
	!BYTE	$5A,$04			; LEAVE	4
; utilsrc/apple/copy.pla: 0052: def pathdiff(path1, path2)#1
					; path1 -> [0]
					; path2 -> [2]
_C002 					; pathdiff()
; utilsrc/apple/copy.pla: 0053:     byte i, d
					; i -> [4]
					; d -> [5]
; utilsrc/apple/copy.pla: 0054:     char[64] abs1, abs2
					; abs1 -> [6]
					; abs2 -> [70]
; utilsrc/apple/copy.pla: 0055: 
; utilsrc/apple/copy.pla: 0056:     abspath(@abs1, path1)
	!BYTE	$58,$86,$02		; ENTER	134,2
; utilsrc/apple/copy.pla: 0057:     abspath(@abs2, path2)
; utilsrc/apple/copy.pla: 0058: 
; utilsrc/apple/copy.pla: 0059:     if abs1 <> abs2
; utilsrc/apple/copy.pla: 0060:         return TRUE
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C001
_F003 	!WORD	_C001		
	!BYTE	$28,$46			; LLA	[70]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C001
_F004 	!WORD	_C001		
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$64,$46			; LLB	[70]
	!BYTE	$22			; BREQ	_B014
	!WORD	_B014-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$86			; LEAVE	134
; utilsrc/apple/copy.pla: 0061:     fin
_B014 
_B015 
; utilsrc/apple/copy.pla: 0062:     for i = 1 to abs1
	!BYTE	$64,$06			; LLB	[6]
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B016
	!WORD	_B016-*
_B017 
	!BYTE	$6C,$04			; DLB	[4]
; utilsrc/apple/copy.pla: 0063:         d = abs1[i] - abs2[i]
; utilsrc/apple/copy.pla: 0064:         if d
; utilsrc/apple/copy.pla: 0065:             return d
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$28,$46			; LLA	[70]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$84			; SUB 
	!BYTE	$6C,$05			; DLB	[5]
	!BYTE	$4C			; BRFLS	_B019
	!WORD	_B019-*
	!BYTE	$32			; DROP2
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$5A,$86			; LEAVE	134
; utilsrc/apple/copy.pla: 0066:         fin
_B019 
_B020 
; utilsrc/apple/copy.pla: 0067:     next
_B018 
	!BYTE	$A4			; INCBRLE	_B017
	!WORD	_B017-*
_B016 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; utilsrc/apple/copy.pla: 0068:     return FALSE
	!BYTE	$00			; CN	0
	!BYTE	$5A,$86			; LEAVE	134
; utilsrc/apple/copy.pla: 0069: end
; utilsrc/apple/copy.pla: 0070: //
; utilsrc/apple/copy.pla: 0071: // Check destination path
; utilsrc/apple/copy.pla: 0072: //
; utilsrc/apple/copy.pla: 0073: def chkdstpath(dstfile)
					; dstfile -> [0]
_C003 					; chkdstpath()
; utilsrc/apple/copy.pla: 0074:     //
; utilsrc/apple/copy.pla: 0075:     // Check if destination exists
; utilsrc/apple/copy.pla: 0076:     //
; utilsrc/apple/copy.pla: 0077:     if fileio:getfileinfo(dstfile, @dstfileinfo) == FILE_ERR_OK
	!BYTE	$58,$02,$01		; ENTER	2,1
; utilsrc/apple/copy.pla: 0078:         //
; utilsrc/apple/copy.pla: 0079:         // Check if copying into a directory
; utilsrc/apple/copy.pla: 0080:         //
; utilsrc/apple/copy.pla: 0081:         if dstfileinfo.storage_type & $0D == $0D
; utilsrc/apple/copy.pla: 0082:             if dstfile->[^dstfile] <> '/'
; utilsrc/apple/copy.pla: 0083:                 //
; utilsrc/apple/copy.pla: 0084:                 // Add path seperator
; utilsrc/apple/copy.pla: 0085:                 //
; utilsrc/apple/copy.pla: 0086:                 ^dstfile++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D055+0
_F005 	!WORD	_D055+0		
	!BYTE	$6A			; LAW	_X034+4
_F006 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B021
	!WORD	_B021-*
	!BYTE	$68			; LAB	_D055+4
_F007 	!WORD	_D055+4		
	!BYTE	$3C,$0D			; ANDI	13
	!BYTE	$1A			; CN	13
	!BYTE	$24			; BRNE	_B023
	!WORD	_B023-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B025
	!WORD	_B025-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
; utilsrc/apple/copy.pla: 0087:                 dstfile->[^dstfile] = '/'
; utilsrc/apple/copy.pla: 0088:             fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$70			; SB
_B025 
_B026 
; utilsrc/apple/copy.pla: 0089:             return TRUE
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$02			; LEAVE	2
; utilsrc/apple/copy.pla: 0090:         fin
_B023 
_B024 
; utilsrc/apple/copy.pla: 0091:     fin
_B021 
_B022 
; utilsrc/apple/copy.pla: 0092:     return FALSE
	!BYTE	$00			; CN	0
	!BYTE	$5A,$02			; LEAVE	2
; utilsrc/apple/copy.pla: 0093: end
; utilsrc/apple/copy.pla: 0094: def copyfiles(srcfile, dstfile)#0
					; srcfile -> [0]
					; dstfile -> [2]
_C004 					; copyfiles()
; utilsrc/apple/copy.pla: 0095:     var entrylist, entry, entrycnt, srcref, dstref, copyxfer
					; entrylist -> [4]
					; entry -> [6]
					; entrycnt -> [8]
					; srcref -> [10]
					; dstref -> [12]
					; copyxfer -> [14]
; utilsrc/apple/copy.pla: 0096:     char[64] srcpath
					; srcpath -> [16]
; utilsrc/apple/copy.pla: 0097:     char[64] srcfilepath
					; srcfilepath -> [80]
; utilsrc/apple/copy.pla: 0098:     char[64] dstfilepath
					; dstfilepath -> [144]
; utilsrc/apple/copy.pla: 0099:     char[16] wildname
					; wildname -> [208]
; utilsrc/apple/copy.pla: 0100: 
; utilsrc/apple/copy.pla: 0101:     //
; utilsrc/apple/copy.pla: 0102:     // Check if copying a directory
; utilsrc/apple/copy.pla: 0103:     //
; utilsrc/apple/copy.pla: 0104:     strcpy(@srcpath, srcfile)
	!BYTE	$58,$E0,$02		; ENTER	224,2
; utilsrc/apple/copy.pla: 0105:     wildname = 0
; utilsrc/apple/copy.pla: 0106:     if fileio:getfileinfo(@srcpath, @srcfileinfo) <> FILE_ERR_OK or (srcfileinfo.storage_type & $0D <> $0D)
; utilsrc/apple/copy.pla: 0107:         fileFromPath(@wildname, @srcpath)
; utilsrc/apple/copy.pla: 0108:         srcpath = srcpath - wildname
; utilsrc/apple/copy.pla: 0109:     fin
	!BYTE	$28,$10			; LLA	[16]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X019
_F008 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$D0			; SLB	[208]
	!BYTE	$28,$10			; LLA	[16]
	!BYTE	$26			; LA	_D054+0
_F009 	!WORD	_D054+0		
	!BYTE	$6A			; LAW	_X034+4
_F010 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$AE			; BROR	_B027
	!WORD	_B027-*
	!BYTE	$68			; LAB	_D054+4
_F011 	!WORD	_D054+4		
	!BYTE	$3C,$0D			; ANDI	13
	!BYTE	$1A			; CN	13
	!BYTE	$42			; ISNE
_B027 
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$28,$D0			; LLA	[208]
	!BYTE	$28,$10			; LLA	[16]
	!BYTE	$54			; CALL	_X040
_F012 	!WORD	0		
	!BYTE	$64,$10			; LLB	[16]
	!BYTE	$64,$D0			; LLB	[208]
	!BYTE	$84			; SUB 
	!BYTE	$74,$10			; SLB	[16]
_B028 
_B029 
; utilsrc/apple/copy.pla: 0110:     entrylist, entrycnt = matchList(@srcpath, @wildname)
; utilsrc/apple/copy.pla: 0111:     if not entrylist
; utilsrc/apple/copy.pla: 0112:         puts(srcfile); puts(" ???\n")
	!BYTE	$28,$10			; LLA	[16]
	!BYTE	$28,$D0			; LLA	[208]
	!BYTE	$54			; CALL	_X038
_F013 	!WORD	0		
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$4E			; BRTRU	_B030
	!WORD	_B030-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F014 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$20,$3F,$3F,$3F,$0D
	!BYTE	$54			; CALL	_X004
_F015 	!WORD	0		
; utilsrc/apple/copy.pla: 0113:     else
	!BYTE	$50			; BRNCH	_B031
	!WORD	_B031-*
_B030 
; utilsrc/apple/copy.pla: 0114:         entry = entrylist
; utilsrc/apple/copy.pla: 0115:         while entrycnt
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$50			; BRNCH	_B034
	!WORD	_B034-*
_B032 
; utilsrc/apple/copy.pla: 0116:             strcpy(@srcfilepath, @srcpath)
; utilsrc/apple/copy.pla: 0117:             strcat(@srcfilepath, entry)
; utilsrc/apple/copy.pla: 0118:             strcpy(@dstfilepath, dstfile)
; utilsrc/apple/copy.pla: 0119:             if chkdstpath(@dstfilepath)
; utilsrc/apple/copy.pla: 0120:                 strcat(@dstfilepath, entry)
; utilsrc/apple/copy.pla: 0121:             fin
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$28,$10			; LLA	[16]
	!BYTE	$54			; CALL	_X019
_F016 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X020
_F017 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_X019
_F018 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_C003
_F019 	!WORD	_C003		
	!BYTE	$4C			; BRFLS	_B035
	!WORD	_B035-*
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_X020
_F020 	!WORD	0		
	!BYTE	$30			; DROP 
_B035 
_B036 
; utilsrc/apple/copy.pla: 0122:             if entry->entry_type == $0F
; utilsrc/apple/copy.pla: 0123:                 //
; utilsrc/apple/copy.pla: 0124:                 // Source is a directory and not referencing the destination
; utilsrc/apple/copy.pla: 0125:                 //
; utilsrc/apple/copy.pla: 0126:                 if pathdiff(@srcfilepath, dstfile)
; utilsrc/apple/copy.pla: 0127:                     fileio:create(@dstfilepath, $0F, $0000)
; utilsrc/apple/copy.pla: 0128:                     if not chkdstpath(@dstfilepath)
; utilsrc/apple/copy.pla: 0129:                         puts("Unable to create directory: "); puts(@dstfilepath); putln
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B037
	!WORD	_B037-*
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_C002
_F021 	!WORD	_C002		
	!BYTE	$4C			; BRFLS	_B039
	!WORD	_B039-*
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X034+22
_F022 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_C003
_F023 	!WORD	_C003		
	!BYTE	$4E			; BRTRU	_B041
	!WORD	_B041-*
	!BYTE	$2E			; CS
	!BYTE	$1C
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$63,$72,$65,$61,$74,$65
	!BYTE	$20,$64,$69,$72,$65,$63,$74,$6F
	!BYTE	$72,$79,$3A,$20
	!BYTE	$54			; CALL	_X004
_F024 	!WORD	0		
; utilsrc/apple/copy.pla: 0130:                         throw(exit, TRUE)
; utilsrc/apple/copy.pla: 0131:                     fin
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_X004
_F025 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F026 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F027 	!WORD	_D042+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F028 	!WORD	0		
	!BYTE	$30			; DROP 
_B041 
_B042 
; utilsrc/apple/copy.pla: 0132:                     if recurse
; utilsrc/apple/copy.pla: 0133:                         copyfiles(@srcfilepath, @dstfilepath)
; utilsrc/apple/copy.pla: 0134:                     fin
	!BYTE	$68			; LAB	_D049+0
_F029 	!WORD	_D049+0		
	!BYTE	$4C			; BRFLS	_B043
	!WORD	_B043-*
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_C004
_F030 	!WORD	_C004		
_B043 
_B044 
; utilsrc/apple/copy.pla: 0135:                 fin
_B039 
_B040 
; utilsrc/apple/copy.pla: 0136:             else
	!BYTE	$50			; BRNCH	_B038
	!WORD	_B038-*
_B037 
; utilsrc/apple/copy.pla: 0137:                 puts(@srcfilepath)
; utilsrc/apple/copy.pla: 0138:                 //
; utilsrc/apple/copy.pla: 0139:                 // Check if destination file exists
; utilsrc/apple/copy.pla: 0140:                 //
; utilsrc/apple/copy.pla: 0141:                 if fileio:getfileinfo(@dstfilepath, @dstfileinfo) == FILE_ERR_OK
; utilsrc/apple/copy.pla: 0142:                     fileio:destroy(@dstfilepath)
; utilsrc/apple/copy.pla: 0143:                 fin
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$54			; CALL	_X004
_F031 	!WORD	0		
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$26			; LA	_D055+0
_F032 	!WORD	_D055+0		
	!BYTE	$6A			; LAW	_X034+4
_F033 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B045
	!WORD	_B045-*
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$6A			; LAW	_X034+24
_F034 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B045 
_B046 
; utilsrc/apple/copy.pla: 0144:                 //
; utilsrc/apple/copy.pla: 0145:                 // Create the destination file and open for writing
; utilsrc/apple/copy.pla: 0146:                 //
; utilsrc/apple/copy.pla: 0147:                 if fileio:create(@dstfilepath, entry->entry_type, entry=>entry_aux) <> FILE_ERR_OK
; utilsrc/apple/copy.pla: 0148:                     puts("\nUnable to create file: "); puts(@dstfilepath); putln
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$1F			; ADDI	31
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_X034+22
_F035 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B047
	!WORD	_B047-*
	!BYTE	$2E			; CS
	!BYTE	$18
	!BYTE	$0D,$55,$6E,$61,$62,$6C,$65,$20
	!BYTE	$74,$6F,$20,$63,$72,$65,$61,$74
	!BYTE	$65,$20,$66,$69,$6C,$65,$3A,$20
	!BYTE	$54			; CALL	_X004
_F036 	!WORD	0		
; utilsrc/apple/copy.pla: 0149:                     throw(exit, TRUE)
; utilsrc/apple/copy.pla: 0150:                 fin
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_X004
_F037 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F038 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F039 	!WORD	_D042+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F040 	!WORD	0		
	!BYTE	$30			; DROP 
_B047 
_B048 
; utilsrc/apple/copy.pla: 0151:                 srcref = fileio:open(@srcfilepath)
; utilsrc/apple/copy.pla: 0152:                 if not srcref
; utilsrc/apple/copy.pla: 0153:                     puts("\nUnable to open file: "); puts(@srcfilepath); putln
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$6A			; LAW	_X034+14
_F041 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$0A			; DLW	[10]
	!BYTE	$4E			; BRTRU	_B049
	!WORD	_B049-*
	!BYTE	$2E			; CS
	!BYTE	$16
	!BYTE	$0D,$55,$6E,$61,$62,$6C,$65,$20
	!BYTE	$74,$6F,$20,$6F,$70,$65,$6E,$20
	!BYTE	$66,$69,$6C,$65,$3A,$20
	!BYTE	$54			; CALL	_X004
_F042 	!WORD	0		
; utilsrc/apple/copy.pla: 0154:                     throw(exit, TRUE)
; utilsrc/apple/copy.pla: 0155:                 fin
	!BYTE	$28,$50			; LLA	[80]
	!BYTE	$54			; CALL	_X004
_F043 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F044 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F045 	!WORD	_D042+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F046 	!WORD	0		
	!BYTE	$30			; DROP 
_B049 
_B050 
; utilsrc/apple/copy.pla: 0156:                 dstref = fileio:open(@dstfilepath)
; utilsrc/apple/copy.pla: 0157:                 if not dstref
; utilsrc/apple/copy.pla: 0158:                     puts("\nUnable to open file: "); puts(@dstfilepath); putln
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$6A			; LAW	_X034+14
_F047 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$4E			; BRTRU	_B051
	!WORD	_B051-*
	!BYTE	$2E			; CS
	!BYTE	$16
	!BYTE	$0D,$55,$6E,$61,$62,$6C,$65,$20
	!BYTE	$74,$6F,$20,$6F,$70,$65,$6E,$20
	!BYTE	$66,$69,$6C,$65,$3A,$20
	!BYTE	$54			; CALL	_X004
_F048 	!WORD	0		
; utilsrc/apple/copy.pla: 0159:                     throw(exit, TRUE)
; utilsrc/apple/copy.pla: 0160:                 fin
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_X004
_F049 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F050 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F051 	!WORD	_D042+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F052 	!WORD	0		
	!BYTE	$30			; DROP 
_B051 
_B052 
; utilsrc/apple/copy.pla: 0161:                 //
; utilsrc/apple/copy.pla: 0162:                 // Let the copying begin
; utilsrc/apple/copy.pla: 0163:                 //
; utilsrc/apple/copy.pla: 0164:                 repeat
_B054 
; utilsrc/apple/copy.pla: 0165:                     copyxfer = fileio:read(srcref, copybuff, copysize)
; utilsrc/apple/copy.pla: 0166:                     if copyxfer
; utilsrc/apple/copy.pla: 0167:                         if fileio:write(dstref, copybuff, copyxfer) <> copyxfer
; utilsrc/apple/copy.pla: 0168:                             puts("\nError writing: "); puts(@dstfilepath); putln
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$6A			; LAW	_D046+0
_F053 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_D048+0
_F054 	!WORD	_D048+0		
	!BYTE	$6A			; LAW	_X034+18
_F055 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$4C			; BRFLS	_B056
	!WORD	_B056-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$6A			; LAW	_D046+0
_F056 	!WORD	_D046+0		
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$6A			; LAW	_X034+20
_F057 	!WORD	0+20		
	!BYTE	$56			; ICAL
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$22			; BREQ	_B058
	!WORD	_B058-*
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$0D,$45,$72,$72,$6F,$72,$20,$77
	!BYTE	$72,$69,$74,$69,$6E,$67,$3A,$20
	!BYTE	$54			; CALL	_X004
_F058 	!WORD	0		
; utilsrc/apple/copy.pla: 0169:                             throw(exit, TRUE)
; utilsrc/apple/copy.pla: 0170:                         fin
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_X004
_F059 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F060 	!WORD	0		
	!BYTE	$6A			; LAW	_D042+0
_F061 	!WORD	_D042+0		
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_X030
_F062 	!WORD	0		
	!BYTE	$30			; DROP 
_B058 
_B059 
; utilsrc/apple/copy.pla: 0171:                     fin
_B056 
_B057 
; utilsrc/apple/copy.pla: 0172:                 until copyxfer == 0
_B055 
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$4E			; BRTRU	_B054
	!WORD	_B054-*
_B053 
; utilsrc/apple/copy.pla: 0173:                 fileio:close(dstref)
; utilsrc/apple/copy.pla: 0174:                 fileio:close(srcref)
; utilsrc/apple/copy.pla: 0175:                 puts(" ==> "); puts(@dstfilepath); putln
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$6A			; LAW	_X034+16
_F063 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$6A			; LAW	_X034+16
_F064 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$20,$3D,$3D,$3E,$20
	!BYTE	$54			; CALL	_X004
_F065 	!WORD	0		
; utilsrc/apple/copy.pla: 0176:             fin
	!BYTE	$28,$90			; LLA	[144]
	!BYTE	$54			; CALL	_X004
_F066 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F067 	!WORD	0		
_B038 
; utilsrc/apple/copy.pla: 0177:             entry = entry + t_fileentry
; utilsrc/apple/copy.pla: 0178:             entrycnt--
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$38,$27			; ADDI	39
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$8E			; DECR
; utilsrc/apple/copy.pla: 0179:         loop
	!BYTE	$76,$08			; SLW	[8]
_B034 
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$4E			; BRTRU	_B032
	!WORD	_B032-*
_B033 
; utilsrc/apple/copy.pla: 0180:         heaprelease(entrylist)
; utilsrc/apple/copy.pla: 0181:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X015
_F068 	!WORD	0		
	!BYTE	$30			; DROP 
_B031 
; utilsrc/apple/copy.pla: 0182: end
	!BYTE	$5A,$E0			; LEAVE	224
; utilsrc/apple/copy.pla: 0183: //
; utilsrc/apple/copy.pla: 0184: // Install error exit
; utilsrc/apple/copy.pla: 0185: //
; utilsrc/apple/copy.pla: 0186: exit = heapalloc(t_except)
_INIT 
; utilsrc/apple/copy.pla: 0187: if not except(exit)
; utilsrc/apple/copy.pla: 0188:     fileio:getpfx(@curpath)
; utilsrc/apple/copy.pla: 0189:     //
; utilsrc/apple/copy.pla: 0190:     // Check arguments and file types
; utilsrc/apple/copy.pla: 0191:     //
; utilsrc/apple/copy.pla: 0192:     arg = argNext(argFirst)
; utilsrc/apple/copy.pla: 0193:     if ^arg and arg->[1] == '-'
; utilsrc/apple/copy.pla: 0194:         if ^arg > 1 and toupper(arg->[2]) == 'R'
; utilsrc/apple/copy.pla: 0195:             recurse = TRUE
; utilsrc/apple/copy.pla: 0196:         fin
	!BYTE	$2C,$40,$01		; CW	320
	!BYTE	$54			; CALL	_X014
_F069 	!WORD	0		
	!BYTE	$7E			; DAW	_D042+0
_F070 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_X029
_F071 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B060
	!WORD	_B060-*
	!BYTE	$26			; LA	_D051+0
_F072 	!WORD	_D051+0		
	!BYTE	$6A			; LAW	_X034+0
_F073 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X032
_F074 	!WORD	0		
	!BYTE	$54			; CALL	_X033
_F075 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F076 	!WORD	_D041+0		
	!BYTE	$6A			; LAW	_D041+0
_F077 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B062
	!WORD	_B062-*
	!BYTE	$6A			; LAW	_D041+0
_F078 	!WORD	_D041+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$40			; ISEQ
_B062 
	!BYTE	$4C			; BRFLS	_B063
	!WORD	_B063-*
	!BYTE	$6A			; LAW	_D041+0
_F079 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B065
	!WORD	_B065-*
	!BYTE	$6A			; LAW	_D041+0
_F080 	!WORD	_D041+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F081 	!WORD	0		
	!BYTE	$2A,$52			; CB	82
	!BYTE	$40			; ISEQ
_B065 
	!BYTE	$4C			; BRFLS	_B066
	!WORD	_B066-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$78			; SAB	_D049+0
_F082 	!WORD	_D049+0		
_B066 
_B067 
; utilsrc/apple/copy.pla: 0197:         arg = argNext(arg)
; utilsrc/apple/copy.pla: 0198:     fin
	!BYTE	$6A			; LAW	_D041+0
_F083 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F084 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F085 	!WORD	_D041+0		
_B063 
_B064 
; utilsrc/apple/copy.pla: 0199:     if ^arg
; utilsrc/apple/copy.pla: 0200:         srcfilelist = heapalloc(^arg + 1)
; utilsrc/apple/copy.pla: 0201:         pathcpy(srcfilelist, arg)
; utilsrc/apple/copy.pla: 0202:         srccnt++
	!BYTE	$6A			; LAW	_D041+0
_F086 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B068
	!WORD	_B068-*
	!BYTE	$6A			; LAW	_D041+0
_F087 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_X014
_F088 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F089 	!WORD	_D043+0		
	!BYTE	$6A			; LAW	_D041+0
_F090 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C000
_F091 	!WORD	_C000		
	!BYTE	$6A			; LAW	_D045+0
_F092 	!WORD	_D045+0		
	!BYTE	$8C			; INCR
; utilsrc/apple/copy.pla: 0203:         arg = argNext(arg)
; utilsrc/apple/copy.pla: 0204:         if ^arg
; utilsrc/apple/copy.pla: 0205:             pathcpy(@dstpath, arg)
; utilsrc/apple/copy.pla: 0206:             arg = argNext(arg)
; utilsrc/apple/copy.pla: 0207:             while ^arg
	!BYTE	$7A			; SAW	_D045+0
_F093 	!WORD	_D045+0		
	!BYTE	$6A			; LAW	_D041+0
_F094 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F095 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F096 	!WORD	_D041+0		
	!BYTE	$6A			; LAW	_D041+0
_F097 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B070
	!WORD	_B070-*
	!BYTE	$26			; LA	_D052+0
_F098 	!WORD	_D052+0		
	!BYTE	$6A			; LAW	_D041+0
_F099 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C000
_F100 	!WORD	_C000		
	!BYTE	$6A			; LAW	_D041+0
_F101 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F102 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F103 	!WORD	_D041+0		
	!BYTE	$50			; BRNCH	_B074
	!WORD	_B074-*
_B072 
; utilsrc/apple/copy.pla: 0208:                 //
; utilsrc/apple/copy.pla: 0209:                 // Add to source list
; utilsrc/apple/copy.pla: 0210:                 //
; utilsrc/apple/copy.pla: 0211:                 srcfileptr = heapalloc(dstpath + 1)
; utilsrc/apple/copy.pla: 0212:                 strcpy(srcfileptr, @dstpath)
; utilsrc/apple/copy.pla: 0213:                 srccnt++
	!BYTE	$68			; LAB	_D052+0
_F104 	!WORD	_D052+0		
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_X014
_F105 	!WORD	0		
	!BYTE	$7E			; DAW	_D044+0
_F106 	!WORD	_D044+0		
	!BYTE	$26			; LA	_D052+0
_F107 	!WORD	_D052+0		
	!BYTE	$54			; CALL	_X019
_F108 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D045+0
_F109 	!WORD	_D045+0		
	!BYTE	$8C			; INCR
; utilsrc/apple/copy.pla: 0214:                 //
; utilsrc/apple/copy.pla: 0215:                 // Set new destination
; utilsrc/apple/copy.pla: 0216:                 //
; utilsrc/apple/copy.pla: 0217:                 pathcpy(@dstpath, arg)
; utilsrc/apple/copy.pla: 0218:                 arg = argNext(arg)
; utilsrc/apple/copy.pla: 0219:             loop
	!BYTE	$7A			; SAW	_D045+0
_F110 	!WORD	_D045+0		
	!BYTE	$26			; LA	_D052+0
_F111 	!WORD	_D052+0		
	!BYTE	$6A			; LAW	_D041+0
_F112 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C000
_F113 	!WORD	_C000		
	!BYTE	$6A			; LAW	_D041+0
_F114 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F115 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F116 	!WORD	_D041+0		
_B074 
	!BYTE	$6A			; LAW	_D041+0
_F117 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B072
	!WORD	_B072-*
_B073 
; utilsrc/apple/copy.pla: 0220:             if dstpath[0] == 1 and dstpath[1] == '='
; utilsrc/apple/copy.pla: 0221:                 fileio:getpfx(@dstpath)
; utilsrc/apple/copy.pla: 0222:             fin
	!BYTE	$68			; LAB	_D052+0
_F118 	!WORD	_D052+0		
	!BYTE	$02			; CN	1
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B075
	!WORD	_B075-*
	!BYTE	$68			; LAB	_D052+1
_F119 	!WORD	_D052+1		
	!BYTE	$2A,$3D			; CB	61
	!BYTE	$40			; ISEQ
_B075 
	!BYTE	$4C			; BRFLS	_B076
	!WORD	_B076-*
	!BYTE	$26			; LA	_D052+0
_F120 	!WORD	_D052+0		
	!BYTE	$6A			; LAW	_X034+0
_F121 	!WORD	0+0		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B076 
_B077 
; utilsrc/apple/copy.pla: 0223:             if not chkdstpath(@dstpath) and (srccnt > 1 or isWildName(srcfilelist))
; utilsrc/apple/copy.pla: 0224:                 puts("Destination must be a directory: "); puts(@dstpath); putln
	!BYTE	$26			; LA	_D052+0
_F122 	!WORD	_D052+0		
	!BYTE	$54			; CALL	_C003
_F123 	!WORD	_C003		
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B078
	!WORD	_B078-*
	!BYTE	$6A			; LAW	_D045+0
_F124 	!WORD	_D045+0		
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$AE			; BROR	_B079
	!WORD	_B079-*
	!BYTE	$6A			; LAW	_D043+0
_F125 	!WORD	_D043+0		
	!BYTE	$54			; CALL	_X039
_F126 	!WORD	0		
_B079 
_B078 
	!BYTE	$4C			; BRFLS	_B080
	!WORD	_B080-*
	!BYTE	$2E			; CS
	!BYTE	$21
	!BYTE	$44,$65,$73,$74,$69,$6E,$61,$74
	!BYTE	$69,$6F,$6E,$20,$6D,$75,$73,$74
	!BYTE	$20,$62,$65,$20,$61,$20,$64,$69
	!BYTE	$72,$65,$63,$74,$6F,$72,$79,$3A
	!BYTE	$20
	!BYTE	$54			; CALL	_X004
_F127 	!WORD	0		
; utilsrc/apple/copy.pla: 0225:                 return
	!BYTE	$26			; LA	_D052+0
_F128 	!WORD	_D052+0		
	!BYTE	$54			; CALL	_X004
_F129 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F130 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/copy.pla: 0226:             fin
_B080 
_B081 
; utilsrc/apple/copy.pla: 0227:             fileio:iobufalloc(2) // Reserve two I/O buffers
; utilsrc/apple/copy.pla: 0228:             copysize = MAXBUFSIZE
; utilsrc/apple/copy.pla: 0229:             while isult(heapavail, copysize + 512)
	!BYTE	$04			; CN	2
	!BYTE	$6A			; LAW	_X034+12
_F131 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$2C,$00,$40		; CW	16384
	!BYTE	$7A			; SAW	_D048+0
_F132 	!WORD	_D048+0		
	!BYTE	$50			; BRNCH	_B084
	!WORD	_B084-*
_B082 
; utilsrc/apple/copy.pla: 0230:                 copysize = copysize / 2
; utilsrc/apple/copy.pla: 0231:             loop
	!BYTE	$6A			; LAW	_D048+0
_F133 	!WORD	_D048+0		
	!BYTE	$02			; CN	1
	!BYTE	$9C			; SHR
	!BYTE	$7A			; SAW	_D048+0
_F134 	!WORD	_D048+0		
_B084 
	!BYTE	$54			; CALL	_X016
_F135 	!WORD	0		
	!BYTE	$6A			; LAW	_D048+0
_F136 	!WORD	_D048+0		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$82			; ADD 
	!BYTE	$54			; CALL	_X026
_F137 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B082
	!WORD	_B082-*
_B083 
; utilsrc/apple/copy.pla: 0232:             copyrel = heapalloc(copysize)
; utilsrc/apple/copy.pla: 0233:             if not copyrel
; utilsrc/apple/copy.pla: 0234:                 puts(" No available memory for copy buffer\n")
	!BYTE	$6A			; LAW	_D048+0
_F138 	!WORD	_D048+0		
	!BYTE	$54			; CALL	_X014
_F139 	!WORD	0		
	!BYTE	$7E			; DAW	_D047+0
_F140 	!WORD	_D047+0		
	!BYTE	$4E			; BRTRU	_B085
	!WORD	_B085-*
	!BYTE	$2E			; CS
	!BYTE	$25
	!BYTE	$20,$4E,$6F,$20,$61,$76,$61,$69
	!BYTE	$6C,$61,$62,$6C,$65,$20,$6D,$65
	!BYTE	$6D,$6F,$72,$79,$20,$66,$6F,$72
	!BYTE	$20,$63,$6F,$70,$79,$20,$62,$75
	!BYTE	$66,$66,$65,$72,$0D
	!BYTE	$54			; CALL	_X004
_F141 	!WORD	0		
; utilsrc/apple/copy.pla: 0235:                 return
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/copy.pla: 0236:             fin
_B085 
_B086 
; utilsrc/apple/copy.pla: 0237:             //
; utilsrc/apple/copy.pla: 0238:             // Round buffer to page boundary for faster transfers
; utilsrc/apple/copy.pla: 0239:             //
; utilsrc/apple/copy.pla: 0240:             copybuff = (copyrel + $FF) & $FF00
; utilsrc/apple/copy.pla: 0241:             //
; utilsrc/apple/copy.pla: 0242:             // Iterate through all sources
; utilsrc/apple/copy.pla: 0243:             //
; utilsrc/apple/copy.pla: 0244:             srcfileptr = srcfilelist
; utilsrc/apple/copy.pla: 0245:             while srccnt
	!BYTE	$6A			; LAW	_D047+0
_F142 	!WORD	_D047+0		
	!BYTE	$38,$FF			; ADDI	255
	!BYTE	$5E,$00			; CFFB	65280
	!BYTE	$94			; AND 
	!BYTE	$7A			; SAW	_D046+0
_F143 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_D043+0
_F144 	!WORD	_D043+0		
	!BYTE	$7A			; SAW	_D044+0
_F145 	!WORD	_D044+0		
	!BYTE	$50			; BRNCH	_B089
	!WORD	_B089-*
_B087 
; utilsrc/apple/copy.pla: 0246:                 dstlen = dstpath
; utilsrc/apple/copy.pla: 0247:                 if fileio:getfileinfo(srcfileptr, @srcfileinfo) == FILE_ERR_OK and (srcfileinfo.storage_type & $0D == $0D)
; utilsrc/apple/copy.pla: 0248:                     if recurse
; utilsrc/apple/copy.pla: 0249:                         //
; utilsrc/apple/copy.pla: 0250:                         // Copy directory
; utilsrc/apple/copy.pla: 0251:                         //
; utilsrc/apple/copy.pla: 0252:                         if dstpath[dstpath] <> '/'
; utilsrc/apple/copy.pla: 0253:                             dstpath++
	!BYTE	$68			; LAB	_D052+0
_F146 	!WORD	_D052+0		
	!BYTE	$78			; SAB	_D050+0
_F147 	!WORD	_D050+0		
	!BYTE	$6A			; LAW	_D044+0
_F148 	!WORD	_D044+0		
	!BYTE	$26			; LA	_D054+0
_F149 	!WORD	_D054+0		
	!BYTE	$6A			; LAW	_X034+4
_F150 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B090
	!WORD	_B090-*
	!BYTE	$68			; LAB	_D054+4
_F151 	!WORD	_D054+4		
	!BYTE	$3C,$0D			; ANDI	13
	!BYTE	$1A			; CN	13
	!BYTE	$40			; ISEQ
_B090 
	!BYTE	$4C			; BRFLS	_B091
	!WORD	_B091-*
	!BYTE	$68			; LAB	_D049+0
_F152 	!WORD	_D049+0		
	!BYTE	$4C			; BRFLS	_B093
	!WORD	_B093-*
	!BYTE	$26			; LA	_D052+0
_F153 	!WORD	_D052+0		
	!BYTE	$B4			; ADDAB	_D052+0
_F154 	!WORD	_D052+0		
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B095
	!WORD	_B095-*
	!BYTE	$68			; LAB	_D052+0
_F155 	!WORD	_D052+0		
	!BYTE	$8C			; INCR
; utilsrc/apple/copy.pla: 0254:                             dstpath[dstpath] = '/'
; utilsrc/apple/copy.pla: 0255:                         fin
	!BYTE	$78			; SAB	_D052+0
_F156 	!WORD	_D052+0		
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$26			; LA	_D052+0
_F157 	!WORD	_D052+0		
	!BYTE	$B4			; ADDAB	_D052+0
_F158 	!WORD	_D052+0		
	!BYTE	$70			; SB
_B095 
_B096 
; utilsrc/apple/copy.pla: 0256:                         filefrompath(@srcdir, srcfileptr)
; utilsrc/apple/copy.pla: 0257:                         strcat(@dstpath, @srcdir)
; utilsrc/apple/copy.pla: 0258:                         if fileio:getfileinfo(@dstpath, @dstfileinfo) <> FILE_ERR_OK
; utilsrc/apple/copy.pla: 0259:                             fileio:create(@dstpath, $0F, $0000)
; utilsrc/apple/copy.pla: 0260:                         fin
	!BYTE	$26			; LA	_D053+0
_F159 	!WORD	_D053+0		
	!BYTE	$6A			; LAW	_D044+0
_F160 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_X040
_F161 	!WORD	0		
	!BYTE	$26			; LA	_D052+0
_F162 	!WORD	_D052+0		
	!BYTE	$26			; LA	_D053+0
_F163 	!WORD	_D053+0		
	!BYTE	$54			; CALL	_X020
_F164 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D052+0
_F165 	!WORD	_D052+0		
	!BYTE	$26			; LA	_D055+0
_F166 	!WORD	_D055+0		
	!BYTE	$6A			; LAW	_X034+4
_F167 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B097
	!WORD	_B097-*
	!BYTE	$26			; LA	_D052+0
_F168 	!WORD	_D052+0		
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X034+22
_F169 	!WORD	0+22		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B097 
_B098 
; utilsrc/apple/copy.pla: 0261:                         if not chkdstpath(@dstpath)
; utilsrc/apple/copy.pla: 0262:                             puts("Destination must be a directory: "); puts(@dstpath); putln
	!BYTE	$26			; LA	_D052+0
_F170 	!WORD	_D052+0		
	!BYTE	$54			; CALL	_C003
_F171 	!WORD	_C003		
	!BYTE	$4E			; BRTRU	_B099
	!WORD	_B099-*
	!BYTE	$2E			; CS
	!BYTE	$21
	!BYTE	$44,$65,$73,$74,$69,$6E,$61,$74
	!BYTE	$69,$6F,$6E,$20,$6D,$75,$73,$74
	!BYTE	$20,$62,$65,$20,$61,$20,$64,$69
	!BYTE	$72,$65,$63,$74,$6F,$72,$79,$3A
	!BYTE	$20
	!BYTE	$54			; CALL	_X004
_F172 	!WORD	0		
; utilsrc/apple/copy.pla: 0263:                             return
	!BYTE	$26			; LA	_D052+0
_F173 	!WORD	_D052+0		
	!BYTE	$54			; CALL	_X004
_F174 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F175 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/copy.pla: 0264:                         fin
_B099 
_B100 
; utilsrc/apple/copy.pla: 0265:                     else
	!BYTE	$50			; BRNCH	_B094
	!WORD	_B094-*
_B093 
; utilsrc/apple/copy.pla: 0266:                         puts("Omitting directory without -r: "); puts(srcfileptr); putln
	!BYTE	$2E			; CS
	!BYTE	$1F
	!BYTE	$4F,$6D,$69,$74,$74,$69,$6E,$67
	!BYTE	$20,$64,$69,$72,$65,$63,$74,$6F
	!BYTE	$72,$79,$20,$77,$69,$74,$68,$6F
	!BYTE	$75,$74,$20,$2D,$72,$3A,$20
	!BYTE	$54			; CALL	_X004
_F176 	!WORD	0		
; utilsrc/apple/copy.pla: 0267:                         srcfileptr = srcfileptr + ^srcfileptr + 1
; utilsrc/apple/copy.pla: 0268:                         srccnt--
	!BYTE	$6A			; LAW	_D044+0
_F177 	!WORD	_D044+0		
	!BYTE	$54			; CALL	_X004
_F178 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F179 	!WORD	0		
	!BYTE	$6A			; LAW	_D044+0
_F180 	!WORD	_D044+0		
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$7A			; SAW	_D044+0
_F181 	!WORD	_D044+0		
	!BYTE	$6A			; LAW	_D045+0
_F182 	!WORD	_D045+0		
	!BYTE	$8E			; DECR
; utilsrc/apple/copy.pla: 0269:                         continue
	!BYTE	$7A			; SAW	_D045+0
_F183 	!WORD	_D045+0		
	!BYTE	$50			; BRNCH	_B089
	!WORD	_B089-*
; utilsrc/apple/copy.pla: 0270:                     fin
_B094 
; utilsrc/apple/copy.pla: 0271:                 fin
_B091 
_B092 
; utilsrc/apple/copy.pla: 0272:                 //
; utilsrc/apple/copy.pla: 0273:                 // Copy files
; utilsrc/apple/copy.pla: 0274:                 //
; utilsrc/apple/copy.pla: 0275:                 copyfiles(srcfileptr, @dstpath)
; utilsrc/apple/copy.pla: 0276:                 dstpath = dstlen
; utilsrc/apple/copy.pla: 0277:                 srcfileptr = srcfileptr + ^srcfileptr + 1
; utilsrc/apple/copy.pla: 0278:                 srccnt--
	!BYTE	$6A			; LAW	_D044+0
_F184 	!WORD	_D044+0		
	!BYTE	$26			; LA	_D052+0
_F185 	!WORD	_D052+0		
	!BYTE	$54			; CALL	_C004
_F186 	!WORD	_C004		
	!BYTE	$68			; LAB	_D050+0
_F187 	!WORD	_D050+0		
	!BYTE	$78			; SAB	_D052+0
_F188 	!WORD	_D052+0		
	!BYTE	$6A			; LAW	_D044+0
_F189 	!WORD	_D044+0		
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$7A			; SAW	_D044+0
_F190 	!WORD	_D044+0		
	!BYTE	$6A			; LAW	_D045+0
_F191 	!WORD	_D045+0		
	!BYTE	$8E			; DECR
; utilsrc/apple/copy.pla: 0279:             loop
	!BYTE	$7A			; SAW	_D045+0
_F192 	!WORD	_D045+0		
_B089 
	!BYTE	$6A			; LAW	_D045+0
_F193 	!WORD	_D045+0		
	!BYTE	$4E			; BRTRU	_B087
	!WORD	_B087-*
_B088 
; utilsrc/apple/copy.pla: 0280:             heaprelease(copyrel)
; utilsrc/apple/copy.pla: 0281:             return
	!BYTE	$6A			; LAW	_D047+0
_F194 	!WORD	_D047+0		
	!BYTE	$54			; CALL	_X015
_F195 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/copy.pla: 0282:         fin
_B070 
_B071 
; utilsrc/apple/copy.pla: 0283:     fin
_B068 
_B069 
; utilsrc/apple/copy.pla: 0284:     puts("Usage: +COPY <SRCFILE>+ <DEST>\n")
	!BYTE	$2E			; CS
	!BYTE	$1F
	!BYTE	$55,$73,$61,$67,$65,$3A,$20,$2B
	!BYTE	$43,$4F,$50,$59,$20,$3C,$53,$52
	!BYTE	$43,$46,$49,$4C,$45,$3E,$2B,$20
	!BYTE	$3C,$44,$45,$53,$54,$3E,$0D
	!BYTE	$54			; CALL	_X004
_F196 	!WORD	0		
; utilsrc/apple/copy.pla: 0285: fin
_B060 
_B061 
; utilsrc/apple/copy.pla: 0286: fileio:close(0)
; utilsrc/apple/copy.pla: 0287: done
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_X034+16
_F197 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	6
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	40			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	38			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F090-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F091-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F092-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F093-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F094-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F095-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F096-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F097-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F098-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F099-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F100-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F101-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F102-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F103-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F104-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F105-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F106-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F107-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F108-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F109-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F110-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F111-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F112-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F113-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F114-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F115-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F116-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F117-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F118-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F119-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F120-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F121-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F122-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F123-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F124-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F125-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F126-_SEGBEGIN		
	!BYTE	39			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F127-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F128-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F129-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F130-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F131-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F132-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F133-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F134-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F135-_SEGBEGIN		
	!BYTE	16			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F136-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F137-_SEGBEGIN		
	!BYTE	26			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F138-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F139-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F140-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F141-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F142-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F143-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F144-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F145-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F146-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F147-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F148-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F149-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F150-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F151-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F152-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F153-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F154-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F155-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F156-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F157-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F158-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F159-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F160-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F161-_SEGBEGIN		
	!BYTE	40			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F162-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F163-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F164-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F165-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F166-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F167-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F168-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F169-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F170-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F171-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F172-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F173-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F174-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F175-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F176-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F177-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F178-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F179-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F180-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F181-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F182-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F183-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F184-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F185-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F186-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F187-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F188-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F189-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F190-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F191-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F192-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F193-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F194-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F195-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F196-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F197-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: HEAPAVAIL
	!BYTE	$C8,$C5,$C1,$D0,$C1,$D6,$C1,$C9,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	16			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: STRCAT
	!BYTE	$D3,$D4,$D2,$C3,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	20			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: ISULT
	!BYTE	$C9,$D3,$D5,$CC,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	26			; ESD INDEX
	; DCI STRING: EXCEPT
	!BYTE	$C5,$D8,$C3,$C5,$D0,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: THROW
	!BYTE	$D4,$C8,$D2,$CF,$57
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	; DCI STRING: MATCHLIST
	!BYTE	$CD,$C1,$D4,$C3,$C8,$CC,$C9,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	38			; ESD INDEX
	; DCI STRING: ISWILDNAME
	!BYTE	$C9,$D3,$D7,$C9,$CC,$C4,$CE,$C1,$CD,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	39			; ESD INDEX
	; DCI STRING: FILEFROMPATH
	!BYTE	$C6,$C9,$CC,$C5,$C6,$D2,$CF,$CD,$D0,$C1,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	40			; ESD INDEX
	!BYTE	$00			; END OF ESD
