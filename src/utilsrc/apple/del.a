; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; utilsrc/apple/del.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; utilsrc/apple/del.pla: 0001: 
; utilsrc/apple/del.pla: 0002: include "inc/longjmp.plh"
; inc/longjmp.plh: 0001: import longjmp
	; DCI STRING: LONGJMP
	!BYTE	$CC,$CF,$CE,$C7,$CA,$CD,$50
					; LONGJMP -> X028
; inc/longjmp.plh: 0002:     const t_except = $0140
					; t_except = 320
; inc/longjmp.plh: 0003:     predef except(env), throw(env, retval)
					; EXCEPT -> X029
					; THROW -> X030
; inc/longjmp.plh: 0004: end
; utilsrc/apple/del.pla: 0002: 
; utilsrc/apple/del.pla: 0003: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X031
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X032
					; ARGNEXT -> X033
; inc/args.plh: 0003: end
; utilsrc/apple/del.pla: 0003: 
; utilsrc/apple/del.pla: 0004: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X034
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X035
; inc/fileio.plh: 0080: end
; utilsrc/apple/del.pla: 0004: 
; utilsrc/apple/del.pla: 0005: include "inc/matchfiles.plh"
; inc/matchfiles.plh: 0001: import matchfiles
	; DCI STRING: MATCHFILES
	!BYTE	$CD,$C1,$D4,$C3,$C8,$C6,$C9,$CC,$C5,$53
					; MATCHFILES -> X036
; inc/matchfiles.plh: 0002:     predef matchName(src, exp)#1
					; MATCHNAME -> X037
; inc/matchfiles.plh: 0003:     predef matchList(pathptr, exp)#2
					; MATCHLIST -> X038
; inc/matchfiles.plh: 0004:     predef isWildName(exp)#1
					; ISWILDNAME -> X039
; inc/matchfiles.plh: 0005:     predef fileFromPath(filestr, pathstr)#0
					; FILEFROMPATH -> X040
; inc/matchfiles.plh: 0006: end
; utilsrc/apple/del.pla: 0005: 
; utilsrc/apple/del.pla: 0006: 
; utilsrc/apple/del.pla: 0007: var arg, recurse, exit, filelist, fileptr, filecnt
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D041 	!FILL	2			; arg, recurse, exit, filelist, fileptr, filecnt
_D042 	!FILL	2			; recurse, exit, filelist, fileptr, filecnt
_D043 	!FILL	2			; exit, filelist, fileptr, filecnt
_D044 	!FILL	2			; filelist, fileptr, filecnt
_D045 	!FILL	2			; fileptr, filecnt
_D046 	!FILL	2			; filecnt
; utilsrc/apple/del.pla: 0008: char[64] path
_D047 	!FILL	64			; path
; utilsrc/apple/del.pla: 0009: res[t_fileinfo] fileinfo
_D048 	!FILL	15			; fileinfo
; utilsrc/apple/del.pla: 0010: //
; utilsrc/apple/del.pla: 0011: // Copy string with upper case conversion
; utilsrc/apple/del.pla: 0012: //
; utilsrc/apple/del.pla: 0013: def struprcpy(dst, src)#0
_SUBSEG 				; BYTECODE STARTS
					; dst -> [0]
					; src -> [2]
_C000 					; struprcpy()
; utilsrc/apple/del.pla: 0014:     byte i, chr
					; i -> [4]
					; chr -> [5]
; utilsrc/apple/del.pla: 0015: 
; utilsrc/apple/del.pla: 0016:     if ^src
	!BYTE	$58,$06,$02		; ENTER	6,2
; utilsrc/apple/del.pla: 0017:         for i = 1 to ^src
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B003
	!WORD	_B003-*
_B004 
	!BYTE	$6C,$04			; DLB	[4]
; utilsrc/apple/del.pla: 0018:             chr = src->[i]
; utilsrc/apple/del.pla: 0019:             if chr >= 'a' and chr <= 'z'
; utilsrc/apple/del.pla: 0020:                 dst->[i] =  chr - 'a' + 'A'
; utilsrc/apple/del.pla: 0021:             else
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$60			; LB
	!BYTE	$6C,$05			; DLB	[5]
	!BYTE	$2A,$61			; CB	97
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B006
	!WORD	_B006-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$2A,$7A			; CB	122
	!BYTE	$4A			; ISLE
_B006 
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$3A,$61			; SUBI	97
	!BYTE	$38,$41			; ADDI	65
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B008
	!WORD	_B008-*
_B007 
; utilsrc/apple/del.pla: 0022:                 dst->[i] = chr
; utilsrc/apple/del.pla: 0023:             fin
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$70			; SB
_B008 
; utilsrc/apple/del.pla: 0024:         next
_B005 
	!BYTE	$A4			; INCBRLE	_B004
	!WORD	_B004-*
_B003 
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$30			; DROP 
; utilsrc/apple/del.pla: 0025:     fin
_B001 
_B002 
; utilsrc/apple/del.pla: 0026:     ^dst = ^src
; utilsrc/apple/del.pla: 0027: end
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$5A,$06			; LEAVE	6
; utilsrc/apple/del.pla: 0028: //
; utilsrc/apple/del.pla: 0029: // Check filename
; utilsrc/apple/del.pla: 0030: //
; utilsrc/apple/del.pla: 0031: def chkfile(file)#1
					; file -> [0]
_C001 					; chkfile()
; utilsrc/apple/del.pla: 0032:     var refnum, dirbuf, filecnt
					; refnum -> [2]
					; dirbuf -> [4]
					; filecnt -> [6]
; utilsrc/apple/del.pla: 0033: 
; utilsrc/apple/del.pla: 0034:     //
; utilsrc/apple/del.pla: 0035:     // Check if file exists
; utilsrc/apple/del.pla: 0036:     //
; utilsrc/apple/del.pla: 0037:     if fileio:getfileinfo(file, @fileinfo) == FILE_ERR_OK
	!BYTE	$58,$08,$01		; ENTER	8,1
; utilsrc/apple/del.pla: 0038:         //
; utilsrc/apple/del.pla: 0039:         // Check if deleting a directory
; utilsrc/apple/del.pla: 0040:         //
; utilsrc/apple/del.pla: 0041:         if fileinfo.file_type == $0F
; utilsrc/apple/del.pla: 0042:             refnum = fileio:open(file)
; utilsrc/apple/del.pla: 0043:             if refnum
; utilsrc/apple/del.pla: 0044:                 //
; utilsrc/apple/del.pla: 0045:                 // Check for files inside directory
; utilsrc/apple/del.pla: 0046:                 //
; utilsrc/apple/del.pla: 0047:                 filecnt = 0
; utilsrc/apple/del.pla: 0048:                 dirbuf = heapalloc(512)
; utilsrc/apple/del.pla: 0049:                 if fileio:read(refnum, dirbuf, 512) == 512
; utilsrc/apple/del.pla: 0050:                     fileio:close(refnum)
; utilsrc/apple/del.pla: 0051:                     filecnt = dirbuf=>$25 // File count in directory
; utilsrc/apple/del.pla: 0052:                 fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$26			; LA	_D048+0
_F000 	!WORD	_D048+0		
	!BYTE	$6A			; LAW	_X034+4
_F001 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B009
	!WORD	_B009-*
	!BYTE	$68			; LAB	_D048+1
_F002 	!WORD	_D048+1		
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B011
	!WORD	_B011-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X034+14
_F003 	!WORD	0+14		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$00			; CN	0
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$54			; CALL	_X014
_F004 	!WORD	0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$6A			; LAW	_X034+18
_F005 	!WORD	0+18		
	!BYTE	$56			; ICAL
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$24			; BRNE	_B015
	!WORD	_B015-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_X034+16
_F006 	!WORD	0+16		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$25			; ADDI	37
	!BYTE	$62			; LW
	!BYTE	$76,$06			; SLW	[6]
_B015 
_B016 
; utilsrc/apple/del.pla: 0053:                 heaprelease(dirbuf)
; utilsrc/apple/del.pla: 0054:                 if filecnt
; utilsrc/apple/del.pla: 0055:                     puts("Directory not empty: "); puts(file); putln
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X015
_F007 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$2E			; CS
	!BYTE	$15
	!BYTE	$44,$69,$72,$65,$63,$74,$6F,$72
	!BYTE	$79,$20,$6E,$6F,$74,$20,$65,$6D
	!BYTE	$70,$74,$79,$3A,$20
	!BYTE	$54			; CALL	_X004
_F008 	!WORD	0		
; utilsrc/apple/del.pla: 0056:                     return FALSE
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F009 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F010 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; utilsrc/apple/del.pla: 0057:                 fin
_B017 
_B018 
; utilsrc/apple/del.pla: 0058:             fin
_B013 
_B014 
; utilsrc/apple/del.pla: 0059:         fin
_B011 
_B012 
; utilsrc/apple/del.pla: 0060:         return TRUE
	!BYTE	$20			; MINUS ONE
	!BYTE	$5A,$08			; LEAVE	8
; utilsrc/apple/del.pla: 0061:     fin
_B009 
_B010 
; utilsrc/apple/del.pla: 0062:     puts("File not found: "); puts(file); putln
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$46,$69,$6C,$65,$20,$6E,$6F,$74
	!BYTE	$20,$66,$6F,$75,$6E,$64,$3A,$20
	!BYTE	$54			; CALL	_X004
_F011 	!WORD	0		
; utilsrc/apple/del.pla: 0063:     return FALSE
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X004
_F012 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F013 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$08			; LEAVE	8
; utilsrc/apple/del.pla: 0064: end
; utilsrc/apple/del.pla: 0065: def delfiles(delfile)#0
					; delfile -> [0]
_C002 					; delfiles()
; utilsrc/apple/del.pla: 0066:     var entrylist, entry, entrycnt
					; entrylist -> [2]
					; entry -> [4]
					; entrycnt -> [6]
; utilsrc/apple/del.pla: 0067:     char[64] delpath
					; delpath -> [8]
; utilsrc/apple/del.pla: 0068:     char[64] delfilepath
					; delfilepath -> [72]
; utilsrc/apple/del.pla: 0069:     char[16] wildname
					; wildname -> [136]
; utilsrc/apple/del.pla: 0070: 
; utilsrc/apple/del.pla: 0071:     strcpy(@delpath, delfile)
	!BYTE	$58,$98,$01		; ENTER	152,1
; utilsrc/apple/del.pla: 0072:     wildname = 0
; utilsrc/apple/del.pla: 0073:     if delpath[delpath] <> '/'
; utilsrc/apple/del.pla: 0074:         fileFromPath(@wildname, @delpath)
; utilsrc/apple/del.pla: 0075:         delpath = delpath - wildname
; utilsrc/apple/del.pla: 0076:     fin
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_X019
_F014 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$88			; SLB	[136]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$B0,$08			; ADDLB	[8]
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$22			; BREQ	_B019
	!WORD	_B019-*
	!BYTE	$28,$88			; LLA	[136]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_X040
_F015 	!WORD	0		
	!BYTE	$64,$08			; LLB	[8]
	!BYTE	$64,$88			; LLB	[136]
	!BYTE	$84			; SUB 
	!BYTE	$74,$08			; SLB	[8]
_B019 
_B020 
; utilsrc/apple/del.pla: 0077:     //
; utilsrc/apple/del.pla: 0078:     // Check arguments and file types
; utilsrc/apple/del.pla: 0079:     //
; utilsrc/apple/del.pla: 0080:     entrylist, entrycnt = matchList(@delpath, @wildname)
; utilsrc/apple/del.pla: 0081:     if entrylist
; utilsrc/apple/del.pla: 0082:         entry = entrylist
; utilsrc/apple/del.pla: 0083:         while entrycnt
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$28,$88			; LLA	[136]
	!BYTE	$54			; CALL	_X038
_F016 	!WORD	0		
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$6E,$02			; DLW	[2]
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$50			; BRNCH	_B025
	!WORD	_B025-*
_B023 
; utilsrc/apple/del.pla: 0084:             strcpy(@delfilepath, @delpath)
; utilsrc/apple/del.pla: 0085:             strcat(@delfilepath, entry)
; utilsrc/apple/del.pla: 0086:             //
; utilsrc/apple/del.pla: 0087:             // Check if file is a directory
; utilsrc/apple/del.pla: 0088:             //
; utilsrc/apple/del.pla: 0089:             if entry->entry_type == $0F
; utilsrc/apple/del.pla: 0090:                 if recurse
; utilsrc/apple/del.pla: 0091:                     strcat(@delfilepath, "/")
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_X019
_F017 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X020
_F018 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$1E			; CN	15
	!BYTE	$24			; BRNE	_B026
	!WORD	_B026-*
	!BYTE	$6A			; LAW	_D042+0
_F019 	!WORD	_D042+0		
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$2E			; CS
	!BYTE	$01
	!BYTE	$2F
	!BYTE	$54			; CALL	_X020
_F020 	!WORD	0		
	!BYTE	$30			; DROP 
; utilsrc/apple/del.pla: 0092:                     strcat(@delfilepath, @wildname)
; utilsrc/apple/del.pla: 0093:                     delfiles(@delfilepath)
; utilsrc/apple/del.pla: 0094:                 fin
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$28,$88			; LLA	[136]
	!BYTE	$54			; CALL	_X020
_F021 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$54			; CALL	_C002
_F022 	!WORD	_C002		
_B028 
_B029 
; utilsrc/apple/del.pla: 0095:                 strcpy(@delfilepath, @delpath)
; utilsrc/apple/del.pla: 0096:                 strcat(@delfilepath, entry)
; utilsrc/apple/del.pla: 0097:                 if chkfile(@delfilepath)
; utilsrc/apple/del.pla: 0098:                     puts("Removing: "); puts(@delfilepath); putln
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_X019
_F023 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_X020
_F024 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$54			; CALL	_C001
_F025 	!WORD	_C001		
	!BYTE	$4C			; BRFLS	_B030
	!WORD	_B030-*
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$52,$65,$6D,$6F,$76,$69,$6E,$67
	!BYTE	$3A,$20
	!BYTE	$54			; CALL	_X004
_F026 	!WORD	0		
; utilsrc/apple/del.pla: 0099:                     fileio:destroy(@delfilepath)
; utilsrc/apple/del.pla: 0100:                 fin
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$54			; CALL	_X004
_F027 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F028 	!WORD	0		
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$6A			; LAW	_X034+24
_F029 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B030 
_B031 
; utilsrc/apple/del.pla: 0101:             else
	!BYTE	$50			; BRNCH	_B027
	!WORD	_B027-*
_B026 
; utilsrc/apple/del.pla: 0102:                 puts("Removing: "); puts(@delfilepath); putln
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$52,$65,$6D,$6F,$76,$69,$6E,$67
	!BYTE	$3A,$20
	!BYTE	$54			; CALL	_X004
_F030 	!WORD	0		
; utilsrc/apple/del.pla: 0103:                 fileio:destroy(@delfilepath)
; utilsrc/apple/del.pla: 0104:             fin
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$54			; CALL	_X004
_F031 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F032 	!WORD	0		
	!BYTE	$28,$48			; LLA	[72]
	!BYTE	$6A			; LAW	_X034+24
_F033 	!WORD	0+24		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
_B027 
; utilsrc/apple/del.pla: 0105:             entry = entry + t_fileentry
; utilsrc/apple/del.pla: 0106:             entrycnt--
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$27			; ADDI	39
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$8E			; DECR
; utilsrc/apple/del.pla: 0107:         loop
	!BYTE	$76,$06			; SLW	[6]
_B025 
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$4E			; BRTRU	_B023
	!WORD	_B023-*
_B024 
; utilsrc/apple/del.pla: 0108:     elsif not wildname
	!BYTE	$50			; BRNCH	_B022
	!WORD	_B022-*
_B021 
; utilsrc/apple/del.pla: 0109:         puts("Not found: "); puts(@delpath); puts("/"); puts(@wildname); putln
	!BYTE	$64,$88			; LLB	[136]
	!BYTE	$4E			; BRTRU	_B032
	!WORD	_B032-*
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$4E,$6F,$74,$20,$66,$6F,$75,$6E
	!BYTE	$64,$3A,$20
	!BYTE	$54			; CALL	_X004
_F034 	!WORD	0		
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_X004
_F035 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$01
	!BYTE	$2F
	!BYTE	$54			; CALL	_X004
_F036 	!WORD	0		
; utilsrc/apple/del.pla: 0110:     fin
	!BYTE	$28,$88			; LLA	[136]
	!BYTE	$54			; CALL	_X004
_F037 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F038 	!WORD	0		
_B032 
_B022 
; utilsrc/apple/del.pla: 0111: end
	!BYTE	$5A,$98			; LEAVE	152
; utilsrc/apple/del.pla: 0112: //
; utilsrc/apple/del.pla: 0113: // Install error exit
; utilsrc/apple/del.pla: 0114: //
; utilsrc/apple/del.pla: 0115: exit = heapalloc(t_except)
_INIT 
; utilsrc/apple/del.pla: 0116: if not except(exit)
; utilsrc/apple/del.pla: 0117:     //
; utilsrc/apple/del.pla: 0118:     // Check arguments and file types
; utilsrc/apple/del.pla: 0119:     //
; utilsrc/apple/del.pla: 0120:     arg = argNext(argFirst)
; utilsrc/apple/del.pla: 0121:     if ^arg and arg->[1] == '-'
; utilsrc/apple/del.pla: 0122:         if ^arg > 1 and toupper(arg->[2]) == 'R'
; utilsrc/apple/del.pla: 0123:             recurse = TRUE
; utilsrc/apple/del.pla: 0124:         fin
	!BYTE	$2C,$40,$01		; CW	320
	!BYTE	$54			; CALL	_X014
_F039 	!WORD	0		
	!BYTE	$7E			; DAW	_D043+0
_F040 	!WORD	_D043+0		
	!BYTE	$54			; CALL	_X029
_F041 	!WORD	0		
	!BYTE	$4E			; BRTRU	_B033
	!WORD	_B033-*
	!BYTE	$54			; CALL	_X032
_F042 	!WORD	0		
	!BYTE	$54			; CALL	_X033
_F043 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F044 	!WORD	_D041+0		
	!BYTE	$6A			; LAW	_D041+0
_F045 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B035
	!WORD	_B035-*
	!BYTE	$6A			; LAW	_D041+0
_F046 	!WORD	_D041+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$40			; ISEQ
_B035 
	!BYTE	$4C			; BRFLS	_B036
	!WORD	_B036-*
	!BYTE	$6A			; LAW	_D041+0
_F047 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B038
	!WORD	_B038-*
	!BYTE	$6A			; LAW	_D041+0
_F048 	!WORD	_D041+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F049 	!WORD	0		
	!BYTE	$2A,$52			; CB	82
	!BYTE	$40			; ISEQ
_B038 
	!BYTE	$4C			; BRFLS	_B039
	!WORD	_B039-*
	!BYTE	$20			; MINUS ONE
	!BYTE	$7A			; SAW	_D042+0
_F050 	!WORD	_D042+0		
_B039 
_B040 
; utilsrc/apple/del.pla: 0125:         arg = argNext(arg)
; utilsrc/apple/del.pla: 0126:     fin
	!BYTE	$6A			; LAW	_D041+0
_F051 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F052 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F053 	!WORD	_D041+0		
_B036 
_B037 
; utilsrc/apple/del.pla: 0127:     if ^arg
; utilsrc/apple/del.pla: 0128:         filelist = heapmark()
; utilsrc/apple/del.pla: 0129:         while ^arg
	!BYTE	$6A			; LAW	_D041+0
_F054 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B041
	!WORD	_B041-*
	!BYTE	$54			; CALL	_X012
_F055 	!WORD	0		
	!BYTE	$7A			; SAW	_D044+0
_F056 	!WORD	_D044+0		
	!BYTE	$50			; BRNCH	_B045
	!WORD	_B045-*
_B043 
; utilsrc/apple/del.pla: 0130:             //
; utilsrc/apple/del.pla: 0131:             // Add to file list
; utilsrc/apple/del.pla: 0132:             //
; utilsrc/apple/del.pla: 0133:             fileptr = heapalloc(^arg + 1)
; utilsrc/apple/del.pla: 0134:             struprcpy(fileptr, arg)
; utilsrc/apple/del.pla: 0135:             filecnt++
	!BYTE	$6A			; LAW	_D041+0
_F057 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_X014
_F058 	!WORD	0		
	!BYTE	$7E			; DAW	_D045+0
_F059 	!WORD	_D045+0		
	!BYTE	$6A			; LAW	_D041+0
_F060 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C000
_F061 	!WORD	_C000		
	!BYTE	$6A			; LAW	_D046+0
_F062 	!WORD	_D046+0		
	!BYTE	$8C			; INCR
; utilsrc/apple/del.pla: 0136:             arg = argNext(arg)
; utilsrc/apple/del.pla: 0137:         loop
	!BYTE	$7A			; SAW	_D046+0
_F063 	!WORD	_D046+0		
	!BYTE	$6A			; LAW	_D041+0
_F064 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_X033
_F065 	!WORD	0		
	!BYTE	$7A			; SAW	_D041+0
_F066 	!WORD	_D041+0		
_B045 
	!BYTE	$6A			; LAW	_D041+0
_F067 	!WORD	_D041+0		
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B043
	!WORD	_B043-*
_B044 
; utilsrc/apple/del.pla: 0138:         fileptr = filelist
; utilsrc/apple/del.pla: 0139:         while filecnt
	!BYTE	$6A			; LAW	_D044+0
_F068 	!WORD	_D044+0		
	!BYTE	$7A			; SAW	_D045+0
_F069 	!WORD	_D045+0		
	!BYTE	$50			; BRNCH	_B048
	!WORD	_B048-*
_B046 
; utilsrc/apple/del.pla: 0140:             //
; utilsrc/apple/del.pla: 0141:             // Delete files in list
; utilsrc/apple/del.pla: 0142:             //
; utilsrc/apple/del.pla: 0143:             if recurse and fileio:getfileinfo(fileptr, @fileinfo) == FILE_ERR_OK and (fileinfo.storage_type & $0D == $0D)
; utilsrc/apple/del.pla: 0144:                 strcpy(@path,fileptr)
; utilsrc/apple/del.pla: 0145:                 strcat(@path, "/")
	!BYTE	$6A			; LAW	_D042+0
_F070 	!WORD	_D042+0		
	!BYTE	$AC			; BRAND	_B049
	!WORD	_B049-*
	!BYTE	$6A			; LAW	_D045+0
_F071 	!WORD	_D045+0		
	!BYTE	$26			; LA	_D048+0
_F072 	!WORD	_D048+0		
	!BYTE	$6A			; LAW	_X034+4
_F073 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B050
	!WORD	_B050-*
	!BYTE	$68			; LAB	_D048+4
_F074 	!WORD	_D048+4		
	!BYTE	$3C,$0D			; ANDI	13
	!BYTE	$1A			; CN	13
	!BYTE	$40			; ISEQ
_B050 
_B049 
	!BYTE	$4C			; BRFLS	_B051
	!WORD	_B051-*
	!BYTE	$26			; LA	_D047+0
_F075 	!WORD	_D047+0		
	!BYTE	$6A			; LAW	_D045+0
_F076 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_X019
_F077 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D047+0
_F078 	!WORD	_D047+0		
	!BYTE	$2E			; CS
	!BYTE	$01
	!BYTE	$2F
	!BYTE	$54			; CALL	_X020
_F079 	!WORD	0		
	!BYTE	$30			; DROP 
; utilsrc/apple/del.pla: 0146:                 delfiles(@path)
; utilsrc/apple/del.pla: 0147:             fin
	!BYTE	$26			; LA	_D047+0
_F080 	!WORD	_D047+0		
	!BYTE	$54			; CALL	_C002
_F081 	!WORD	_C002		
_B051 
_B052 
; utilsrc/apple/del.pla: 0148:             delfiles(fileptr)
; utilsrc/apple/del.pla: 0149:             fileptr = fileptr + ^fileptr + 1
; utilsrc/apple/del.pla: 0150:             filecnt--
	!BYTE	$6A			; LAW	_D045+0
_F082 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_C002
_F083 	!WORD	_C002		
	!BYTE	$6A			; LAW	_D045+0
_F084 	!WORD	_D045+0		
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$7A			; SAW	_D045+0
_F085 	!WORD	_D045+0		
	!BYTE	$6A			; LAW	_D046+0
_F086 	!WORD	_D046+0		
	!BYTE	$8E			; DECR
; utilsrc/apple/del.pla: 0151:         loop
	!BYTE	$7A			; SAW	_D046+0
_F087 	!WORD	_D046+0		
_B048 
	!BYTE	$6A			; LAW	_D046+0
_F088 	!WORD	_D046+0		
	!BYTE	$4E			; BRTRU	_B046
	!WORD	_B046-*
_B047 
; utilsrc/apple/del.pla: 0152:     else
	!BYTE	$50			; BRNCH	_B042
	!WORD	_B042-*
_B041 
; utilsrc/apple/del.pla: 0153:         puts("Usage: +DEL <FILE>+\n")
	!BYTE	$2E			; CS
	!BYTE	$14
	!BYTE	$55,$73,$61,$67,$65,$3A,$20,$2B
	!BYTE	$44,$45,$4C,$20,$3C,$46,$49,$4C
	!BYTE	$45,$3E,$2B,$0D
	!BYTE	$54			; CALL	_X004
_F089 	!WORD	0		
; utilsrc/apple/del.pla: 0154:     fin
_B042 
; utilsrc/apple/del.pla: 0155: fin
_B033 
_B034 
; utilsrc/apple/del.pla: 0156: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	4
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	15			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	40			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	38			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	32			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	14			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F059-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F060-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F061-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F062-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F063-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F064-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F065-_SEGBEGIN		
	!BYTE	33			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F066-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F067-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F068-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F069-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F070-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F071-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F072-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F073-_SEGBEGIN		
	!BYTE	34			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F074-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F075-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F076-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F077-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F078-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F079-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F080-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F081-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F082-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F083-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F084-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F085-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F086-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F087-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F088-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F089-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: HEAPMARK
	!BYTE	$C8,$C5,$C1,$D0,$CD,$C1,$D2,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	12			; ESD INDEX
	; DCI STRING: HEAPALLOC
	!BYTE	$C8,$C5,$C1,$D0,$C1,$CC,$CC,$CF,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	14			; ESD INDEX
	; DCI STRING: HEAPRELEASE
	!BYTE	$C8,$C5,$C1,$D0,$D2,$C5,$CC,$C5,$C1,$D3,$45
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	15			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: STRCAT
	!BYTE	$D3,$D4,$D2,$C3,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	20			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: EXCEPT
	!BYTE	$C5,$D8,$C3,$C5,$D0,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	32			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	33			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	34			; ESD INDEX
	; DCI STRING: MATCHLIST
	!BYTE	$CD,$C1,$D4,$C3,$C8,$CC,$C9,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	38			; ESD INDEX
	; DCI STRING: FILEFROMPATH
	!BYTE	$C6,$C9,$CC,$C5,$C6,$D2,$CF,$CD,$D0,$C1,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	40			; ESD INDEX
	!BYTE	$00			; END OF ESD
