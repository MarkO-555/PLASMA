; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; utilsrc/apple/jitune.pla: 0001: //
; utilsrc/apple/jitune.pla: 0002: // PLASMA JIT bytecode compiler tuner
; utilsrc/apple/jitune.pla: 0003: //
; utilsrc/apple/jitune.pla: 0004: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; utilsrc/apple/jitune.pla: 0004: 
; utilsrc/apple/jitune.pla: 0005: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X028
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X029
					; ARGNEXT -> X030
; inc/args.plh: 0003: end
; utilsrc/apple/jitune.pla: 0005: 
; utilsrc/apple/jitune.pla: 0006: 
; utilsrc/apple/jitune.pla: 0007: var arg, val
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D031 	!FILL	2			; arg, val
_D032 	!FILL	2			; val
; utilsrc/apple/jitune.pla: 0008: 
; utilsrc/apple/jitune.pla: 0009: def atoi(strptr)
_SUBSEG 				; BYTECODE STARTS
					; strptr -> [0]
_C000 					; atoi()
; utilsrc/apple/jitune.pla: 0010:     var num, len
					; num -> [2]
					; len -> [4]
; utilsrc/apple/jitune.pla: 0011: 
; utilsrc/apple/jitune.pla: 0012:     num = 0
	!BYTE	$58,$06,$01		; ENTER	6,1
; utilsrc/apple/jitune.pla: 0013:     len = ^strptr
; utilsrc/apple/jitune.pla: 0014:     strptr++
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; utilsrc/apple/jitune.pla: 0015:     while len and ^strptr >= '0' and ^strptr <= '9'
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B001 
; utilsrc/apple/jitune.pla: 0016:         num = num * 10 + ^strptr - '0'
; utilsrc/apple/jitune.pla: 0017:         strptr++
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$14			; CN	10
	!BYTE	$86			; MUL
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$3A,$30			; SUBI	48
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; utilsrc/apple/jitune.pla: 0018:         len--
	!BYTE	$76,$00			; SLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8E			; DECR
; utilsrc/apple/jitune.pla: 0019:     loop
	!BYTE	$76,$04			; SLW	[4]
_B003 
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$AC			; BRAND	_B004
	!WORD	_B004-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B005
	!WORD	_B005-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B005 
_B004 
	!BYTE	$4E			; BRTRU	_B001
	!WORD	_B001-*
_B002 
; utilsrc/apple/jitune.pla: 0020:     return num
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$06			; LEAVE	6
; utilsrc/apple/jitune.pla: 0021: end
; utilsrc/apple/jitune.pla: 0022: 
; utilsrc/apple/jitune.pla: 0023: arg = argNext(argFirst)
_INIT 
; utilsrc/apple/jitune.pla: 0024: if ^arg
; utilsrc/apple/jitune.pla: 0025:     if arg->1 >= '0' and arg->1 <= '9'
; utilsrc/apple/jitune.pla: 0026:         val = atoi(arg)
; utilsrc/apple/jitune.pla: 0027:         if val > 255
; utilsrc/apple/jitune.pla: 0028:             val = 255
; utilsrc/apple/jitune.pla: 0029:         fin
	!BYTE	$54			; CALL	_X029
_F000 	!WORD	0		
	!BYTE	$54			; CALL	_X030
_F001 	!WORD	0		
	!BYTE	$7A			; SAW	_D031+0
_F002 	!WORD	_D031+0		
	!BYTE	$6A			; LAW	_D031+0
_F003 	!WORD	_D031+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B006
	!WORD	_B006-*
	!BYTE	$6A			; LAW	_D031+0
_F004 	!WORD	_D031+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$30			; CB	48
	!BYTE	$48			; ISGE
	!BYTE	$AC			; BRAND	_B008
	!WORD	_B008-*
	!BYTE	$6A			; LAW	_D031+0
_F005 	!WORD	_D031+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$39			; CB	57
	!BYTE	$4A			; ISLE
_B008 
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$6A			; LAW	_D031+0
_F006 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_C000
_F007 	!WORD	_C000		
	!BYTE	$7E			; DAW	_D032+0
_F008 	!WORD	_D032+0		
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B011
	!WORD	_B011-*
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$7A			; SAW	_D032+0
_F009 	!WORD	_D032+0		
_B011 
_B012 
; utilsrc/apple/jitune.pla: 0030:         cmdsys.jitcount = val
; utilsrc/apple/jitune.pla: 0031:         arg = argNext(arg)
; utilsrc/apple/jitune.pla: 0032:         if ^arg
; utilsrc/apple/jitune.pla: 0033:             val = atoi(arg)
; utilsrc/apple/jitune.pla: 0034:             if val > 255
; utilsrc/apple/jitune.pla: 0035:                 val = 255
; utilsrc/apple/jitune.pla: 0036:             fin
	!BYTE	$6A			; LAW	_D032+0
_F010 	!WORD	_D032+0		
	!BYTE	$78			; SAB	_X000+17
_F011 	!WORD	0+17		
	!BYTE	$6A			; LAW	_D031+0
_F012 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_X030
_F013 	!WORD	0		
	!BYTE	$7A			; SAW	_D031+0
_F014 	!WORD	_D031+0		
	!BYTE	$6A			; LAW	_D031+0
_F015 	!WORD	_D031+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$6A			; LAW	_D031+0
_F016 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_C000
_F017 	!WORD	_C000		
	!BYTE	$7E			; DAW	_D032+0
_F018 	!WORD	_D032+0		
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$7A			; SAW	_D032+0
_F019 	!WORD	_D032+0		
_B015 
_B016 
; utilsrc/apple/jitune.pla: 0037:             cmdsys.jitsize = val
; utilsrc/apple/jitune.pla: 0038:         fin
	!BYTE	$6A			; LAW	_D032+0
_F020 	!WORD	_D032+0		
	!BYTE	$78			; SAB	_X000+18
_F021 	!WORD	0+18		
_B013 
_B014 
; utilsrc/apple/jitune.pla: 0039:     else
	!BYTE	$50			; BRNCH	_B010
	!WORD	_B010-*
_B009 
; utilsrc/apple/jitune.pla: 0040:         puts("Usage: JITUNE WARMUP [CALLCOUNT [MAXSIZE]]\n")
	!BYTE	$2E			; CS
	!BYTE	$2B
	!BYTE	$55,$73,$61,$67,$65,$3A,$20,$4A
	!BYTE	$49,$54,$55,$4E,$45,$20,$57,$41
	!BYTE	$52,$4D,$55,$50,$20,$5B,$43,$41
	!BYTE	$4C,$4C,$43,$4F,$55,$4E,$54,$20
	!BYTE	$5B,$4D,$41,$58,$53,$49,$5A,$45
	!BYTE	$5D,$5D,$0D
	!BYTE	$54			; CALL	_X004
_F022 	!WORD	0		
; utilsrc/apple/jitune.pla: 0041:     fin
_B010 
; utilsrc/apple/jitune.pla: 0042: fin
_B006 
_B007 
; utilsrc/apple/jitune.pla: 0043: puts("JIT Call Count: "); puti(cmdsys.jitcount); putln
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$4A,$49,$54,$20,$43,$61,$6C,$6C
	!BYTE	$20,$43,$6F,$75,$6E,$74,$3A,$20
	!BYTE	$54			; CALL	_X004
_F023 	!WORD	0		
; utilsrc/apple/jitune.pla: 0044: puts("JIT Max Size:   "); puti(cmdsys.jitsize); putln
	!BYTE	$68			; LAB	_X000+17
_F024 	!WORD	0+17		
	!BYTE	$54			; CALL	_X005
_F025 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F026 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$10
	!BYTE	$4A,$49,$54,$20,$4D,$61,$78,$20
	!BYTE	$53,$69,$7A,$65,$3A,$20,$20,$20
	!BYTE	$54			; CALL	_X004
_F027 	!WORD	0		
; utilsrc/apple/jitune.pla: 0045: done
	!BYTE	$68			; LAB	_X000+18
_F028 	!WORD	0+18		
	!BYTE	$54			; CALL	_X005
_F029 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F030 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	5			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTI
	!BYTE	$D0,$D5,$D4,$49
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	5			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	!BYTE	$00			; END OF ESD
