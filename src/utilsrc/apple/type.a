; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; utilsrc/apple/type.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; utilsrc/apple/type.pla: 0001: 
; utilsrc/apple/type.pla: 0002: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X028
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X029
					; ARGNEXT -> X030
; inc/args.plh: 0003: end
; utilsrc/apple/type.pla: 0002: 
; utilsrc/apple/type.pla: 0003: include "inc/fileio.plh"
; inc/fileio.plh: 0001: import fileio
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
					; FILEIO -> X031
; inc/fileio.plh: 0002:     //
; inc/fileio.plh: 0003:     // Useful ProDOS values
; inc/fileio.plh: 0004:     //
; inc/fileio.plh: 0005:     // MACHID is defined in cmdsys.plh
; inc/fileio.plh: 0006:     // Which slot has a ROM
; inc/fileio.plh: 0007:     const SLTBYT = $BF99
					; SLTBYT = 49049
; inc/fileio.plh: 0008:     // Prefix active
; inc/fileio.plh: 0009:     const PFIXPTR = $BF9A
					; PFIXPTR = 49050
; inc/fileio.plh: 0010:     // Memory alocate bitmap
; inc/fileio.plh: 0011:     const MEMTABL = $BF58
					; MEMTABL = 48984
; inc/fileio.plh: 0012:     //
; inc/fileio.plh: 0013:     // SOS/ProDOS error codes
; inc/fileio.plh: 0014:     //
; inc/fileio.plh: 0015:     const FILE_ERR_OK            = $00
					; FILE_ERR_OK = 0
; inc/fileio.plh: 0016:     const FILE_ERR_BAD_CALL_NUM  = $01
					; FILE_ERR_BAD_CALL_NUM = 1
; inc/fileio.plh: 0017:     const FILE_ERR_BAD_PARAM_CNT = $04
					; FILE_ERR_BAD_PARAM_CNT = 4
; inc/fileio.plh: 0018:     const FILE_ERR_INT_TBL_FULL  = $25
					; FILE_ERR_INT_TBL_FULL = 37
; inc/fileio.plh: 0019:     const FILE_ERR_IO            = $27
					; FILE_ERR_IO = 39
; inc/fileio.plh: 0020:     //
; inc/fileio.plh: 0021:     // File entry struc
; inc/fileio.plh: 0022:     //
; inc/fileio.plh: 0023:     struc t_fileentry
; inc/fileio.plh: 0024:         byte store_namelen
					; store_namelen = 0
; inc/fileio.plh: 0025:         byte entry_name[15]
					; entry_name = 1
; inc/fileio.plh: 0026:         byte entry_type
					; entry_type = 16
; inc/fileio.plh: 0027:         word entry_keyptr
					; entry_keyptr = 17
; inc/fileio.plh: 0028:         word entry_blocks
					; entry_blocks = 19
; inc/fileio.plh: 0029:         word entry_EOFL
					; entry_EOFL = 21
; inc/fileio.plh: 0030:         byte entry_EOFH
					; entry_EOFH = 23
; inc/fileio.plh: 0031:         word entry_create[2]
					; entry_create = 24
; inc/fileio.plh: 0032:         byte entry_version
					; entry_version = 28
; inc/fileio.plh: 0033:         byte entry_minver
					; entry_minver = 29
; inc/fileio.plh: 0034:         byte entry_access
					; entry_access = 30
; inc/fileio.plh: 0035:         word entry_aux
					; entry_aux = 31
; inc/fileio.plh: 0036:         word entry_mod[2]
					; entry_mod = 33
; inc/fileio.plh: 0037:         word entry_headptr
					; entry_headptr = 37
; inc/fileio.plh: 0038:     end
					; t_fileentry = 39
; inc/fileio.plh: 0039:     //
; inc/fileio.plh: 0040:     // File info struc
; inc/fileio.plh: 0041:     //
; inc/fileio.plh: 0042:     struc t_fileinfo
; inc/fileio.plh: 0043:         byte file_access
					; file_access = 0
; inc/fileio.plh: 0044:         byte file_type
					; file_type = 1
; inc/fileio.plh: 0045:         word aux_type
					; aux_type = 2
; inc/fileio.plh: 0046:         byte storage_type
					; storage_type = 4
; inc/fileio.plh: 0047:         word blocks_used
					; blocks_used = 5
; inc/fileio.plh: 0048:         word mod_date
					; mod_date = 7
; inc/fileio.plh: 0049:         word mod_time
					; mod_time = 9
; inc/fileio.plh: 0050:         word create_date
					; create_date = 11
; inc/fileio.plh: 0051:         word create_time
					; create_time = 13
; inc/fileio.plh: 0052:     end
					; t_fileinfo = 15
; inc/fileio.plh: 0053:     //
; inc/fileio.plh: 0054:     // File functions
; inc/fileio.plh: 0055:     //
; inc/fileio.plh: 0056:     struc t_fileio
; inc/fileio.plh: 0057:         word getpfx
					; getpfx = 0
; inc/fileio.plh: 0058:         word setpfx
					; setpfx = 2
; inc/fileio.plh: 0059:         word getfileinfo
					; getfileinfo = 4
; inc/fileio.plh: 0060:         word setfileinfo
					; setfileinfo = 6
; inc/fileio.plh: 0061:         word geteof
					; geteof = 8
; inc/fileio.plh: 0062:         word seteof
					; seteof = 10
; inc/fileio.plh: 0063:         word iobufalloc
					; iobufalloc = 12
; inc/fileio.plh: 0064:         word open
					; open = 14
; inc/fileio.plh: 0065:         word close
					; close = 16
; inc/fileio.plh: 0066:         word read
					; read = 18
; inc/fileio.plh: 0067:         word write
					; write = 20
; inc/fileio.plh: 0068:         word create
					; create = 22
; inc/fileio.plh: 0069:         word destroy
					; destroy = 24
; inc/fileio.plh: 0070:         word rename
					; rename = 26
; inc/fileio.plh: 0071:         word newline
					; newline = 28
; inc/fileio.plh: 0072:         word online
					; online = 30
; inc/fileio.plh: 0073:         word readblock
					; readblock = 32
; inc/fileio.plh: 0074:         word writeblock
					; writeblock = 34
; inc/fileio.plh: 0075:     end
					; t_fileio = 36
; inc/fileio.plh: 0076:     //
; inc/fileio.plh: 0077:     // Globally accessible error code
; inc/fileio.plh: 0078:     //
; inc/fileio.plh: 0079:     byte perr
					; PERR -> X032
; inc/fileio.plh: 0080: end
; utilsrc/apple/type.pla: 0003: 
; utilsrc/apple/type.pla: 0004: 
; utilsrc/apple/type.pla: 0005: char[64] filename
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D033 	!FILL	64			; filename
; utilsrc/apple/type.pla: 0006: res[t_fileinfo] fileinfo
_D034 	!FILL	15			; fileinfo
; utilsrc/apple/type.pla: 0007: var arg, type, aux
_D035 	!FILL	2			; arg, type, aux
_D036 	!FILL	2			; type, aux
_D037 	!FILL	2			; aux
; utilsrc/apple/type.pla: 0008: //
; utilsrc/apple/type.pla: 0009: // Convert byte to two hex chars
; utilsrc/apple/type.pla: 0010: //
; utilsrc/apple/type.pla: 0011: //def putb(b)#0
; utilsrc/apple/type.pla: 0012: //    char h
; utilsrc/apple/type.pla: 0013: //
; utilsrc/apple/type.pla: 0014: //    h = ((b >> 4) & $0F) + '0'
; utilsrc/apple/type.pla: 0015: //    if h > '9'
; utilsrc/apple/type.pla: 0016: //        h = h + 7
; utilsrc/apple/type.pla: 0017: //    fin
; utilsrc/apple/type.pla: 0018: //    putc(h)
; utilsrc/apple/type.pla: 0019: //    h = (b & $0F) + '0'
; utilsrc/apple/type.pla: 0020: //    if h > '9'
; utilsrc/apple/type.pla: 0021: //        h = h + 7
; utilsrc/apple/type.pla: 0022: //    fin
; utilsrc/apple/type.pla: 0023: //    putc(h)
; utilsrc/apple/type.pla: 0024: //end
; utilsrc/apple/type.pla: 0025: def htoi(hexptr)
_SUBSEG 				; BYTECODE STARTS
					; hexptr -> [0]
_C000 					; htoi()
; utilsrc/apple/type.pla: 0026:     var val, i, n
					; val -> [2]
					; i -> [4]
					; n -> [6]
; utilsrc/apple/type.pla: 0027: 
; utilsrc/apple/type.pla: 0028:     val = 0
	!BYTE	$58,$08,$01		; ENTER	8,1
; utilsrc/apple/type.pla: 0029:     for i = 1 to ^hexptr
	!BYTE	$00			; CN	0
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B001
	!WORD	_B001-*
_B002 
	!BYTE	$6E,$04			; DLW	[4]
; utilsrc/apple/type.pla: 0030:         n = toupper(^(hexptr + i)) - '0'
; utilsrc/apple/type.pla: 0031:         if n > 9
; utilsrc/apple/type.pla: 0032:             n = n - 7
; utilsrc/apple/type.pla: 0033:         fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B2,$04			; ADDLW	[4]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F000 	!WORD	0		
	!BYTE	$3A,$30			; SUBI	48
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$12			; CN	9
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$3A,$07			; SUBI	7
	!BYTE	$76,$06			; SLW	[6]
_B004 
_B005 
; utilsrc/apple/type.pla: 0034:         if n > 15 or n < 0
; utilsrc/apple/type.pla: 0035:             return val
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$1E			; CN	15
	!BYTE	$44			; ISGT
	!BYTE	$AE			; BROR	_B006
	!WORD	_B006-*
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
_B006 
	!BYTE	$4C			; BRFLS	_B007
	!WORD	_B007-*
	!BYTE	$32			; DROP2
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$08			; LEAVE	8
; utilsrc/apple/type.pla: 0036:         fin
_B007 
_B008 
; utilsrc/apple/type.pla: 0037:         val = (val << 4) + n
; utilsrc/apple/type.pla: 0038:     next
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$08			; CN	4
	!BYTE	$9A			; SHL
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$76,$02			; SLW	[2]
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$30			; DROP 
; utilsrc/apple/type.pla: 0039:     return val
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$08			; LEAVE	8
; utilsrc/apple/type.pla: 0040: end
; utilsrc/apple/type.pla: 0041: //
; utilsrc/apple/type.pla: 0042: // Check arguments and file types
; utilsrc/apple/type.pla: 0043: //
; utilsrc/apple/type.pla: 0044: arg = argNext(argFirst)
_INIT 
; utilsrc/apple/type.pla: 0045: if ^arg
; utilsrc/apple/type.pla: 0046:     strcpy(@filename, arg)
; utilsrc/apple/type.pla: 0047:     //
; utilsrc/apple/type.pla: 0048:     // Check if file exists
; utilsrc/apple/type.pla: 0049:     //
; utilsrc/apple/type.pla: 0050:     if fileio:getfileinfo(@filename, @fileinfo) == FILE_ERR_OK
; utilsrc/apple/type.pla: 0051:         //
; utilsrc/apple/type.pla: 0052:         // Check if re-typing a directory
; utilsrc/apple/type.pla: 0053:         //
; utilsrc/apple/type.pla: 0054:         if fileinfo.file_type <> $0F
; utilsrc/apple/type.pla: 0055:             //
; utilsrc/apple/type.pla: 0056:             // Check for optional overrides
; utilsrc/apple/type.pla: 0057:             //
; utilsrc/apple/type.pla: 0058:             arg = argNext(arg)
; utilsrc/apple/type.pla: 0059:             if ^arg
; utilsrc/apple/type.pla: 0060:                 type = htoi(arg)
; utilsrc/apple/type.pla: 0061:                 if type > 255
; utilsrc/apple/type.pla: 0062:                     puts("TYPE value out of range\n")
	!BYTE	$54			; CALL	_X029
_F001 	!WORD	0		
	!BYTE	$54			; CALL	_X030
_F002 	!WORD	0		
	!BYTE	$7A			; SAW	_D035+0
_F003 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_D035+0
_F004 	!WORD	_D035+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
	!BYTE	$26			; LA	_D033+0
_F005 	!WORD	_D033+0		
	!BYTE	$6A			; LAW	_D035+0
_F006 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_X019
_F007 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$26			; LA	_D033+0
_F008 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D034+0
_F009 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X031+4
_F010 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B011
	!WORD	_B011-*
	!BYTE	$68			; LAB	_D034+1
_F011 	!WORD	_D034+1		
	!BYTE	$1E			; CN	15
	!BYTE	$22			; BREQ	_B013
	!WORD	_B013-*
	!BYTE	$6A			; LAW	_D035+0
_F012 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_X030
_F013 	!WORD	0		
	!BYTE	$7A			; SAW	_D035+0
_F014 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_D035+0
_F015 	!WORD	_D035+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$6A			; LAW	_D035+0
_F016 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_C000
_F017 	!WORD	_C000		
	!BYTE	$7E			; DAW	_D036+0
_F018 	!WORD	_D036+0		
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$2E			; CS
	!BYTE	$18
	!BYTE	$54,$59,$50,$45,$20,$76,$61,$6C
	!BYTE	$75,$65,$20,$6F,$75,$74,$20,$6F
	!BYTE	$66,$20,$72,$61,$6E,$67,$65,$0D
	!BYTE	$54			; CALL	_X004
_F019 	!WORD	0		
; utilsrc/apple/type.pla: 0063:                     return
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/type.pla: 0064:                 fin
_B017 
_B018 
; utilsrc/apple/type.pla: 0065:                 //
; utilsrc/apple/type.pla: 0066:                 // Can't change something into  directory
; utilsrc/apple/type.pla: 0067:                 //
; utilsrc/apple/type.pla: 0068:                 if type <> $0F
; utilsrc/apple/type.pla: 0069:                     fileinfo.file_type = type
; utilsrc/apple/type.pla: 0070:                     arg = argNext(arg)
; utilsrc/apple/type.pla: 0071:                     if ^arg
; utilsrc/apple/type.pla: 0072:                         aux = htoi(arg)
; utilsrc/apple/type.pla: 0073:                         fileinfo:aux_type = aux
; utilsrc/apple/type.pla: 0074:                     fin
	!BYTE	$6A			; LAW	_D036+0
_F020 	!WORD	_D036+0		
	!BYTE	$1E			; CN	15
	!BYTE	$22			; BREQ	_B019
	!WORD	_B019-*
	!BYTE	$6A			; LAW	_D036+0
_F021 	!WORD	_D036+0		
	!BYTE	$78			; SAB	_D034+1
_F022 	!WORD	_D034+1		
	!BYTE	$6A			; LAW	_D035+0
_F023 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_X030
_F024 	!WORD	0		
	!BYTE	$7A			; SAW	_D035+0
_F025 	!WORD	_D035+0		
	!BYTE	$6A			; LAW	_D035+0
_F026 	!WORD	_D035+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B021
	!WORD	_B021-*
	!BYTE	$6A			; LAW	_D035+0
_F027 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_C000
_F028 	!WORD	_C000		
	!BYTE	$7E			; DAW	_D037+0
_F029 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_D034+2
_F030 	!WORD	_D034+2		
_B021 
_B022 
; utilsrc/apple/type.pla: 0075:                     //
; utilsrc/apple/type.pla: 0076:                     // Update file type and aux values
; utilsrc/apple/type.pla: 0077:                     //
; utilsrc/apple/type.pla: 0078:                     if fileio:setfileinfo(@filename, @fileinfo) == FILE_ERR_OK
; utilsrc/apple/type.pla: 0079:                         if fileio:getfileinfo(@filename, @fileinfo) <> FILE_ERR_OK
; utilsrc/apple/type.pla: 0080:                             puts("Unable to reload file info: "); puts(@filename)
	!BYTE	$26			; LA	_D033+0
_F031 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D034+0
_F032 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X031+6
_F033 	!WORD	0+6		
	!BYTE	$56			; ICAL
	!BYTE	$4E			; BRTRU	_B023
	!WORD	_B023-*
	!BYTE	$26			; LA	_D033+0
_F034 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D034+0
_F035 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_X031+4
_F036 	!WORD	0+4		
	!BYTE	$56			; ICAL
	!BYTE	$4C			; BRFLS	_B025
	!WORD	_B025-*
	!BYTE	$2E			; CS
	!BYTE	$1C
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$72,$65,$6C,$6F,$61,$64
	!BYTE	$20,$66,$69,$6C,$65,$20,$69,$6E
	!BYTE	$66,$6F,$3A,$20
	!BYTE	$54			; CALL	_X004
_F037 	!WORD	0		
; utilsrc/apple/type.pla: 0081:                         fin
	!BYTE	$26			; LA	_D033+0
_F038 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_X004
_F039 	!WORD	0		
_B025 
_B026 
; utilsrc/apple/type.pla: 0082:                     else
	!BYTE	$50			; BRNCH	_B024
	!WORD	_B024-*
_B023 
; utilsrc/apple/type.pla: 0083:                         puts("Unable to change TYPE & AUX values: "); puts(@filename)
	!BYTE	$2E			; CS
	!BYTE	$24
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$63,$68,$61,$6E,$67,$65
	!BYTE	$20,$54,$59,$50,$45,$20,$26,$20
	!BYTE	$41,$55,$58,$20,$76,$61,$6C,$75
	!BYTE	$65,$73,$3A,$20
	!BYTE	$54			; CALL	_X004
_F040 	!WORD	0		
; utilsrc/apple/type.pla: 0084:                         return
	!BYTE	$26			; LA	_D033+0
_F041 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_X004
_F042 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/type.pla: 0085:                     fin
_B024 
; utilsrc/apple/type.pla: 0086:                 fin
_B019 
_B020 
; utilsrc/apple/type.pla: 0087:             fin
_B015 
_B016 
; utilsrc/apple/type.pla: 0088:         else
	!BYTE	$50			; BRNCH	_B014
	!WORD	_B014-*
_B013 
; utilsrc/apple/type.pla: 0089:             puts("Unable to get file info: "); puts(@filename); putln
	!BYTE	$2E			; CS
	!BYTE	$19
	!BYTE	$55,$6E,$61,$62,$6C,$65,$20,$74
	!BYTE	$6F,$20,$67,$65,$74,$20,$66,$69
	!BYTE	$6C,$65,$20,$69,$6E,$66,$6F,$3A
	!BYTE	$20
	!BYTE	$54			; CALL	_X004
_F043 	!WORD	0		
; utilsrc/apple/type.pla: 0090:         fin
	!BYTE	$26			; LA	_D033+0
_F044 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_X004
_F045 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F046 	!WORD	0		
_B014 
; utilsrc/apple/type.pla: 0091:     fin
_B011 
_B012 
; utilsrc/apple/type.pla: 0092:     puts(@filename); putc(':')
; utilsrc/apple/type.pla: 0093:     putc('$'); putb(fileinfo.file_type); putc(' ')
; utilsrc/apple/type.pla: 0094:     putc('$'); puth(fileinfo:aux_type); putln
; utilsrc/apple/type.pla: 0095:     return
	!BYTE	$26			; LA	_D033+0
_F047 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_X004
_F048 	!WORD	0		
	!BYTE	$2A,$3A			; CB	58
	!BYTE	$54			; CALL	_X002
_F049 	!WORD	0		
	!BYTE	$2A,$24			; CB	36
	!BYTE	$54			; CALL	_X002
_F050 	!WORD	0		
	!BYTE	$68			; LAB	_D034+1
_F051 	!WORD	_D034+1		
	!BYTE	$54			; CALL	_X008
_F052 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F053 	!WORD	0		
	!BYTE	$2A,$24			; CB	36
	!BYTE	$54			; CALL	_X002
_F054 	!WORD	0		
	!BYTE	$6A			; LAW	_D034+2
_F055 	!WORD	_D034+2		
	!BYTE	$54			; CALL	_X009
_F056 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F057 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
; utilsrc/apple/type.pla: 0096: fin
_B009 
_B010 
; utilsrc/apple/type.pla: 0097: puts("Usage: +TYPE FILE [HEXTYPE [HEXAUX]]\n")
	!BYTE	$2E			; CS
	!BYTE	$25
	!BYTE	$55,$73,$61,$67,$65,$3A,$20,$2B
	!BYTE	$54,$59,$50,$45,$20,$46,$49,$4C
	!BYTE	$45,$20,$5B,$48,$45,$58,$54,$59
	!BYTE	$50,$45,$20,$5B,$48,$45,$58,$41
	!BYTE	$55,$58,$5D,$5D,$0D
	!BYTE	$54			; CALL	_X004
_F058 	!WORD	0		
; utilsrc/apple/type.pla: 0098: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	2
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	31			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	8			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F057-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F058-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTB
	!BYTE	$D0,$D5,$D4,$42
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	8			; ESD INDEX
	; DCI STRING: PUTH
	!BYTE	$D0,$D5,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	9			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	; DCI STRING: FILEIO
	!BYTE	$C6,$C9,$CC,$C5,$C9,$4F
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	31			; ESD INDEX
	!BYTE	$00			; END OF ESD
