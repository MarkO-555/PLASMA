; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; utilsrc/apple/zipchip.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; utilsrc/apple/zipchip.pla: 0001: 
; utilsrc/apple/zipchip.pla: 0002: include "inc/args.plh"
; inc/args.plh: 0001: import args
	; DCI STRING: ARGS
	!BYTE	$C1,$D2,$C7,$53
					; ARGS -> X028
; inc/args.plh: 0002:     predef  argFirst, argNext(str)
					; ARGFIRST -> X029
					; ARGNEXT -> X030
; inc/args.plh: 0003: end
; utilsrc/apple/zipchip.pla: 0002: 
; utilsrc/apple/zipchip.pla: 0003: //
; utilsrc/apple/zipchip.pla: 0004: // ZIP Chip control
; utilsrc/apple/zipchip.pla: 0005: //
; utilsrc/apple/zipchip.pla: 0006: var arg, status, slots, clock, state, cache
	!BYTE	$00			; END OF MODULE DEPENDENCIES
_D031 	!FILL	2			; arg, status, slots, clock, state, cache
_D032 	!FILL	2			; status, slots, clock, state, cache
_D033 	!FILL	2			; slots, clock, state, cache
_D034 	!FILL	2			; clock, state, cache
_D035 	!FILL	2			; state, cache
_D036 	!FILL	2			; cache
; utilsrc/apple/zipchip.pla: 0007: 
; utilsrc/apple/zipchip.pla: 0008: byte _unlock[]
_D037 					; _unlock[]
; utilsrc/apple/zipchip.pla: 0009: byte = $A9, $5A      // LDA #$5A
	!BYTE	$A9
	!BYTE	$5A
; utilsrc/apple/zipchip.pla: 0010: byte = $8D, $5A, $C0 // STA $C05A
	!BYTE	$8D
	!BYTE	$5A
	!BYTE	$C0
; utilsrc/apple/zipchip.pla: 0011: byte = $8D, $5A, $C0 // STA $C05A
	!BYTE	$8D
	!BYTE	$5A
	!BYTE	$C0
; utilsrc/apple/zipchip.pla: 0012: byte = $8D, $5A, $C0 // STA $C05A
	!BYTE	$8D
	!BYTE	$5A
	!BYTE	$C0
; utilsrc/apple/zipchip.pla: 0013: byte = $8D, $5A, $C0 // STA $C05A
	!BYTE	$8D
	!BYTE	$5A
	!BYTE	$C0
; utilsrc/apple/zipchip.pla: 0014: byte = $60           // RTS
	!BYTE	$60
; utilsrc/apple/zipchip.pla: 0015: 
; utilsrc/apple/zipchip.pla: 0016: def unlock#0
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
_C000 					; unlock()
; utilsrc/apple/zipchip.pla: 0017:   (@_unlock)()#0 // Unlock regs (has to be machine code)
; utilsrc/apple/zipchip.pla: 0018: end
	!BYTE	$54			; CALL	_D037
_F000 	!WORD	_D037		
	!BYTE	$5C			; RET
; utilsrc/apple/zipchip.pla: 0019: def lock#0
_C001 					; lock()
; utilsrc/apple/zipchip.pla: 0020:   ^$C05A = $A5 // Lock regs
; utilsrc/apple/zipchip.pla: 0021: end
	!BYTE	$2A,$A5			; CB	165
	!BYTE	$78,$5A,$C0		; SAB	49242
	!BYTE	$5C			; RET
; utilsrc/apple/zipchip.pla: 0022: 
; utilsrc/apple/zipchip.pla: 0023: arg = argNext(argFirst)
_INIT 
; utilsrc/apple/zipchip.pla: 0024: if ^arg
; utilsrc/apple/zipchip.pla: 0025:   when toupper(arg->[1])
	!BYTE	$54			; CALL	_X029
_F001 	!WORD	0		
	!BYTE	$54			; CALL	_X030
_F002 	!WORD	0		
	!BYTE	$7A			; SAW	_D031+0
_F003 	!WORD	_D031+0		
	!BYTE	$6A			; LAW	_D031+0
_F004 	!WORD	_D031+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$6A			; LAW	_D031+0
_F005 	!WORD	_D031+0		
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X021
_F006 	!WORD	0		
	!BYTE	$52			; SEL
	!WORD	_B004-*
; utilsrc/apple/zipchip.pla: 0026:     is 'S' // Slow to 1 MHz
_B005 
; utilsrc/apple/zipchip.pla: 0027:       unlock
; utilsrc/apple/zipchip.pla: 0028:       ^$C05A = $00
; utilsrc/apple/zipchip.pla: 0029:       lock
; utilsrc/apple/zipchip.pla: 0030:       puts("Slow speed\n")
	!BYTE	$54			; CALL	_C000
_F007 	!WORD	_C000		
	!BYTE	$00			; CN	0
	!BYTE	$78,$5A,$C0		; SAB	49242
	!BYTE	$54			; CALL	_C001
_F008 	!WORD	_C001		
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$53,$6C,$6F,$77,$20,$73,$70,$65
	!BYTE	$65,$64,$0D
	!BYTE	$54			; CALL	_X004
_F009 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0031:       break
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
; utilsrc/apple/zipchip.pla: 0032:     is 'F' // Enable acceleration
_B006 
; utilsrc/apple/zipchip.pla: 0033:       unlock
; utilsrc/apple/zipchip.pla: 0034:       ^$C05B = $FF
; utilsrc/apple/zipchip.pla: 0035:       lock
; utilsrc/apple/zipchip.pla: 0036:       puts("Fast speed\n")
	!BYTE	$54			; CALL	_C000
_F010 	!WORD	_C000		
	!BYTE	$2A,$FF			; CB	255
	!BYTE	$78,$5B,$C0		; SAB	49243
	!BYTE	$54			; CALL	_C001
_F011 	!WORD	_C001		
	!BYTE	$2E			; CS
	!BYTE	$0B
	!BYTE	$46,$61,$73,$74,$20,$73,$70,$65
	!BYTE	$65,$64,$0D
	!BYTE	$54			; CALL	_X004
_F012 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0037:       break
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
; utilsrc/apple/zipchip.pla: 0038:   wend
	!BYTE	$50			; BRNCH	_B003
	!WORD	_B003-*
_B004 
	!BYTE	$02			; CASEBLOCK
	!WORD	$0046
	!WORD	_B006-*
	!WORD	$0053
	!WORD	_B005-*
_B003 
; utilsrc/apple/zipchip.pla: 0039: fin
_B001 
_B002 
; utilsrc/apple/zipchip.pla: 0040: unlock
; utilsrc/apple/zipchip.pla: 0041: status = ^$C05B
; utilsrc/apple/zipchip.pla: 0042: slots  = ^$C05C
; utilsrc/apple/zipchip.pla: 0043: clock  = ^$C05D
; utilsrc/apple/zipchip.pla: 0044: state  = ^$C05E
; utilsrc/apple/zipchip.pla: 0045: cache  = ^$C05F
; utilsrc/apple/zipchip.pla: 0046: lock
; utilsrc/apple/zipchip.pla: 0047: ^$C05F // AN3 off
; utilsrc/apple/zipchip.pla: 0048: puts("Status: $"); puth(status); putln
	!BYTE	$54			; CALL	_C000
_F013 	!WORD	_C000		
	!BYTE	$68,$5B,$C0		; LAB	49243
	!BYTE	$7A			; SAW	_D032+0
_F014 	!WORD	_D032+0		
	!BYTE	$68,$5C,$C0		; LAB	49244
	!BYTE	$7A			; SAW	_D033+0
_F015 	!WORD	_D033+0		
	!BYTE	$68,$5D,$C0		; LAB	49245
	!BYTE	$7A			; SAW	_D034+0
_F016 	!WORD	_D034+0		
	!BYTE	$68,$5E,$C0		; LAB	49246
	!BYTE	$7A			; SAW	_D035+0
_F017 	!WORD	_D035+0		
	!BYTE	$68,$5F,$C0		; LAB	49247
	!BYTE	$7A			; SAW	_D036+0
_F018 	!WORD	_D036+0		
	!BYTE	$54			; CALL	_C001
_F019 	!WORD	_C001		
	!BYTE	$68,$5F,$C0		; LAB	49247
	!BYTE	$30			; DROP 
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$53,$74,$61,$74,$75,$73,$3A,$20
	!BYTE	$24
	!BYTE	$54			; CALL	_X004
_F020 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0049: puts("Slots:  $"); puth(slots); putln
	!BYTE	$6A			; LAW	_D032+0
_F021 	!WORD	_D032+0		
	!BYTE	$54			; CALL	_X009
_F022 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F023 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$53,$6C,$6F,$74,$73,$3A,$20,$20
	!BYTE	$24
	!BYTE	$54			; CALL	_X004
_F024 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0050: puts("Clock:  $"); puth(clock); putln
	!BYTE	$6A			; LAW	_D033+0
_F025 	!WORD	_D033+0		
	!BYTE	$54			; CALL	_X009
_F026 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F027 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$43,$6C,$6F,$63,$6B,$3A,$20,$20
	!BYTE	$24
	!BYTE	$54			; CALL	_X004
_F028 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0051: puts("State:  $"); puth(state); putln
	!BYTE	$6A			; LAW	_D034+0
_F029 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_X009
_F030 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F031 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$53,$74,$61,$74,$65,$3A,$20,$20
	!BYTE	$24
	!BYTE	$54			; CALL	_X004
_F032 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0052: puts("Cache:  $"); puth(cache); putln
	!BYTE	$6A			; LAW	_D035+0
_F033 	!WORD	_D035+0		
	!BYTE	$54			; CALL	_X009
_F034 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F035 	!WORD	0		
	!BYTE	$2E			; CS
	!BYTE	$09
	!BYTE	$43,$61,$63,$68,$65,$3A,$20,$20
	!BYTE	$24
	!BYTE	$54			; CALL	_X004
_F036 	!WORD	0		
; utilsrc/apple/zipchip.pla: 0053: done
	!BYTE	$6A			; LAW	_D036+0
_F037 	!WORD	_D036+0		
	!BYTE	$54			; CALL	_X009
_F038 	!WORD	0		
	!BYTE	$54			; CALL	_X003
_F039 	!WORD	0		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	3
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	29			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	30			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	9			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: PUTH
	!BYTE	$D0,$D5,$D4,$48
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	9			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	; DCI STRING: ARGFIRST
	!BYTE	$C1,$D2,$C7,$C6,$C9,$D2,$D3,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	29			; ESD INDEX
	; DCI STRING: ARGNEXT
	!BYTE	$C1,$D2,$C7,$CE,$C5,$D8,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	30			; ESD INDEX
	!BYTE	$00			; END OF ESD
