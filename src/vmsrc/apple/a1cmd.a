; ACME COMPATIBLE OUTPUT
	JMP	_INIT			; MODULE INITIALIZATION ROUTINE
; vmsrc/apple/a1cmd.pla: 0001: const RELADDR      = $1000
					; RELADDR = 4096
; vmsrc/apple/a1cmd.pla: 0002: const inbuff       = $200
					; inbuff = 512
; vmsrc/apple/a1cmd.pla: 0003: const freemem      = $0006
					; freemem = 6
; vmsrc/apple/a1cmd.pla: 0004: //
; vmsrc/apple/a1cmd.pla: 0005: // System flags: memory allocator screen holes.
; vmsrc/apple/a1cmd.pla: 0006: //
; vmsrc/apple/a1cmd.pla: 0007: const restxt1     = $0001
					; restxt1 = 1
; vmsrc/apple/a1cmd.pla: 0008: const restxt2     = $0002
					; restxt2 = 2
; vmsrc/apple/a1cmd.pla: 0009: const resxtxt1    = $0004
					; resxtxt1 = 4
; vmsrc/apple/a1cmd.pla: 0010: const resxtxt2    = $0008
					; resxtxt2 = 8
; vmsrc/apple/a1cmd.pla: 0011: const reshgr1     = $0010
					; reshgr1 = 16
; vmsrc/apple/a1cmd.pla: 0012: const reshgr2     = $0020
					; reshgr2 = 32
; vmsrc/apple/a1cmd.pla: 0013: const resxhgr1    = $0040
					; resxhgr1 = 64
; vmsrc/apple/a1cmd.pla: 0014: const resxhgr2    = $0080
					; resxhgr2 = 128
; vmsrc/apple/a1cmd.pla: 0015: //
; vmsrc/apple/a1cmd.pla: 0016: // Module don't free memory
; vmsrc/apple/a1cmd.pla: 0017: //
; vmsrc/apple/a1cmd.pla: 0018: const modkeep     = $1000
					; modkeep = 4096
; vmsrc/apple/a1cmd.pla: 0019: const modinitkeep = $2000
					; modinitkeep = 8192
; vmsrc/apple/a1cmd.pla: 0020: //
; vmsrc/apple/a1cmd.pla: 0021: // CFFA1 addresses.
; vmsrc/apple/a1cmd.pla: 0022: //
; vmsrc/apple/a1cmd.pla: 0023: const CFFADest     = $00
					; CFFADest = 0
; vmsrc/apple/a1cmd.pla: 0024: const CFFAFileName = $02
					; CFFAFileName = 2
; vmsrc/apple/a1cmd.pla: 0025: const CFFAOldName  = $04
					; CFFAOldName = 4
; vmsrc/apple/a1cmd.pla: 0026: const CFFAFileType = $06
					; CFFAFileType = 6
; vmsrc/apple/a1cmd.pla: 0027: const CFFAAuxType  = $07
					; CFFAAuxType = 7
; vmsrc/apple/a1cmd.pla: 0028: const CFFAFileSize = $09
					; CFFAFileSize = 9
; vmsrc/apple/a1cmd.pla: 0029: const CFFAEntryPtr = $0B
					; CFFAEntryPtr = 11
; vmsrc/apple/a1cmd.pla: 0030: //
; vmsrc/apple/a1cmd.pla: 0031: // Pedefined functions.
; vmsrc/apple/a1cmd.pla: 0032: //
; vmsrc/apple/a1cmd.pla: 0033: predef syscall(cmd,null)#1, call(addr,areg,xreg,yreg,status)#1
; vmsrc/apple/a1cmd.pla: 0034: predef crout()#0, cout(c)#0, prstr(s)#0, print(i)#0, prbyte(b)#0, prword(w)#0
; vmsrc/apple/a1cmd.pla: 0035: predef cin()#1, rdstr(p)#1, toupper(c)#1, strcpy(dst,src)#1, strcat(dst,src)#1
; vmsrc/apple/a1cmd.pla: 0036: predef markheap()#1, allocheap(size)#1, allocalignheap(size, pow2, freeaddr), releaseheap(newheap)#1, availheap()#1
; vmsrc/apple/a1cmd.pla: 0037: predef memset(addr,value,size)#0, memcpy(dst,src,size)#0
; vmsrc/apple/a1cmd.pla: 0038: predef uword_isgt(a,b)#1, uword_isge(a,b)#1, uword_islt(a,b)#1, uword_isle(a,b)#1
; vmsrc/apple/a1cmd.pla: 0039: predef sext(a)#1, divmod(a,b)#2, execmod(modfile)#1
; vmsrc/apple/a1cmd.pla: 0040: //
; vmsrc/apple/a1cmd.pla: 0041: // Exported CMDSYS table
; vmsrc/apple/a1cmd.pla: 0042: //
; vmsrc/apple/a1cmd.pla: 0043: word version    = $0200 // 02.00
_D027 					; version    = $0200 // 02.00
	!WORD	$0200
; vmsrc/apple/a1cmd.pla: 0044: word syspath
_D028 	!FILL	2			; syspath
; vmsrc/apple/a1cmd.pla: 0045: word syscmdln
_D029 	!FILL	2			; syscmdln
; vmsrc/apple/a1cmd.pla: 0046: word            = @execmod
_F000 	!WORD	_P026
; vmsrc/apple/a1cmd.pla: 0047: word systemflags = 0
_D030 					; systemflags = 0
	!WORD	$0000
; vmsrc/apple/a1cmd.pla: 0048: word heap
_D031 	!FILL	2			; heap
; vmsrc/apple/a1cmd.pla: 0049: word symtbl, lastsym
_D032 	!FILL	2			; symtbl, lastsym
_D033 	!FILL	2			; lastsym
; vmsrc/apple/a1cmd.pla: 0050: byte perr, refauto
_D034 	!FILL	1			; perr, refauto
_D035 	!FILL	1			; refauto
; vmsrc/apple/a1cmd.pla: 0051: //
; vmsrc/apple/a1cmd.pla: 0052: // String pool.
; vmsrc/apple/a1cmd.pla: 0053: //
; vmsrc/apple/a1cmd.pla: 0054: byte autorun[]    = "AUTORUN"
_D036 					; autorun[]    = "AUTORUN"
	!BYTE	$07
	!BYTE	$41,$55,$54,$4F,$52,$55,$4E
; vmsrc/apple/a1cmd.pla: 0055: byte verstr[]     = "\nPLASMA BETA"
_D037 					; verstr[]     = "\nPLASMA BETA"
	!BYTE	$0C
	!BYTE	$0D,$50,$4C,$41,$53,$4D,$41,$20
	!BYTE	$42,$45,$54,$41
; vmsrc/apple/a1cmd.pla: 0056: byte freestr[]    = "MEM FREE:$"
_D038 					; freestr[]    = "MEM FREE:$"
	!BYTE	$0A
	!BYTE	$4D,$45,$4D,$20,$46,$52,$45,$45
	!BYTE	$3A,$24
; vmsrc/apple/a1cmd.pla: 0057: byte errorstr[]   = "ERR:$"
_D039 					; errorstr[]   = "ERR:$"
	!BYTE	$05
	!BYTE	$45,$52,$52,$3A,$24
; vmsrc/apple/a1cmd.pla: 0058: byte prompt[]     = "PLASMA"
_D040 					; prompt[]     = "PLASMA"
	!BYTE	$06
	!BYTE	$50,$4C,$41,$53,$4D,$41
; vmsrc/apple/a1cmd.pla: 0059: byte okstr[]      = "OK"
_D041 					; okstr[]      = "OK"
	!BYTE	$02
	!BYTE	$4F,$4B
; vmsrc/apple/a1cmd.pla: 0060: byte huhstr[]     = "?\n"
_D042 					; huhstr[]     = "?\n"
	!BYTE	$02
	!BYTE	$3F,$0D
; vmsrc/apple/a1cmd.pla: 0061: byte hexchar[]    = '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
_D043 					; hexchar[]    = '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
	!BYTE	$30
	!BYTE	$31
	!BYTE	$32
	!BYTE	$33
	!BYTE	$34
	!BYTE	$35
	!BYTE	$36
	!BYTE	$37
	!BYTE	$38
	!BYTE	$39
	!BYTE	$41
	!BYTE	$42
	!BYTE	$43
	!BYTE	$44
	!BYTE	$45
	!BYTE	$46
; vmsrc/apple/a1cmd.pla: 0062: //
; vmsrc/apple/a1cmd.pla: 0063: // Exported Machine ID.
; vmsrc/apple/a1cmd.pla: 0064: //
; vmsrc/apple/a1cmd.pla: 0065: byte machid       = $08 // Apple 1 (NA in ProDOS Tech Ref)
_D044 					; machid       = $08 // Apple 1 (NA in ProDOS Tech Ref)
	!BYTE	$08
; vmsrc/apple/a1cmd.pla: 0066: //
; vmsrc/apple/a1cmd.pla: 0067: // Command line pointer
; vmsrc/apple/a1cmd.pla: 0068: //
; vmsrc/apple/a1cmd.pla: 0069: word cmdptr       = @hexchar // make it point to a zero
_D045 					; cmdptr       = @hexchar // make it point to a zero
_F001 	!WORD	_D043
; vmsrc/apple/a1cmd.pla: 0070: //
; vmsrc/apple/a1cmd.pla: 0071: // Standard Library exported functions.
; vmsrc/apple/a1cmd.pla: 0072: //
; vmsrc/apple/a1cmd.pla: 0073: byte syslibstr[]  = "CMDSYS"
_D046 					; syslibstr[]  = "CMDSYS"
	!BYTE	$06
	!BYTE	$43,$4D,$44,$53,$59,$53
; vmsrc/apple/a1cmd.pla: 0074: byte machidstr[]  = "MACHID"
_D047 					; machidstr[]  = "MACHID"
	!BYTE	$06
	!BYTE	$4D,$41,$43,$48,$49,$44
; vmsrc/apple/a1cmd.pla: 0075: byte putcstr[]    = "PUTC"
_D048 					; putcstr[]    = "PUTC"
	!BYTE	$04
	!BYTE	$50,$55,$54,$43
; vmsrc/apple/a1cmd.pla: 0076: byte putlnstr[]   = "PUTLN"
_D049 					; putlnstr[]   = "PUTLN"
	!BYTE	$05
	!BYTE	$50,$55,$54,$4C,$4E
; vmsrc/apple/a1cmd.pla: 0077: byte putsstr[]    = "PUTS"
_D050 					; putsstr[]    = "PUTS"
	!BYTE	$04
	!BYTE	$50,$55,$54,$53
; vmsrc/apple/a1cmd.pla: 0078: byte putistr[]    = "PUTI"
_D051 					; putistr[]    = "PUTI"
	!BYTE	$04
	!BYTE	$50,$55,$54,$49
; vmsrc/apple/a1cmd.pla: 0079: byte putbstr[]    = "PUTB"
_D052 					; putbstr[]    = "PUTB"
	!BYTE	$04
	!BYTE	$50,$55,$54,$42
; vmsrc/apple/a1cmd.pla: 0080: byte putwstr[]    = "PUTH"
_D053 					; putwstr[]    = "PUTH"
	!BYTE	$04
	!BYTE	$50,$55,$54,$48
; vmsrc/apple/a1cmd.pla: 0081: byte getcstr[]    = "GETC"
_D054 					; getcstr[]    = "GETC"
	!BYTE	$04
	!BYTE	$47,$45,$54,$43
; vmsrc/apple/a1cmd.pla: 0082: byte getsstr[]    = "GETS"
_D055 					; getsstr[]    = "GETS"
	!BYTE	$04
	!BYTE	$47,$45,$54,$53
; vmsrc/apple/a1cmd.pla: 0083: byte toupstr[]    = "TOUPPER"
_D056 					; toupstr[]    = "TOUPPER"
	!BYTE	$07
	!BYTE	$54,$4F,$55,$50,$50,$45,$52
; vmsrc/apple/a1cmd.pla: 0084: byte strcpystr[]  = "STRCPY"
_D057 					; strcpystr[]  = "STRCPY"
	!BYTE	$06
	!BYTE	$53,$54,$52,$43,$50,$59
; vmsrc/apple/a1cmd.pla: 0085: byte strcatstr[]  = "STRCAT"
_D058 					; strcatstr[]  = "STRCAT"
	!BYTE	$06
	!BYTE	$53,$54,$52,$43,$41,$54
; vmsrc/apple/a1cmd.pla: 0086: byte sysstr[]     = "SYSCALL"
_D059 					; sysstr[]     = "SYSCALL"
	!BYTE	$07
	!BYTE	$53,$59,$53,$43,$41,$4C,$4C
; vmsrc/apple/a1cmd.pla: 0087: byte callstr[]    = "CALL"
_D060 					; callstr[]    = "CALL"
	!BYTE	$04
	!BYTE	$43,$41,$4C,$4C
; vmsrc/apple/a1cmd.pla: 0088: byte hpmarkstr[]  = "HEAPMARK"
_D061 					; hpmarkstr[]  = "HEAPMARK"
	!BYTE	$08
	!BYTE	$48,$45,$41,$50,$4D,$41,$52,$4B
; vmsrc/apple/a1cmd.pla: 0089: byte hpalignstr[] = "HEAPALLOCALIGN"
_D062 					; hpalignstr[] = "HEAPALLOCALIGN"
	!BYTE	$0E
	!BYTE	$48,$45,$41,$50,$41,$4C,$4C,$4F
	!BYTE	$43,$41,$4C,$49,$47,$4E
; vmsrc/apple/a1cmd.pla: 0090: byte hpallocstr[] = "HEAPALLOC"
_D063 					; hpallocstr[] = "HEAPALLOC"
	!BYTE	$09
	!BYTE	$48,$45,$41,$50,$41,$4C,$4C,$4F
	!BYTE	$43
; vmsrc/apple/a1cmd.pla: 0091: byte hprelstr[]   = "HEAPRELEASE"
_D064 					; hprelstr[]   = "HEAPRELEASE"
	!BYTE	$0B
	!BYTE	$48,$45,$41,$50,$52,$45,$4C,$45
	!BYTE	$41,$53,$45
; vmsrc/apple/a1cmd.pla: 0092: byte hpavlstr[]   = "HEAPAVAIL"
_D065 					; hpavlstr[]   = "HEAPAVAIL"
	!BYTE	$09
	!BYTE	$48,$45,$41,$50,$41,$56,$41,$49
	!BYTE	$4C
; vmsrc/apple/a1cmd.pla: 0093: byte memsetstr[]  = "MEMSET"
_D066 					; memsetstr[]  = "MEMSET"
	!BYTE	$06
	!BYTE	$4D,$45,$4D,$53,$45,$54
; vmsrc/apple/a1cmd.pla: 0094: byte memcpystr[]  = "MEMCPY"
_D067 					; memcpystr[]  = "MEMCPY"
	!BYTE	$06
	!BYTE	$4D,$45,$4D,$43,$50,$59
; vmsrc/apple/a1cmd.pla: 0095: byte uisgtstr[]   = "ISUGT"
_D068 					; uisgtstr[]   = "ISUGT"
	!BYTE	$05
	!BYTE	$49,$53,$55,$47,$54
; vmsrc/apple/a1cmd.pla: 0096: byte uisgestr[]   = "ISUGE"
_D069 					; uisgestr[]   = "ISUGE"
	!BYTE	$05
	!BYTE	$49,$53,$55,$47,$45
; vmsrc/apple/a1cmd.pla: 0097: byte uisltstr[]   = "ISULT"
_D070 					; uisltstr[]   = "ISULT"
	!BYTE	$05
	!BYTE	$49,$53,$55,$4C,$54
; vmsrc/apple/a1cmd.pla: 0098: byte uislestr[]   = "ISULE"
_D071 					; uislestr[]   = "ISULE"
	!BYTE	$05
	!BYTE	$49,$53,$55,$4C,$45
; vmsrc/apple/a1cmd.pla: 0099: byte sextstr[]    = "SEXT"
_D072 					; sextstr[]    = "SEXT"
	!BYTE	$04
	!BYTE	$53,$45,$58,$54
; vmsrc/apple/a1cmd.pla: 0100: byte divmodstr[]  = "DIVMOD"
_D073 					; divmodstr[]  = "DIVMOD"
	!BYTE	$06
	!BYTE	$44,$49,$56,$4D,$4F,$44
; vmsrc/apple/a1cmd.pla: 0101: word exports[]    = @syslibstr, @version
_D074 					; exports[]    = @syslibstr, @version
_F002 	!WORD	_D046
_F003 	!WORD	_D027
; vmsrc/apple/a1cmd.pla: 0102: word              = @sysstr,    @syscall
_F004 	!WORD	_D059
_F005 	!WORD	_P000
; vmsrc/apple/a1cmd.pla: 0103: word              = @callstr,   @call
_F006 	!WORD	_D060
_F007 	!WORD	_P001
; vmsrc/apple/a1cmd.pla: 0104: word              = @putcstr,   @cout
_F008 	!WORD	_D048
_F009 	!WORD	_P003
; vmsrc/apple/a1cmd.pla: 0105: word              = @putlnstr,  @crout
_F010 	!WORD	_D049
_F011 	!WORD	_P002
; vmsrc/apple/a1cmd.pla: 0106: word              = @putsstr,   @prstr
_F012 	!WORD	_D050
_F013 	!WORD	_P004
; vmsrc/apple/a1cmd.pla: 0107: word              = @putistr,   @print
_F014 	!WORD	_D051
_F015 	!WORD	_P005
; vmsrc/apple/a1cmd.pla: 0108: word              = @putbstr,   @prbyte
_F016 	!WORD	_D052
_F017 	!WORD	_P006
; vmsrc/apple/a1cmd.pla: 0109: word              = @putwstr,   @prword
_F018 	!WORD	_D053
_F019 	!WORD	_P007
; vmsrc/apple/a1cmd.pla: 0110: word              = @getcstr,   @cin
_F020 	!WORD	_D054
_F021 	!WORD	_P008
; vmsrc/apple/a1cmd.pla: 0111: word              = @getsstr,   @rdstr
_F022 	!WORD	_D055
_F023 	!WORD	_P009
; vmsrc/apple/a1cmd.pla: 0112: word              = @toupstr,   @toupper
_F024 	!WORD	_D056
_F025 	!WORD	_P010
; vmsrc/apple/a1cmd.pla: 0113: word              = @hpmarkstr, @markheap
_F026 	!WORD	_D061
_F027 	!WORD	_P013
; vmsrc/apple/a1cmd.pla: 0114: word              = @hpallocstr,@allocheap
_F028 	!WORD	_D063
_F029 	!WORD	_P014
; vmsrc/apple/a1cmd.pla: 0115: word              = @hpalignstr,@allocalignheap
_F030 	!WORD	_D062
_F031 	!WORD	_P015
; vmsrc/apple/a1cmd.pla: 0116: word              = @hprelstr,  @releaseheap
_F032 	!WORD	_D064
_F033 	!WORD	_P016
; vmsrc/apple/a1cmd.pla: 0117: word              = @hpavlstr,  @availheap
_F034 	!WORD	_D065
_F035 	!WORD	_P017
; vmsrc/apple/a1cmd.pla: 0118: word              = @memsetstr, @memset
_F036 	!WORD	_D066
_F037 	!WORD	_P018
; vmsrc/apple/a1cmd.pla: 0119: word              = @memcpystr, @memcpy
_F038 	!WORD	_D067
_F039 	!WORD	_P019
; vmsrc/apple/a1cmd.pla: 0120: word              = @strcpystr, @strcpy
_F040 	!WORD	_D057
_F041 	!WORD	_P011
; vmsrc/apple/a1cmd.pla: 0121: word              = @strcatstr, @strcat
_F042 	!WORD	_D058
_F043 	!WORD	_P012
; vmsrc/apple/a1cmd.pla: 0122: word              = @uisgtstr,  @uword_isgt
_F044 	!WORD	_D068
_F045 	!WORD	_P020
; vmsrc/apple/a1cmd.pla: 0123: word              = @uisgestr,  @uword_isge
_F046 	!WORD	_D069
_F047 	!WORD	_P021
; vmsrc/apple/a1cmd.pla: 0124: word              = @uisltstr,  @uword_islt
_F048 	!WORD	_D070
_F049 	!WORD	_P022
; vmsrc/apple/a1cmd.pla: 0125: word              = @uislestr,  @uword_isle
_F050 	!WORD	_D071
_F051 	!WORD	_P023
; vmsrc/apple/a1cmd.pla: 0126: word              = @sextstr,   @sext
_F052 	!WORD	_D072
_F053 	!WORD	_P024
; vmsrc/apple/a1cmd.pla: 0127: word              = @divmodstr, @divmod
_F054 	!WORD	_D073
_F055 	!WORD	_P025
; vmsrc/apple/a1cmd.pla: 0128: word              = @machidstr, @machid
_F056 	!WORD	_D047
_F057 	!WORD	_D044
; vmsrc/apple/a1cmd.pla: 0129: word              = 0
	!WORD	$0000
; vmsrc/apple/a1cmd.pla: 0130: word syslibsym    = @exports
_D075 					; syslibsym    = @exports
_F058 	!WORD	_D074
; vmsrc/apple/a1cmd.pla: 0131: //
; vmsrc/apple/a1cmd.pla: 0132: // Utility functions
; vmsrc/apple/a1cmd.pla: 0133: //
; vmsrc/apple/a1cmd.pla: 0134: asm saveX#0
_A000 					; saveX()
; vmsrc/apple/a1cmd.pla: 0135:         STX     XREG+1
        STX     XREG+1
; vmsrc/apple/a1cmd.pla: 0136: end
; vmsrc/apple/a1cmd.pla: 0137: asm restoreX#0
_A001 					; restoreX()
; vmsrc/apple/a1cmd.pla: 0138: XREG    LDX     #$00
XREG    LDX     #$00
; vmsrc/apple/a1cmd.pla: 0139:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0140: end
; vmsrc/apple/a1cmd.pla: 0141: //
; vmsrc/apple/a1cmd.pla: 0142: // CALL CFFA1 API ENTRYPOINT
; vmsrc/apple/a1cmd.pla: 0143: // SYSCALL(CMD, 0)
; vmsrc/apple/a1cmd.pla: 0144: //
; vmsrc/apple/a1cmd.pla: 0145: asm syscall(cmd, null)#1
_P000 					; syscall(cmd, null)#1()
_A002 					; syscall()
; vmsrc/apple/a1cmd.pla: 0146:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0147:         STX     ESP
        STX     ESP
; vmsrc/apple/a1cmd.pla: 0148:         TAX
        TAX
; vmsrc/apple/a1cmd.pla: 0149:         JSR     $900C
        JSR     $900C
; vmsrc/apple/a1cmd.pla: 0150:         LDX     ESP
        LDX     ESP
; vmsrc/apple/a1cmd.pla: 0151:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0152:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0153:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0154:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0155:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0156: end
; vmsrc/apple/a1cmd.pla: 0157: //
; vmsrc/apple/a1cmd.pla: 0158: // CALL 6502 ROUTINE
; vmsrc/apple/a1cmd.pla: 0159: // CALL(ADDR, AREG, XREG, YREG, STATUS)
; vmsrc/apple/a1cmd.pla: 0160: //
; vmsrc/apple/a1cmd.pla: 0161: asm call(addr,areg,xreg,yreg,sstatus)#1
_P001 					; call(addr,areg,xreg,yreg,sstatus)#1()
_A003 					; call()
; vmsrc/apple/a1cmd.pla: 0162:         PHP
        PHP
; vmsrc/apple/a1cmd.pla: 0163:         LDA     ESTKL+4,X
        LDA     ESTKL+4,X
; vmsrc/apple/a1cmd.pla: 0164:         STA     CALL6502+1
        STA     CALL6502+1
; vmsrc/apple/a1cmd.pla: 0165:         LDA     ESTKH+4,X
        LDA     ESTKH+4,X
; vmsrc/apple/a1cmd.pla: 0166:         STA     CALL6502+2
        STA     CALL6502+2
; vmsrc/apple/a1cmd.pla: 0167:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0168:         PHA
        PHA
; vmsrc/apple/a1cmd.pla: 0169:         LDY     ESTKL+1,X
        LDY     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0170:         LDA     ESTKL+3,X
        LDA     ESTKL+3,X
; vmsrc/apple/a1cmd.pla: 0171:         PHA
        PHA
; vmsrc/apple/a1cmd.pla: 0172:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; vmsrc/apple/a1cmd.pla: 0173:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0174:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0175:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0176:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0177:         STX     ESP
        STX     ESP
; vmsrc/apple/a1cmd.pla: 0178:         TAX
        TAX
; vmsrc/apple/a1cmd.pla: 0179:         PLA
        PLA
; vmsrc/apple/a1cmd.pla: 0180:         PLP
        PLP
; vmsrc/apple/a1cmd.pla: 0181: CALL6502 JSR    $FFFF
CALL6502 JSR    $FFFF
; vmsrc/apple/a1cmd.pla: 0182:         PHP
        PHP
; vmsrc/apple/a1cmd.pla: 0183:         STA     REGVALS+0
        STA     REGVALS+0
; vmsrc/apple/a1cmd.pla: 0184:         STX     REGVALS+1
        STX     REGVALS+1
; vmsrc/apple/a1cmd.pla: 0185:         STY     REGVALS+2
        STY     REGVALS+2
; vmsrc/apple/a1cmd.pla: 0186:         PLA
        PLA
; vmsrc/apple/a1cmd.pla: 0187:         STA     REGVALS+3
        STA     REGVALS+3
; vmsrc/apple/a1cmd.pla: 0188:         LDX     ESP
        LDX     ESP
; vmsrc/apple/a1cmd.pla: 0189:         LDA     #<REGVALS
        LDA     #<REGVALS
; vmsrc/apple/a1cmd.pla: 0190:         LDY     #>REGVALS
        LDY     #>REGVALS
; vmsrc/apple/a1cmd.pla: 0191:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0192:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0193:         PLP
        PLP
; vmsrc/apple/a1cmd.pla: 0194:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0195: REGVALS !FILL   4
REGVALS !FILL   4
; vmsrc/apple/a1cmd.pla: 0196: end
; vmsrc/apple/a1cmd.pla: 0197: //
; vmsrc/apple/a1cmd.pla: 0198: // QUIT TO MONITOR
; vmsrc/apple/a1cmd.pla: 0199: //
; vmsrc/apple/a1cmd.pla: 0200: asm quit()#0
_A004 					; quit()
; vmsrc/apple/a1cmd.pla: 0201:     JMP $9000
    JMP $9000
; vmsrc/apple/a1cmd.pla: 0202: end
; vmsrc/apple/a1cmd.pla: 0203: //
; vmsrc/apple/a1cmd.pla: 0204: // SET MEMORY TO VALUE
; vmsrc/apple/a1cmd.pla: 0205: // MEMSET(ADDR, VALUE, SIZE)
; vmsrc/apple/a1cmd.pla: 0206: //   With optimizations from Peter Ferrie
; vmsrc/apple/a1cmd.pla: 0207: //
; vmsrc/apple/a1cmd.pla: 0208: asm memset(addr,value,size)#0
_P018 					; memset(addr,value,size)#0()
_A005 					; memset()
; vmsrc/apple/a1cmd.pla: 0209:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; vmsrc/apple/a1cmd.pla: 0210:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0211:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; vmsrc/apple/a1cmd.pla: 0212:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0213:         LDY     ESTKL,X
        LDY     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0214:         BEQ     +
        BEQ     +
; vmsrc/apple/a1cmd.pla: 0215:         INC     ESTKH,X
        INC     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0216:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0217: +       LDA     ESTKH,X
+       LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0218:         BEQ     SETMEX
        BEQ     SETMEX
; vmsrc/apple/a1cmd.pla: 0219: SETMLPL CLC
SETMLPL CLC
; vmsrc/apple/a1cmd.pla: 0220:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0221: SETMLPH STA     (DST),Y
SETMLPH STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0222:         DEC     ESTKL,X
        DEC     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0223:         BEQ     ++
        BEQ     ++
; vmsrc/apple/a1cmd.pla: 0224: -       INY
-       INY
; vmsrc/apple/a1cmd.pla: 0225:         BEQ     +
        BEQ     +
; vmsrc/apple/a1cmd.pla: 0226: --      BCS     SETMLPL
--      BCS     SETMLPL
; vmsrc/apple/a1cmd.pla: 0227:         SEC
        SEC
; vmsrc/apple/a1cmd.pla: 0228:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0229:         BCS     SETMLPH
        BCS     SETMLPH
; vmsrc/apple/a1cmd.pla: 0230: +       INC     DSTH
+       INC     DSTH
; vmsrc/apple/a1cmd.pla: 0231:         BNE     --
        BNE     --
; vmsrc/apple/a1cmd.pla: 0232: ++      DEC     ESTKH,X
++      DEC     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0233:         BNE     -
        BNE     -
; vmsrc/apple/a1cmd.pla: 0234: SETMEX  INX
SETMEX  INX
; vmsrc/apple/a1cmd.pla: 0235:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0236:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0237:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0238: end
; vmsrc/apple/a1cmd.pla: 0239: //
; vmsrc/apple/a1cmd.pla: 0240: // COPY MEMORY
; vmsrc/apple/a1cmd.pla: 0241: // MEMCPY(DSTADDR, SRCADDR, SIZE)
; vmsrc/apple/a1cmd.pla: 0242: //
; vmsrc/apple/a1cmd.pla: 0243: asm memcpy(dst,src,size)#0
_P019 					; memcpy(dst,src,size)#0()
_A006 					; memcpy()
; vmsrc/apple/a1cmd.pla: 0244:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0245:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0246:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0247:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0248:         ORA     ESTKH-3,X
        ORA     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0249:         BEQ     CPYMEX
        BEQ     CPYMEX
; vmsrc/apple/a1cmd.pla: 0250:         LDA     ESTKL-2,X
        LDA     ESTKL-2,X
; vmsrc/apple/a1cmd.pla: 0251:         CMP     ESTKL-1,X
        CMP     ESTKL-1,X
; vmsrc/apple/a1cmd.pla: 0252:         LDA     ESTKH-2,X
        LDA     ESTKH-2,X
; vmsrc/apple/a1cmd.pla: 0253:         SBC     ESTKH-1,X
        SBC     ESTKH-1,X
; vmsrc/apple/a1cmd.pla: 0254:         BCC     REVCPY
        BCC     REVCPY
; vmsrc/apple/a1cmd.pla: 0255: ;
; vmsrc/apple/a1cmd.pla: 0256: ; FORWARD COPY
; FORWARD COPY
; vmsrc/apple/a1cmd.pla: 0257: ;
; vmsrc/apple/a1cmd.pla: 0258:         LDA     ESTKL-1,X
        LDA     ESTKL-1,X
; vmsrc/apple/a1cmd.pla: 0259:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0260:         LDA     ESTKH-1,X
        LDA     ESTKH-1,X
; vmsrc/apple/a1cmd.pla: 0261:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0262:         LDA     ESTKL-2,X
        LDA     ESTKL-2,X
; vmsrc/apple/a1cmd.pla: 0263:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0264:         LDA     ESTKH-2,X
        LDA     ESTKH-2,X
; vmsrc/apple/a1cmd.pla: 0265:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0266:         LDY     ESTKL-3,X
        LDY     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0267:         BEQ     FORCPYLP
        BEQ     FORCPYLP
; vmsrc/apple/a1cmd.pla: 0268:         INC     ESTKH-3,X
        INC     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0269:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0270: FORCPYLP LDA    (SRC),Y
FORCPYLP LDA    (SRC),Y
; vmsrc/apple/a1cmd.pla: 0271:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0272:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0273:         BNE     +
        BNE     +
; vmsrc/apple/a1cmd.pla: 0274:         INC     DSTH
        INC     DSTH
; vmsrc/apple/a1cmd.pla: 0275:         INC     SRCH
        INC     SRCH
; vmsrc/apple/a1cmd.pla: 0276: +       DEC     ESTKL-3,X
+       DEC     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0277:         BNE     FORCPYLP
        BNE     FORCPYLP
; vmsrc/apple/a1cmd.pla: 0278:         DEC     ESTKH-3,X
        DEC     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0279:         BNE     FORCPYLP
        BNE     FORCPYLP
; vmsrc/apple/a1cmd.pla: 0280:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0281: ;
; vmsrc/apple/a1cmd.pla: 0282: ; REVERSE COPY
; REVERSE COPY
; vmsrc/apple/a1cmd.pla: 0283: ;
; vmsrc/apple/a1cmd.pla: 0284: REVCPY  ;CLC
REVCPY  ;CLC
; vmsrc/apple/a1cmd.pla: 0285:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0286:         ADC     ESTKL-1,X
        ADC     ESTKL-1,X
; vmsrc/apple/a1cmd.pla: 0287:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0288:         LDA     ESTKH-3,X
        LDA     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0289:         ADC     ESTKH-1,X
        ADC     ESTKH-1,X
; vmsrc/apple/a1cmd.pla: 0290:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0291:         CLC
        CLC
; vmsrc/apple/a1cmd.pla: 0292:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0293:         ADC     ESTKL-2,X
        ADC     ESTKL-2,X
; vmsrc/apple/a1cmd.pla: 0294:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0295:         LDA     ESTKH-3,X
        LDA     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0296:         ADC     ESTKH-2,X
        ADC     ESTKH-2,X
; vmsrc/apple/a1cmd.pla: 0297:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0298:         DEC     DSTH
        DEC     DSTH
; vmsrc/apple/a1cmd.pla: 0299:         DEC     SRCH
        DEC     SRCH
; vmsrc/apple/a1cmd.pla: 0300:         LDY     #$FF
        LDY     #$FF
; vmsrc/apple/a1cmd.pla: 0301:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0302:         BEQ     REVCPYLP
        BEQ     REVCPYLP
; vmsrc/apple/a1cmd.pla: 0303:         INC     ESTKH-3,X
        INC     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0304: REVCPYLP LDA    (SRC),Y
REVCPYLP LDA    (SRC),Y
; vmsrc/apple/a1cmd.pla: 0305:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0306:         DEY
        DEY
; vmsrc/apple/a1cmd.pla: 0307:         CPY     #$FF
        CPY     #$FF
; vmsrc/apple/a1cmd.pla: 0308:         BNE     +
        BNE     +
; vmsrc/apple/a1cmd.pla: 0309:         DEC     DSTH
        DEC     DSTH
; vmsrc/apple/a1cmd.pla: 0310:         DEC     SRCH
        DEC     SRCH
; vmsrc/apple/a1cmd.pla: 0311: +       DEC     ESTKL-3,X
+       DEC     ESTKL-3,X
; vmsrc/apple/a1cmd.pla: 0312:         BNE     REVCPYLP
        BNE     REVCPYLP
; vmsrc/apple/a1cmd.pla: 0313:         DEC     ESTKH-3,X
        DEC     ESTKH-3,X
; vmsrc/apple/a1cmd.pla: 0314:         BNE     REVCPYLP
        BNE     REVCPYLP
; vmsrc/apple/a1cmd.pla: 0315: CPYMEX  RTS
CPYMEX  RTS
; vmsrc/apple/a1cmd.pla: 0316: end
; vmsrc/apple/a1cmd.pla: 0317: //
; vmsrc/apple/a1cmd.pla: 0318: // Unsigned word comparisons.
; vmsrc/apple/a1cmd.pla: 0319: //
; vmsrc/apple/a1cmd.pla: 0320: asm uword_isge(a,b)#1
_P021 					; uword_isge(a,b)#1()
_A007 					; uword_isge()
; vmsrc/apple/a1cmd.pla: 0321:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0322:         CMP     ESTKL,X
        CMP     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0323:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0324:         SBC     ESTKH,X
        SBC     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0325:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/a1cmd.pla: 0326:         ADC     #$00
        ADC     #$00
; vmsrc/apple/a1cmd.pla: 0327:         EOR     #$FF
        EOR     #$FF
; vmsrc/apple/a1cmd.pla: 0328:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0329:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0330:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0331:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0332: end
; vmsrc/apple/a1cmd.pla: 0333: asm uword_isle(a,b)#1
_P023 					; uword_isle(a,b)#1()
_A008 					; uword_isle()
; vmsrc/apple/a1cmd.pla: 0334:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0335:         CMP     ESTKL+1,X
        CMP     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0336:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0337:         SBC     ESTKH+1,X
        SBC     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0338:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/a1cmd.pla: 0339:         ADC     #$00
        ADC     #$00
; vmsrc/apple/a1cmd.pla: 0340:         EOR     #$FF
        EOR     #$FF
; vmsrc/apple/a1cmd.pla: 0341:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0342:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0343:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0344:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0345: end
; vmsrc/apple/a1cmd.pla: 0346: asm uword_isgt(a,b)#1
_P020 					; uword_isgt(a,b)#1()
_A009 					; uword_isgt()
; vmsrc/apple/a1cmd.pla: 0347:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0348:         CMP     ESTKL+1,X
        CMP     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0349:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0350:         SBC     ESTKH+1,X
        SBC     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0351:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/a1cmd.pla: 0352:         ADC     #$00
        ADC     #$00
; vmsrc/apple/a1cmd.pla: 0353:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0354:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0355:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0356:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0357: end
; vmsrc/apple/a1cmd.pla: 0358: asm uword_islt(a,b)#1
_P022 					; uword_islt(a,b)#1()
_A010 					; uword_islt()
; vmsrc/apple/a1cmd.pla: 0359:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0360:         CMP     ESTKL,X
        CMP     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0361:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0362:         SBC     ESTKH,X
        SBC     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0363:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/a1cmd.pla: 0364:         ADC     #$00
        ADC     #$00
; vmsrc/apple/a1cmd.pla: 0365:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0366:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0367:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0368:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0369: end
; vmsrc/apple/a1cmd.pla: 0370: asm divmod(a,b)#2
_P025 					; divmod(a,b)#2()
_A011 					; divmod()
; vmsrc/apple/a1cmd.pla: 0371:         JSR     INTERP          ; CALL DINTERP
        JSR     INTERP          ; CALL DINTERP
; vmsrc/apple/a1cmd.pla: 0372:         !BYTE   $36, $5C        ; DIVMOD, RET
        !BYTE   $36, $5C        ; DIVMOD, RET
; vmsrc/apple/a1cmd.pla: 0373: end
; vmsrc/apple/a1cmd.pla: 0374: asm sext(a)#1
_P024 					; sext(a)#1()
_A012 					; sext()
; vmsrc/apple/a1cmd.pla: 0375:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0376:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0377:         BPL     +
        BPL     +
; vmsrc/apple/a1cmd.pla: 0378:         DEY
        DEY
; vmsrc/apple/a1cmd.pla: 0379: +       STY     ESTKH,X
+       STY     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0380:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0381: end
; vmsrc/apple/a1cmd.pla: 0382: //
; vmsrc/apple/a1cmd.pla: 0383: // Addresses of internal routines.
; vmsrc/apple/a1cmd.pla: 0384: //
; vmsrc/apple/a1cmd.pla: 0385: asm interp()#1
_A013 					; interp()
; vmsrc/apple/a1cmd.pla: 0386:         DEX
        DEX
; vmsrc/apple/a1cmd.pla: 0387:         LDA     #<IINTERP
        LDA     #<IINTERP
; vmsrc/apple/a1cmd.pla: 0388:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0389:         LDA     #>IINTERP
        LDA     #>IINTERP
; vmsrc/apple/a1cmd.pla: 0390:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0391:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0392: end
; vmsrc/apple/a1cmd.pla: 0393: //
; vmsrc/apple/a1cmd.pla: 0394: // A DCI string is one that has the high bit set for every character except the last.
; vmsrc/apple/a1cmd.pla: 0395: // More efficient than C or Pascal strings.
; vmsrc/apple/a1cmd.pla: 0396: //
; vmsrc/apple/a1cmd.pla: 0397: //def dcitos(dci, str)
; vmsrc/apple/a1cmd.pla: 0398: //    byte len, c
; vmsrc/apple/a1cmd.pla: 0399: //    len = 0
; vmsrc/apple/a1cmd.pla: 0400: //    repeat
; vmsrc/apple/a1cmd.pla: 0401: //        c = (dci).[len]
; vmsrc/apple/a1cmd.pla: 0402: //        len = len + 1
; vmsrc/apple/a1cmd.pla: 0403: //        (str).[len] = c & $7F
; vmsrc/apple/a1cmd.pla: 0404: //    until !(c & $80)
; vmsrc/apple/a1cmd.pla: 0405: //    ^str = len
; vmsrc/apple/a1cmd.pla: 0406: //    return len
; vmsrc/apple/a1cmd.pla: 0407: //end
; vmsrc/apple/a1cmd.pla: 0408: asm dcitos(dci, str)#1
_A014 					; dcitos()
; vmsrc/apple/a1cmd.pla: 0409:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0410:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0411:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0412:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0413:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0414:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0415:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0416:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0417:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0418: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0419:         CMP     #$80
        CMP     #$80
; vmsrc/apple/a1cmd.pla: 0420:         AND     #$7F
        AND     #$7F
; vmsrc/apple/a1cmd.pla: 0421:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0422:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0423:         BCS     -
        BCS     -
; vmsrc/apple/a1cmd.pla: 0424:         TYA
        TYA
; vmsrc/apple/a1cmd.pla: 0425:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0426:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0427:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0428:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0429:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0430:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0431: end
; vmsrc/apple/a1cmd.pla: 0432: //def stodci(str, dci)
; vmsrc/apple/a1cmd.pla: 0433: //    byte len, c
; vmsrc/apple/a1cmd.pla: 0434: //    len = ^str
; vmsrc/apple/a1cmd.pla: 0435: //    if len == 0
; vmsrc/apple/a1cmd.pla: 0436: //        return
; vmsrc/apple/a1cmd.pla: 0437: //    fin
; vmsrc/apple/a1cmd.pla: 0438: //    c = toupper((str).[len]) & $7F
; vmsrc/apple/a1cmd.pla: 0439: //    len = len - 1
; vmsrc/apple/a1cmd.pla: 0440: //    (dci).[len] = c
; vmsrc/apple/a1cmd.pla: 0441: //    while len
; vmsrc/apple/a1cmd.pla: 0442: //      c = toupper((str).[len]) | $80
; vmsrc/apple/a1cmd.pla: 0443: //      len = len - 1
; vmsrc/apple/a1cmd.pla: 0444: //      (dci).[len] = c
; vmsrc/apple/a1cmd.pla: 0445: //    loop
; vmsrc/apple/a1cmd.pla: 0446: //    return ^str
; vmsrc/apple/a1cmd.pla: 0447: //end
; vmsrc/apple/a1cmd.pla: 0448: asm stodci(str, dci)#1
_A015 					; stodci()
; vmsrc/apple/a1cmd.pla: 0449:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0450:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0451:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0452:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0453:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0454:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0455:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0456:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0457:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0458:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0459:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0460:         BEQ     ++
        BEQ     ++
; vmsrc/apple/a1cmd.pla: 0461:         TAY
        TAY
; vmsrc/apple/a1cmd.pla: 0462:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0463:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/a1cmd.pla: 0464:         BNE     +
        BNE     +
; vmsrc/apple/a1cmd.pla: 0465: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0466:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/a1cmd.pla: 0467:         ORA     #$80
        ORA     #$80
; vmsrc/apple/a1cmd.pla: 0468: +       DEY
+       DEY
; vmsrc/apple/a1cmd.pla: 0469:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0470:         BNE     -
        BNE     -
; vmsrc/apple/a1cmd.pla: 0471:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0472: ++      STA     ESTKL,X
++      STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0473:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0474:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0475: end
; vmsrc/apple/a1cmd.pla: 0476: asm toupper(c)#1
_P010 					; toupper(c)#1()
_A016 					; toupper()
; vmsrc/apple/a1cmd.pla: 0477:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0478: TOUPR   AND     #$7F
TOUPR   AND     #$7F
; vmsrc/apple/a1cmd.pla: 0479:         CMP     #'a'
        CMP     #'a'
; vmsrc/apple/a1cmd.pla: 0480:         BCC     +
        BCC     +
; vmsrc/apple/a1cmd.pla: 0481:         CMP     #'z'+1
        CMP     #'z'+1
; vmsrc/apple/a1cmd.pla: 0482:         BCS     +
        BCS     +
; vmsrc/apple/a1cmd.pla: 0483:         SBC     #$1F
        SBC     #$1F
; vmsrc/apple/a1cmd.pla: 0484: +       STA     ESTKL,X
+       STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0485:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0486: end
; vmsrc/apple/a1cmd.pla: 0487: //
; vmsrc/apple/a1cmd.pla: 0488: // Module symbols are entered into the symbol table
; vmsrc/apple/a1cmd.pla: 0489: // pre-pended with a '#' to differentiate them
; vmsrc/apple/a1cmd.pla: 0490: // from normal symbols.
; vmsrc/apple/a1cmd.pla: 0491: //
; vmsrc/apple/a1cmd.pla: 0492: //
; vmsrc/apple/a1cmd.pla: 0493: // Lookup routines.
; vmsrc/apple/a1cmd.pla: 0494: //
; vmsrc/apple/a1cmd.pla: 0495: //def lookuptbl(dci, tbl)
; vmsrc/apple/a1cmd.pla: 0496: //    word match
; vmsrc/apple/a1cmd.pla: 0497: //    while ^tbl
; vmsrc/apple/a1cmd.pla: 0498: //        match = dci
; vmsrc/apple/a1cmd.pla: 0499: //        while ^tbl == ^match
; vmsrc/apple/a1cmd.pla: 0500: //            if !(^tbl & $80)
; vmsrc/apple/a1cmd.pla: 0501: //                return (tbl):1
; vmsrc/apple/a1cmd.pla: 0502: //            fin
; vmsrc/apple/a1cmd.pla: 0503: //            tbl   = tbl   + 1
; vmsrc/apple/a1cmd.pla: 0504: //            match = match + 1
; vmsrc/apple/a1cmd.pla: 0505: //        loop
; vmsrc/apple/a1cmd.pla: 0506: //        while (^tbl & $80)
; vmsrc/apple/a1cmd.pla: 0507: //            tbl = tbl + 1
; vmsrc/apple/a1cmd.pla: 0508: //        loop
; vmsrc/apple/a1cmd.pla: 0509: //        tbl = tbl + 3
; vmsrc/apple/a1cmd.pla: 0510: //    loop
; vmsrc/apple/a1cmd.pla: 0511: //    return 0
; vmsrc/apple/a1cmd.pla: 0512: asm lookuptbl(dci, tbl)#1
_A017 					; lookuptbl()
; vmsrc/apple/a1cmd.pla: 0513:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0514:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0515:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0516:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0517:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0518:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0519:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0520:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0521:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0522: --      LDY     #$00
--      LDY     #$00
; vmsrc/apple/a1cmd.pla: 0523: -       LDA     (DST),Y
-       LDA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0524:         BEQ     +
        BEQ     +
; vmsrc/apple/a1cmd.pla: 0525:         CMP     (SRC),Y
        CMP     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0526:         BNE     ++
        BNE     ++
; vmsrc/apple/a1cmd.pla: 0527:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0528:         ASL
        ASL
; vmsrc/apple/a1cmd.pla: 0529:         BCS     -
        BCS     -
; vmsrc/apple/a1cmd.pla: 0530:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0531:         STA     ESTKL,X             ; MATCH
        STA     ESTKL,X             ; MATCH
; vmsrc/apple/a1cmd.pla: 0532:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0533:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0534:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0535:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0536: +       STA     ESTKL,X             ; NO MATCH
+       STA     ESTKL,X             ; NO MATCH
; vmsrc/apple/a1cmd.pla: 0537:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0538:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0539: ++
++
; vmsrc/apple/a1cmd.pla: 0540: -       LDA     (DST),Y             ; NEXT ENTRY
-       LDA     (DST),Y             ; NEXT ENTRY
; vmsrc/apple/a1cmd.pla: 0541:         BPL     +
        BPL     +
; vmsrc/apple/a1cmd.pla: 0542:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0543:         BNE     -
        BNE     -
; vmsrc/apple/a1cmd.pla: 0544: +       TYA
+       TYA
; vmsrc/apple/a1cmd.pla: 0545:         CLC
        CLC
; vmsrc/apple/a1cmd.pla: 0546:         ADC     #$03
        ADC     #$03
; vmsrc/apple/a1cmd.pla: 0547:         ADC     DSTL
        ADC     DSTL
; vmsrc/apple/a1cmd.pla: 0548:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0549:         BCC     --
        BCC     --
; vmsrc/apple/a1cmd.pla: 0550:         INC     DSTH
        INC     DSTH
; vmsrc/apple/a1cmd.pla: 0551:         BNE     --
        BNE     --
; vmsrc/apple/a1cmd.pla: 0552: end
; vmsrc/apple/a1cmd.pla: 0553: // def lookupidx(esd, index)
; vmsrc/apple/a1cmd.pla: 0554: //    word sym
; vmsrc/apple/a1cmd.pla: 0555: //    while ^esd
; vmsrc/apple/a1cmd.pla: 0556: //        sym = esd
; vmsrc/apple/a1cmd.pla: 0557: //        esd = sym + dcitos(sym, @str)
; vmsrc/apple/a1cmd.pla: 0558: //        if esd->0 & $10 and esd->1 == index
; vmsrc/apple/a1cmd.pla: 0559: //            return sym
; vmsrc/apple/a1cmd.pla: 0560: //        fin
; vmsrc/apple/a1cmd.pla: 0561: //        esd = esd + 3
; vmsrc/apple/a1cmd.pla: 0562: //    loop
; vmsrc/apple/a1cmd.pla: 0563: //end
; vmsrc/apple/a1cmd.pla: 0564: asm lookupidx(esd, index)#1
_A018 					; lookupidx()
; vmsrc/apple/a1cmd.pla: 0565:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0566:         STA     TMPL
        STA     TMPL
; vmsrc/apple/a1cmd.pla: 0567:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0568: ---     LDA     ESTKH,X
---     LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0569:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0570:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0571: --      STA     SRCL
--      STA     SRCL
; vmsrc/apple/a1cmd.pla: 0572:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0573: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0574:         BPL     +
        BPL     +
; vmsrc/apple/a1cmd.pla: 0575:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0576:         BNE     -
        BNE     -
; vmsrc/apple/a1cmd.pla: 0577: +       BEQ     ++              ; END OF ESD
+       BEQ     ++              ; END OF ESD
; vmsrc/apple/a1cmd.pla: 0578:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0579:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0580:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0581:         AND     #$10            ; EXTERN FLAG?
        AND     #$10            ; EXTERN FLAG?
; vmsrc/apple/a1cmd.pla: 0582:         BEQ     +
        BEQ     +
; vmsrc/apple/a1cmd.pla: 0583:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0584:         CMP     TMPL
        CMP     TMPL
; vmsrc/apple/a1cmd.pla: 0585:         BEQ     +++             ; MATCH
        BEQ     +++             ; MATCH
; vmsrc/apple/a1cmd.pla: 0586: +       INY
+       INY
; vmsrc/apple/a1cmd.pla: 0587:         TYA
        TYA
; vmsrc/apple/a1cmd.pla: 0588:         SEC
        SEC
; vmsrc/apple/a1cmd.pla: 0589:         ADC     SRCL
        ADC     SRCL
; vmsrc/apple/a1cmd.pla: 0590:         STA     ESTKL,X         ; SYM PTRL
        STA     ESTKL,X         ; SYM PTRL
; vmsrc/apple/a1cmd.pla: 0591:         BCC     --
        BCC     --
; vmsrc/apple/a1cmd.pla: 0592:         INC     ESTKH,X         ; SYM PTRH
        INC     ESTKH,X         ; SYM PTRH
; vmsrc/apple/a1cmd.pla: 0593:         BNE     ---
        BNE     ---
; vmsrc/apple/a1cmd.pla: 0594: ++      STA     ESTKL,X         ; END OF ESD
++      STA     ESTKL,X         ; END OF ESD
; vmsrc/apple/a1cmd.pla: 0595:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0596: +++     RTS
+++     RTS
; vmsrc/apple/a1cmd.pla: 0597: end
; vmsrc/apple/a1cmd.pla: 0598: //def lookupdef(addr, deftbl)#1
; vmsrc/apple/a1cmd.pla: 0599: //    while deftbl->0 == $20
; vmsrc/apple/a1cmd.pla: 0600: //        if deftbl=>3 == addr
; vmsrc/apple/a1cmd.pla: 0601: //            return deftbl
; vmsrc/apple/a1cmd.pla: 0602: //        fin
; vmsrc/apple/a1cmd.pla: 0603: //        deftbl = deftbl + 5
; vmsrc/apple/a1cmd.pla: 0604: //    loop
; vmsrc/apple/a1cmd.pla: 0605: //    return 0
; vmsrc/apple/a1cmd.pla: 0606: //end
; vmsrc/apple/a1cmd.pla: 0607: asm lookupdef(addr, deftbl)#1
_A019 					; lookupdef()
; vmsrc/apple/a1cmd.pla: 0608:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0609:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0610:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0611:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0612:         INX
        INX
; vmsrc/apple/a1cmd.pla: 0613: -       LDY     #$00
-       LDY     #$00
; vmsrc/apple/a1cmd.pla: 0614:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0615:         CMP     #$20            ; JSR OPCODE?
        CMP     #$20            ; JSR OPCODE?
; vmsrc/apple/a1cmd.pla: 0616:         BNE     ++
        BNE     ++
; vmsrc/apple/a1cmd.pla: 0617:         LDY     #$03
        LDY     #$03
; vmsrc/apple/a1cmd.pla: 0618:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0619:         CMP     ESTKL,X
        CMP     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0620:         BNE     +
        BNE     +
; vmsrc/apple/a1cmd.pla: 0621:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0622:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0623:         CMP     ESTKH,X
        CMP     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0624:         BNE     +
        BNE     +
; vmsrc/apple/a1cmd.pla: 0625:         LDA     SRCL            ; MATCH
        LDA     SRCL            ; MATCH
; vmsrc/apple/a1cmd.pla: 0626:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0627:         LDA     SRCH
        LDA     SRCH
; vmsrc/apple/a1cmd.pla: 0628:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0629:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0630: +       LDA     #$05
+       LDA     #$05
; vmsrc/apple/a1cmd.pla: 0631:         CLC
        CLC
; vmsrc/apple/a1cmd.pla: 0632:         ADC     SRCL
        ADC     SRCL
; vmsrc/apple/a1cmd.pla: 0633:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0634:         BCC     -
        BCC     -
; vmsrc/apple/a1cmd.pla: 0635:         INC     SRCH
        INC     SRCH
; vmsrc/apple/a1cmd.pla: 0636:         BNE     -
        BNE     -
; vmsrc/apple/a1cmd.pla: 0637: ++      STY     ESTKL,X
++      STY     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0638:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0639:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0640: end
; vmsrc/apple/a1cmd.pla: 0641: //
; vmsrc/apple/a1cmd.pla: 0642: // Reloc internal data
; vmsrc/apple/a1cmd.pla: 0643: //
; vmsrc/apple/a1cmd.pla: 0644: //def reloc(modfix, modofst, bytecode, rld)#3
; vmsrc/apple/a1cmd.pla: 0645: //    word addr, fixup
; vmsrc/apple/a1cmd.pla: 0646: //    while ^rld
; vmsrc/apple/a1cmd.pla: 0647: //        if ^rld & $10 // EXTERN reference.
; vmsrc/apple/a1cmd.pla: 0648: //            return rld, addr, fixup
; vmsrc/apple/a1cmd.pla: 0649: //        fin
; vmsrc/apple/a1cmd.pla: 0650: //        addr = rld=>1 + modfix
; vmsrc/apple/a1cmd.pla: 0651: //        fixup = *addr + modofst
; vmsrc/apple/a1cmd.pla: 0652: //        if uword_isge(fixup, bytecode) // Bytecode address.
; vmsrc/apple/a1cmd.pla: 0653: //            return rld, addr, fixup
; vmsrc/apple/a1cmd.pla: 0654: //        fin
; vmsrc/apple/a1cmd.pla: 0655: //        *addr = fixup
; vmsrc/apple/a1cmd.pla: 0656: //        rld = rld + 4
; vmsrc/apple/a1cmd.pla: 0657: //    loop
; vmsrc/apple/a1cmd.pla: 0658: //    return rld, addr, fixup
; vmsrc/apple/a1cmd.pla: 0659: //end
; vmsrc/apple/a1cmd.pla: 0660: asm reloc(modfix, modofst, bytecode, rld)#3
_A020 					; reloc()
; vmsrc/apple/a1cmd.pla: 0661:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0662:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0663:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0664:         STA     SRCH
        STA     SRCH
; vmsrc/apple/a1cmd.pla: 0665:         LDY     #$00
        LDY     #$00
; vmsrc/apple/a1cmd.pla: 0666: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0667:         BEQ     RLDEX       ; END OF RLD
        BEQ     RLDEX       ; END OF RLD
; vmsrc/apple/a1cmd.pla: 0668:         PHA
        PHA
; vmsrc/apple/a1cmd.pla: 0669:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0670:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0671:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0672:         CLC
        CLC
; vmsrc/apple/a1cmd.pla: 0673:         ADC     ESTKL+3,X   ; ADDR=ENTRY=>1+MODFIX
        ADC     ESTKL+3,X   ; ADDR=ENTRY=>1+MODFIX
; vmsrc/apple/a1cmd.pla: 0674:         STA     DSTL
        STA     DSTL
; vmsrc/apple/a1cmd.pla: 0675:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/a1cmd.pla: 0676:         ADC     ESTKH+3,X
        ADC     ESTKH+3,X
; vmsrc/apple/a1cmd.pla: 0677:         STA     DSTH
        STA     DSTH
; vmsrc/apple/a1cmd.pla: 0678:         PLA
        PLA
; vmsrc/apple/a1cmd.pla: 0679:         AND     #$10        ; EXTERN REF - EXIT
        AND     #$10        ; EXTERN REF - EXIT
; vmsrc/apple/a1cmd.pla: 0680:         BNE     RLDEX
        BNE     RLDEX
; vmsrc/apple/a1cmd.pla: 0681:         TAY                 ; FIXUP=*ADDR+MODOFST
        TAY                 ; FIXUP=*ADDR+MODOFST
; vmsrc/apple/a1cmd.pla: 0682:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0683:         INY
        INY
; vmsrc/apple/a1cmd.pla: 0684:         CLC
        CLC
; vmsrc/apple/a1cmd.pla: 0685:         ADC     ESTKL+2,X
        ADC     ESTKL+2,X
; vmsrc/apple/a1cmd.pla: 0686:         STA     TMPL
        STA     TMPL
; vmsrc/apple/a1cmd.pla: 0687:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0688:         ADC     ESTKH+2,X
        ADC     ESTKH+2,X
; vmsrc/apple/a1cmd.pla: 0689:         CMP     ESTKH+1,X   ; FIXUP >= BYTECODE?
        CMP     ESTKH+1,X   ; FIXUP >= BYTECODE?
; vmsrc/apple/a1cmd.pla: 0690:         BCC     +
        BCC     +
; vmsrc/apple/a1cmd.pla: 0691:         STA     TMPH
        STA     TMPH
; vmsrc/apple/a1cmd.pla: 0692:         BNE     RLDEX       ; YEP, EXIT
        BNE     RLDEX       ; YEP, EXIT
; vmsrc/apple/a1cmd.pla: 0693:         LDA     TMPL
        LDA     TMPL
; vmsrc/apple/a1cmd.pla: 0694:         CMP     ESTKL+1,X
        CMP     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0695:         BCS     RLDEX       ; YEP, EXIT
        BCS     RLDEX       ; YEP, EXIT
; vmsrc/apple/a1cmd.pla: 0696:         LDA     TMPH
        LDA     TMPH
; vmsrc/apple/a1cmd.pla: 0697: +       STA     (DST),Y     ; *ADDR=FIXUP
+       STA     (DST),Y     ; *ADDR=FIXUP
; vmsrc/apple/a1cmd.pla: 0698:         DEY
        DEY
; vmsrc/apple/a1cmd.pla: 0699:         LDA     TMPL
        LDA     TMPL
; vmsrc/apple/a1cmd.pla: 0700:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/a1cmd.pla: 0701:         LDA     SRCL        ; NEXT ENTRY
        LDA     SRCL        ; NEXT ENTRY
; vmsrc/apple/a1cmd.pla: 0702: ;       CLC
;       CLC
; vmsrc/apple/a1cmd.pla: 0703:         ADC     #$04
        ADC     #$04
; vmsrc/apple/a1cmd.pla: 0704:         STA     SRCL
        STA     SRCL
; vmsrc/apple/a1cmd.pla: 0705:         BCC     -
        BCC     -
; vmsrc/apple/a1cmd.pla: 0706:         INC     SRCH
        INC     SRCH
; vmsrc/apple/a1cmd.pla: 0707:         BNE     -
        BNE     -
; vmsrc/apple/a1cmd.pla: 0708: RLDEX   INX
RLDEX   INX
; vmsrc/apple/a1cmd.pla: 0709:         LDA     TMPL
        LDA     TMPL
; vmsrc/apple/a1cmd.pla: 0710:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0711:         LDA     TMPH
        LDA     TMPH
; vmsrc/apple/a1cmd.pla: 0712:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0713:         LDA     DSTL
        LDA     DSTL
; vmsrc/apple/a1cmd.pla: 0714:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/a1cmd.pla: 0715:         LDA     DSTH
        LDA     DSTH
; vmsrc/apple/a1cmd.pla: 0716:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/a1cmd.pla: 0717:         LDA     SRCL
        LDA     SRCL
; vmsrc/apple/a1cmd.pla: 0718:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; vmsrc/apple/a1cmd.pla: 0719:         LDA     SRCH
        LDA     SRCH
; vmsrc/apple/a1cmd.pla: 0720:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; vmsrc/apple/a1cmd.pla: 0721:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0722: end
; vmsrc/apple/a1cmd.pla: 0723: //
; vmsrc/apple/a1cmd.pla: 0724: // CONSOLE I/O
; vmsrc/apple/a1cmd.pla: 0725: //
; vmsrc/apple/a1cmd.pla: 0726: asm cout(c)#0
_P003 					; cout(c)#0()
_A021 					; cout()
; vmsrc/apple/a1cmd.pla: 0727:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0728:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/a1cmd.pla: 0729:         ORA     #$80
        ORA     #$80
; vmsrc/apple/a1cmd.pla: 0730:         JMP     $FFEF
        JMP     $FFEF
; vmsrc/apple/a1cmd.pla: 0731: end
; vmsrc/apple/a1cmd.pla: 0732: asm cin()#1
_P008 					; cin()#1()
_A022 					; cin()
; vmsrc/apple/a1cmd.pla: 0733:         DEX
        DEX
; vmsrc/apple/a1cmd.pla: 0734: -       LDA     $D011
-       LDA     $D011
; vmsrc/apple/a1cmd.pla: 0735:         BPL     -
        BPL     -
; vmsrc/apple/a1cmd.pla: 0736:         LDA     $D010
        LDA     $D010
; vmsrc/apple/a1cmd.pla: 0737:         AND     #$7F
        AND     #$7F
; vmsrc/apple/a1cmd.pla: 0738:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/a1cmd.pla: 0739:         LDA     #$00
        LDA     #$00
; vmsrc/apple/a1cmd.pla: 0740:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/a1cmd.pla: 0741:         RTS
        RTS
; vmsrc/apple/a1cmd.pla: 0742: end
; vmsrc/apple/a1cmd.pla: 0743: def crout()#0
_P002 					; crout()#0()
_C000 					; crout()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0744:     cout($0D)
; vmsrc/apple/a1cmd.pla: 0745: end
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_A021
_F059 	!WORD	_A021		
	!BYTE	$5C			; RET
; vmsrc/apple/a1cmd.pla: 0746: def prstr(str)#0
					; str -> [0]
_P004 					; prstr(str)#0()
_C001 					; prstr()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0747:     byte i
					; i -> [2]
; vmsrc/apple/a1cmd.pla: 0748:     for i = 1 to ^str
	!BYTE	$58,$03,$01		; ENTER	3,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B001
	!WORD	_B001-*
_B002 
	!BYTE	$6C,$02			; DLB	[2]
; vmsrc/apple/a1cmd.pla: 0749:         cout(^(str + i))
; vmsrc/apple/a1cmd.pla: 0750:     next
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A021
_F060 	!WORD	_A021		
_B003 
	!BYTE	$A4			; INCBRLE	_B002
	!WORD	_B002-*
_B001 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; vmsrc/apple/a1cmd.pla: 0751: end
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/a1cmd.pla: 0752: def print(i)#0
					; i -> [0]
_P005 					; print(i)#0()
_C002 					; print()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0753:     if i < 0; cout('-'); i = -i; fin
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B004
	!WORD	_B004-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$54			; CALL	_A021
_F061 	!WORD	_A021		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$90			; NEG
	!BYTE	$76,$00			; SLW	[0]
_B004 
_B005 
; vmsrc/apple/a1cmd.pla: 0754:     if i >= 10; print(i / 10); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B006
	!WORD	_B006-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$54			; CALL	_C002
_F062 	!WORD	_C002		
_B006 
_B007 
; vmsrc/apple/a1cmd.pla: 0755:     cout(i % 10 + '0')
; vmsrc/apple/a1cmd.pla: 0756: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$8A			; MOD
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$54			; CALL	_A021
_F063 	!WORD	_A021		
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 0757: def rdstr(prompt)#1
					; prompt -> [0]
_P009 					; rdstr(prompt)#1()
_C003 					; rdstr()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0758:     byte ch, maxlen
					; ch -> [2]
					; maxlen -> [3]
; vmsrc/apple/a1cmd.pla: 0759:     maxlen = 0
	!BYTE	$58,$04,$01		; ENTER	4,1
; vmsrc/apple/a1cmd.pla: 0760:     inbuff.0 = 0
; vmsrc/apple/a1cmd.pla: 0761:     cout(prompt)
; vmsrc/apple/a1cmd.pla: 0762:     repeat
	!BYTE	$00			; CN	0
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$00			; CN	0
	!BYTE	$78,$00,$02		; SAB	512
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_A021
_F064 	!WORD	_A021		
_B009 
; vmsrc/apple/a1cmd.pla: 0763:         ch = cin
; vmsrc/apple/a1cmd.pla: 0764:         when ch
	!BYTE	$54			; CALL	_A022
_F065 	!WORD	_A022		
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$52			; SEL
	!WORD	_B012-*
; vmsrc/apple/a1cmd.pla: 0765:             is $15 // right arrow
_B013 
; vmsrc/apple/a1cmd.pla: 0766:                 if ^inbuff < maxlen //inbuff.0 < maxlen
; vmsrc/apple/a1cmd.pla: 0767:                     inbuff.0++
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B014
	!WORD	_B014-*
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$8C			; INCR
; vmsrc/apple/a1cmd.pla: 0768:                     ch = inbuff[inbuff.0]
; vmsrc/apple/a1cmd.pla: 0769:                     cout(ch)
; vmsrc/apple/a1cmd.pla: 0770:                 fin
	!BYTE	$78,$00,$02		; SAB	512
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$B4,$00,$02		; ADDAB	512
	!BYTE	$60			; LB
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$54			; CALL	_A021
_F066 	!WORD	_A021		
_B014 
_B015 
; vmsrc/apple/a1cmd.pla: 0771:                 break
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; vmsrc/apple/a1cmd.pla: 0772:             is $08 // left arrow
_B016 
; vmsrc/apple/a1cmd.pla: 0773:                 if inbuff.0
; vmsrc/apple/a1cmd.pla: 0774:                     cout('\\')
; vmsrc/apple/a1cmd.pla: 0775:                     cout(inbuff[inbuff.0])
; vmsrc/apple/a1cmd.pla: 0776:                     inbuff.0--
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$2A,$5C			; CB	92
	!BYTE	$54			; CALL	_A021
_F067 	!WORD	_A021		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$B4,$00,$02		; ADDAB	512
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A021
_F068 	!WORD	_A021		
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 0777:                 fin
	!BYTE	$78,$00,$02		; SAB	512
_B017 
_B018 
; vmsrc/apple/a1cmd.pla: 0778:                 break
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; vmsrc/apple/a1cmd.pla: 0779:             is $04 // ctrl-d
_B019 
; vmsrc/apple/a1cmd.pla: 0780:                 if inbuff.0
; vmsrc/apple/a1cmd.pla: 0781:                     cout('#')
; vmsrc/apple/a1cmd.pla: 0782:                     cout(inbuff[inbuff.0])
; vmsrc/apple/a1cmd.pla: 0783:                     memcpy(inbuff + inbuff.0, inbuff + inbuff.0 + 1, maxlen - inbuff.0)
; vmsrc/apple/a1cmd.pla: 0784:                     maxlen--
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$4C			; BRFLS	_B020
	!WORD	_B020-*
	!BYTE	$2A,$23			; CB	35
	!BYTE	$54			; CALL	_A021
_F069 	!WORD	_A021		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$B4,$00,$02		; ADDAB	512
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A021
_F070 	!WORD	_A021		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$B4,$00,$02		; ADDAB	512
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$B4,$00,$02		; ADDAB	512
	!BYTE	$8C			; INCR
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$84			; SUB 
	!BYTE	$54			; CALL	_A006
_F071 	!WORD	_A006		
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 0785:                     inbuff.0--
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 0786:                 fin
	!BYTE	$78,$00,$02		; SAB	512
_B020 
_B021 
; vmsrc/apple/a1cmd.pla: 0787:                 break
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; vmsrc/apple/a1cmd.pla: 0788:             is $0C // ctrl-l
_B022 
; vmsrc/apple/a1cmd.pla: 0789:                 crout
; vmsrc/apple/a1cmd.pla: 0790:                 prstr(inbuff)
; vmsrc/apple/a1cmd.pla: 0791:                 break
	!BYTE	$54			; CALL	_C000
_F072 	!WORD	_C000		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$54			; CALL	_C001
_F073 	!WORD	_C001		
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; vmsrc/apple/a1cmd.pla: 0792:             is $0D // return
_B023 
; vmsrc/apple/a1cmd.pla: 0793:             is $18 // ctrl-x
_B024 
; vmsrc/apple/a1cmd.pla: 0794:                 crout
; vmsrc/apple/a1cmd.pla: 0795:                 inbuff.0 = 0
; vmsrc/apple/a1cmd.pla: 0796:                 break
	!BYTE	$54			; CALL	_C000
_F074 	!WORD	_C000		
	!BYTE	$00			; CN	0
	!BYTE	$78,$00,$02		; SAB	512
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; vmsrc/apple/a1cmd.pla: 0797:             is $9B // escape
_B025 
; vmsrc/apple/a1cmd.pla: 0798:                 inbuff.0 = 0
; vmsrc/apple/a1cmd.pla: 0799:                 ch = $0D
; vmsrc/apple/a1cmd.pla: 0800:                 break
	!BYTE	$00			; CN	0
	!BYTE	$78,$00,$02		; SAB	512
	!BYTE	$1A			; CN	13
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$50			; BRNCH	_B011
	!WORD	_B011-*
; vmsrc/apple/a1cmd.pla: 0801:             otherwise
_B012 
	!BYTE	$07			; CASEBLOCK
	!WORD	$0004
	!WORD	_B019-*
	!WORD	$0008
	!WORD	_B016-*
	!WORD	$000C
	!WORD	_B022-*
	!WORD	$000D
	!WORD	_B023-*
	!WORD	$0015
	!WORD	_B013-*
	!WORD	$0018
	!WORD	_B024-*
	!WORD	$009B
	!WORD	_B025-*
; vmsrc/apple/a1cmd.pla: 0802:                 if ch >= ' '
; vmsrc/apple/a1cmd.pla: 0803:                     cout(ch)
; vmsrc/apple/a1cmd.pla: 0804:                     inbuff.0++
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$2A,$20			; CB	32
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B026
	!WORD	_B026-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_A021
_F075 	!WORD	_A021		
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$8C			; INCR
; vmsrc/apple/a1cmd.pla: 0805:                     inbuff[inbuff.0] = ch
; vmsrc/apple/a1cmd.pla: 0806:                     if inbuff.0 > maxlen
; vmsrc/apple/a1cmd.pla: 0807:                         maxlen = inbuff.0
; vmsrc/apple/a1cmd.pla: 0808:                     fin
	!BYTE	$78,$00,$02		; SAB	512
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$B4,$00,$02		; ADDAB	512
	!BYTE	$70			; SB
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B028
	!WORD	_B028-*
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$74,$03			; SLB	[3]
_B028 
_B029 
; vmsrc/apple/a1cmd.pla: 0809:                 fin
_B026 
_B027 
; vmsrc/apple/a1cmd.pla: 0810:         wend
_B011 
; vmsrc/apple/a1cmd.pla: 0811:     until ch == $0D or inbuff.0 == $7F
_B010 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$1A			; CN	13
	!BYTE	$40			; ISEQ
	!BYTE	$AE			; BROR	_B030
	!WORD	_B030-*
	!BYTE	$68,$00,$02		; LAB	512
	!BYTE	$2A,$7F			; CB	127
	!BYTE	$40			; ISEQ
_B030 
	!BYTE	$4C			; BRFLS	_B009
	!WORD	_B009-*
_B008 
; vmsrc/apple/a1cmd.pla: 0812:     cout($0D)
; vmsrc/apple/a1cmd.pla: 0813:     return inbuff
	!BYTE	$1A			; CN	13
	!BYTE	$54			; CALL	_A021
_F076 	!WORD	_A021		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0814: end
; vmsrc/apple/a1cmd.pla: 0815: def prbyte(v)#0
					; v -> [0]
_P006 					; prbyte(v)#0()
_C004 					; prbyte()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0816:     cout(hexchar[(v >> 4) & $0F])
	!BYTE	$58,$02,$01		; ENTER	2,1
; vmsrc/apple/a1cmd.pla: 0817:     cout(hexchar[v & $0F])
; vmsrc/apple/a1cmd.pla: 0818: end
	!BYTE	$26			; LA	_D043+0
_F077 	!WORD	_D043+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$08			; CN	4
	!BYTE	$9C			; SHR
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A021
_F078 	!WORD	_A021		
	!BYTE	$26			; LA	_D043+0
_F079 	!WORD	_D043+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A021
_F080 	!WORD	_A021		
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 0819: def prword(v)#0
					; v -> [0]
_P007 					; prword(v)#0()
_C005 					; prword()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0820:     prbyte(v >> 8)
	!BYTE	$58,$02,$01		; ENTER	2,1
; vmsrc/apple/a1cmd.pla: 0821:     prbyte(v)
; vmsrc/apple/a1cmd.pla: 0822: end
	!BYTE	$64,$01			; LLB	[1]
	!BYTE	$54			; CALL	_C004
_F081 	!WORD	_C004		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C004
_F082 	!WORD	_C004		
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 0823: //
; vmsrc/apple/a1cmd.pla: 0824: // String routines.
; vmsrc/apple/a1cmd.pla: 0825: //
; vmsrc/apple/a1cmd.pla: 0826: def strcpy(dst, src)#1
					; dst -> [0]
					; src -> [2]
_P011 					; strcpy(dst, src)#1()
_C006 					; strcpy()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0827:     memcpy(dst+1, src+1, ^src)
	!BYTE	$58,$04,$02		; ENTER	4,2
; vmsrc/apple/a1cmd.pla: 0828:     ^dst = ^src
; vmsrc/apple/a1cmd.pla: 0829:     return dst
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A006
_F083 	!WORD	_A006		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0830: end
; vmsrc/apple/a1cmd.pla: 0831: def strcat(dst, src)#1
					; dst -> [0]
					; src -> [2]
_P012 					; strcat(dst, src)#1()
_C007 					; strcat()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0832:     memcpy(dst + ^dst + 1, src + 1, ^src)
	!BYTE	$58,$04,$02		; ENTER	4,2
; vmsrc/apple/a1cmd.pla: 0833:     ^dst = ^dst + ^src
; vmsrc/apple/a1cmd.pla: 0834:     return dst
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A006
_F084 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0835: end
; vmsrc/apple/a1cmd.pla: 0836: //
; vmsrc/apple/a1cmd.pla: 0837: // CFFA1 routines
; vmsrc/apple/a1cmd.pla: 0838: // FILE I/O
; vmsrc/apple/a1cmd.pla: 0839: //
; vmsrc/apple/a1cmd.pla: 0840: //def opendir
; vmsrc/apple/a1cmd.pla: 0841: //    perr = syscall($10, 0)
; vmsrc/apple/a1cmd.pla: 0842: //    return perr
; vmsrc/apple/a1cmd.pla: 0843: //end
; vmsrc/apple/a1cmd.pla: 0844: //def readdir
; vmsrc/apple/a1cmd.pla: 0845: //    perr = syscall($12, 0)
; vmsrc/apple/a1cmd.pla: 0846: //    return *CFFAEntryPtr
; vmsrc/apple/a1cmd.pla: 0847: //end
; vmsrc/apple/a1cmd.pla: 0848: def finddirentry(filename)#1
					; filename -> [0]
_C008 					; finddirentry()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0849:     *CFFAFileName = filename
	!BYTE	$58,$02,$01		; ENTER	2,1
; vmsrc/apple/a1cmd.pla: 0850:     perr = syscall($14, 0)
; vmsrc/apple/a1cmd.pla: 0851:     return *CFFAEntryPtr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A,$02,$00		; SAW	2
	!BYTE	$2A,$14			; CB	20
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_A002
_F085 	!WORD	_A002		
	!BYTE	$78			; SAB	_D034+0
_F086 	!WORD	_D034+0		
	!BYTE	$6A,$0B,$00		; LAW	11
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 0852: end
; vmsrc/apple/a1cmd.pla: 0853: def readfile(filename, buffer)#1
					; filename -> [0]
					; buffer -> [2]
_C009 					; readfile()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0854:     *CFFADest     = buffer
	!BYTE	$58,$04,$02		; ENTER	4,2
; vmsrc/apple/a1cmd.pla: 0855:     *CFFAFileName = filename
; vmsrc/apple/a1cmd.pla: 0856:     perr = syscall($22, 0)
; vmsrc/apple/a1cmd.pla: 0857:     return perr
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A,$00,$00		; SAW	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A,$02,$00		; SAW	2
	!BYTE	$2A,$22			; CB	34
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_A002
_F087 	!WORD	_A002		
	!BYTE	$7C			; DAB	_D034+0
_F088 	!WORD	_D034+0		
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0858: end
; vmsrc/apple/a1cmd.pla: 0859: //
; vmsrc/apple/a1cmd.pla: 0860: // Heap routines.
; vmsrc/apple/a1cmd.pla: 0861: //
; vmsrc/apple/a1cmd.pla: 0862: def availheap()#1
_P017 					; availheap()#1()
_C010 					; availheap()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0863:     byte fp
					; fp -> [0]
; vmsrc/apple/a1cmd.pla: 0864:     return @fp - heap
	!BYTE	$58,$01,$00		; ENTER	1,0
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$6A			; LAW	_D031+0
_F089 	!WORD	_D031+0		
	!BYTE	$84			; SUB 
	!BYTE	$5A,$01			; LEAVE	1
; vmsrc/apple/a1cmd.pla: 0865: end
; vmsrc/apple/a1cmd.pla: 0866: def allocheap(size)#1
					; size -> [0]
_P014 					; allocheap(size)#1()
_C011 					; allocheap()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0867:     word addr
					; addr -> [2]
; vmsrc/apple/a1cmd.pla: 0868:     addr = heap
	!BYTE	$58,$04,$01		; ENTER	4,1
; vmsrc/apple/a1cmd.pla: 0869:     heap = heap + size
; vmsrc/apple/a1cmd.pla: 0870:     if uword_isge(heap, @addr)
; vmsrc/apple/a1cmd.pla: 0871:         return 0
	!BYTE	$6A			; LAW	_D031+0
_F090 	!WORD	_D031+0		
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$6A			; LAW	_D031+0
_F091 	!WORD	_D031+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$7E			; DAW	_D031+0
_F092 	!WORD	_D031+0		
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_A007
_F093 	!WORD	_A007		
	!BYTE	$4C			; BRFLS	_B031
	!WORD	_B031-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0872:     fin
_B031 
_B032 
; vmsrc/apple/a1cmd.pla: 0873:     return addr
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0874: end
; vmsrc/apple/a1cmd.pla: 0875: def allocalignheap(size, pow2, freeaddr)#1
					; size -> [0]
					; pow2 -> [2]
					; freeaddr -> [4]
_P015 					; allocalignheap(size, pow2, freeaddr)#1()
_C012 					; allocalignheap()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0876:     word align, addr
					; align -> [6]
					; addr -> [8]
; vmsrc/apple/a1cmd.pla: 0877:     if freeaddr
	!BYTE	$58,$0A,$03		; ENTER	10,3
; vmsrc/apple/a1cmd.pla: 0878:         *freeaddr = heap
; vmsrc/apple/a1cmd.pla: 0879:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$4C			; BRFLS	_B033
	!WORD	_B033-*
	!BYTE	$6A			; LAW	_D031+0
_F094 	!WORD	_D031+0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$72			; SW
_B033 
_B034 
; vmsrc/apple/a1cmd.pla: 0880:     align = (1 << pow2) - 1
; vmsrc/apple/a1cmd.pla: 0881:     addr = (heap | align) + 1
; vmsrc/apple/a1cmd.pla: 0882:     heap = addr + size
; vmsrc/apple/a1cmd.pla: 0883:     if uword_isge(heap, @addr)
; vmsrc/apple/a1cmd.pla: 0884:         return 0
	!BYTE	$02			; CN	1
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$9A			; SHL
	!BYTE	$8E			; DECR
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$6A			; LAW	_D031+0
_F095 	!WORD	_D031+0		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$96			; OR 
	!BYTE	$8C			; INCR
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$7E			; DAW	_D031+0
_F096 	!WORD	_D031+0		
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_A007
_F097 	!WORD	_A007		
	!BYTE	$4C			; BRFLS	_B035
	!WORD	_B035-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0A			; LEAVE	10
; vmsrc/apple/a1cmd.pla: 0885:     fin
_B035 
_B036 
; vmsrc/apple/a1cmd.pla: 0886:     return addr
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$5A,$0A			; LEAVE	10
; vmsrc/apple/a1cmd.pla: 0887: end
; vmsrc/apple/a1cmd.pla: 0888: def markheap()#1
_P013 					; markheap()#1()
_C013 					; markheap()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0889:     return heap
	!BYTE	$6A			; LAW	_D031+0
_F098 	!WORD	_D031+0		
	!BYTE	$5C			; RET
; vmsrc/apple/a1cmd.pla: 0890: end
; vmsrc/apple/a1cmd.pla: 0891: def releaseheap(newheap)#1
					; newheap -> [0]
_P016 					; releaseheap(newheap)#1()
_C014 					; releaseheap()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0892:     heap = newheap
	!BYTE	$58,$02,$01		; ENTER	2,1
; vmsrc/apple/a1cmd.pla: 0893:     return @newheap - heap
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D031+0
_F099 	!WORD	_D031+0		
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$6A			; LAW	_D031+0
_F100 	!WORD	_D031+0		
	!BYTE	$84			; SUB 
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 0894: end
; vmsrc/apple/a1cmd.pla: 0895: //
; vmsrc/apple/a1cmd.pla: 0896: // Symbol table routines.
; vmsrc/apple/a1cmd.pla: 0897: //
; vmsrc/apple/a1cmd.pla: 0898: def addsym(sym, addr)#0
					; sym -> [0]
					; addr -> [2]
_C015 					; addsym()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0899:     while ^sym & $80
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$50			; BRNCH	_B039
	!WORD	_B039-*
_B037 
; vmsrc/apple/a1cmd.pla: 0900:         ^lastsym = ^sym
; vmsrc/apple/a1cmd.pla: 0901:         lastsym  = lastsym + 1
; vmsrc/apple/a1cmd.pla: 0902:         sym      = sym     + 1
; vmsrc/apple/a1cmd.pla: 0903:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$6A			; LAW	_D033+0
_F101 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$6A			; LAW	_D033+0
_F102 	!WORD	_D033+0		
	!BYTE	$8C			; INCR
	!BYTE	$7A			; SAW	_D033+0
_F103 	!WORD	_D033+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$76,$00			; SLW	[0]
_B039 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B037
	!WORD	_B037-*
_B038 
; vmsrc/apple/a1cmd.pla: 0904:     lastsym->0 = ^sym
; vmsrc/apple/a1cmd.pla: 0905:     lastsym=>1 = addr
; vmsrc/apple/a1cmd.pla: 0906:     lastsym    = lastsym + 3
; vmsrc/apple/a1cmd.pla: 0907:     ^lastsym   = 0
; vmsrc/apple/a1cmd.pla: 0908: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$6A			; LAW	_D033+0
_F104 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D033+0
_F105 	!WORD	_D033+0		
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$6A			; LAW	_D033+0
_F106 	!WORD	_D033+0		
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$7A			; SAW	_D033+0
_F107 	!WORD	_D033+0		
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D033+0
_F108 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/a1cmd.pla: 0909: //
; vmsrc/apple/a1cmd.pla: 0910: // Module routines.
; vmsrc/apple/a1cmd.pla: 0911: //
; vmsrc/apple/a1cmd.pla: 0912: def lookupextern(esd, index)#1
					; esd -> [0]
					; index -> [2]
_C016 					; lookupextern()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0913:     word sym, addr
					; sym -> [4]
					; addr -> [6]
; vmsrc/apple/a1cmd.pla: 0914:     byte str[33]
					; str -> [8]
; vmsrc/apple/a1cmd.pla: 0915:     while ^esd
	!BYTE	$58,$29,$02		; ENTER	41,2
	!BYTE	$50			; BRNCH	_B042
	!WORD	_B042-*
_B040 
; vmsrc/apple/a1cmd.pla: 0916:         sym = esd
; vmsrc/apple/a1cmd.pla: 0917:         esd = sym + dcitos(sym, @str)
; vmsrc/apple/a1cmd.pla: 0918:         if esd->0 & $10 and esd->1 == index
; vmsrc/apple/a1cmd.pla: 0919:             addr = lookuptbl(sym, symtbl)
; vmsrc/apple/a1cmd.pla: 0920:             if !addr
; vmsrc/apple/a1cmd.pla: 0921:                 perr = $81
; vmsrc/apple/a1cmd.pla: 0922:                 cout('?')
; vmsrc/apple/a1cmd.pla: 0923:                 prstr(@str)
; vmsrc/apple/a1cmd.pla: 0924:                 crout
; vmsrc/apple/a1cmd.pla: 0925:             fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_A014
_F109 	!WORD	_A014		
	!BYTE	$82			; ADD 
	!BYTE	$6E,$00			; DLW	[0]
	!BYTE	$60			; LB
	!BYTE	$3C,$10			; ANDI	16
	!BYTE	$AC			; BRAND	_B043
	!WORD	_B043-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$40			; ISEQ
_B043 
	!BYTE	$4C			; BRFLS	_B044
	!WORD	_B044-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$6A			; LAW	_D032+0
_F110 	!WORD	_D032+0		
	!BYTE	$54			; CALL	_A017
_F111 	!WORD	_A017		
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$4E			; BRTRU	_B046
	!WORD	_B046-*
	!BYTE	$2A,$81			; CB	129
	!BYTE	$78			; SAB	_D034+0
_F112 	!WORD	_D034+0		
	!BYTE	$2A,$3F			; CB	63
	!BYTE	$54			; CALL	_A021
_F113 	!WORD	_A021		
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_C001
_F114 	!WORD	_C001		
	!BYTE	$54			; CALL	_C000
_F115 	!WORD	_C000		
_B046 
_B047 
; vmsrc/apple/a1cmd.pla: 0926:             return addr
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$5A,$29			; LEAVE	41
; vmsrc/apple/a1cmd.pla: 0927:         fin
_B044 
_B045 
; vmsrc/apple/a1cmd.pla: 0928:         esd = esd + 3
; vmsrc/apple/a1cmd.pla: 0929:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$00			; SLW	[0]
_B042 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B040
	!WORD	_B040-*
_B041 
; vmsrc/apple/a1cmd.pla: 0930:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$29			; LEAVE	41
; vmsrc/apple/a1cmd.pla: 0931: end
; vmsrc/apple/a1cmd.pla: 0932: def adddef(addr, deflast)#1
					; addr -> [0]
					; deflast -> [2]
_C017 					; adddef()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0933:     word defentry
					; defentry -> [4]
; vmsrc/apple/a1cmd.pla: 0934:     defentry = *deflast
	!BYTE	$58,$06,$02		; ENTER	6,2
; vmsrc/apple/a1cmd.pla: 0935:     *deflast = defentry + 5
; vmsrc/apple/a1cmd.pla: 0936:     defentry->0 = $20
; vmsrc/apple/a1cmd.pla: 0937:     defentry=>1 = interp
; vmsrc/apple/a1cmd.pla: 0938:     defentry=>3 = addr
; vmsrc/apple/a1cmd.pla: 0939:     defentry->5 = 0 // null out next entry
; vmsrc/apple/a1cmd.pla: 0940:     return defentry
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$62			; LW
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$70			; SB
	!BYTE	$54			; CALL	_A013
_F116 	!WORD	_A013		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$5A,$06			; LEAVE	6
; vmsrc/apple/a1cmd.pla: 0941: end
; vmsrc/apple/a1cmd.pla: 0942: def loadmod(mod)#1
					; mod -> [0]
_C018 					; loadmod()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 0943:     word rdlen, modsize, bytecode, defofst, defcnt, init, fixup
					; rdlen -> [2]
					; modsize -> [4]
					; bytecode -> [6]
					; defofst -> [8]
					; defcnt -> [10]
					; init -> [12]
					; fixup -> [14]
; vmsrc/apple/a1cmd.pla: 0944:     word addr, modaddr, modfix, modofst, modend
					; addr -> [16]
					; modaddr -> [18]
					; modfix -> [20]
					; modofst -> [22]
					; modend -> [24]
; vmsrc/apple/a1cmd.pla: 0945:     word deftbl, deflast
					; deftbl -> [26]
					; deflast -> [28]
; vmsrc/apple/a1cmd.pla: 0946:     word moddep, rld, esd, sym
					; moddep -> [30]
					; rld -> [32]
					; esd -> [34]
					; sym -> [36]
; vmsrc/apple/a1cmd.pla: 0947:     byte type, str[17], filename[17]
					; type -> [38]
					; str -> [39]
					; filename -> [56]
; vmsrc/apple/a1cmd.pla: 0948:     byte header[128]
					; header -> [73]
; vmsrc/apple/a1cmd.pla: 0949:     //
; vmsrc/apple/a1cmd.pla: 0950:     // Read the RELocatable module header (first 128 bytes)
; vmsrc/apple/a1cmd.pla: 0951:     //
; vmsrc/apple/a1cmd.pla: 0952:     dcitos(mod, @filename)
	!BYTE	$58,$C9,$01		; ENTER	201,1
; vmsrc/apple/a1cmd.pla: 0953:     rdlen = finddirentry(@filename)=>$15
; vmsrc/apple/a1cmd.pla: 0954:     if perr
; vmsrc/apple/a1cmd.pla: 0955:         return -perr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$38			; LLA	[56]
	!BYTE	$54			; CALL	_A014
_F117 	!WORD	_A014		
	!BYTE	$30			; DROP 
	!BYTE	$28,$38			; LLA	[56]
	!BYTE	$54			; CALL	_C008
_F118 	!WORD	_C008		
	!BYTE	$38,$15			; ADDI	21
	!BYTE	$62			; LW
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$68			; LAB	_D034+0
_F119 	!WORD	_D034+0		
	!BYTE	$4C			; BRFLS	_B048
	!WORD	_B048-*
	!BYTE	$68			; LAB	_D034+0
_F120 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$C9			; LEAVE	201
; vmsrc/apple/a1cmd.pla: 0956:     fin
_B048 
_B049 
; vmsrc/apple/a1cmd.pla: 0957:     if rdlen > 0
; vmsrc/apple/a1cmd.pla: 0958:         readfile(@filename, heap)
; vmsrc/apple/a1cmd.pla: 0959:         memcpy(@header, heap, 128)
; vmsrc/apple/a1cmd.pla: 0960:         modsize = header:0
; vmsrc/apple/a1cmd.pla: 0961:         moddep  = @header.1
; vmsrc/apple/a1cmd.pla: 0962:         defofst = modsize + RELADDR
; vmsrc/apple/a1cmd.pla: 0963:         init    = 0
; vmsrc/apple/a1cmd.pla: 0964:         if rdlen > 4 and heap=>2 == $6502 // magic number
; vmsrc/apple/a1cmd.pla: 0965:             //
; vmsrc/apple/a1cmd.pla: 0966:             // This is an EXTended RELocatable (data+bytecode) module.
; vmsrc/apple/a1cmd.pla: 0967:             //
; vmsrc/apple/a1cmd.pla: 0968:             defofst  = header:6
; vmsrc/apple/a1cmd.pla: 0969:             defcnt   = header:8
; vmsrc/apple/a1cmd.pla: 0970:             init     = header:10
; vmsrc/apple/a1cmd.pla: 0971:             moddep   = @header.12
; vmsrc/apple/a1cmd.pla: 0972:             //
; vmsrc/apple/a1cmd.pla: 0973:             // Load module dependencies.
; vmsrc/apple/a1cmd.pla: 0974:             //
; vmsrc/apple/a1cmd.pla: 0975:             while ^moddep
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B050
	!WORD	_B050-*
	!BYTE	$28,$38			; LLA	[56]
	!BYTE	$6A			; LAW	_D031+0
_F121 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_C009
_F122 	!WORD	_C009		
	!BYTE	$30			; DROP 
	!BYTE	$28,$49			; LLA	[73]
	!BYTE	$6A			; LAW	_D031+0
_F123 	!WORD	_D031+0		
	!BYTE	$2A,$80			; CB	128
	!BYTE	$54			; CALL	_A006
_F124 	!WORD	_A006		
	!BYTE	$66,$49			; LLW	[73]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$28,$4A			; LLA	[74]
	!BYTE	$76,$1E			; SLW	[30]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$82			; ADD 
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$08			; CN	4
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B052
	!WORD	_B052-*
	!BYTE	$6A			; LAW	_D031+0
_F125 	!WORD	_D031+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$2C,$02,$65		; CW	25858
	!BYTE	$40			; ISEQ
_B052 
	!BYTE	$4C			; BRFLS	_B053
	!WORD	_B053-*
	!BYTE	$66,$4F			; LLW	[79]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$51			; LLW	[81]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$53			; LLW	[83]
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$28,$55			; LLA	[85]
	!BYTE	$76,$1E			; SLW	[30]
	!BYTE	$50			; BRNCH	_B057
	!WORD	_B057-*
_B055 
; vmsrc/apple/a1cmd.pla: 0976:                 if !lookuptbl(moddep, symtbl)
; vmsrc/apple/a1cmd.pla: 0977:                     if loadmod(moddep) < 0
; vmsrc/apple/a1cmd.pla: 0978:                         return -perr
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$6A			; LAW	_D032+0
_F126 	!WORD	_D032+0		
	!BYTE	$54			; CALL	_A017
_F127 	!WORD	_A017		
	!BYTE	$4E			; BRTRU	_B058
	!WORD	_B058-*
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$54			; CALL	_C018
_F128 	!WORD	_C018		
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B060
	!WORD	_B060-*
	!BYTE	$68			; LAB	_D034+0
_F129 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$C9			; LEAVE	201
; vmsrc/apple/a1cmd.pla: 0979:                     fin
_B060 
_B061 
; vmsrc/apple/a1cmd.pla: 0980:                 fin
_B058 
_B059 
; vmsrc/apple/a1cmd.pla: 0981:                 moddep = moddep + dcitos(moddep, @str)
; vmsrc/apple/a1cmd.pla: 0982:             loop
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$34			; DUP
	!BYTE	$28,$27			; LLA	[39]
	!BYTE	$54			; CALL	_A014
_F130 	!WORD	_A014		
	!BYTE	$82			; ADD 
	!BYTE	$76,$1E			; SLW	[30]
_B057 
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B055
	!WORD	_B055-*
_B056 
; vmsrc/apple/a1cmd.pla: 0983:             //
; vmsrc/apple/a1cmd.pla: 0984:             // Init def table.
; vmsrc/apple/a1cmd.pla: 0985:             //
; vmsrc/apple/a1cmd.pla: 0986:             deftbl   = allocheap(defcnt * 5 + 1)
; vmsrc/apple/a1cmd.pla: 0987:             deflast  = deftbl
; vmsrc/apple/a1cmd.pla: 0988:             ^deflast = 0
; vmsrc/apple/a1cmd.pla: 0989:             //
; vmsrc/apple/a1cmd.pla: 0990:             // Re-read file
; vmsrc/apple/a1cmd.pla: 0991:             //
; vmsrc/apple/a1cmd.pla: 0992:             readfile(@filename, heap)
; vmsrc/apple/a1cmd.pla: 0993:         fin
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$0A			; CN	5
	!BYTE	$86			; MUL
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C011
_F131 	!WORD	_C011		
	!BYTE	$6E,$1A			; DLW	[26]
	!BYTE	$76,$1C			; SLW	[28]
	!BYTE	$00			; CN	0
	!BYTE	$66,$1C			; LLW	[28]
	!BYTE	$70			; SB
	!BYTE	$28,$38			; LLA	[56]
	!BYTE	$6A			; LAW	_D031+0
_F132 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_C009
_F133 	!WORD	_C009		
	!BYTE	$30			; DROP 
_B053 
_B054 
; vmsrc/apple/a1cmd.pla: 0994:         //
; vmsrc/apple/a1cmd.pla: 0995:         // Alloc heap space for relocated module (data + bytecode).
; vmsrc/apple/a1cmd.pla: 0996:         //
; vmsrc/apple/a1cmd.pla: 0997:         moddep  = moddep  + 1 - @header + heap
; vmsrc/apple/a1cmd.pla: 0998:         modfix  = moddep  - (heap + 2) // Adjust to skip header
; vmsrc/apple/a1cmd.pla: 0999:         modsize = modsize - modfix
; vmsrc/apple/a1cmd.pla: 1000:         rdlen   = rdlen   - modfix - 2
; vmsrc/apple/a1cmd.pla: 1001:         modaddr = allocheap(modsize)
; vmsrc/apple/a1cmd.pla: 1002:         memcpy(modaddr, moddep, rdlen)
; vmsrc/apple/a1cmd.pla: 1003:         //
; vmsrc/apple/a1cmd.pla: 1004:         // Add module to symbol table.
; vmsrc/apple/a1cmd.pla: 1005:         //
; vmsrc/apple/a1cmd.pla: 1006:         addsym(mod, modaddr)
; vmsrc/apple/a1cmd.pla: 1007:         //
; vmsrc/apple/a1cmd.pla: 1008:         // Apply all fixups and symbol import/export.
; vmsrc/apple/a1cmd.pla: 1009:         //
; vmsrc/apple/a1cmd.pla: 1010:         modfix   = modaddr - modfix
; vmsrc/apple/a1cmd.pla: 1011:         modofst  = modfix  - RELADDR
; vmsrc/apple/a1cmd.pla: 1012:         modend   = modaddr + modsize
; vmsrc/apple/a1cmd.pla: 1013:         bytecode = defofst + modofst
; vmsrc/apple/a1cmd.pla: 1014:         defofst  = bytecode - defofst
; vmsrc/apple/a1cmd.pla: 1015:         rld      = modend  // Re-Locatable Directory
; vmsrc/apple/a1cmd.pla: 1016:         esd      = rld     // Extern+Entry Symbol Directory
; vmsrc/apple/a1cmd.pla: 1017:         while ^esd         // Scan to end of ESD
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$8C			; INCR
	!BYTE	$28,$49			; LLA	[73]
	!BYTE	$84			; SUB 
	!BYTE	$B6			; ADDAW	_D031+0
_F134 	!WORD	_D031+0		
	!BYTE	$6E,$1E			; DLW	[30]
	!BYTE	$6A			; LAW	_D031+0
_F135 	!WORD	_D031+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$84			; SUB 
	!BYTE	$76,$14			; SLW	[20]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$84			; SUB 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$84			; SUB 
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_C011
_F136 	!WORD	_C011		
	!BYTE	$6E,$12			; DLW	[18]
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_A006
_F137 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$54			; CALL	_C015
_F138 	!WORD	_C015		
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$84			; SUB 
	!BYTE	$6E,$14			; DLW	[20]
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$84			; SUB 
	!BYTE	$76,$16			; SLW	[22]
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$B2,$04			; ADDLW	[4]
	!BYTE	$76,$18			; SLW	[24]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$B2,$16			; ADDLW	[22]
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$84			; SUB 
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$6E,$20			; DLW	[32]
	!BYTE	$76,$22			; SLW	[34]
	!BYTE	$50			; BRNCH	_B064
	!WORD	_B064-*
_B062 
; vmsrc/apple/a1cmd.pla: 1018:             esd = esd + 4
; vmsrc/apple/a1cmd.pla: 1019:         loop
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$22			; SLW	[34]
_B064 
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B062
	!WORD	_B062-*
_B063 
; vmsrc/apple/a1cmd.pla: 1020:         esd = esd + 1
; vmsrc/apple/a1cmd.pla: 1021:         //
; vmsrc/apple/a1cmd.pla: 1022:         // Run through the DeFinition Dictionary.
; vmsrc/apple/a1cmd.pla: 1023:         //
; vmsrc/apple/a1cmd.pla: 1024:         while ^rld == $02
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$8C			; INCR
	!BYTE	$76,$22			; SLW	[34]
	!BYTE	$50			; BRNCH	_B067
	!WORD	_B067-*
_B065 
; vmsrc/apple/a1cmd.pla: 1025:             //
; vmsrc/apple/a1cmd.pla: 1026:             // This is a bytcode def entry - add it to the def directory.
; vmsrc/apple/a1cmd.pla: 1027:             //
; vmsrc/apple/a1cmd.pla: 1028:             adddef(rld=>1 + defofst, @deflast)
; vmsrc/apple/a1cmd.pla: 1029:             rld = rld + 4
; vmsrc/apple/a1cmd.pla: 1030:         loop
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$28,$1C			; LLA	[28]
	!BYTE	$54			; CALL	_C017
_F139 	!WORD	_C017		
	!BYTE	$30			; DROP 
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$20			; SLW	[32]
_B067 
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$22			; BREQ	_B065
	!WORD	_B065-*
_B066 
; vmsrc/apple/a1cmd.pla: 1031:         //
; vmsrc/apple/a1cmd.pla: 1032:         // Run through the Re-Location Dictionary.
; vmsrc/apple/a1cmd.pla: 1033:         //
; vmsrc/apple/a1cmd.pla: 1034:         while ^rld
	!BYTE	$50			; BRNCH	_B070
	!WORD	_B070-*
_B068 
; vmsrc/apple/a1cmd.pla: 1035:             rld, addr, fixup = reloc(modfix, modofst, bytecode, rld)
; vmsrc/apple/a1cmd.pla: 1036:             if ^rld
; vmsrc/apple/a1cmd.pla: 1037:                 *addr = ^rld & $10 ?? *addr + lookupextern(esd, rld->3) :: lookupdef(fixup + defofst, deftbl)
; vmsrc/apple/a1cmd.pla: 1038:                 rld   = rld + 4
; vmsrc/apple/a1cmd.pla: 1039:             fin
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$54			; CALL	_A020
_F140 	!WORD	_A020		
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$6E,$20			; DLW	[32]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B071
	!WORD	_B071-*
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$60			; LB
	!BYTE	$3C,$10			; ANDI	16
	!BYTE	$4C			; BRFLS	_B073
	!WORD	_B073-*
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$62			; LW
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_C016
_F141 	!WORD	_C016		
	!BYTE	$82			; ADD 
	!BYTE	$50			; BRNCH	_B074
	!WORD	_B074-*
_B073 
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$66,$1A			; LLW	[26]
	!BYTE	$54			; CALL	_A019
_F142 	!WORD	_A019		
_B074 
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$72			; SW
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$20			; SLW	[32]
_B071 
_B072 
; vmsrc/apple/a1cmd.pla: 1040:             //addr = rld=>1 + modfix
; vmsrc/apple/a1cmd.pla: 1041:             //if uword_isge(addr, modaddr) // Skip fixups to header
; vmsrc/apple/a1cmd.pla: 1042:             //    if type & $80 // WORD sized fixup.
; vmsrc/apple/a1cmd.pla: 1043:             //        fixup = *addr
; vmsrc/apple/a1cmd.pla: 1044:             //    else      // BYTE sized fixup.
; vmsrc/apple/a1cmd.pla: 1045:             //        fixup = ^addr
; vmsrc/apple/a1cmd.pla: 1046:             //    fin
; vmsrc/apple/a1cmd.pla: 1047:             //    if ^rld & $10 // EXTERN reference.
; vmsrc/apple/a1cmd.pla: 1048:             //        fixup = fixup + lookupextern(esd, rld->3)
; vmsrc/apple/a1cmd.pla: 1049:             //    else      // INTERN fixup.
; vmsrc/apple/a1cmd.pla: 1050:             //        fixup = fixup + modofst
; vmsrc/apple/a1cmd.pla: 1051:             //        if uword_isge(fixup, bytecode)
; vmsrc/apple/a1cmd.pla: 1052:             //            //
; vmsrc/apple/a1cmd.pla: 1053:             //            // Bytecode address - replace with call def directory.
; vmsrc/apple/a1cmd.pla: 1054:             //            //
; vmsrc/apple/a1cmd.pla: 1055:             //            fixup = lookupdef(fixup + defofst, deftbl)
; vmsrc/apple/a1cmd.pla: 1056:             //        fin
; vmsrc/apple/a1cmd.pla: 1057:             //    fin
; vmsrc/apple/a1cmd.pla: 1058:             //    if type & $80 // WORD sized fixup.
; vmsrc/apple/a1cmd.pla: 1059:             //        *addr = fixup
; vmsrc/apple/a1cmd.pla: 1060:             //    else      // BYTE sized fixup.
; vmsrc/apple/a1cmd.pla: 1061:             //        ^addr = fixup
; vmsrc/apple/a1cmd.pla: 1062:             //    fin
; vmsrc/apple/a1cmd.pla: 1063:             //fin
; vmsrc/apple/a1cmd.pla: 1064:             //rld = rld + 4
; vmsrc/apple/a1cmd.pla: 1065:         loop
_B070 
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B068
	!WORD	_B068-*
_B069 
; vmsrc/apple/a1cmd.pla: 1066:         //
; vmsrc/apple/a1cmd.pla: 1067:         // Run through the External/Entry Symbol Directory.
; vmsrc/apple/a1cmd.pla: 1068:         //
; vmsrc/apple/a1cmd.pla: 1069:         while ^esd
	!BYTE	$50			; BRNCH	_B077
	!WORD	_B077-*
_B075 
; vmsrc/apple/a1cmd.pla: 1070:             sym = esd
; vmsrc/apple/a1cmd.pla: 1071:             esd = esd + dcitos(esd, @str)
; vmsrc/apple/a1cmd.pla: 1072:             if ^esd & $08
; vmsrc/apple/a1cmd.pla: 1073:                 //
; vmsrc/apple/a1cmd.pla: 1074:                 // EXPORT symbol - add it to the global symbol table.
; vmsrc/apple/a1cmd.pla: 1075:                 //
; vmsrc/apple/a1cmd.pla: 1076:                 addr = esd=>1 + modofst
; vmsrc/apple/a1cmd.pla: 1077:                 if uword_isge(addr, bytecode)
; vmsrc/apple/a1cmd.pla: 1078:                     //
; vmsrc/apple/a1cmd.pla: 1079:                     // Use the def directory address for bytecode.
; vmsrc/apple/a1cmd.pla: 1080:                     //
; vmsrc/apple/a1cmd.pla: 1081:                     addr = lookupdef(addr + defofst, deftbl)
; vmsrc/apple/a1cmd.pla: 1082:                 fin
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$76,$24			; SLW	[36]
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$34			; DUP
	!BYTE	$28,$27			; LLA	[39]
	!BYTE	$54			; CALL	_A014
_F143 	!WORD	_A014		
	!BYTE	$82			; ADD 
	!BYTE	$6E,$22			; DLW	[34]
	!BYTE	$60			; LB
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$4C			; BRFLS	_B078
	!WORD	_B078-*
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$B2,$16			; ADDLW	[22]
	!BYTE	$6E,$10			; DLW	[16]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_A007
_F144 	!WORD	_A007		
	!BYTE	$4C			; BRFLS	_B080
	!WORD	_B080-*
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$66,$1A			; LLW	[26]
	!BYTE	$54			; CALL	_A019
_F145 	!WORD	_A019		
	!BYTE	$76,$10			; SLW	[16]
_B080 
_B081 
; vmsrc/apple/a1cmd.pla: 1083:                 addsym(sym, addr)
; vmsrc/apple/a1cmd.pla: 1084:             fin
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$54			; CALL	_C015
_F146 	!WORD	_C015		
_B078 
_B079 
; vmsrc/apple/a1cmd.pla: 1085:             esd = esd + 3
; vmsrc/apple/a1cmd.pla: 1086:         loop
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$22			; SLW	[34]
_B077 
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B075
	!WORD	_B075-*
_B076 
; vmsrc/apple/a1cmd.pla: 1087:     fin
_B050 
_B051 
; vmsrc/apple/a1cmd.pla: 1088:     if perr
; vmsrc/apple/a1cmd.pla: 1089:         return -perr
	!BYTE	$68			; LAB	_D034+0
_F147 	!WORD	_D034+0		
	!BYTE	$4C			; BRFLS	_B082
	!WORD	_B082-*
	!BYTE	$68			; LAB	_D034+0
_F148 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$C9			; LEAVE	201
; vmsrc/apple/a1cmd.pla: 1090:     fin
_B082 
_B083 
; vmsrc/apple/a1cmd.pla: 1091:     //
; vmsrc/apple/a1cmd.pla: 1092:     // Free up the end-of-module in main memory.
; vmsrc/apple/a1cmd.pla: 1093:     //
; vmsrc/apple/a1cmd.pla: 1094:     releaseheap(modend)
; vmsrc/apple/a1cmd.pla: 1095:     //
; vmsrc/apple/a1cmd.pla: 1096:     // Call init routine if it exists.
; vmsrc/apple/a1cmd.pla: 1097:     //
; vmsrc/apple/a1cmd.pla: 1098:     fixup = 0
; vmsrc/apple/a1cmd.pla: 1099:     if init
; vmsrc/apple/a1cmd.pla: 1100:         init = init - defofst + bytecode
; vmsrc/apple/a1cmd.pla: 1101:         fixup = adddef(init, @deflast)()
; vmsrc/apple/a1cmd.pla: 1102:         if fixup < 0
; vmsrc/apple/a1cmd.pla: 1103:             perr = -fixup
; vmsrc/apple/a1cmd.pla: 1104:         fin
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$54			; CALL	_C014
_F149 	!WORD	_C014		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$4C			; BRFLS	_B084
	!WORD	_B084-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$84			; SUB 
	!BYTE	$B2,$06			; ADDLW	[6]
	!BYTE	$6E,$0C			; DLW	[12]
	!BYTE	$28,$1C			; LLA	[28]
	!BYTE	$54			; CALL	_C017
_F150 	!WORD	_C017		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B086
	!WORD	_B086-*
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$90			; NEG
	!BYTE	$78			; SAB	_D034+0
_F151 	!WORD	_D034+0		
_B086 
_B087 
; vmsrc/apple/a1cmd.pla: 1105:         if !(systemflags & modinitkeep)
; vmsrc/apple/a1cmd.pla: 1106:             releaseheap(init)
; vmsrc/apple/a1cmd.pla: 1107:         fin
	!BYTE	$6A			; LAW	_D030+0
_F152 	!WORD	_D030+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$94			; AND 
	!BYTE	$4E			; BRTRU	_B088
	!WORD	_B088-*
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$54			; CALL	_C014
_F153 	!WORD	_C014		
	!BYTE	$30			; DROP 
_B088 
_B089 
; vmsrc/apple/a1cmd.pla: 1108:     fin
_B084 
_B085 
; vmsrc/apple/a1cmd.pla: 1109:     return fixup | (systemflags & modkeep)
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$6A			; LAW	_D030+0
_F154 	!WORD	_D030+0		
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$94			; AND 
	!BYTE	$96			; OR 
	!BYTE	$5A,$C9			; LEAVE	201
; vmsrc/apple/a1cmd.pla: 1110: end
; vmsrc/apple/a1cmd.pla: 1111: //
; vmsrc/apple/a1cmd.pla: 1112: // Command mode
; vmsrc/apple/a1cmd.pla: 1113: //
; vmsrc/apple/a1cmd.pla: 1114: def stripchars(strptr)#1
					; strptr -> [0]
_C019 					; stripchars()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 1115:     while ^strptr and ^(strptr + 1) <> ' '
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$50			; BRNCH	_B092
	!WORD	_B092-*
_B090 
; vmsrc/apple/a1cmd.pla: 1116:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/a1cmd.pla: 1117:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A006
_F155 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 1118:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B092 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B093
	!WORD	_B093-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$42			; ISNE
_B093 
	!BYTE	$4E			; BRTRU	_B090
	!WORD	_B090-*
_B091 
; vmsrc/apple/a1cmd.pla: 1119:     return ^strptr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 1120: end
; vmsrc/apple/a1cmd.pla: 1121: def stripspaces(strptr)#0
					; strptr -> [0]
_C020 					; stripspaces()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 1122:     while ^strptr and ^(strptr + ^strptr) <= ' '
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$50			; BRNCH	_B096
	!WORD	_B096-*
_B094 
; vmsrc/apple/a1cmd.pla: 1123:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 1124:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B096 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B097
	!WORD	_B097-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B097 
	!BYTE	$4E			; BRTRU	_B094
	!WORD	_B094-*
_B095 
; vmsrc/apple/a1cmd.pla: 1125:     while ^strptr and ^(strptr + 1) <= ' '
	!BYTE	$50			; BRNCH	_B100
	!WORD	_B100-*
_B098 
; vmsrc/apple/a1cmd.pla: 1126:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/a1cmd.pla: 1127:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A006
_F156 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 1128:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B100 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B101
	!WORD	_B101-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B101 
	!BYTE	$4E			; BRTRU	_B098
	!WORD	_B098-*
_B099 
; vmsrc/apple/a1cmd.pla: 1129: end
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/a1cmd.pla: 1130: def striptrail(strptr)#0
					; strptr -> [0]
_C021 					; striptrail()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 1131:     byte i
					; i -> [2]
; vmsrc/apple/a1cmd.pla: 1132: 
; vmsrc/apple/a1cmd.pla: 1133:     for i = 1 to ^strptr
	!BYTE	$58,$03,$01		; ENTER	3,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B102
	!WORD	_B102-*
_B103 
	!BYTE	$6C,$02			; DLB	[2]
; vmsrc/apple/a1cmd.pla: 1134:         if (strptr)[i] == ' '
; vmsrc/apple/a1cmd.pla: 1135:         ^strptr = i - 1
; vmsrc/apple/a1cmd.pla: 1136:         return
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$24			; BRNE	_B105
	!WORD	_B105-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$8E			; DECR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$32			; DROP2
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/a1cmd.pla: 1137:     fin
_B105 
_B106 
; vmsrc/apple/a1cmd.pla: 1138:     next
_B104 
	!BYTE	$A4			; INCBRLE	_B103
	!WORD	_B103-*
_B102 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; vmsrc/apple/a1cmd.pla: 1139: end
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/a1cmd.pla: 1140: def parsecmd(strptr)#1
					; strptr -> [0]
_C022 					; parsecmd()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 1141:     byte cmd
					; cmd -> [2]
; vmsrc/apple/a1cmd.pla: 1142: 
; vmsrc/apple/a1cmd.pla: 1143:     cmd = 0
	!BYTE	$58,$03,$01		; ENTER	3,1
; vmsrc/apple/a1cmd.pla: 1144:     stripspaces(strptr)
; vmsrc/apple/a1cmd.pla: 1145:     if ^strptr
; vmsrc/apple/a1cmd.pla: 1146:         cmd = ^(strptr + 1)
; vmsrc/apple/a1cmd.pla: 1147:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/a1cmd.pla: 1148:         ^strptr--
	!BYTE	$00			; CN	0
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C020
_F157 	!WORD	_C020		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B107
	!WORD	_B107-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A006
_F158 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/a1cmd.pla: 1149:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B107 
_B108 
; vmsrc/apple/a1cmd.pla: 1150:     stripspaces(strptr)
; vmsrc/apple/a1cmd.pla: 1151:     return cmd
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C020
_F159 	!WORD	_C020		
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/a1cmd.pla: 1152: end
; vmsrc/apple/a1cmd.pla: 1153: def execmod(modfile)#1
					; modfile -> [0]
_P026 					; execmod(modfile)#1()
_C023 					; execmod()
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 1154:     byte moddci[17]
					; moddci -> [2]
; vmsrc/apple/a1cmd.pla: 1155:     word saveheap, savesym, saveflags
					; saveheap -> [19]
					; savesym -> [21]
					; saveflags -> [23]
; vmsrc/apple/a1cmd.pla: 1156: 
; vmsrc/apple/a1cmd.pla: 1157:     perr = 1
	!BYTE	$58,$19,$01		; ENTER	25,1
; vmsrc/apple/a1cmd.pla: 1158:     if stodci(modfile, @moddci)
; vmsrc/apple/a1cmd.pla: 1159:         saveheap  = heap
; vmsrc/apple/a1cmd.pla: 1160:         savesym   = lastsym
; vmsrc/apple/a1cmd.pla: 1161:         saveflags = systemflags
; vmsrc/apple/a1cmd.pla: 1162:         if loadmod(@moddci) < modkeep
; vmsrc/apple/a1cmd.pla: 1163:             lastsym = savesym
; vmsrc/apple/a1cmd.pla: 1164:             heap    = saveheap
; vmsrc/apple/a1cmd.pla: 1165:         fin
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D034+0
_F160 	!WORD	_D034+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_A015
_F161 	!WORD	_A015		
	!BYTE	$4C			; BRFLS	_B109
	!WORD	_B109-*
	!BYTE	$6A			; LAW	_D031+0
_F162 	!WORD	_D031+0		
	!BYTE	$76,$13			; SLW	[19]
	!BYTE	$6A			; LAW	_D033+0
_F163 	!WORD	_D033+0		
	!BYTE	$76,$15			; SLW	[21]
	!BYTE	$6A			; LAW	_D030+0
_F164 	!WORD	_D030+0		
	!BYTE	$76,$17			; SLW	[23]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_C018
_F165 	!WORD	_C018		
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B111
	!WORD	_B111-*
	!BYTE	$66,$15			; LLW	[21]
	!BYTE	$7A			; SAW	_D033+0
_F166 	!WORD	_D033+0		
	!BYTE	$66,$13			; LLW	[19]
	!BYTE	$7A			; SAW	_D031+0
_F167 	!WORD	_D031+0		
_B111 
_B112 
; vmsrc/apple/a1cmd.pla: 1166:         ^lastsym    = 0
; vmsrc/apple/a1cmd.pla: 1167:         systemflags = saveflags
; vmsrc/apple/a1cmd.pla: 1168:     fin
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D033+0
_F168 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$66,$17			; LLW	[23]
	!BYTE	$7A			; SAW	_D030+0
_F169 	!WORD	_D030+0		
_B109 
_B110 
; vmsrc/apple/a1cmd.pla: 1169:     return -perr
	!BYTE	$68			; LAB	_D034+0
_F170 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$19			; LEAVE	25
; vmsrc/apple/a1cmd.pla: 1170: end
; vmsrc/apple/a1cmd.pla: 1171: //
; vmsrc/apple/a1cmd.pla: 1172: // Get heap start.
; vmsrc/apple/a1cmd.pla: 1173: //
; vmsrc/apple/a1cmd.pla: 1174: heap = *freemem
_INIT 
	JSR	INTERP
; vmsrc/apple/a1cmd.pla: 1175: //
; vmsrc/apple/a1cmd.pla: 1176: // Print PLASMA version
; vmsrc/apple/a1cmd.pla: 1177: //
; vmsrc/apple/a1cmd.pla: 1178: prstr(@verstr); prbyte(version.1); cout('.'); prbyte(version.0); crout
; vmsrc/apple/a1cmd.pla: 1179: //
; vmsrc/apple/a1cmd.pla: 1180: // Init symbol table.
; vmsrc/apple/a1cmd.pla: 1181: //
; vmsrc/apple/a1cmd.pla: 1182: symtbl   = allocheap($200)
; vmsrc/apple/a1cmd.pla: 1183: lastsym  = symtbl
; vmsrc/apple/a1cmd.pla: 1184: ^lastsym = 0
; vmsrc/apple/a1cmd.pla: 1185: while *syslibsym
	!BYTE	$6A,$06,$00		; LAW	6
	!BYTE	$7A			; SAW	_D031+0
_F171 	!WORD	_D031+0		
	!BYTE	$26			; LA	_D037+0
_F172 	!WORD	_D037+0		
	!BYTE	$54			; CALL	_C001
_F173 	!WORD	_C001		
	!BYTE	$68			; LAB	_D027+1
_F174 	!WORD	_D027+1		
	!BYTE	$54			; CALL	_C004
_F175 	!WORD	_C004		
	!BYTE	$2A,$2E			; CB	46
	!BYTE	$54			; CALL	_A021
_F176 	!WORD	_A021		
	!BYTE	$68			; LAB	_D027+0
_F177 	!WORD	_D027+0		
	!BYTE	$54			; CALL	_C004
_F178 	!WORD	_C004		
	!BYTE	$54			; CALL	_C000
_F179 	!WORD	_C000		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$54			; CALL	_C011
_F180 	!WORD	_C011		
	!BYTE	$7E			; DAW	_D032+0
_F181 	!WORD	_D032+0		
	!BYTE	$7A			; SAW	_D033+0
_F182 	!WORD	_D033+0		
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D033+0
_F183 	!WORD	_D033+0		
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B115
	!WORD	_B115-*
_B113 
; vmsrc/apple/a1cmd.pla: 1186:     stodci(syslibsym=>0, heap)
; vmsrc/apple/a1cmd.pla: 1187:     addsym(heap, syslibsym=>2)
; vmsrc/apple/a1cmd.pla: 1188:     syslibsym = syslibsym + 4
; vmsrc/apple/a1cmd.pla: 1189: loop
	!BYTE	$6A			; LAW	_D075+0
_F184 	!WORD	_D075+0		
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_D031+0
_F185 	!WORD	_D031+0		
	!BYTE	$54			; CALL	_A015
_F186 	!WORD	_A015		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D031+0
_F187 	!WORD	_D031+0		
	!BYTE	$6A			; LAW	_D075+0
_F188 	!WORD	_D075+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C015
_F189 	!WORD	_C015		
	!BYTE	$6A			; LAW	_D075+0
_F190 	!WORD	_D075+0		
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$7A			; SAW	_D075+0
_F191 	!WORD	_D075+0		
_B115 
	!BYTE	$6A			; LAW	_D075+0
_F192 	!WORD	_D075+0		
	!BYTE	$62			; LW
	!BYTE	$4E			; BRTRU	_B113
	!WORD	_B113-*
_B114 
; vmsrc/apple/a1cmd.pla: 1190: //
; vmsrc/apple/a1cmd.pla: 1191: // Try to load autorun.
; vmsrc/apple/a1cmd.pla: 1192: //
; vmsrc/apple/a1cmd.pla: 1193: cmdptr = heap
; vmsrc/apple/a1cmd.pla: 1194: memset(cmdptr, 0, 128)
; vmsrc/apple/a1cmd.pla: 1195: readfile(@autorun, cmdptr + 1)
; vmsrc/apple/a1cmd.pla: 1196: while ^(cmdptr + ^cmdptr + 1) >= ' '
	!BYTE	$6A			; LAW	_D031+0
_F193 	!WORD	_D031+0		
	!BYTE	$7E			; DAW	_D045+0
_F194 	!WORD	_D045+0		
	!BYTE	$00			; CN	0
	!BYTE	$2A,$80			; CB	128
	!BYTE	$54			; CALL	_A005
_F195 	!WORD	_A005		
	!BYTE	$26			; LA	_D036+0
_F196 	!WORD	_D036+0		
	!BYTE	$6A			; LAW	_D045+0
_F197 	!WORD	_D045+0		
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C009
_F198 	!WORD	_C009		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B118
	!WORD	_B118-*
_B116 
; vmsrc/apple/a1cmd.pla: 1197:     ^cmdptr++
	!BYTE	$6A			; LAW	_D045+0
_F199 	!WORD	_D045+0		
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
; vmsrc/apple/a1cmd.pla: 1198: loop
	!BYTE	$6A			; LAW	_D045+0
_F200 	!WORD	_D045+0		
	!BYTE	$70			; SB
_B118 
	!BYTE	$6A			; LAW	_D045+0
_F201 	!WORD	_D045+0		
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$48			; ISGE
	!BYTE	$4E			; BRTRU	_B116
	!WORD	_B116-*
_B117 
; vmsrc/apple/a1cmd.pla: 1199: perr = 0
; vmsrc/apple/a1cmd.pla: 1200: //
; vmsrc/apple/a1cmd.pla: 1201: // Print some startup info.
; vmsrc/apple/a1cmd.pla: 1202: //
; vmsrc/apple/a1cmd.pla: 1203: if not ^cmdptr
; vmsrc/apple/a1cmd.pla: 1204:     prstr(@freestr)
; vmsrc/apple/a1cmd.pla: 1205:     prword(availheap)
; vmsrc/apple/a1cmd.pla: 1206:     crout
; vmsrc/apple/a1cmd.pla: 1207: fin
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D034+0
_F202 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_D045+0
_F203 	!WORD	_D045+0		
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B119
	!WORD	_B119-*
	!BYTE	$26			; LA	_D038+0
_F204 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_C001
_F205 	!WORD	_C001		
	!BYTE	$54			; CALL	_C010
_F206 	!WORD	_C010		
	!BYTE	$54			; CALL	_C005
_F207 	!WORD	_C005		
	!BYTE	$54			; CALL	_C000
_F208 	!WORD	_C000		
_B119 
_B120 
; vmsrc/apple/a1cmd.pla: 1208: //
; vmsrc/apple/a1cmd.pla: 1209: // Handle commands.
; vmsrc/apple/a1cmd.pla: 1210: //
; vmsrc/apple/a1cmd.pla: 1211: while 1
	!BYTE	$50			; BRNCH	_B123
	!WORD	_B123-*
_B121 
; vmsrc/apple/a1cmd.pla: 1212:     if ^cmdptr
; vmsrc/apple/a1cmd.pla: 1213:         when toupper(parsecmd(cmdptr))
	!BYTE	$6A			; LAW	_D045+0
_F209 	!WORD	_D045+0		
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B124
	!WORD	_B124-*
	!BYTE	$6A			; LAW	_D045+0
_F210 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_C022
_F211 	!WORD	_C022		
	!BYTE	$54			; CALL	_A016
_F212 	!WORD	_A016		
	!BYTE	$52			; SEL
	!WORD	_B127-*
; vmsrc/apple/a1cmd.pla: 1214:             is 'Q'
_B128 
; vmsrc/apple/a1cmd.pla: 1215:                 quit
; vmsrc/apple/a1cmd.pla: 1216:             is 'M'
	!BYTE	$54			; CALL	_A004
_F213 	!WORD	_A004		
_B129 
; vmsrc/apple/a1cmd.pla: 1217:                 syscall($02, 0)
; vmsrc/apple/a1cmd.pla: 1218:                 break
	!BYTE	$04			; CN	2
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_A002
_F214 	!WORD	_A002		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B126
	!WORD	_B126-*
; vmsrc/apple/a1cmd.pla: 1219:             is '+'
_B130 
; vmsrc/apple/a1cmd.pla: 1220:                 execmod(cmdptr)
; vmsrc/apple/a1cmd.pla: 1221:                 break
	!BYTE	$6A			; LAW	_D045+0
_F215 	!WORD	_D045+0		
	!BYTE	$54			; CALL	_C023
_F216 	!WORD	_C023		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B126
	!WORD	_B126-*
; vmsrc/apple/a1cmd.pla: 1222:             otherwise
_B127 
	!BYTE	$03			; CASEBLOCK
	!WORD	$002B
	!WORD	_B130-*
	!WORD	$004D
	!WORD	_B129-*
	!WORD	$0051
	!WORD	_B128-*
; vmsrc/apple/a1cmd.pla: 1223:                 prstr(@huhstr)
; vmsrc/apple/a1cmd.pla: 1224:         wend
	!BYTE	$26			; LA	_D042+0
_F217 	!WORD	_D042+0		
	!BYTE	$54			; CALL	_C001
_F218 	!WORD	_C001		
_B126 
; vmsrc/apple/a1cmd.pla: 1225:         if perr
; vmsrc/apple/a1cmd.pla: 1226:             prstr(@errorstr)
; vmsrc/apple/a1cmd.pla: 1227:             prbyte(perr)
; vmsrc/apple/a1cmd.pla: 1228:             perr = 0
; vmsrc/apple/a1cmd.pla: 1229:         else
	!BYTE	$68			; LAB	_D034+0
_F219 	!WORD	_D034+0		
	!BYTE	$4C			; BRFLS	_B131
	!WORD	_B131-*
	!BYTE	$26			; LA	_D039+0
_F220 	!WORD	_D039+0		
	!BYTE	$54			; CALL	_C001
_F221 	!WORD	_C001		
	!BYTE	$68			; LAB	_D034+0
_F222 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_C004
_F223 	!WORD	_C004		
	!BYTE	$00			; CN	0
	!BYTE	$78			; SAB	_D034+0
_F224 	!WORD	_D034+0		
	!BYTE	$50			; BRNCH	_B132
	!WORD	_B132-*
_B131 
; vmsrc/apple/a1cmd.pla: 1230:             prstr(@okstr)
; vmsrc/apple/a1cmd.pla: 1231:         fin
	!BYTE	$26			; LA	_D041+0
_F225 	!WORD	_D041+0		
	!BYTE	$54			; CALL	_C001
_F226 	!WORD	_C001		
_B132 
; vmsrc/apple/a1cmd.pla: 1232:     crout()
; vmsrc/apple/a1cmd.pla: 1233:     fin
	!BYTE	$54			; CALL	_C000
_F227 	!WORD	_C000		
_B124 
_B125 
; vmsrc/apple/a1cmd.pla: 1234:     prstr(@prompt)
; vmsrc/apple/a1cmd.pla: 1235:     cmdptr = rdstr($BA)
; vmsrc/apple/a1cmd.pla: 1236: loop
	!BYTE	$26			; LA	_D040+0
_F228 	!WORD	_D040+0		
	!BYTE	$54			; CALL	_C001
_F229 	!WORD	_C001		
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$54			; CALL	_C003
_F230 	!WORD	_C003		
	!BYTE	$7A			; SAW	_D045+0
_F231 	!WORD	_D045+0		
_B123 
	!BYTE	$50			; BRNCH	_B121
	!WORD	_B121-*
_B122 
; vmsrc/apple/a1cmd.pla: 1237: done
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
