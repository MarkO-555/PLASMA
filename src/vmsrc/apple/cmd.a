; ACME COMPATIBLE OUTPUT
	JMP	_INIT			; MODULE INITIALIZATION ROUTINE
; vmsrc/apple/cmd.pla: 0001: const MACHID      = $BF98
					; MACHID = 49048
; vmsrc/apple/cmd.pla: 0002: const iobuffer    = $0800
					; iobuffer = 2048
; vmsrc/apple/cmd.pla: 0003: const RELADDR     = $1000
					; RELADDR = 4096
; vmsrc/apple/cmd.pla: 0004: const symtbl      = $0C00
					; symtbl = 3072
; vmsrc/apple/cmd.pla: 0005: const freemem     = $0006
					; freemem = 6
; vmsrc/apple/cmd.pla: 0006: const getlnbuf    = $01FF
					; getlnbuf = 511
; vmsrc/apple/cmd.pla: 0007: //
; vmsrc/apple/cmd.pla: 0008: // System flags: memory allocator screen holes.
; vmsrc/apple/cmd.pla: 0009: //
; vmsrc/apple/cmd.pla: 0010: const restxt1     = $0001
					; restxt1 = 1
; vmsrc/apple/cmd.pla: 0011: const restxt2     = $0002
					; restxt2 = 2
; vmsrc/apple/cmd.pla: 0012: const resxtxt1    = $0004
					; resxtxt1 = 4
; vmsrc/apple/cmd.pla: 0013: const resxtxt2    = $0008
					; resxtxt2 = 8
; vmsrc/apple/cmd.pla: 0014: const reshgr1     = $0010
					; reshgr1 = 16
; vmsrc/apple/cmd.pla: 0015: const reshgr2     = $0020
					; reshgr2 = 32
; vmsrc/apple/cmd.pla: 0016: const resxhgr1    = $0040
					; resxhgr1 = 64
; vmsrc/apple/cmd.pla: 0017: const resxhgr2    = $0080
					; resxhgr2 = 128
; vmsrc/apple/cmd.pla: 0018: //
; vmsrc/apple/cmd.pla: 0019: // Module don't free memory
; vmsrc/apple/cmd.pla: 0020: //
; vmsrc/apple/cmd.pla: 0021: const modkeep     = $2000
					; modkeep = 8192
; vmsrc/apple/cmd.pla: 0022: const modinitkeep = $4000
					; modinitkeep = 16384
; vmsrc/apple/cmd.pla: 0023: //
; vmsrc/apple/cmd.pla: 0024: // Prefix commands
; vmsrc/apple/cmd.pla: 0025: //
; vmsrc/apple/cmd.pla: 0026: const GET_PFX     = $C7
					; GET_PFX = 199
; vmsrc/apple/cmd.pla: 0027: const SET_PFX     = $C6
					; SET_PFX = 198
; vmsrc/apple/cmd.pla: 0028: //
; vmsrc/apple/cmd.pla: 0029: // Pedefined functions.
; vmsrc/apple/cmd.pla: 0030: //
; vmsrc/apple/cmd.pla: 0031: predef syscall(cmd,params)#1, call(addr,areg,xreg,yreg,status)#1
; vmsrc/apple/cmd.pla: 0032: predef crout()#0, cout(c)#0, prstr(s)#0, prbyte(b)#0, prword(w)#0, print(i)#0, cin()#1, rdstr(p)#1, toupper(c)#1
; vmsrc/apple/cmd.pla: 0033: predef markheap()#1, allocheap(size)#1, allocalignheap(size, pow2, freeaddr)#1, releaseheap(newheap)#1, availheap()#1
; vmsrc/apple/cmd.pla: 0034: predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
; vmsrc/apple/cmd.pla: 0035: predef uword_isgt(a,b)#1, uword_isge(a,b)#1, uword_islt(a,b)#1, uword_isle(a,b)#1, sext(a)#1, divmod(a,b)#2
; vmsrc/apple/cmd.pla: 0036: predef execmod(modfile)#1, open(path)#1, close(refnum)#1, read(refnum, buff, len)#1, write(refnum, buff, len)#1
; vmsrc/apple/cmd.pla: 0037: //
; vmsrc/apple/cmd.pla: 0038: // Exported CMDSYS table
; vmsrc/apple/cmd.pla: 0039: //
; vmsrc/apple/cmd.pla: 0040: word version    = $0200 // 02.00 Dev
_D031 					; version    = $0200 // 02.00 Dev
	!WORD	$0200
; vmsrc/apple/cmd.pla: 0041: word syspath
_D032 	!FILL	2			; syspath
; vmsrc/apple/cmd.pla: 0042: word syscmdln
_D033 	!FILL	2			; syscmdln
; vmsrc/apple/cmd.pla: 0043: word            = @execmod, @open, @close, @read, @write
_F000 	!WORD	_P026
_F001 	!WORD	_P027
_F002 	!WORD	_P028
_F003 	!WORD	_P029
_F004 	!WORD	_P030
; vmsrc/apple/cmd.pla: 0044: byte perr
_D034 	!FILL	1			; perr
; vmsrc/apple/cmd.pla: 0045: byte jitcount   = 0
_D035 					; jitcount   = 0
	!BYTE	$00
; vmsrc/apple/cmd.pla: 0046: byte jitsize    = 0
_D036 					; jitsize    = 0
	!BYTE	$00
; vmsrc/apple/cmd.pla: 0047: //
; vmsrc/apple/cmd.pla: 0048: // Working input buffer overlayed with strings table
; vmsrc/apple/cmd.pla: 0049: //
; vmsrc/apple/cmd.pla: 0050: byte cmdln      = ""
_D037 					; cmdln      = ""
	!BYTE	$00
; vmsrc/apple/cmd.pla: 0051: //
; vmsrc/apple/cmd.pla: 0052: // Name for auto-run file (must follow cmdln)
; vmsrc/apple/cmd.pla: 0053: //
; vmsrc/apple/cmd.pla: 0054: byte autorun    = "AUTORUN"
_D038 					; autorun    = "AUTORUN"
	!BYTE	$07
	!BYTE	$41,$55,$54,$4F,$52,$55,$4E
; vmsrc/apple/cmd.pla: 0055: //
; vmsrc/apple/cmd.pla: 0056: // Standard Library exported functions.
; vmsrc/apple/cmd.pla: 0057: //
; vmsrc/apple/cmd.pla: 0058: byte sysmodstr  = "CMDSYS"
_D039 					; sysmodstr  = "CMDSYS"
	!BYTE	$06
	!BYTE	$43,$4D,$44,$53,$59,$53
; vmsrc/apple/cmd.pla: 0059: byte putsstr    = "PUTS"
_D040 					; putsstr    = "PUTS"
	!BYTE	$04
	!BYTE	$50,$55,$54,$53
; vmsrc/apple/cmd.pla: 0060: byte putistr    = "PUTI"
_D041 					; putistr    = "PUTI"
	!BYTE	$04
	!BYTE	$50,$55,$54,$49
; vmsrc/apple/cmd.pla: 0061: byte putcstr    = "PUTC"
_D042 					; putcstr    = "PUTC"
	!BYTE	$04
	!BYTE	$50,$55,$54,$43
; vmsrc/apple/cmd.pla: 0062: byte putlnstr   = "PUTLN"
_D043 					; putlnstr   = "PUTLN"
	!BYTE	$05
	!BYTE	$50,$55,$54,$4C,$4E
; vmsrc/apple/cmd.pla: 0063: byte putbstr    = "PUTB"
_D044 					; putbstr    = "PUTB"
	!BYTE	$04
	!BYTE	$50,$55,$54,$42
; vmsrc/apple/cmd.pla: 0064: byte putwstr    = "PUTH"
_D045 					; putwstr    = "PUTH"
	!BYTE	$04
	!BYTE	$50,$55,$54,$48
; vmsrc/apple/cmd.pla: 0065: byte getcstr    = "GETC"
_D046 					; getcstr    = "GETC"
	!BYTE	$04
	!BYTE	$47,$45,$54,$43
; vmsrc/apple/cmd.pla: 0066: byte getsstr    = "GETS"
_D047 					; getsstr    = "GETS"
	!BYTE	$04
	!BYTE	$47,$45,$54,$53
; vmsrc/apple/cmd.pla: 0067: byte toupstr    = "TOUPPER"
_D048 					; toupstr    = "TOUPPER"
	!BYTE	$07
	!BYTE	$54,$4F,$55,$50,$50,$45,$52
; vmsrc/apple/cmd.pla: 0068: byte strcpystr  = "STRCPY"
_D049 					; strcpystr  = "STRCPY"
	!BYTE	$06
	!BYTE	$53,$54,$52,$43,$50,$59
; vmsrc/apple/cmd.pla: 0069: byte strcatstr  = "STRCAT"
_D050 					; strcatstr  = "STRCAT"
	!BYTE	$06
	!BYTE	$53,$54,$52,$43,$41,$54
; vmsrc/apple/cmd.pla: 0070: byte hpmarkstr  = "HEAPMARK"
_D051 					; hpmarkstr  = "HEAPMARK"
	!BYTE	$08
	!BYTE	$48,$45,$41,$50,$4D,$41,$52,$4B
; vmsrc/apple/cmd.pla: 0071: byte hpalignstr = "HEAPALLOCALIGN"
_D052 					; hpalignstr = "HEAPALLOCALIGN"
	!BYTE	$0E
	!BYTE	$48,$45,$41,$50,$41,$4C,$4C,$4F
	!BYTE	$43,$41,$4C,$49,$47,$4E
; vmsrc/apple/cmd.pla: 0072: byte hpallocstr = "HEAPALLOC"
_D053 					; hpallocstr = "HEAPALLOC"
	!BYTE	$09
	!BYTE	$48,$45,$41,$50,$41,$4C,$4C,$4F
	!BYTE	$43
; vmsrc/apple/cmd.pla: 0073: byte hprelstr   = "HEAPRELEASE"
_D054 					; hprelstr   = "HEAPRELEASE"
	!BYTE	$0B
	!BYTE	$48,$45,$41,$50,$52,$45,$4C,$45
	!BYTE	$41,$53,$45
; vmsrc/apple/cmd.pla: 0074: byte hpavlstr   = "HEAPAVAIL"
_D055 					; hpavlstr   = "HEAPAVAIL"
	!BYTE	$09
	!BYTE	$48,$45,$41,$50,$41,$56,$41,$49
	!BYTE	$4C
; vmsrc/apple/cmd.pla: 0075: word memsetstr  = "MEMSET"
_D056 					; memsetstr  = "MEMSET"
	!BYTE	$06
	!BYTE	$4D,$45,$4D,$53,$45,$54
; vmsrc/apple/cmd.pla: 0076: byte memcpystr  = "MEMCPY"
_D057 					; memcpystr  = "MEMCPY"
	!BYTE	$06
	!BYTE	$4D,$45,$4D,$43,$50,$59
; vmsrc/apple/cmd.pla: 0077: byte uisgtstr   = "ISUGT"
_D058 					; uisgtstr   = "ISUGT"
	!BYTE	$05
	!BYTE	$49,$53,$55,$47,$54
; vmsrc/apple/cmd.pla: 0078: byte uisgestr   = "ISUGE"
_D059 					; uisgestr   = "ISUGE"
	!BYTE	$05
	!BYTE	$49,$53,$55,$47,$45
; vmsrc/apple/cmd.pla: 0079: byte uisltstr   = "ISULT"
_D060 					; uisltstr   = "ISULT"
	!BYTE	$05
	!BYTE	$49,$53,$55,$4C,$54
; vmsrc/apple/cmd.pla: 0080: byte uislestr   = "ISULE"
_D061 					; uislestr   = "ISULE"
	!BYTE	$05
	!BYTE	$49,$53,$55,$4C,$45
; vmsrc/apple/cmd.pla: 0081: byte sextstr    = "SEXT"
_D062 					; sextstr    = "SEXT"
	!BYTE	$04
	!BYTE	$53,$45,$58,$54
; vmsrc/apple/cmd.pla: 0082: byte divmodstr  = "DIVMOD"
_D063 					; divmodstr  = "DIVMOD"
	!BYTE	$06
	!BYTE	$44,$49,$56,$4D,$4F,$44
; vmsrc/apple/cmd.pla: 0083: byte machidstr  = "MACHID"
_D064 					; machidstr  = "MACHID"
	!BYTE	$06
	!BYTE	$4D,$41,$43,$48,$49,$44
; vmsrc/apple/cmd.pla: 0084: byte sysstr     = "SYSCALL"
_D065 					; sysstr     = "SYSCALL"
	!BYTE	$07
	!BYTE	$53,$59,$53,$43,$41,$4C,$4C
; vmsrc/apple/cmd.pla: 0085: byte callstr    = "CALL"
_D066 					; callstr    = "CALL"
	!BYTE	$04
	!BYTE	$43,$41,$4C,$4C
; vmsrc/apple/cmd.pla: 0086: word exports    = @sysmodstr, @version
_D067 					; exports    = @sysmodstr, @version
_F005 	!WORD	_D039
_F006 	!WORD	_D031
; vmsrc/apple/cmd.pla: 0087: word            = @sysstr,    @syscall
_F007 	!WORD	_D065
_F008 	!WORD	_P000
; vmsrc/apple/cmd.pla: 0088: word            = @callstr,   @call
_F009 	!WORD	_D066
_F010 	!WORD	_P001
; vmsrc/apple/cmd.pla: 0089: word            = @putcstr,   @cout
_F011 	!WORD	_D042
_F012 	!WORD	_P003
; vmsrc/apple/cmd.pla: 0090: word            = @putlnstr,  @crout
_F013 	!WORD	_D043
_F014 	!WORD	_P002
; vmsrc/apple/cmd.pla: 0091: word            = @putsstr,   @prstr
_F015 	!WORD	_D040
_F016 	!WORD	_P004
; vmsrc/apple/cmd.pla: 0092: word            = @putbstr,   @prbyte
_F017 	!WORD	_D044
_F018 	!WORD	_P005
; vmsrc/apple/cmd.pla: 0093: word            = @putwstr,   @prword
_F019 	!WORD	_D045
_F020 	!WORD	_P006
; vmsrc/apple/cmd.pla: 0094: word            = @putistr,   @print
_F021 	!WORD	_D041
_F022 	!WORD	_P007
; vmsrc/apple/cmd.pla: 0095: word            = @getcstr,   @cin
_F023 	!WORD	_D046
_F024 	!WORD	_P008
; vmsrc/apple/cmd.pla: 0096: word            = @getsstr,   @rdstr
_F025 	!WORD	_D047
_F026 	!WORD	_P009
; vmsrc/apple/cmd.pla: 0097: word            = @toupstr,   @toupper
_F027 	!WORD	_D048
_F028 	!WORD	_P010
; vmsrc/apple/cmd.pla: 0098: word            = @hpmarkstr, @markheap
_F029 	!WORD	_D051
_F030 	!WORD	_P011
; vmsrc/apple/cmd.pla: 0099: byte sysmods[] // overlay with exported strings
_D068 					; sysmods[] // overlay with exported strings
; vmsrc/apple/cmd.pla: 0100: word            = @hpallocstr,@allocheap
_F031 	!WORD	_D053
_F032 	!WORD	_P012
; vmsrc/apple/cmd.pla: 0101: word            = @hpalignstr,@allocalignheap
_F033 	!WORD	_D052
_F034 	!WORD	_P013
; vmsrc/apple/cmd.pla: 0102: word            = @hprelstr,  @releaseheap
_F035 	!WORD	_D054
_F036 	!WORD	_P014
; vmsrc/apple/cmd.pla: 0103: word            = @hpavlstr,  @availheap
_F037 	!WORD	_D055
_F038 	!WORD	_P015
; vmsrc/apple/cmd.pla: 0104: word            = @memsetstr, @memset
_F039 	!WORD	_D056
_F040 	!WORD	_P016
; vmsrc/apple/cmd.pla: 0105: word            = @memcpystr, @memcpy
_F041 	!WORD	_D057
_F042 	!WORD	_P017
; vmsrc/apple/cmd.pla: 0106: word            = @uisgtstr,  @uword_isgt
_F043 	!WORD	_D058
_F044 	!WORD	_P020
; vmsrc/apple/cmd.pla: 0107: word            = @uisgestr,  @uword_isge
_F045 	!WORD	_D059
_F046 	!WORD	_P021
; vmsrc/apple/cmd.pla: 0108: word            = @uisltstr,  @uword_islt
_F047 	!WORD	_D060
_F048 	!WORD	_P022
; vmsrc/apple/cmd.pla: 0109: word            = @uislestr,  @uword_isle
_F049 	!WORD	_D061
_F050 	!WORD	_P023
; vmsrc/apple/cmd.pla: 0110: word            = @strcpystr, @strcpy
_F051 	!WORD	_D049
_F052 	!WORD	_P018
; vmsrc/apple/cmd.pla: 0111: word            = @strcatstr, @strcat
_F053 	!WORD	_D050
_F054 	!WORD	_P019
; vmsrc/apple/cmd.pla: 0112: word            = @sextstr,   @sext
_F055 	!WORD	_D062
_F056 	!WORD	_P024
; vmsrc/apple/cmd.pla: 0113: word            = @divmodstr, @divmod
_F057 	!WORD	_D063
_F058 	!WORD	_P025
; vmsrc/apple/cmd.pla: 0114: word            = @machidstr, MACHID
_F059 	!WORD	_D064
	!WORD	$BF98
; vmsrc/apple/cmd.pla: 0115: word            = 0
	!WORD	$0000
; vmsrc/apple/cmd.pla: 0116: word sysmodsym  = @exports
_D069 					; sysmodsym  = @exports
_F060 	!WORD	_D067
; vmsrc/apple/cmd.pla: 0117: //
; vmsrc/apple/cmd.pla: 0118: // System variable.
; vmsrc/apple/cmd.pla: 0119: //
; vmsrc/apple/cmd.pla: 0120: word systemflags = 0
_D070 					; systemflags = 0
	!WORD	$0000
; vmsrc/apple/cmd.pla: 0121: word heap
_D071 	!FILL	2			; heap
; vmsrc/apple/cmd.pla: 0122: word lastsym     = symtbl
_D072 					; lastsym     = symtbl
	!WORD	$0C00
; vmsrc/apple/cmd.pla: 0123: //
; vmsrc/apple/cmd.pla: 0124: // Utility functions
; vmsrc/apple/cmd.pla: 0125: //
; vmsrc/apple/cmd.pla: 0126: //asm equates included from cmdstub.s
; vmsrc/apple/cmd.pla: 0127: //
; vmsrc/apple/cmd.pla: 0128: // CALL PRODOS
; vmsrc/apple/cmd.pla: 0129: // SYSCALL(CMD, PARAMS)
; vmsrc/apple/cmd.pla: 0130: //
; vmsrc/apple/cmd.pla: 0131: asm syscall(cmd,params)#1
_P000 					; syscall(cmd,params)#1()
_A000 					; syscall()
; vmsrc/apple/cmd.pla: 0132:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0133:         LDY     ESTKH,X
        LDY     ESTKH,X
; vmsrc/apple/cmd.pla: 0134:         STA     PARAMS
        STA     PARAMS
; vmsrc/apple/cmd.pla: 0135:         STY     PARAMS+1
        STY     PARAMS+1
; vmsrc/apple/cmd.pla: 0136:         INX
        INX
; vmsrc/apple/cmd.pla: 0137:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0138:         STA     CMD
        STA     CMD
; vmsrc/apple/cmd.pla: 0139:         JSR     $BF00
        JSR     $BF00
; vmsrc/apple/cmd.pla: 0140: CMD:    !BYTE   00
CMD:    !BYTE   00
; vmsrc/apple/cmd.pla: 0141: PARAMS: !WORD   0000
PARAMS: !WORD   0000
; vmsrc/apple/cmd.pla: 0142: ;        LDY     #$00
;        LDY     #$00
; vmsrc/apple/cmd.pla: 0143:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0144: ;        STY     ESTKH,X
;        STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0145:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0146: end
; vmsrc/apple/cmd.pla: 0147: //
; vmsrc/apple/cmd.pla: 0148: // CALL 6502 ROUTINE
; vmsrc/apple/cmd.pla: 0149: // CALL(ADDR, AREG, XREG, YREG, STATUS)
; vmsrc/apple/cmd.pla: 0150: //
; vmsrc/apple/cmd.pla: 0151: asm call(addr,areg,xreg,yreg,status)#1
_P001 					; call(addr,areg,xreg,yreg,status)#1()
_A001 					; call()
; vmsrc/apple/cmd.pla: 0152: REGVALS =   SRC
REGVALS =   SRC
; vmsrc/apple/cmd.pla: 0153:         PHP
        PHP
; vmsrc/apple/cmd.pla: 0154:         LDA     ESTKL+4,X
        LDA     ESTKL+4,X
; vmsrc/apple/cmd.pla: 0155:         STA     TMPL
        STA     TMPL
; vmsrc/apple/cmd.pla: 0156:         LDA     ESTKH+4,X
        LDA     ESTKH+4,X
; vmsrc/apple/cmd.pla: 0157:         STA     TMPH
        STA     TMPH
; vmsrc/apple/cmd.pla: 0158:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0159:         PHA
        PHA
; vmsrc/apple/cmd.pla: 0160:         LDY     ESTKL+1,X
        LDY     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0161:         LDA     ESTKL+3,X
        LDA     ESTKL+3,X
; vmsrc/apple/cmd.pla: 0162:         PHA
        PHA
; vmsrc/apple/cmd.pla: 0163:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; vmsrc/apple/cmd.pla: 0164:         INX
        INX
; vmsrc/apple/cmd.pla: 0165:         INX
        INX
; vmsrc/apple/cmd.pla: 0166:         INX
        INX
; vmsrc/apple/cmd.pla: 0167:         INX
        INX
; vmsrc/apple/cmd.pla: 0168:         STX     ESP
        STX     ESP
; vmsrc/apple/cmd.pla: 0169:         TAX
        TAX
; vmsrc/apple/cmd.pla: 0170:         PLA
        PLA
; vmsrc/apple/cmd.pla: 0171:         BIT     ROMEN
        BIT     ROMEN
; vmsrc/apple/cmd.pla: 0172:         PLP
        PLP
; vmsrc/apple/cmd.pla: 0173:         JSR     JMPTMP
        JSR     JMPTMP
; vmsrc/apple/cmd.pla: 0174:         PHP
        PHP
; vmsrc/apple/cmd.pla: 0175:         BIT     LCRDEN+LCBNK2
        BIT     LCRDEN+LCBNK2
; vmsrc/apple/cmd.pla: 0176:         STA     REGVALS+0
        STA     REGVALS+0
; vmsrc/apple/cmd.pla: 0177:         STX     REGVALS+1
        STX     REGVALS+1
; vmsrc/apple/cmd.pla: 0178:         STY     REGVALS+2
        STY     REGVALS+2
; vmsrc/apple/cmd.pla: 0179:         PLA
        PLA
; vmsrc/apple/cmd.pla: 0180:         STA     REGVALS+3
        STA     REGVALS+3
; vmsrc/apple/cmd.pla: 0181:         LDX     ESP
        LDX     ESP
; vmsrc/apple/cmd.pla: 0182:         LDA     #<REGVALS
        LDA     #<REGVALS
; vmsrc/apple/cmd.pla: 0183:         LDY     #>REGVALS
        LDY     #>REGVALS
; vmsrc/apple/cmd.pla: 0184:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0185:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0186:         PLP
        PLP
; vmsrc/apple/cmd.pla: 0187:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0188: end
; vmsrc/apple/cmd.pla: 0189: //
; vmsrc/apple/cmd.pla: 0190: // CALL LOADED SYSTEM PROGRAM
; vmsrc/apple/cmd.pla: 0191: //
; vmsrc/apple/cmd.pla: 0192: asm exec()#0
_A002 					; exec()
; vmsrc/apple/cmd.pla: 0193:         BIT     ROMEN
        BIT     ROMEN
; vmsrc/apple/cmd.pla: 0194:         JMP     $2000
        JMP     $2000
; vmsrc/apple/cmd.pla: 0195: end
; vmsrc/apple/cmd.pla: 0196: //
; vmsrc/apple/cmd.pla: 0197: // SET MEMORY TO VALUE
; vmsrc/apple/cmd.pla: 0198: // MEMSET(ADDR, VALUE, SIZE)
; vmsrc/apple/cmd.pla: 0199: //   With optimizations from Peter Ferrie
; vmsrc/apple/cmd.pla: 0200: //
; vmsrc/apple/cmd.pla: 0201: asm memset(addr,value,size)#0
_P016 					; memset(addr,value,size)#0()
_A003 					; memset()
; vmsrc/apple/cmd.pla: 0202:         LDA     ESTKL+2,X
        LDA     ESTKL+2,X
; vmsrc/apple/cmd.pla: 0203:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0204:         LDA     ESTKH+2,X
        LDA     ESTKH+2,X
; vmsrc/apple/cmd.pla: 0205:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0206:         LDY     ESTKL,X
        LDY     ESTKL,X
; vmsrc/apple/cmd.pla: 0207:         BEQ     +
        BEQ     +
; vmsrc/apple/cmd.pla: 0208:         INC     ESTKH,X
        INC     ESTKH,X
; vmsrc/apple/cmd.pla: 0209:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0210: +       LDA     ESTKH,X
+       LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0211:         BEQ     SETMEX
        BEQ     SETMEX
; vmsrc/apple/cmd.pla: 0212: SETMLPL CLC
SETMLPL CLC
; vmsrc/apple/cmd.pla: 0213:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0214: SETMLPH STA     (DST),Y
SETMLPH STA     (DST),Y
; vmsrc/apple/cmd.pla: 0215:         DEC     ESTKL,X
        DEC     ESTKL,X
; vmsrc/apple/cmd.pla: 0216:         BEQ     ++
        BEQ     ++
; vmsrc/apple/cmd.pla: 0217: -       INY
-       INY
; vmsrc/apple/cmd.pla: 0218:         BEQ     +
        BEQ     +
; vmsrc/apple/cmd.pla: 0219: --      BCS     SETMLPL
--      BCS     SETMLPL
; vmsrc/apple/cmd.pla: 0220:         SEC
        SEC
; vmsrc/apple/cmd.pla: 0221:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0222:         BCS     SETMLPH
        BCS     SETMLPH
; vmsrc/apple/cmd.pla: 0223: +       INC     DSTH
+       INC     DSTH
; vmsrc/apple/cmd.pla: 0224:         BNE     --
        BNE     --
; vmsrc/apple/cmd.pla: 0225: ++      DEC     ESTKH,X
++      DEC     ESTKH,X
; vmsrc/apple/cmd.pla: 0226:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0227: SETMEX  INX
SETMEX  INX
; vmsrc/apple/cmd.pla: 0228:         INX
        INX
; vmsrc/apple/cmd.pla: 0229:         INX
        INX
; vmsrc/apple/cmd.pla: 0230:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0231: end
; vmsrc/apple/cmd.pla: 0232: //
; vmsrc/apple/cmd.pla: 0233: // COPY MEMORY
; vmsrc/apple/cmd.pla: 0234: // MEMCPY(DSTADDR, SRCADDR, SIZE)
; vmsrc/apple/cmd.pla: 0235: //
; vmsrc/apple/cmd.pla: 0236: asm memcpy(dst,src,size)#0
_P017 					; memcpy(dst,src,size)#0()
_A004 					; memcpy()
; vmsrc/apple/cmd.pla: 0237:         INX
        INX
; vmsrc/apple/cmd.pla: 0238:         INX
        INX
; vmsrc/apple/cmd.pla: 0239:         INX
        INX
; vmsrc/apple/cmd.pla: 0240:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0241:         ORA     ESTKH-3,X
        ORA     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0242:         BEQ     CPYMEX
        BEQ     CPYMEX
; vmsrc/apple/cmd.pla: 0243:         LDA     ESTKL-2,X
        LDA     ESTKL-2,X
; vmsrc/apple/cmd.pla: 0244:         CMP     ESTKL-1,X
        CMP     ESTKL-1,X
; vmsrc/apple/cmd.pla: 0245:         LDA     ESTKH-2,X
        LDA     ESTKH-2,X
; vmsrc/apple/cmd.pla: 0246:         SBC     ESTKH-1,X
        SBC     ESTKH-1,X
; vmsrc/apple/cmd.pla: 0247:         BCC     REVCPY
        BCC     REVCPY
; vmsrc/apple/cmd.pla: 0248: ;
; vmsrc/apple/cmd.pla: 0249: ; FORWARD COPY
; FORWARD COPY
; vmsrc/apple/cmd.pla: 0250: ;
; vmsrc/apple/cmd.pla: 0251:         LDA     ESTKL-1,X
        LDA     ESTKL-1,X
; vmsrc/apple/cmd.pla: 0252:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0253:         LDA     ESTKH-1,X
        LDA     ESTKH-1,X
; vmsrc/apple/cmd.pla: 0254:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0255:         LDA     ESTKL-2,X
        LDA     ESTKL-2,X
; vmsrc/apple/cmd.pla: 0256:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0257:         LDA     ESTKH-2,X
        LDA     ESTKH-2,X
; vmsrc/apple/cmd.pla: 0258:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0259:         LDY     ESTKL-3,X
        LDY     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0260:         BEQ     FORCPYLP
        BEQ     FORCPYLP
; vmsrc/apple/cmd.pla: 0261:         INC     ESTKH-3,X
        INC     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0262:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0263: FORCPYLP LDA    (SRC),Y
FORCPYLP LDA    (SRC),Y
; vmsrc/apple/cmd.pla: 0264:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/cmd.pla: 0265:         INY
        INY
; vmsrc/apple/cmd.pla: 0266:         BNE     +
        BNE     +
; vmsrc/apple/cmd.pla: 0267:         INC     DSTH
        INC     DSTH
; vmsrc/apple/cmd.pla: 0268:         INC     SRCH
        INC     SRCH
; vmsrc/apple/cmd.pla: 0269: +       DEC     ESTKL-3,X
+       DEC     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0270:         BNE     FORCPYLP
        BNE     FORCPYLP
; vmsrc/apple/cmd.pla: 0271:         DEC     ESTKH-3,X
        DEC     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0272:         BNE     FORCPYLP
        BNE     FORCPYLP
; vmsrc/apple/cmd.pla: 0273:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0274: ;
; vmsrc/apple/cmd.pla: 0275: ; REVERSE COPY
; REVERSE COPY
; vmsrc/apple/cmd.pla: 0276: ;
; vmsrc/apple/cmd.pla: 0277: REVCPY  ;CLC
REVCPY  ;CLC
; vmsrc/apple/cmd.pla: 0278:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0279:         ADC     ESTKL-1,X
        ADC     ESTKL-1,X
; vmsrc/apple/cmd.pla: 0280:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0281:         LDA     ESTKH-3,X
        LDA     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0282:         ADC     ESTKH-1,X
        ADC     ESTKH-1,X
; vmsrc/apple/cmd.pla: 0283:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0284:         CLC
        CLC
; vmsrc/apple/cmd.pla: 0285:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0286:         ADC     ESTKL-2,X
        ADC     ESTKL-2,X
; vmsrc/apple/cmd.pla: 0287:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0288:         LDA     ESTKH-3,X
        LDA     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0289:         ADC     ESTKH-2,X
        ADC     ESTKH-2,X
; vmsrc/apple/cmd.pla: 0290:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0291:         DEC     DSTH
        DEC     DSTH
; vmsrc/apple/cmd.pla: 0292:         DEC     SRCH
        DEC     SRCH
; vmsrc/apple/cmd.pla: 0293:         LDY     #$FF
        LDY     #$FF
; vmsrc/apple/cmd.pla: 0294:         LDA     ESTKL-3,X
        LDA     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0295:         BEQ     REVCPYLP
        BEQ     REVCPYLP
; vmsrc/apple/cmd.pla: 0296:         INC     ESTKH-3,X
        INC     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0297: REVCPYLP LDA    (SRC),Y
REVCPYLP LDA    (SRC),Y
; vmsrc/apple/cmd.pla: 0298:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/cmd.pla: 0299:         DEY
        DEY
; vmsrc/apple/cmd.pla: 0300:         CPY     #$FF
        CPY     #$FF
; vmsrc/apple/cmd.pla: 0301:         BNE     +
        BNE     +
; vmsrc/apple/cmd.pla: 0302:         DEC     DSTH
        DEC     DSTH
; vmsrc/apple/cmd.pla: 0303:         DEC     SRCH
        DEC     SRCH
; vmsrc/apple/cmd.pla: 0304: +       DEC     ESTKL-3,X
+       DEC     ESTKL-3,X
; vmsrc/apple/cmd.pla: 0305:         BNE     REVCPYLP
        BNE     REVCPYLP
; vmsrc/apple/cmd.pla: 0306:         DEC     ESTKH-3,X
        DEC     ESTKH-3,X
; vmsrc/apple/cmd.pla: 0307:         BNE     REVCPYLP
        BNE     REVCPYLP
; vmsrc/apple/cmd.pla: 0308: CPYMEX  RTS
CPYMEX  RTS
; vmsrc/apple/cmd.pla: 0309: end
; vmsrc/apple/cmd.pla: 0310: asm crout()#0
_P002 					; crout()#0()
_A005 					; crout()
; vmsrc/apple/cmd.pla: 0311:         LDA     #$8D
        LDA     #$8D
; vmsrc/apple/cmd.pla: 0312:         BNE     ++
        BNE     ++
; vmsrc/apple/cmd.pla: 0313: end
; vmsrc/apple/cmd.pla: 0314: //
; vmsrc/apple/cmd.pla: 0315: // CHAR OUT
; vmsrc/apple/cmd.pla: 0316: // COUT(CHAR)
; vmsrc/apple/cmd.pla: 0317: //
; vmsrc/apple/cmd.pla: 0318: asm cout(c)#0
_P003 					; cout(c)#0()
_A006 					; cout()
; vmsrc/apple/cmd.pla: 0319:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0320:         BIT     $BF98
        BIT     $BF98
; vmsrc/apple/cmd.pla: 0321:         BMI     +
        BMI     +
; vmsrc/apple/cmd.pla: 0322:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/cmd.pla: 0323: +       ORA     #$80
+       ORA     #$80
; vmsrc/apple/cmd.pla: 0324:         INX
        INX
; vmsrc/apple/cmd.pla: 0325: ++      BIT     ROMEN
++      BIT     ROMEN
; vmsrc/apple/cmd.pla: 0326:         JSR     $FDED
        JSR     $FDED
; vmsrc/apple/cmd.pla: 0327:         BIT     LCRDEN+LCBNK2
        BIT     LCRDEN+LCBNK2
; vmsrc/apple/cmd.pla: 0328:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0329: end
; vmsrc/apple/cmd.pla: 0330: //
; vmsrc/apple/cmd.pla: 0331: // CHAR IN
; vmsrc/apple/cmd.pla: 0332: // RDKEY()
; vmsrc/apple/cmd.pla: 0333: //
; vmsrc/apple/cmd.pla: 0334: asm cin()#1
_P008 					; cin()#1()
_A007 					; cin()
; vmsrc/apple/cmd.pla: 0335:         BIT     ROMEN
        BIT     ROMEN
; vmsrc/apple/cmd.pla: 0336:         JSR     $FD0C
        JSR     $FD0C
; vmsrc/apple/cmd.pla: 0337:         BIT     LCRDEN+LCBNK2
        BIT     LCRDEN+LCBNK2
; vmsrc/apple/cmd.pla: 0338:         DEX
        DEX
; vmsrc/apple/cmd.pla: 0339:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0340:         AND     #$7F
        AND     #$7F
; vmsrc/apple/cmd.pla: 0341:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0342:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0343:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0344: end
; vmsrc/apple/cmd.pla: 0345: //
; vmsrc/apple/cmd.pla: 0346: // PRINT STRING
; vmsrc/apple/cmd.pla: 0347: // PRSTR(STR)
; vmsrc/apple/cmd.pla: 0348: //
; vmsrc/apple/cmd.pla: 0349: asm prstr(s)#0
_P004 					; prstr(s)#0()
_A008 					; prstr()
; vmsrc/apple/cmd.pla: 0350:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0351:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0352:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0353:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0354:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0355:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0356:         BEQ     ++
        BEQ     ++
; vmsrc/apple/cmd.pla: 0357:         STA     TMP
        STA     TMP
; vmsrc/apple/cmd.pla: 0358:         BIT     ROMEN
        BIT     ROMEN
; vmsrc/apple/cmd.pla: 0359: -       INY
-       INY
; vmsrc/apple/cmd.pla: 0360:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0361:         BIT     $BF98
        BIT     $BF98
; vmsrc/apple/cmd.pla: 0362:         BMI     +
        BMI     +
; vmsrc/apple/cmd.pla: 0363:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/cmd.pla: 0364: +       ORA     #$80
+       ORA     #$80
; vmsrc/apple/cmd.pla: 0365:         JSR     $FDED
        JSR     $FDED
; vmsrc/apple/cmd.pla: 0366:         CPY     TMP
        CPY     TMP
; vmsrc/apple/cmd.pla: 0367:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0368:         BIT     LCRDEN+LCBNK2
        BIT     LCRDEN+LCBNK2
; vmsrc/apple/cmd.pla: 0369: ++      INX
++      INX
; vmsrc/apple/cmd.pla: 0370:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0371: end
; vmsrc/apple/cmd.pla: 0372: //
; vmsrc/apple/cmd.pla: 0373: // PRINT WORD
; vmsrc/apple/cmd.pla: 0374: //
; vmsrc/apple/cmd.pla: 0375: asm prword(w)#0
_P006 					; prword(w)#0()
_A009 					; prword()
; vmsrc/apple/cmd.pla: 0376:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0377:         JSR     +
        JSR     +
; vmsrc/apple/cmd.pla: 0378:         DEX
        DEX
; vmsrc/apple/cmd.pla: 0379:         ; FALL THROUGH TO PRBYTE
        ; FALL THROUGH TO PRBYTE
; vmsrc/apple/cmd.pla: 0380: end
; vmsrc/apple/cmd.pla: 0381: //
; vmsrc/apple/cmd.pla: 0382: // PRINT BYTE
; vmsrc/apple/cmd.pla: 0383: //
; vmsrc/apple/cmd.pla: 0384: asm prbyte(b)#0
_P005 					; prbyte(b)#0()
_A010 					; prbyte()
; vmsrc/apple/cmd.pla: 0385:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0386: +       STX     ESP
+       STX     ESP
; vmsrc/apple/cmd.pla: 0387:         BIT     ROMEN
        BIT     ROMEN
; vmsrc/apple/cmd.pla: 0388:         JSR     $FDDA
        JSR     $FDDA
; vmsrc/apple/cmd.pla: 0389:         LDX     ESP
        LDX     ESP
; vmsrc/apple/cmd.pla: 0390:         BIT     LCRDEN+LCBNK2
        BIT     LCRDEN+LCBNK2
; vmsrc/apple/cmd.pla: 0391:         INX
        INX
; vmsrc/apple/cmd.pla: 0392:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0393: end
; vmsrc/apple/cmd.pla: 0394: //
; vmsrc/apple/cmd.pla: 0395: // READ STRING
; vmsrc/apple/cmd.pla: 0396: // STR = RDSTR(PROMPTCHAR)
; vmsrc/apple/cmd.pla: 0397: //
; vmsrc/apple/cmd.pla: 0398: asm rdstr(p)#1
_P009 					; rdstr(p)#1()
_A011 					; rdstr()
; vmsrc/apple/cmd.pla: 0399:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0400:         STA     $33
        STA     $33
; vmsrc/apple/cmd.pla: 0401:         STX     ESP
        STX     ESP
; vmsrc/apple/cmd.pla: 0402:         BIT     ROMEN
        BIT     ROMEN
; vmsrc/apple/cmd.pla: 0403:         JSR     $FD6A
        JSR     $FD6A
; vmsrc/apple/cmd.pla: 0404:         STX     $01FF
        STX     $01FF
; vmsrc/apple/cmd.pla: 0405: -       LDA     $01FF,X
-       LDA     $01FF,X
; vmsrc/apple/cmd.pla: 0406:         AND     #$7F
        AND     #$7F
; vmsrc/apple/cmd.pla: 0407:         STA     $01FF,X
        STA     $01FF,X
; vmsrc/apple/cmd.pla: 0408:         DEX
        DEX
; vmsrc/apple/cmd.pla: 0409:         BPL     -
        BPL     -
; vmsrc/apple/cmd.pla: 0410:         TXA
        TXA
; vmsrc/apple/cmd.pla: 0411:         LDX     ESP
        LDX     ESP
; vmsrc/apple/cmd.pla: 0412:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0413:         LDA     #$01
        LDA     #$01
; vmsrc/apple/cmd.pla: 0414:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/cmd.pla: 0415:         BIT     LCRDEN+LCBNK2
        BIT     LCRDEN+LCBNK2
; vmsrc/apple/cmd.pla: 0416:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0417: end
; vmsrc/apple/cmd.pla: 0418: asm uword_isge(a,b)#1
_P021 					; uword_isge(a,b)#1()
_A012 					; uword_isge()
; vmsrc/apple/cmd.pla: 0419:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0420:         CMP     ESTKL,X
        CMP     ESTKL,X
; vmsrc/apple/cmd.pla: 0421:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0422:         SBC     ESTKH,X
        SBC     ESTKH,X
; vmsrc/apple/cmd.pla: 0423:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/cmd.pla: 0424:         ADC     #$00
        ADC     #$00
; vmsrc/apple/cmd.pla: 0425:         EOR     #$FF
        EOR     #$FF
; vmsrc/apple/cmd.pla: 0426:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0427:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0428:         INX
        INX
; vmsrc/apple/cmd.pla: 0429:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0430: end
; vmsrc/apple/cmd.pla: 0431: asm uword_isle(a,b)#1
_P023 					; uword_isle(a,b)#1()
_A013 					; uword_isle()
; vmsrc/apple/cmd.pla: 0432:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0433:         CMP     ESTKL+1,X
        CMP     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0434:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0435:         SBC     ESTKH+1,X
        SBC     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0436:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/cmd.pla: 0437:         ADC     #$00
        ADC     #$00
; vmsrc/apple/cmd.pla: 0438:         EOR     #$FF
        EOR     #$FF
; vmsrc/apple/cmd.pla: 0439:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0440:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0441:         INX
        INX
; vmsrc/apple/cmd.pla: 0442:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0443: end
; vmsrc/apple/cmd.pla: 0444: asm uword_isgt(a,b)#1
_P020 					; uword_isgt(a,b)#1()
_A014 					; uword_isgt()
; vmsrc/apple/cmd.pla: 0445:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0446:         CMP     ESTKL+1,X
        CMP     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0447:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0448:         SBC     ESTKH+1,X
        SBC     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0449:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/cmd.pla: 0450:         ADC     #$00
        ADC     #$00
; vmsrc/apple/cmd.pla: 0451:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0452:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0453:         INX
        INX
; vmsrc/apple/cmd.pla: 0454:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0455: end
; vmsrc/apple/cmd.pla: 0456: asm uword_islt(a,b)#1
_P022 					; uword_islt(a,b)#1()
_A015 					; uword_islt()
; vmsrc/apple/cmd.pla: 0457:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0458:         CMP     ESTKL,X
        CMP     ESTKL,X
; vmsrc/apple/cmd.pla: 0459:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0460:         SBC     ESTKH,X
        SBC     ESTKH,X
; vmsrc/apple/cmd.pla: 0461:         LDA     #$FF
        LDA     #$FF
; vmsrc/apple/cmd.pla: 0462:         ADC     #$00
        ADC     #$00
; vmsrc/apple/cmd.pla: 0463:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0464:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0465:         INX
        INX
; vmsrc/apple/cmd.pla: 0466:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0467: end
; vmsrc/apple/cmd.pla: 0468: asm divmod(a,b)#2
_P025 					; divmod(a,b)#2()
_A016 					; divmod()
; vmsrc/apple/cmd.pla: 0469:         JSR     INTERP          ; CALL INTERP
        JSR     INTERP          ; CALL INTERP
; vmsrc/apple/cmd.pla: 0470:         !BYTE   $36, $5C        ; DIVMOD, RET
        !BYTE   $36, $5C        ; DIVMOD, RET
; vmsrc/apple/cmd.pla: 0471: end
; vmsrc/apple/cmd.pla: 0472: asm sext(a)#1
_P024 					; sext(a)#1()
_A017 					; sext()
; vmsrc/apple/cmd.pla: 0473:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0474:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0475:         BPL     +
        BPL     +
; vmsrc/apple/cmd.pla: 0476:         DEY
        DEY
; vmsrc/apple/cmd.pla: 0477: +       STY     ESTKH,X
+       STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0478:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0479: end
; vmsrc/apple/cmd.pla: 0480: //
; vmsrc/apple/cmd.pla: 0481: // Utility routines.
; vmsrc/apple/cmd.pla: 0482: //
; vmsrc/apple/cmd.pla: 0483: // A DCI string is one that has the high bit set for every character except the last.
; vmsrc/apple/cmd.pla: 0484: // More efficient than C or Pascal strings.
; vmsrc/apple/cmd.pla: 0485: //
; vmsrc/apple/cmd.pla: 0486: //def dcitos(dci, str)
; vmsrc/apple/cmd.pla: 0487: //    byte len, c
; vmsrc/apple/cmd.pla: 0488: //    len = 0
; vmsrc/apple/cmd.pla: 0489: //    repeat
; vmsrc/apple/cmd.pla: 0490: //        c = (dci).[len]
; vmsrc/apple/cmd.pla: 0491: //        len = len + 1
; vmsrc/apple/cmd.pla: 0492: //        (str).[len] = c & $7F
; vmsrc/apple/cmd.pla: 0493: //    until !(c & $80)
; vmsrc/apple/cmd.pla: 0494: //    ^str = len
; vmsrc/apple/cmd.pla: 0495: //    return len
; vmsrc/apple/cmd.pla: 0496: //end
; vmsrc/apple/cmd.pla: 0497: asm dcitos(dci, str)#1
_A018 					; dcitos()
; vmsrc/apple/cmd.pla: 0498:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0499:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0500:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0501:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0502:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0503:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0504:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0505:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0506:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0507: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0508:         CMP     #$80
        CMP     #$80
; vmsrc/apple/cmd.pla: 0509:         AND     #$7F
        AND     #$7F
; vmsrc/apple/cmd.pla: 0510:         INY
        INY
; vmsrc/apple/cmd.pla: 0511:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/cmd.pla: 0512:         BCS     -
        BCS     -
; vmsrc/apple/cmd.pla: 0513:         TYA
        TYA
; vmsrc/apple/cmd.pla: 0514:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0515:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/cmd.pla: 0516:         INX
        INX
; vmsrc/apple/cmd.pla: 0517:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0518:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0519:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0520: end
; vmsrc/apple/cmd.pla: 0521: //def stodci(str, dci)
; vmsrc/apple/cmd.pla: 0522: //    byte len, c
; vmsrc/apple/cmd.pla: 0523: //    len = ^str
; vmsrc/apple/cmd.pla: 0524: //    if len == 0
; vmsrc/apple/cmd.pla: 0525: //        return
; vmsrc/apple/cmd.pla: 0526: //    fin
; vmsrc/apple/cmd.pla: 0527: //    c = toupper((str).[len]) & $7F
; vmsrc/apple/cmd.pla: 0528: //    len = len - 1
; vmsrc/apple/cmd.pla: 0529: //    (dci).[len] = c
; vmsrc/apple/cmd.pla: 0530: //    while len
; vmsrc/apple/cmd.pla: 0531: //      c = toupper((str).[len]) | $80
; vmsrc/apple/cmd.pla: 0532: //      len = len - 1
; vmsrc/apple/cmd.pla: 0533: //      (dci).[len] = c
; vmsrc/apple/cmd.pla: 0534: //    loop
; vmsrc/apple/cmd.pla: 0535: //    return ^str
; vmsrc/apple/cmd.pla: 0536: //end
; vmsrc/apple/cmd.pla: 0537: asm stodci(str,dci)#1
_A019 					; stodci()
; vmsrc/apple/cmd.pla: 0538:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0539:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0540:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0541:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0542:         LDA     ESTKL+1,X
        LDA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0543:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0544:         LDA     ESTKH+1,X
        LDA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0545:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0546:         INX
        INX
; vmsrc/apple/cmd.pla: 0547:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0548:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0549:         BEQ     ++
        BEQ     ++
; vmsrc/apple/cmd.pla: 0550:         TAY
        TAY
; vmsrc/apple/cmd.pla: 0551:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0552:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/cmd.pla: 0553:         BNE     +
        BNE     +
; vmsrc/apple/cmd.pla: 0554: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0555:         JSR     TOUPR
        JSR     TOUPR
; vmsrc/apple/cmd.pla: 0556:         ORA     #$80
        ORA     #$80
; vmsrc/apple/cmd.pla: 0557: +       DEY
+       DEY
; vmsrc/apple/cmd.pla: 0558:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/cmd.pla: 0559:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0560:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0561: ++      STA     ESTKL,X
++      STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0562:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0563:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0564: end
; vmsrc/apple/cmd.pla: 0565: asm toupper(c)#1
_P010 					; toupper(c)#1()
_A020 					; toupper()
; vmsrc/apple/cmd.pla: 0566:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0567: TOUPR   AND     #$7F
TOUPR   AND     #$7F
; vmsrc/apple/cmd.pla: 0568:         CMP     #'a'
        CMP     #'a'
; vmsrc/apple/cmd.pla: 0569:         BCC     +
        BCC     +
; vmsrc/apple/cmd.pla: 0570:         CMP     #'z'+1
        CMP     #'z'+1
; vmsrc/apple/cmd.pla: 0571:         BCS     +
        BCS     +
; vmsrc/apple/cmd.pla: 0572:         SBC     #$1F
        SBC     #$1F
; vmsrc/apple/cmd.pla: 0573: +       STA     ESTKL,X
+       STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0574:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0575: end
; vmsrc/apple/cmd.pla: 0576: //
; vmsrc/apple/cmd.pla: 0577: // Lookup routines.
; vmsrc/apple/cmd.pla: 0578: //
; vmsrc/apple/cmd.pla: 0579: //def lookuptbl(dci, tbl)
; vmsrc/apple/cmd.pla: 0580: //    word match
; vmsrc/apple/cmd.pla: 0581: //    while ^tbl
; vmsrc/apple/cmd.pla: 0582: //        match = dci
; vmsrc/apple/cmd.pla: 0583: //        while ^tbl == ^match
; vmsrc/apple/cmd.pla: 0584: //            if !(^tbl & $80)
; vmsrc/apple/cmd.pla: 0585: //                return (tbl):1
; vmsrc/apple/cmd.pla: 0586: //            fin
; vmsrc/apple/cmd.pla: 0587: //            tbl   = tbl   + 1
; vmsrc/apple/cmd.pla: 0588: //            match = match + 1
; vmsrc/apple/cmd.pla: 0589: //        loop
; vmsrc/apple/cmd.pla: 0590: //        while (^tbl & $80)
; vmsrc/apple/cmd.pla: 0591: //            tbl = tbl + 1
; vmsrc/apple/cmd.pla: 0592: //        loop
; vmsrc/apple/cmd.pla: 0593: //        tbl = tbl + 3
; vmsrc/apple/cmd.pla: 0594: //    loop
; vmsrc/apple/cmd.pla: 0595: //    return 0
; vmsrc/apple/cmd.pla: 0596: asm lookuptbl(dci, tbl)#1
_A021 					; lookuptbl()
; vmsrc/apple/cmd.pla: 0597:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0598:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0599:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0600:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0601:         INX
        INX
; vmsrc/apple/cmd.pla: 0602:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0603:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0604:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0605:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0606: --      LDY     #$00
--      LDY     #$00
; vmsrc/apple/cmd.pla: 0607: -       LDA     (DST),Y
-       LDA     (DST),Y
; vmsrc/apple/cmd.pla: 0608:         BEQ     +
        BEQ     +
; vmsrc/apple/cmd.pla: 0609:         CMP     (SRC),Y
        CMP     (SRC),Y
; vmsrc/apple/cmd.pla: 0610:         BNE     ++
        BNE     ++
; vmsrc/apple/cmd.pla: 0611:         INY
        INY
; vmsrc/apple/cmd.pla: 0612:         ASL
        ASL
; vmsrc/apple/cmd.pla: 0613:         BCS     -
        BCS     -
; vmsrc/apple/cmd.pla: 0614:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/cmd.pla: 0615:         STA     ESTKL,X             ; MATCH
        STA     ESTKL,X             ; MATCH
; vmsrc/apple/cmd.pla: 0616:         INY
        INY
; vmsrc/apple/cmd.pla: 0617:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/cmd.pla: 0618:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/cmd.pla: 0619:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0620: +       STA     ESTKL,X             ; NO MATCH
+       STA     ESTKL,X             ; NO MATCH
; vmsrc/apple/cmd.pla: 0621:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/cmd.pla: 0622:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0623: ++
++
; vmsrc/apple/cmd.pla: 0624: -       LDA     (DST),Y             ; NEXT ENTRY
-       LDA     (DST),Y             ; NEXT ENTRY
; vmsrc/apple/cmd.pla: 0625:         BPL     +
        BPL     +
; vmsrc/apple/cmd.pla: 0626:         INY
        INY
; vmsrc/apple/cmd.pla: 0627:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0628: +       TYA
+       TYA
; vmsrc/apple/cmd.pla: 0629:         CLC
        CLC
; vmsrc/apple/cmd.pla: 0630:         ADC     #$03
        ADC     #$03
; vmsrc/apple/cmd.pla: 0631:         ADC     DSTL
        ADC     DSTL
; vmsrc/apple/cmd.pla: 0632:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0633:         BCC     --
        BCC     --
; vmsrc/apple/cmd.pla: 0634:         INC     DSTH
        INC     DSTH
; vmsrc/apple/cmd.pla: 0635:         BNE     --
        BNE     --
; vmsrc/apple/cmd.pla: 0636: end
; vmsrc/apple/cmd.pla: 0637: // def lookupidx(esd, index)
; vmsrc/apple/cmd.pla: 0638: //    word sym
; vmsrc/apple/cmd.pla: 0639: //    while ^esd
; vmsrc/apple/cmd.pla: 0640: //        sym = esd
; vmsrc/apple/cmd.pla: 0641: //        esd = sym + dcitos(sym, @str)
; vmsrc/apple/cmd.pla: 0642: //        if esd->0 & $10 and esd->1 == index
; vmsrc/apple/cmd.pla: 0643: //            return sym
; vmsrc/apple/cmd.pla: 0644: //        fin
; vmsrc/apple/cmd.pla: 0645: //        esd = esd + 3
; vmsrc/apple/cmd.pla: 0646: //    loop
; vmsrc/apple/cmd.pla: 0647: //end
; vmsrc/apple/cmd.pla: 0648: asm lookupidx(esd, index)#1
_A022 					; lookupidx()
; vmsrc/apple/cmd.pla: 0649:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0650:         STA     TMPL
        STA     TMPL
; vmsrc/apple/cmd.pla: 0651:         INX
        INX
; vmsrc/apple/cmd.pla: 0652: ---     LDA     ESTKH,X
---     LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0653:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0654:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0655: --      STA     SRCL
--      STA     SRCL
; vmsrc/apple/cmd.pla: 0656:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0657: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0658:         BPL     +
        BPL     +
; vmsrc/apple/cmd.pla: 0659:         INY
        INY
; vmsrc/apple/cmd.pla: 0660:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0661: +       BEQ     ++              ; END OF ESD
+       BEQ     ++              ; END OF ESD
; vmsrc/apple/cmd.pla: 0662:         INY
        INY
; vmsrc/apple/cmd.pla: 0663:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0664:         INY
        INY
; vmsrc/apple/cmd.pla: 0665:         AND     #$10            ; EXTERN FLAG?
        AND     #$10            ; EXTERN FLAG?
; vmsrc/apple/cmd.pla: 0666:         BEQ     +
        BEQ     +
; vmsrc/apple/cmd.pla: 0667:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0668:         CMP     TMPL
        CMP     TMPL
; vmsrc/apple/cmd.pla: 0669:         BEQ     +++             ; MATCH
        BEQ     +++             ; MATCH
; vmsrc/apple/cmd.pla: 0670: +       INY
+       INY
; vmsrc/apple/cmd.pla: 0671:         TYA
        TYA
; vmsrc/apple/cmd.pla: 0672:         SEC
        SEC
; vmsrc/apple/cmd.pla: 0673:         ADC     SRCL
        ADC     SRCL
; vmsrc/apple/cmd.pla: 0674:         STA     ESTKL,X         ; SYM PTRL
        STA     ESTKL,X         ; SYM PTRL
; vmsrc/apple/cmd.pla: 0675:         BCC     --
        BCC     --
; vmsrc/apple/cmd.pla: 0676:         INC     ESTKH,X         ; SYM PTRH
        INC     ESTKH,X         ; SYM PTRH
; vmsrc/apple/cmd.pla: 0677:         BNE     ---
        BNE     ---
; vmsrc/apple/cmd.pla: 0678: ++      STA     ESTKL,X         ; END OF ESD
++      STA     ESTKL,X         ; END OF ESD
; vmsrc/apple/cmd.pla: 0679:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/cmd.pla: 0680: +++     RTS
+++     RTS
; vmsrc/apple/cmd.pla: 0681: end
; vmsrc/apple/cmd.pla: 0682: //def lookupdef(addr, deftbl)#1
; vmsrc/apple/cmd.pla: 0683: //    while deftbl->0 == $20
; vmsrc/apple/cmd.pla: 0684: //        if deftbl=>3 == addr
; vmsrc/apple/cmd.pla: 0685: //            return deftbl
; vmsrc/apple/cmd.pla: 0686: //        fin
; vmsrc/apple/cmd.pla: 0687: //        deftbl = deftbl + 5
; vmsrc/apple/cmd.pla: 0688: //    loop
; vmsrc/apple/cmd.pla: 0689: //    return 0
; vmsrc/apple/cmd.pla: 0690: //end
; vmsrc/apple/cmd.pla: 0691: asm lookupdef(addr, deftbl)#1
_A023 					; lookupdef()
; vmsrc/apple/cmd.pla: 0692:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0693:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0694:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0695:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0696:         INX
        INX
; vmsrc/apple/cmd.pla: 0697: -       LDY     #$00
-       LDY     #$00
; vmsrc/apple/cmd.pla: 0698:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0699:         CMP     #$20            ; JSR OPCODE?
        CMP     #$20            ; JSR OPCODE?
; vmsrc/apple/cmd.pla: 0700:         BNE     ++
        BNE     ++
; vmsrc/apple/cmd.pla: 0701:         LDY     #$03
        LDY     #$03
; vmsrc/apple/cmd.pla: 0702:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0703:         CMP     ESTKL,X
        CMP     ESTKL,X
; vmsrc/apple/cmd.pla: 0704:         BNE     +
        BNE     +
; vmsrc/apple/cmd.pla: 0705:         INY
        INY
; vmsrc/apple/cmd.pla: 0706:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0707:         CMP     ESTKH,X
        CMP     ESTKH,X
; vmsrc/apple/cmd.pla: 0708:         BNE     +
        BNE     +
; vmsrc/apple/cmd.pla: 0709:         LDA     SRCL            ; MATCH
        LDA     SRCL            ; MATCH
; vmsrc/apple/cmd.pla: 0710:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0711:         LDA     SRCH
        LDA     SRCH
; vmsrc/apple/cmd.pla: 0712:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/cmd.pla: 0713:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0714: +       LDA     #$05
+       LDA     #$05
; vmsrc/apple/cmd.pla: 0715:         CLC
        CLC
; vmsrc/apple/cmd.pla: 0716:         ADC     SRCL
        ADC     SRCL
; vmsrc/apple/cmd.pla: 0717:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0718:         BCC     -
        BCC     -
; vmsrc/apple/cmd.pla: 0719:         INC     SRCH
        INC     SRCH
; vmsrc/apple/cmd.pla: 0720:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0721: ++      STY     ESTKL,X
++      STY     ESTKL,X
; vmsrc/apple/cmd.pla: 0722:         STY     ESTKH,X
        STY     ESTKH,X
; vmsrc/apple/cmd.pla: 0723:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0724: end
; vmsrc/apple/cmd.pla: 0725: //
; vmsrc/apple/cmd.pla: 0726: // Reloc internal data
; vmsrc/apple/cmd.pla: 0727: //
; vmsrc/apple/cmd.pla: 0728: //def reloc(modfix, modofst, bytecode, rld)#3
; vmsrc/apple/cmd.pla: 0729: //    word addr, fixup
; vmsrc/apple/cmd.pla: 0730: //    while ^rld
; vmsrc/apple/cmd.pla: 0731: //        if ^rld & $10 // EXTERN reference.
; vmsrc/apple/cmd.pla: 0732: //            return rld, addr, fixup
; vmsrc/apple/cmd.pla: 0733: //        fin
; vmsrc/apple/cmd.pla: 0734: //        addr = rld=>1 + modfix
; vmsrc/apple/cmd.pla: 0735: //        fixup = *addr + modofst
; vmsrc/apple/cmd.pla: 0736: //        if uword_isge(fixup, bytecode) // Bytecode address.
; vmsrc/apple/cmd.pla: 0737: //            return rld, addr, fixup
; vmsrc/apple/cmd.pla: 0738: //        fin
; vmsrc/apple/cmd.pla: 0739: //        *addr = fixup
; vmsrc/apple/cmd.pla: 0740: //        rld = rld + 4
; vmsrc/apple/cmd.pla: 0741: //    loop
; vmsrc/apple/cmd.pla: 0742: //    return rld, addr, fixup
; vmsrc/apple/cmd.pla: 0743: //end
; vmsrc/apple/cmd.pla: 0744: asm reloc(modfix, modofst, bytecode, rld)#3
_A024 					; reloc()
; vmsrc/apple/cmd.pla: 0745:         LDA     ESTKL,X
        LDA     ESTKL,X
; vmsrc/apple/cmd.pla: 0746:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0747:         LDA     ESTKH,X
        LDA     ESTKH,X
; vmsrc/apple/cmd.pla: 0748:         STA     SRCH
        STA     SRCH
; vmsrc/apple/cmd.pla: 0749:         LDY     #$00
        LDY     #$00
; vmsrc/apple/cmd.pla: 0750: -       LDA     (SRC),Y
-       LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0751:         BEQ     RLDEX       ; END OF RLD
        BEQ     RLDEX       ; END OF RLD
; vmsrc/apple/cmd.pla: 0752:         PHA
        PHA
; vmsrc/apple/cmd.pla: 0753:         INY
        INY
; vmsrc/apple/cmd.pla: 0754:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0755:         INY
        INY
; vmsrc/apple/cmd.pla: 0756:         CLC
        CLC
; vmsrc/apple/cmd.pla: 0757:         ADC     ESTKL+3,X   ; ADDR=ENTRY=>1+MODFIX
        ADC     ESTKL+3,X   ; ADDR=ENTRY=>1+MODFIX
; vmsrc/apple/cmd.pla: 0758:         STA     DSTL
        STA     DSTL
; vmsrc/apple/cmd.pla: 0759:         LDA     (SRC),Y
        LDA     (SRC),Y
; vmsrc/apple/cmd.pla: 0760:         ADC     ESTKH+3,X
        ADC     ESTKH+3,X
; vmsrc/apple/cmd.pla: 0761:         STA     DSTH
        STA     DSTH
; vmsrc/apple/cmd.pla: 0762:         PLA
        PLA
; vmsrc/apple/cmd.pla: 0763:         AND     #$10        ; EXTERN REF - EXIT
        AND     #$10        ; EXTERN REF - EXIT
; vmsrc/apple/cmd.pla: 0764:         BNE     RLDEX
        BNE     RLDEX
; vmsrc/apple/cmd.pla: 0765:         TAY                 ; FIXUP=*ADDR+MODOFST
        TAY                 ; FIXUP=*ADDR+MODOFST
; vmsrc/apple/cmd.pla: 0766:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/cmd.pla: 0767:         INY
        INY
; vmsrc/apple/cmd.pla: 0768:         CLC
        CLC
; vmsrc/apple/cmd.pla: 0769:         ADC     ESTKL+2,X
        ADC     ESTKL+2,X
; vmsrc/apple/cmd.pla: 0770:         STA     TMPL
        STA     TMPL
; vmsrc/apple/cmd.pla: 0771:         LDA     (DST),Y
        LDA     (DST),Y
; vmsrc/apple/cmd.pla: 0772:         ADC     ESTKH+2,X
        ADC     ESTKH+2,X
; vmsrc/apple/cmd.pla: 0773:         CMP     ESTKH+1,X   ; FIXUP >= BYTECODE?
        CMP     ESTKH+1,X   ; FIXUP >= BYTECODE?
; vmsrc/apple/cmd.pla: 0774:         BCC     +
        BCC     +
; vmsrc/apple/cmd.pla: 0775:         STA     TMPH
        STA     TMPH
; vmsrc/apple/cmd.pla: 0776:         BNE     RLDEX       ; YEP, EXIT
        BNE     RLDEX       ; YEP, EXIT
; vmsrc/apple/cmd.pla: 0777:         LDA     TMPL
        LDA     TMPL
; vmsrc/apple/cmd.pla: 0778:         CMP     ESTKL+1,X
        CMP     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0779:         BCS     RLDEX       ; YEP, EXIT
        BCS     RLDEX       ; YEP, EXIT
; vmsrc/apple/cmd.pla: 0780:         LDA     TMPH
        LDA     TMPH
; vmsrc/apple/cmd.pla: 0781: +       STA     (DST),Y     ; *ADDR=FIXUP
+       STA     (DST),Y     ; *ADDR=FIXUP
; vmsrc/apple/cmd.pla: 0782:         DEY
        DEY
; vmsrc/apple/cmd.pla: 0783:         LDA     TMPL
        LDA     TMPL
; vmsrc/apple/cmd.pla: 0784:         STA     (DST),Y
        STA     (DST),Y
; vmsrc/apple/cmd.pla: 0785:         LDA     SRCL        ; NEXT ENTRY
        LDA     SRCL        ; NEXT ENTRY
; vmsrc/apple/cmd.pla: 0786: ;       CLC
;       CLC
; vmsrc/apple/cmd.pla: 0787:         ADC     #$04
        ADC     #$04
; vmsrc/apple/cmd.pla: 0788:         STA     SRCL
        STA     SRCL
; vmsrc/apple/cmd.pla: 0789:         BCC     -
        BCC     -
; vmsrc/apple/cmd.pla: 0790:         INC     SRCH
        INC     SRCH
; vmsrc/apple/cmd.pla: 0791:         BNE     -
        BNE     -
; vmsrc/apple/cmd.pla: 0792: RLDEX   INX
RLDEX   INX
; vmsrc/apple/cmd.pla: 0793:         LDA     TMPL
        LDA     TMPL
; vmsrc/apple/cmd.pla: 0794:         STA     ESTKL,X
        STA     ESTKL,X
; vmsrc/apple/cmd.pla: 0795:         LDA     TMPH
        LDA     TMPH
; vmsrc/apple/cmd.pla: 0796:         STA     ESTKH,X
        STA     ESTKH,X
; vmsrc/apple/cmd.pla: 0797:         LDA     DSTL
        LDA     DSTL
; vmsrc/apple/cmd.pla: 0798:         STA     ESTKL+1,X
        STA     ESTKL+1,X
; vmsrc/apple/cmd.pla: 0799:         LDA     DSTH
        LDA     DSTH
; vmsrc/apple/cmd.pla: 0800:         STA     ESTKH+1,X
        STA     ESTKH+1,X
; vmsrc/apple/cmd.pla: 0801:         LDA     SRCL
        LDA     SRCL
; vmsrc/apple/cmd.pla: 0802:         STA     ESTKL+2,X
        STA     ESTKL+2,X
; vmsrc/apple/cmd.pla: 0803:         LDA     SRCH
        LDA     SRCH
; vmsrc/apple/cmd.pla: 0804:         STA     ESTKH+2,X
        STA     ESTKH+2,X
; vmsrc/apple/cmd.pla: 0805:         RTS
        RTS
; vmsrc/apple/cmd.pla: 0806: end
; vmsrc/apple/cmd.pla: 0807: //
; vmsrc/apple/cmd.pla: 0808: // Cheap and dirty print integer
; vmsrc/apple/cmd.pla: 0809: //
; vmsrc/apple/cmd.pla: 0810: def print(i)#0
					; i -> [0]
_P007 					; print(i)#0()
_C000 					; print()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0811:     if i < 0; cout('-'); i = -i; fin
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B001
	!WORD	_B001-*
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$54			; CALL	_A006
_F061 	!WORD	_A006		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$90			; NEG
	!BYTE	$76,$00			; SLW	[0]
_B001 
_B002 
; vmsrc/apple/cmd.pla: 0812:     if i >= 10; print(i / 10); fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$88			; DIV
	!BYTE	$54			; CALL	_C000
_F062 	!WORD	_C000		
_B003 
_B004 
; vmsrc/apple/cmd.pla: 0813:     cout(i % 10 + '0')
; vmsrc/apple/cmd.pla: 0814: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$14			; CN	10
	!BYTE	$8A			; MOD
	!BYTE	$38,$30			; ADDI	48
	!BYTE	$54			; CALL	_A006
_F063 	!WORD	_A006		
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/cmd.pla: 0815: //
; vmsrc/apple/cmd.pla: 0816: // ProDOS routines
; vmsrc/apple/cmd.pla: 0817: //
; vmsrc/apple/cmd.pla: 0818: def pfxop(path, op)#1
					; path -> [0]
					; op -> [2]
_C001 					; pfxop()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0819:     byte params[3]
					; params -> [4]
; vmsrc/apple/cmd.pla: 0820: 
; vmsrc/apple/cmd.pla: 0821:     params.0 = 1
	!BYTE	$58,$07,$02		; ENTER	7,2
; vmsrc/apple/cmd.pla: 0822:     params:1 = path
; vmsrc/apple/cmd.pla: 0823:     perr     = syscall(op, @params)
; vmsrc/apple/cmd.pla: 0824:     return path
	!BYTE	$02			; CN	1
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_A000
_F064 	!WORD	_A000		
	!BYTE	$78			; SAB	_D034+0
_F065 	!WORD	_D034+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$07			; LEAVE	7
; vmsrc/apple/cmd.pla: 0825: end
; vmsrc/apple/cmd.pla: 0826: def open(path)#1
					; path -> [0]
_P027 					; open(path)#1()
_C002 					; open()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0827:     byte params[6]
					; params -> [2]
; vmsrc/apple/cmd.pla: 0828: 
; vmsrc/apple/cmd.pla: 0829:     params.0 = 3
	!BYTE	$58,$08,$01		; ENTER	8,1
; vmsrc/apple/cmd.pla: 0830:     params:1 = path
; vmsrc/apple/cmd.pla: 0831:     params:3 = iobuffer
; vmsrc/apple/cmd.pla: 0832:     params.5 = 0
; vmsrc/apple/cmd.pla: 0833:     perr     = syscall($C8, @params)
; vmsrc/apple/cmd.pla: 0834:     return params.5
	!BYTE	$06			; CN	3
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2C,$00,$08		; CW	2048
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$00			; CN	0
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$2A,$C8			; CB	200
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_A000
_F066 	!WORD	_A000		
	!BYTE	$78			; SAB	_D034+0
_F067 	!WORD	_D034+0		
	!BYTE	$64,$07			; LLB	[7]
	!BYTE	$5A,$08			; LEAVE	8
; vmsrc/apple/cmd.pla: 0835: end
; vmsrc/apple/cmd.pla: 0836: def close(refnum)#1
					; refnum -> [0]
_P028 					; close(refnum)#1()
_C003 					; close()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0837:     byte params[2]
					; params -> [2]
; vmsrc/apple/cmd.pla: 0838: 
; vmsrc/apple/cmd.pla: 0839:     params.0 = 1
	!BYTE	$58,$04,$01		; ENTER	4,1
; vmsrc/apple/cmd.pla: 0840:     params.1 = refnum
; vmsrc/apple/cmd.pla: 0841:     perr     = syscall($CC, @params)
; vmsrc/apple/cmd.pla: 0842:     return perr
	!BYTE	$02			; CN	1
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$2A,$CC			; CB	204
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_A000
_F068 	!WORD	_A000		
	!BYTE	$7C			; DAB	_D034+0
_F069 	!WORD	_D034+0		
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/cmd.pla: 0843: end
; vmsrc/apple/cmd.pla: 0844: def read(refnum, buff, len)#1
					; refnum -> [0]
					; buff -> [2]
					; len -> [4]
_P029 					; read(refnum, buff, len)#1()
_C004 					; read()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0845:     byte params[8]
					; params -> [6]
; vmsrc/apple/cmd.pla: 0846: 
; vmsrc/apple/cmd.pla: 0847:     params.0 = 4
	!BYTE	$58,$0E,$03		; ENTER	14,3
; vmsrc/apple/cmd.pla: 0848:     params.1 = refnum
; vmsrc/apple/cmd.pla: 0849:     params:2 = buff
; vmsrc/apple/cmd.pla: 0850:     params:4 = len
; vmsrc/apple/cmd.pla: 0851:     params:6 = 0
; vmsrc/apple/cmd.pla: 0852:     perr     = syscall($CA, @params)
; vmsrc/apple/cmd.pla: 0853:     return params:6
	!BYTE	$08			; CN	4
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$CA			; CB	202
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_A000
_F070 	!WORD	_A000		
	!BYTE	$78			; SAB	_D034+0
_F071 	!WORD	_D034+0		
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$5A,$0E			; LEAVE	14
; vmsrc/apple/cmd.pla: 0854: end
; vmsrc/apple/cmd.pla: 0855: def write(refnum, buf, len)#1
					; refnum -> [0]
					; buf -> [2]
					; len -> [4]
_P030 					; write(refnum, buf, len)#1()
_C005 					; write()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0856:     byte params[8]
					; params -> [6]
; vmsrc/apple/cmd.pla: 0857: 
; vmsrc/apple/cmd.pla: 0858:     params.0 = 4
	!BYTE	$58,$0E,$03		; ENTER	14,3
; vmsrc/apple/cmd.pla: 0859:     params.1 = refnum
; vmsrc/apple/cmd.pla: 0860:     params:2 = buf
; vmsrc/apple/cmd.pla: 0861:     params:4 = len
; vmsrc/apple/cmd.pla: 0862:     params:6 = 0
; vmsrc/apple/cmd.pla: 0863:     perr     = syscall($CB, @params)
; vmsrc/apple/cmd.pla: 0864:     return params:6
	!BYTE	$08			; CN	4
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$2A,$CB			; CB	203
	!BYTE	$28,$06			; LLA	[6]
	!BYTE	$54			; CALL	_A000
_F072 	!WORD	_A000		
	!BYTE	$78			; SAB	_D034+0
_F073 	!WORD	_D034+0		
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$5A,$0E			; LEAVE	14
; vmsrc/apple/cmd.pla: 0865: end
; vmsrc/apple/cmd.pla: 0866: //
; vmsrc/apple/cmd.pla: 0867: // Heap routines.
; vmsrc/apple/cmd.pla: 0868: //
; vmsrc/apple/cmd.pla: 0869: def availheap()#1
_P015 					; availheap()#1()
_C006 					; availheap()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0870:     byte fp
					; fp -> [0]
; vmsrc/apple/cmd.pla: 0871:     return @fp - heap
	!BYTE	$58,$01,$00		; ENTER	1,0
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$6A			; LAW	_D071+0
_F074 	!WORD	_D071+0		
	!BYTE	$84			; SUB 
	!BYTE	$5A,$01			; LEAVE	1
; vmsrc/apple/cmd.pla: 0872: end
; vmsrc/apple/cmd.pla: 0873: def allocheap(size)#1
					; size -> [0]
_P012 					; allocheap(size)#1()
_C007 					; allocheap()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0874:     word oldheap, addr
					; oldheap -> [2]
					; addr -> [4]
; vmsrc/apple/cmd.pla: 0875:     oldheap = heap
	!BYTE	$58,$06,$01		; ENTER	6,1
; vmsrc/apple/cmd.pla: 0876:     addr    = heap
; vmsrc/apple/cmd.pla: 0877:     heap    = heap + size
; vmsrc/apple/cmd.pla: 0878:     if systemflags & reshgr1
; vmsrc/apple/cmd.pla: 0879:         if uword_islt(addr, $4000) and uword_isgt(heap, $2000)
; vmsrc/apple/cmd.pla: 0880:             addr = $4000
; vmsrc/apple/cmd.pla: 0881:             heap = addr + size
; vmsrc/apple/cmd.pla: 0882:         fin
	!BYTE	$6A			; LAW	_D071+0
_F075 	!WORD	_D071+0		
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$6A			; LAW	_D071+0
_F076 	!WORD	_D071+0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$6A			; LAW	_D071+0
_F077 	!WORD	_D071+0		
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$7A			; SAW	_D071+0
_F078 	!WORD	_D071+0		
	!BYTE	$6A			; LAW	_D070+0
_F079 	!WORD	_D070+0		
	!BYTE	$3C,$10			; ANDI	16
	!BYTE	$4C			; BRFLS	_B005
	!WORD	_B005-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$40		; CW	16384
	!BYTE	$54			; CALL	_A015
_F080 	!WORD	_A015		
	!BYTE	$AC			; BRAND	_B007
	!WORD	_B007-*
	!BYTE	$6A			; LAW	_D071+0
_F081 	!WORD	_D071+0		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$54			; CALL	_A014
_F082 	!WORD	_A014		
_B007 
	!BYTE	$4C			; BRFLS	_B008
	!WORD	_B008-*
	!BYTE	$2C,$00,$40		; CW	16384
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$7A			; SAW	_D071+0
_F083 	!WORD	_D071+0		
_B008 
_B009 
; vmsrc/apple/cmd.pla: 0883:     fin
_B005 
_B006 
; vmsrc/apple/cmd.pla: 0884:     if systemflags & reshgr2
; vmsrc/apple/cmd.pla: 0885:         if uword_islt(addr, $6000) and uword_isgt(heap, $4000)
; vmsrc/apple/cmd.pla: 0886:             addr = $6000
; vmsrc/apple/cmd.pla: 0887:             heap = addr + size
; vmsrc/apple/cmd.pla: 0888:         fin
	!BYTE	$6A			; LAW	_D070+0
_F084 	!WORD	_D070+0		
	!BYTE	$3C,$20			; ANDI	32
	!BYTE	$4C			; BRFLS	_B010
	!WORD	_B010-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$60		; CW	24576
	!BYTE	$54			; CALL	_A015
_F085 	!WORD	_A015		
	!BYTE	$AC			; BRAND	_B012
	!WORD	_B012-*
	!BYTE	$6A			; LAW	_D071+0
_F086 	!WORD	_D071+0		
	!BYTE	$2C,$00,$40		; CW	16384
	!BYTE	$54			; CALL	_A014
_F087 	!WORD	_A014		
_B012 
	!BYTE	$4C			; BRFLS	_B013
	!WORD	_B013-*
	!BYTE	$2C,$00,$60		; CW	24576
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$7A			; SAW	_D071+0
_F088 	!WORD	_D071+0		
_B013 
_B014 
; vmsrc/apple/cmd.pla: 0889:     fin
_B010 
_B011 
; vmsrc/apple/cmd.pla: 0890:     if uword_isge(heap, @addr)
; vmsrc/apple/cmd.pla: 0891:         heap = oldheap
; vmsrc/apple/cmd.pla: 0892:         return 0
	!BYTE	$6A			; LAW	_D071+0
_F089 	!WORD	_D071+0		
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_A012
_F090 	!WORD	_A012		
	!BYTE	$4C			; BRFLS	_B015
	!WORD	_B015-*
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$7A			; SAW	_D071+0
_F091 	!WORD	_D071+0		
	!BYTE	$00			; CN	0
	!BYTE	$5A,$06			; LEAVE	6
; vmsrc/apple/cmd.pla: 0893:     fin
_B015 
_B016 
; vmsrc/apple/cmd.pla: 0894:     return addr
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$5A,$06			; LEAVE	6
; vmsrc/apple/cmd.pla: 0895: end
; vmsrc/apple/cmd.pla: 0896: def allocalignheap(size, pow2, freeaddr)
					; size -> [0]
					; pow2 -> [2]
					; freeaddr -> [4]
_P013 					; allocalignheap(size, pow2, freeaddr)()
_C008 					; allocalignheap()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0897:     word align, addr
					; align -> [6]
					; addr -> [8]
; vmsrc/apple/cmd.pla: 0898:     if freeaddr
	!BYTE	$58,$0A,$03		; ENTER	10,3
; vmsrc/apple/cmd.pla: 0899:         *freeaddr = heap
; vmsrc/apple/cmd.pla: 0900:     fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$4C			; BRFLS	_B017
	!WORD	_B017-*
	!BYTE	$6A			; LAW	_D071+0
_F092 	!WORD	_D071+0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$72			; SW
_B017 
_B018 
; vmsrc/apple/cmd.pla: 0901:     align = (1 << pow2) - 1
; vmsrc/apple/cmd.pla: 0902:     addr  = (heap | align) + 1
; vmsrc/apple/cmd.pla: 0903:     heap  = addr + size
; vmsrc/apple/cmd.pla: 0904:     if uword_isge(heap, @addr)
; vmsrc/apple/cmd.pla: 0905:         return 0
	!BYTE	$02			; CN	1
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$9A			; SHL
	!BYTE	$8E			; DECR
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$6A			; LAW	_D071+0
_F093 	!WORD	_D071+0		
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$96			; OR 
	!BYTE	$8C			; INCR
	!BYTE	$6E,$08			; DLW	[8]
	!BYTE	$B2,$00			; ADDLW	[0]
	!BYTE	$7E			; DAW	_D071+0
_F094 	!WORD	_D071+0		
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_A012
_F095 	!WORD	_A012		
	!BYTE	$4C			; BRFLS	_B019
	!WORD	_B019-*
	!BYTE	$00			; CN	0
	!BYTE	$5A,$0A			; LEAVE	10
; vmsrc/apple/cmd.pla: 0906:     fin
_B019 
_B020 
; vmsrc/apple/cmd.pla: 0907:     return addr
	!BYTE	$66,$08			; LLW	[8]
	!BYTE	$5A,$0A			; LEAVE	10
; vmsrc/apple/cmd.pla: 0908: end
; vmsrc/apple/cmd.pla: 0909: def markheap()#1
_P011 					; markheap()#1()
_C009 					; markheap()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0910:     return heap
	!BYTE	$6A			; LAW	_D071+0
_F096 	!WORD	_D071+0		
	!BYTE	$5C			; RET
; vmsrc/apple/cmd.pla: 0911: end
; vmsrc/apple/cmd.pla: 0912: def releaseheap(newheap)#1
					; newheap -> [0]
_P014 					; releaseheap(newheap)#1()
_C010 					; releaseheap()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0913:     heap = newheap
	!BYTE	$58,$02,$01		; ENTER	2,1
; vmsrc/apple/cmd.pla: 0914:     return @newheap - heap
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$7A			; SAW	_D071+0
_F097 	!WORD	_D071+0		
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$6A			; LAW	_D071+0
_F098 	!WORD	_D071+0		
	!BYTE	$84			; SUB 
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/cmd.pla: 0915: end
; vmsrc/apple/cmd.pla: 0916: //
; vmsrc/apple/cmd.pla: 0917: // Symbol table routines.
; vmsrc/apple/cmd.pla: 0918: //
; vmsrc/apple/cmd.pla: 0919: def addsym(sym, addr)#0
					; sym -> [0]
					; addr -> [2]
_C011 					; addsym()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0920:     while ^sym & $80
	!BYTE	$58,$04,$02		; ENTER	4,2
	!BYTE	$50			; BRNCH	_B023
	!WORD	_B023-*
_B021 
; vmsrc/apple/cmd.pla: 0921:         ^lastsym = ^sym
; vmsrc/apple/cmd.pla: 0922:         lastsym++
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$6A			; LAW	_D072+0
_F099 	!WORD	_D072+0		
	!BYTE	$70			; SB
	!BYTE	$6A			; LAW	_D072+0
_F100 	!WORD	_D072+0		
	!BYTE	$8C			; INCR
; vmsrc/apple/cmd.pla: 0923:         sym++
	!BYTE	$7A			; SAW	_D072+0
_F101 	!WORD	_D072+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
; vmsrc/apple/cmd.pla: 0924:     loop
	!BYTE	$76,$00			; SLW	[0]
_B023 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$3C,$80			; ANDI	128
	!BYTE	$4E			; BRTRU	_B021
	!WORD	_B021-*
_B022 
; vmsrc/apple/cmd.pla: 0925:     lastsym->0 = ^sym
; vmsrc/apple/cmd.pla: 0926:     lastsym=>1 = addr
; vmsrc/apple/cmd.pla: 0927:     lastsym    = lastsym + 3
; vmsrc/apple/cmd.pla: 0928:     ^lastsym   = 0
; vmsrc/apple/cmd.pla: 0929: end
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$6A			; LAW	_D072+0
_F102 	!WORD	_D072+0		
	!BYTE	$70			; SB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$6A			; LAW	_D072+0
_F103 	!WORD	_D072+0		
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$6A			; LAW	_D072+0
_F104 	!WORD	_D072+0		
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$7A			; SAW	_D072+0
_F105 	!WORD	_D072+0		
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D072+0
_F106 	!WORD	_D072+0		
	!BYTE	$70			; SB
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/cmd.pla: 0930: //
; vmsrc/apple/cmd.pla: 0931: // String routines.
; vmsrc/apple/cmd.pla: 0932: //
; vmsrc/apple/cmd.pla: 0933: def strcpy(dst, src)#1
					; dst -> [0]
					; src -> [2]
_P018 					; strcpy(dst, src)#1()
_C012 					; strcpy()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0934:     memcpy(dst+1, src+1, ^src)
	!BYTE	$58,$04,$02		; ENTER	4,2
; vmsrc/apple/cmd.pla: 0935:     ^dst = ^src
; vmsrc/apple/cmd.pla: 0936:     return dst
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A004
_F107 	!WORD	_A004		
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/cmd.pla: 0937: end
; vmsrc/apple/cmd.pla: 0938: def strcat(dst, src)#1
					; dst -> [0]
					; src -> [2]
_P019 					; strcat(dst, src)#1()
_C013 					; strcat()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0939:     memcpy(dst + ^dst + 1, src + 1, ^src)
	!BYTE	$58,$04,$02		; ENTER	4,2
; vmsrc/apple/cmd.pla: 0940:     ^dst = ^dst + ^src
; vmsrc/apple/cmd.pla: 0941:     return dst
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$8C			; INCR
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A004
_F108 	!WORD	_A004		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$04			; LEAVE	4
; vmsrc/apple/cmd.pla: 0942: end
; vmsrc/apple/cmd.pla: 0943: //
; vmsrc/apple/cmd.pla: 0944: // Module routines.
; vmsrc/apple/cmd.pla: 0945: //
; vmsrc/apple/cmd.pla: 0946: def lookupextern(esd, index)#1
					; esd -> [0]
					; index -> [2]
_C014 					; lookupextern()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0947:     word sym, addr
					; sym -> [4]
					; addr -> [6]
; vmsrc/apple/cmd.pla: 0948:     byte str[33]
					; str -> [8]
; vmsrc/apple/cmd.pla: 0949:     sym = lookupidx(esd, index)
	!BYTE	$58,$29,$02		; ENTER	41,2
; vmsrc/apple/cmd.pla: 0950:     if sym
; vmsrc/apple/cmd.pla: 0951:         addr = lookuptbl(sym, symtbl)
; vmsrc/apple/cmd.pla: 0952:         if !addr
; vmsrc/apple/cmd.pla: 0953:             perr = $81
; vmsrc/apple/cmd.pla: 0954:             dcitos(sym, @str)
; vmsrc/apple/cmd.pla: 0955:             cout('?'); prstr(@str); crout
; vmsrc/apple/cmd.pla: 0956:         fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_A022
_F109 	!WORD	_A022		
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$0C		; CW	3072
	!BYTE	$54			; CALL	_A021
_F110 	!WORD	_A021		
	!BYTE	$6E,$06			; DLW	[6]
	!BYTE	$4E			; BRTRU	_B026
	!WORD	_B026-*
	!BYTE	$2A,$81			; CB	129
	!BYTE	$78			; SAB	_D034+0
_F111 	!WORD	_D034+0		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_A018
_F112 	!WORD	_A018		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$3F			; CB	63
	!BYTE	$54			; CALL	_A006
_F113 	!WORD	_A006		
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_A008
_F114 	!WORD	_A008		
	!BYTE	$54			; CALL	_A005
_F115 	!WORD	_A005		
_B026 
_B027 
; vmsrc/apple/cmd.pla: 0957:         return addr
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$5A,$29			; LEAVE	41
; vmsrc/apple/cmd.pla: 0958:     fin
_B024 
_B025 
; vmsrc/apple/cmd.pla: 0959:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$29			; LEAVE	41
; vmsrc/apple/cmd.pla: 0960: end
; vmsrc/apple/cmd.pla: 0961: def adddef(addr, deflast)#1
					; addr -> [0]
					; deflast -> [2]
_C015 					; adddef()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0962:     word defentry
					; defentry -> [4]
; vmsrc/apple/cmd.pla: 0963:     defentry = *deflast
	!BYTE	$58,$06,$02		; ENTER	6,2
; vmsrc/apple/cmd.pla: 0964:     *deflast = defentry + 5
; vmsrc/apple/cmd.pla: 0965:     defentry->0 = $20
; vmsrc/apple/cmd.pla: 0966:     defentry=>1 = $03D6
; vmsrc/apple/cmd.pla: 0967:     defentry=>3 = addr
; vmsrc/apple/cmd.pla: 0968:     defentry->5 = 0 // NULL out next entry
; vmsrc/apple/cmd.pla: 0969:     return defentry
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$62			; LW
	!BYTE	$6E,$04			; DLW	[4]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$72			; SW
	!BYTE	$2A,$20			; CB	32
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$70			; SB
	!BYTE	$2C,$D6,$03		; CW	982
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$8C			; INCR
	!BYTE	$72			; SW
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$72			; SW
	!BYTE	$00			; CN	0
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$05			; ADDI	5
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$5A,$06			; LEAVE	6
; vmsrc/apple/cmd.pla: 0970: end
; vmsrc/apple/cmd.pla: 0971: def loadmod(mod)#1
					; mod -> [0]
_C016 					; loadmod()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 0972:     word rdlen, modsize, bytecode, codefix, defofst, defcnt, init, initcode[], fixup
					; rdlen -> [2]
					; modsize -> [4]
					; bytecode -> [6]
					; codefix -> [8]
					; defofst -> [10]
					; defcnt -> [12]
					; init -> [14]
					; initcode -> [16]
					; fixup -> [16]
; vmsrc/apple/cmd.pla: 0973:     word addr, defaddr, modaddr, modfix, modofst, modend
					; addr -> [18]
					; defaddr -> [20]
					; modaddr -> [22]
					; modfix -> [24]
					; modofst -> [26]
					; modend -> [28]
; vmsrc/apple/cmd.pla: 0974:     word deftbl, deflast
					; deftbl -> [30]
					; deflast -> [32]
; vmsrc/apple/cmd.pla: 0975:     word moddep, rld, esd, sym
					; moddep -> [34]
					; rld -> [36]
					; esd -> [38]
					; sym -> [40]
; vmsrc/apple/cmd.pla: 0976:     byte refnum, filename[64], str[]
					; refnum -> [42]
					; filename -> [43]
					; str -> [107]
; vmsrc/apple/cmd.pla: 0977:     byte header[128]
					; header -> [107]
; vmsrc/apple/cmd.pla: 0978:     //
; vmsrc/apple/cmd.pla: 0979:     // Read the RELocatable module header (first 128 bytes)
; vmsrc/apple/cmd.pla: 0980:     //
; vmsrc/apple/cmd.pla: 0981:     dcitos(mod, @filename)
	!BYTE	$58,$EB,$01		; ENTER	235,1
; vmsrc/apple/cmd.pla: 0982:     refnum = open(@filename)
; vmsrc/apple/cmd.pla: 0983:     if !refnum and filename < 16
; vmsrc/apple/cmd.pla: 0984:         //
; vmsrc/apple/cmd.pla: 0985:         // Try system path
; vmsrc/apple/cmd.pla: 0986:         //
; vmsrc/apple/cmd.pla: 0987:         refnum = open(strcpy(@filename,strcat(strcpy(@header, @sysmods), @filename)))
; vmsrc/apple/cmd.pla: 0988:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$2B			; LLA	[43]
	!BYTE	$54			; CALL	_A018
_F116 	!WORD	_A018		
	!BYTE	$30			; DROP 
	!BYTE	$28,$2B			; LLA	[43]
	!BYTE	$54			; CALL	_C002
_F117 	!WORD	_C002		
	!BYTE	$6C,$2A			; DLB	[42]
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B028
	!WORD	_B028-*
	!BYTE	$64,$2B			; LLB	[43]
	!BYTE	$2A,$10			; CB	16
	!BYTE	$46			; ISLT
_B028 
	!BYTE	$4C			; BRFLS	_B029
	!WORD	_B029-*
	!BYTE	$28,$2B			; LLA	[43]
	!BYTE	$28,$6B			; LLA	[107]
	!BYTE	$26			; LA	_D068+0
_F118 	!WORD	_D068+0		
	!BYTE	$54			; CALL	_C012
_F119 	!WORD	_C012		
	!BYTE	$28,$2B			; LLA	[43]
	!BYTE	$54			; CALL	_C013
_F120 	!WORD	_C013		
	!BYTE	$54			; CALL	_C012
_F121 	!WORD	_C012		
	!BYTE	$54			; CALL	_C002
_F122 	!WORD	_C002		
	!BYTE	$74,$2A			; SLB	[42]
_B029 
_B030 
; vmsrc/apple/cmd.pla: 0989:     if refnum
; vmsrc/apple/cmd.pla: 0990:         header.0 = $0A
; vmsrc/apple/cmd.pla: 0991:         header:1 = @filename
; vmsrc/apple/cmd.pla: 0992:         if not syscall($C4, @header) and header.4 <> $FE // Make sure it's a REL module
; vmsrc/apple/cmd.pla: 0993:             close(refnum)
; vmsrc/apple/cmd.pla: 0994:             perr = $4A // Incompatible type
; vmsrc/apple/cmd.pla: 0995:             return -perr
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$4C			; BRFLS	_B031
	!WORD	_B031-*
	!BYTE	$14			; CN	10
	!BYTE	$74,$6B			; SLB	[107]
	!BYTE	$28,$2B			; LLA	[43]
	!BYTE	$76,$6C			; SLW	[108]
	!BYTE	$2A,$C4			; CB	196
	!BYTE	$28,$6B			; LLA	[107]
	!BYTE	$54			; CALL	_A000
_F123 	!WORD	_A000		
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B033
	!WORD	_B033-*
	!BYTE	$64,$6F			; LLB	[111]
	!BYTE	$2A,$FE			; CB	254
	!BYTE	$42			; ISNE
_B033 
	!BYTE	$4C			; BRFLS	_B034
	!WORD	_B034-*
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$54			; CALL	_C003
_F124 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$2A,$4A			; CB	74
	!BYTE	$7C			; DAB	_D034+0
_F125 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$EB			; LEAVE	235
; vmsrc/apple/cmd.pla: 0996:         fin
_B034 
_B035 
; vmsrc/apple/cmd.pla: 0997:         rdlen   = read(refnum, @header, 128)
; vmsrc/apple/cmd.pla: 0998:         modsize = header:0
; vmsrc/apple/cmd.pla: 0999:         moddep  = @header.1
; vmsrc/apple/cmd.pla: 1000:         defofst = modsize + RELADDR
; vmsrc/apple/cmd.pla: 1001:         init    = 0
; vmsrc/apple/cmd.pla: 1002:         if rdlen > 4 and header:2 == $6502 // magic number
; vmsrc/apple/cmd.pla: 1003:             //
; vmsrc/apple/cmd.pla: 1004:             // This is an EXTended RELocatable (data+bytecode) module.
; vmsrc/apple/cmd.pla: 1005:             //
; vmsrc/apple/cmd.pla: 1006:             systemflags = header:4 | systemflags
; vmsrc/apple/cmd.pla: 1007:             defofst  = header:6
; vmsrc/apple/cmd.pla: 1008:             defcnt   = header:8
; vmsrc/apple/cmd.pla: 1009:             init     = header:10
; vmsrc/apple/cmd.pla: 1010:             moddep   = @header.12
; vmsrc/apple/cmd.pla: 1011:             //
; vmsrc/apple/cmd.pla: 1012:             // Load module dependencies.
; vmsrc/apple/cmd.pla: 1013:             //
; vmsrc/apple/cmd.pla: 1014:             while ^moddep
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$28,$6B			; LLA	[107]
	!BYTE	$2A,$80			; CB	128
	!BYTE	$54			; CALL	_C004
_F126 	!WORD	_C004		
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$6B			; LLW	[107]
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$28,$6C			; LLA	[108]
	!BYTE	$76,$22			; SLW	[34]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$82			; ADD 
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$08			; CN	4
	!BYTE	$44			; ISGT
	!BYTE	$AC			; BRAND	_B036
	!WORD	_B036-*
	!BYTE	$66,$6D			; LLW	[109]
	!BYTE	$2C,$02,$65		; CW	25858
	!BYTE	$40			; ISEQ
_B036 
	!BYTE	$4C			; BRFLS	_B037
	!WORD	_B037-*
	!BYTE	$66,$6F			; LLW	[111]
	!BYTE	$6A			; LAW	_D070+0
_F127 	!WORD	_D070+0		
	!BYTE	$96			; OR 
	!BYTE	$7A			; SAW	_D070+0
_F128 	!WORD	_D070+0		
	!BYTE	$66,$71			; LLW	[113]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$73			; LLW	[115]
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$75			; LLW	[117]
	!BYTE	$76,$0E			; SLW	[14]
	!BYTE	$28,$77			; LLA	[119]
	!BYTE	$76,$22			; SLW	[34]
	!BYTE	$50			; BRNCH	_B041
	!WORD	_B041-*
_B039 
; vmsrc/apple/cmd.pla: 1015:                 if !lookuptbl(moddep, symtbl)
; vmsrc/apple/cmd.pla: 1016:                     close(refnum)
; vmsrc/apple/cmd.pla: 1017:                     refnum = 0
; vmsrc/apple/cmd.pla: 1018:                     if loadmod(moddep) < 0
; vmsrc/apple/cmd.pla: 1019:                         return -perr
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$2C,$00,$0C		; CW	3072
	!BYTE	$54			; CALL	_A021
_F129 	!WORD	_A021		
	!BYTE	$4E			; BRTRU	_B042
	!WORD	_B042-*
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$54			; CALL	_C003
_F130 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$74,$2A			; SLB	[42]
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$54			; CALL	_C016
_F131 	!WORD	_C016		
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B044
	!WORD	_B044-*
	!BYTE	$68			; LAB	_D034+0
_F132 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$EB			; LEAVE	235
; vmsrc/apple/cmd.pla: 1020:                     fin
_B044 
_B045 
; vmsrc/apple/cmd.pla: 1021:                 fin
_B042 
_B043 
; vmsrc/apple/cmd.pla: 1022:                 moddep = moddep + dcitos(moddep, @str)
; vmsrc/apple/cmd.pla: 1023:             loop
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$34			; DUP
	!BYTE	$28,$6B			; LLA	[107]
	!BYTE	$54			; CALL	_A018
_F133 	!WORD	_A018		
	!BYTE	$82			; ADD 
	!BYTE	$76,$22			; SLW	[34]
_B041 
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B039
	!WORD	_B039-*
_B040 
; vmsrc/apple/cmd.pla: 1024:             //
; vmsrc/apple/cmd.pla: 1025:             // Init def table.
; vmsrc/apple/cmd.pla: 1026:             //
; vmsrc/apple/cmd.pla: 1027:             deftbl   = allocheap(defcnt * 5 + 1)
; vmsrc/apple/cmd.pla: 1028:             deflast  = deftbl
; vmsrc/apple/cmd.pla: 1029:             ^deflast = 0
; vmsrc/apple/cmd.pla: 1030:             if !refnum
; vmsrc/apple/cmd.pla: 1031:                 //
; vmsrc/apple/cmd.pla: 1032:                 // Reset read pointer.
; vmsrc/apple/cmd.pla: 1033:                 //
; vmsrc/apple/cmd.pla: 1034:                 refnum = open(@filename)
; vmsrc/apple/cmd.pla: 1035:                 rdlen  = read(refnum, @header, 128)
; vmsrc/apple/cmd.pla: 1036:             fin
	!BYTE	$66,$0C			; LLW	[12]
	!BYTE	$0A			; CN	5
	!BYTE	$86			; MUL
	!BYTE	$8C			; INCR
	!BYTE	$54			; CALL	_C007
_F134 	!WORD	_C007		
	!BYTE	$6E,$1E			; DLW	[30]
	!BYTE	$76,$20			; SLW	[32]
	!BYTE	$00			; CN	0
	!BYTE	$66,$20			; LLW	[32]
	!BYTE	$70			; SB
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$4E			; BRTRU	_B046
	!WORD	_B046-*
	!BYTE	$28,$2B			; LLA	[43]
	!BYTE	$54			; CALL	_C002
_F135 	!WORD	_C002		
	!BYTE	$6C,$2A			; DLB	[42]
	!BYTE	$28,$6B			; LLA	[107]
	!BYTE	$2A,$80			; CB	128
	!BYTE	$54			; CALL	_C004
_F136 	!WORD	_C004		
	!BYTE	$76,$02			; SLW	[2]
_B046 
_B047 
; vmsrc/apple/cmd.pla: 1037:         fin
_B037 
_B038 
; vmsrc/apple/cmd.pla: 1038:         //
; vmsrc/apple/cmd.pla: 1039:         // Alloc heap space for relocated module (data + bytecode).
; vmsrc/apple/cmd.pla: 1040:         //
; vmsrc/apple/cmd.pla: 1041:         moddep  = moddep  + 1
; vmsrc/apple/cmd.pla: 1042:         modfix  = moddep  - @header.2 // Adjust to skip header
; vmsrc/apple/cmd.pla: 1043:         modsize = modsize - modfix
; vmsrc/apple/cmd.pla: 1044:         rdlen   = rdlen   - modfix - 2
; vmsrc/apple/cmd.pla: 1045:         modaddr = allocheap(modsize)
; vmsrc/apple/cmd.pla: 1046:         memcpy(modaddr, moddep, rdlen)
; vmsrc/apple/cmd.pla: 1047:         //
; vmsrc/apple/cmd.pla: 1048:         // Read in remainder of module into memory for fixups.
; vmsrc/apple/cmd.pla: 1049:         //
; vmsrc/apple/cmd.pla: 1050:         addr = modaddr
; vmsrc/apple/cmd.pla: 1051:         repeat
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$8C			; INCR
	!BYTE	$6E,$22			; DLW	[34]
	!BYTE	$28,$6D			; LLA	[109]
	!BYTE	$84			; SUB 
	!BYTE	$76,$18			; SLW	[24]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$84			; SUB 
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$84			; SUB 
	!BYTE	$3A,$02			; SUBI	2
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_C007
_F137 	!WORD	_C007		
	!BYTE	$6E,$16			; DLW	[22]
	!BYTE	$66,$22			; LLW	[34]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$54			; CALL	_A004
_F138 	!WORD	_A004		
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$76,$12			; SLW	[18]
_B049 
; vmsrc/apple/cmd.pla: 1052:             addr  = addr + rdlen
; vmsrc/apple/cmd.pla: 1053:             rdlen = read(refnum, addr, 4096)
; vmsrc/apple/cmd.pla: 1054:         until rdlen <= 0
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$B2,$02			; ADDLW	[2]
	!BYTE	$76,$12			; SLW	[18]
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$54			; CALL	_C004
_F139 	!WORD	_C004		
	!BYTE	$76,$02			; SLW	[2]
_B050 
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$00			; CN	0
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B049
	!WORD	_B049-*
_B048 
; vmsrc/apple/cmd.pla: 1055:         close(refnum)
; vmsrc/apple/cmd.pla: 1056:         //
; vmsrc/apple/cmd.pla: 1057:         // Add module to symbol table.
; vmsrc/apple/cmd.pla: 1058:         //
; vmsrc/apple/cmd.pla: 1059:         addsym(mod, modaddr)
; vmsrc/apple/cmd.pla: 1060:         //
; vmsrc/apple/cmd.pla: 1061:         // Apply all fixups and symbol import/export.
; vmsrc/apple/cmd.pla: 1062:         //
; vmsrc/apple/cmd.pla: 1063:         modfix   = modaddr - modfix
; vmsrc/apple/cmd.pla: 1064:         modofst  = modfix  - RELADDR
; vmsrc/apple/cmd.pla: 1065:         modend   = modaddr + modsize
; vmsrc/apple/cmd.pla: 1066:         bytecode = defofst + modofst
; vmsrc/apple/cmd.pla: 1067:         rld      = modend  // Re-Locatable Directory
; vmsrc/apple/cmd.pla: 1068:         esd      = rld     // Extern+Entry Symbol Directory
; vmsrc/apple/cmd.pla: 1069:         while ^esd         // Scan to end of ESD
	!BYTE	$64,$2A			; LLB	[42]
	!BYTE	$54			; CALL	_C003
_F140 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$54			; CALL	_C011
_F141 	!WORD	_C011		
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$84			; SUB 
	!BYTE	$6E,$18			; DLW	[24]
	!BYTE	$2C,$00,$10		; CW	4096
	!BYTE	$84			; SUB 
	!BYTE	$76,$1A			; SLW	[26]
	!BYTE	$66,$16			; LLW	[22]
	!BYTE	$B2,$04			; ADDLW	[4]
	!BYTE	$76,$1C			; SLW	[28]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$B2,$1A			; ADDLW	[26]
	!BYTE	$76,$06			; SLW	[6]
	!BYTE	$66,$1C			; LLW	[28]
	!BYTE	$6E,$24			; DLW	[36]
	!BYTE	$76,$26			; SLW	[38]
	!BYTE	$50			; BRNCH	_B053
	!WORD	_B053-*
_B051 
; vmsrc/apple/cmd.pla: 1070:             esd = esd + 4
; vmsrc/apple/cmd.pla: 1071:         loop
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$26			; SLW	[38]
_B053 
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B051
	!WORD	_B051-*
_B052 
; vmsrc/apple/cmd.pla: 1072:         esd = esd + 1
; vmsrc/apple/cmd.pla: 1073:         defaddr = bytecode
; vmsrc/apple/cmd.pla: 1074:         codefix = defaddr - bytecode
; vmsrc/apple/cmd.pla: 1075:         defofst = defaddr - defofst
; vmsrc/apple/cmd.pla: 1076:         //
; vmsrc/apple/cmd.pla: 1077:         // Run through the DeFinition Dictionary.
; vmsrc/apple/cmd.pla: 1078:         //
; vmsrc/apple/cmd.pla: 1079:         while ^rld == $02
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$8C			; INCR
	!BYTE	$76,$26			; SLW	[38]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$6E,$14			; DLW	[20]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$84			; SUB 
	!BYTE	$76,$08			; SLW	[8]
	!BYTE	$66,$14			; LLW	[20]
	!BYTE	$66,$0A			; LLW	[10]
	!BYTE	$84			; SUB 
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$50			; BRNCH	_B056
	!WORD	_B056-*
_B054 
; vmsrc/apple/cmd.pla: 1080:             //
; vmsrc/apple/cmd.pla: 1081:             // This is a bytcode def entry - add it to the def directory.
; vmsrc/apple/cmd.pla: 1082:             //
; vmsrc/apple/cmd.pla: 1083:             adddef(rld=>1 + defofst, @deflast)
; vmsrc/apple/cmd.pla: 1084:             rld = rld + 4
; vmsrc/apple/cmd.pla: 1085:         loop
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$28,$20			; LLA	[32]
	!BYTE	$54			; CALL	_C015
_F142 	!WORD	_C015		
	!BYTE	$30			; DROP 
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$24			; SLW	[36]
_B056 
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$60			; LB
	!BYTE	$04			; CN	2
	!BYTE	$22			; BREQ	_B054
	!WORD	_B054-*
_B055 
; vmsrc/apple/cmd.pla: 1086:         //
; vmsrc/apple/cmd.pla: 1087:         // Run through the Re-Location Dictionary.
; vmsrc/apple/cmd.pla: 1088:         //
; vmsrc/apple/cmd.pla: 1089:         while ^rld
	!BYTE	$50			; BRNCH	_B059
	!WORD	_B059-*
_B057 
; vmsrc/apple/cmd.pla: 1090:             rld, addr, fixup = reloc(modfix, modofst, bytecode, rld)
; vmsrc/apple/cmd.pla: 1091:             if ^rld
; vmsrc/apple/cmd.pla: 1092:                 *addr = ^rld & $10 ?? *addr + lookupextern(esd, rld->3) :: lookupdef(fixup + codefix, deftbl)
; vmsrc/apple/cmd.pla: 1093:                 rld   = rld + 4
; vmsrc/apple/cmd.pla: 1094:             fin
	!BYTE	$66,$18			; LLW	[24]
	!BYTE	$66,$1A			; LLW	[26]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$54			; CALL	_A024
_F143 	!WORD	_A024		
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$76,$12			; SLW	[18]
	!BYTE	$6E,$24			; DLW	[36]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B060
	!WORD	_B060-*
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$60			; LB
	!BYTE	$3C,$10			; ANDI	16
	!BYTE	$4C			; BRFLS	_B062
	!WORD	_B062-*
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$62			; LW
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_C014
_F144 	!WORD	_C014		
	!BYTE	$82			; ADD 
	!BYTE	$50			; BRNCH	_B063
	!WORD	_B063-*
_B062 
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$54			; CALL	_A023
_F145 	!WORD	_A023		
_B063 
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$72			; SW
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$24			; SLW	[36]
_B060 
_B061 
; vmsrc/apple/cmd.pla: 1095:         loop
_B059 
	!BYTE	$66,$24			; LLW	[36]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B057
	!WORD	_B057-*
_B058 
; vmsrc/apple/cmd.pla: 1096:         //
; vmsrc/apple/cmd.pla: 1097:         // Run through the External/Entry Symbol Directory.
; vmsrc/apple/cmd.pla: 1098:         //
; vmsrc/apple/cmd.pla: 1099:         while ^esd
	!BYTE	$50			; BRNCH	_B066
	!WORD	_B066-*
_B064 
; vmsrc/apple/cmd.pla: 1100:             sym = esd
; vmsrc/apple/cmd.pla: 1101:             esd = esd + dcitos(esd, @str)
; vmsrc/apple/cmd.pla: 1102:             if ^esd & $08
; vmsrc/apple/cmd.pla: 1103:                 //
; vmsrc/apple/cmd.pla: 1104:                 // EXPORT symbol - add it to the global symbol table.
; vmsrc/apple/cmd.pla: 1105:                 //
; vmsrc/apple/cmd.pla: 1106:                 addr = esd=>1 + modofst
; vmsrc/apple/cmd.pla: 1107:                 if uword_isge(addr, bytecode)
; vmsrc/apple/cmd.pla: 1108:                     //
; vmsrc/apple/cmd.pla: 1109:                     // Use the def directory address for bytecode.
; vmsrc/apple/cmd.pla: 1110:                     //
; vmsrc/apple/cmd.pla: 1111:                     addr = lookupdef(addr + codefix, deftbl)
; vmsrc/apple/cmd.pla: 1112:                 fin
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$76,$28			; SLW	[40]
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$34			; DUP
	!BYTE	$28,$6B			; LLA	[107]
	!BYTE	$54			; CALL	_A018
_F146 	!WORD	_A018		
	!BYTE	$82			; ADD 
	!BYTE	$6E,$26			; DLW	[38]
	!BYTE	$60			; LB
	!BYTE	$3C,$08			; ANDI	8
	!BYTE	$4C			; BRFLS	_B067
	!WORD	_B067-*
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$8C			; INCR
	!BYTE	$62			; LW
	!BYTE	$B2,$1A			; ADDLW	[26]
	!BYTE	$6E,$12			; DLW	[18]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$54			; CALL	_A012
_F147 	!WORD	_A012		
	!BYTE	$4C			; BRFLS	_B069
	!WORD	_B069-*
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$B2,$08			; ADDLW	[8]
	!BYTE	$66,$1E			; LLW	[30]
	!BYTE	$54			; CALL	_A023
_F148 	!WORD	_A023		
	!BYTE	$76,$12			; SLW	[18]
_B069 
_B070 
; vmsrc/apple/cmd.pla: 1113:                 addsym(sym, addr)
; vmsrc/apple/cmd.pla: 1114:             fin
	!BYTE	$66,$28			; LLW	[40]
	!BYTE	$66,$12			; LLW	[18]
	!BYTE	$54			; CALL	_C011
_F149 	!WORD	_C011		
_B067 
_B068 
; vmsrc/apple/cmd.pla: 1115:             esd = esd + 3
; vmsrc/apple/cmd.pla: 1116:         loop
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$38,$03			; ADDI	3
	!BYTE	$76,$26			; SLW	[38]
_B066 
	!BYTE	$66,$26			; LLW	[38]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B064
	!WORD	_B064-*
_B065 
; vmsrc/apple/cmd.pla: 1117:     else
	!BYTE	$50			; BRNCH	_B032
	!WORD	_B032-*
_B031 
; vmsrc/apple/cmd.pla: 1118:         perr = $46
; vmsrc/apple/cmd.pla: 1119:     fin
	!BYTE	$2A,$46			; CB	70
	!BYTE	$78			; SAB	_D034+0
_F150 	!WORD	_D034+0		
_B032 
; vmsrc/apple/cmd.pla: 1120:     if perr
; vmsrc/apple/cmd.pla: 1121:         return -perr
	!BYTE	$68			; LAB	_D034+0
_F151 	!WORD	_D034+0		
	!BYTE	$4C			; BRFLS	_B071
	!WORD	_B071-*
	!BYTE	$68			; LAB	_D034+0
_F152 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$EB			; LEAVE	235
; vmsrc/apple/cmd.pla: 1122:     fin
_B071 
_B072 
; vmsrc/apple/cmd.pla: 1123:     //
; vmsrc/apple/cmd.pla: 1124:     // Free up rld+esd in main memory.
; vmsrc/apple/cmd.pla: 1125:     //
; vmsrc/apple/cmd.pla: 1126:     releaseheap(modend)
; vmsrc/apple/cmd.pla: 1127:     //
; vmsrc/apple/cmd.pla: 1128:     // Call init routine if it exists.
; vmsrc/apple/cmd.pla: 1129:     //
; vmsrc/apple/cmd.pla: 1130:     initcode = 0
; vmsrc/apple/cmd.pla: 1131:     if init
; vmsrc/apple/cmd.pla: 1132:         init     = init + defofst
; vmsrc/apple/cmd.pla: 1133:         initcode = adddef(init, @deflast)()
; vmsrc/apple/cmd.pla: 1134:         if initcode < modinitkeep
; vmsrc/apple/cmd.pla: 1135:             //
; vmsrc/apple/cmd.pla: 1136:             // Free init routine unless initkeep
; vmsrc/apple/cmd.pla: 1137:             //
; vmsrc/apple/cmd.pla: 1138:             releaseheap(init)
; vmsrc/apple/cmd.pla: 1139:             if initcode < 0
; vmsrc/apple/cmd.pla: 1140:                 perr = -initcode
; vmsrc/apple/cmd.pla: 1141:             fin
	!BYTE	$66,$1C			; LLW	[28]
	!BYTE	$54			; CALL	_C010
_F153 	!WORD	_C010		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$76,$10			; SLW	[16]
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$4C			; BRFLS	_B073
	!WORD	_B073-*
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$B2,$0A			; ADDLW	[10]
	!BYTE	$6E,$0E			; DLW	[14]
	!BYTE	$28,$20			; LLA	[32]
	!BYTE	$54			; CALL	_C015
_F154 	!WORD	_C015		
	!BYTE	$56			; ICAL
	!BYTE	$6E,$10			; DLW	[16]
	!BYTE	$2C,$00,$40		; CW	16384
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B075
	!WORD	_B075-*
	!BYTE	$66,$0E			; LLW	[14]
	!BYTE	$54			; CALL	_C010
_F155 	!WORD	_C010		
	!BYTE	$30			; DROP 
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$00			; CN	0
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B077
	!WORD	_B077-*
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$90			; NEG
	!BYTE	$78			; SAB	_D034+0
_F156 	!WORD	_D034+0		
_B077 
_B078 
; vmsrc/apple/cmd.pla: 1142:         else
	!BYTE	$50			; BRNCH	_B076
	!WORD	_B076-*
_B075 
; vmsrc/apple/cmd.pla: 1143:             initcode = initcode & ~modinitkeep
; vmsrc/apple/cmd.pla: 1144:         fin
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$2C,$FF,$BF		; CW	-16385
	!BYTE	$94			; AND 
	!BYTE	$76,$10			; SLW	[16]
_B076 
; vmsrc/apple/cmd.pla: 1145:     fin
_B073 
_B074 
; vmsrc/apple/cmd.pla: 1146:     return initcode
	!BYTE	$66,$10			; LLW	[16]
	!BYTE	$5A,$EB			; LEAVE	235
; vmsrc/apple/cmd.pla: 1147: end
; vmsrc/apple/cmd.pla: 1148: //
; vmsrc/apple/cmd.pla: 1149: // Command mode
; vmsrc/apple/cmd.pla: 1150: //
; vmsrc/apple/cmd.pla: 1151: def volumes()#0
_C017 					; volumes()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1152:     byte params[4]
					; params -> [0]
; vmsrc/apple/cmd.pla: 1153:     word strbuf
					; strbuf -> [4]
; vmsrc/apple/cmd.pla: 1154:     byte i
					; i -> [6]
; vmsrc/apple/cmd.pla: 1155: 
; vmsrc/apple/cmd.pla: 1156:     params.0 = 2
	!BYTE	$58,$07,$00		; ENTER	7,0
; vmsrc/apple/cmd.pla: 1157:     params.1 = 0
; vmsrc/apple/cmd.pla: 1158:     params:2 = heap
; vmsrc/apple/cmd.pla: 1159:     perr     = syscall($C5, @params)
; vmsrc/apple/cmd.pla: 1160:     strbuf   = heap
; vmsrc/apple/cmd.pla: 1161:     for i = 0 to 15
	!BYTE	$04			; CN	2
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$00			; CN	0
	!BYTE	$74,$01			; SLB	[1]
	!BYTE	$6A			; LAW	_D071+0
_F157 	!WORD	_D071+0		
	!BYTE	$76,$02			; SLW	[2]
	!BYTE	$2A,$C5			; CB	197
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$54			; CALL	_A000
_F158 	!WORD	_A000		
	!BYTE	$78			; SAB	_D034+0
_F159 	!WORD	_D034+0		
	!BYTE	$6A			; LAW	_D071+0
_F160 	!WORD	_D071+0		
	!BYTE	$76,$04			; SLW	[4]
	!BYTE	$1E			; CN	15
	!BYTE	$00			; CN	0
_B080 
	!BYTE	$6C,$06			; DLB	[6]
; vmsrc/apple/cmd.pla: 1162:         ^strbuf = ^strbuf & $0F
; vmsrc/apple/cmd.pla: 1163:         if ^strbuf
; vmsrc/apple/cmd.pla: 1164:             cout('/'); prstr(strbuf); crout()
; vmsrc/apple/cmd.pla: 1165:         fin
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$60			; LB
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$70			; SB
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B082
	!WORD	_B082-*
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$54			; CALL	_A006
_F161 	!WORD	_A006		
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$54			; CALL	_A008
_F162 	!WORD	_A008		
	!BYTE	$54			; CALL	_A005
_F163 	!WORD	_A005		
_B082 
_B083 
; vmsrc/apple/cmd.pla: 1166:         strbuf = strbuf + 16
; vmsrc/apple/cmd.pla: 1167:     next
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$76,$04			; SLW	[4]
_B081 
	!BYTE	$A4			; INCBRLE	_B080
	!WORD	_B080-*
_B079 
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$30			; DROP 
; vmsrc/apple/cmd.pla: 1168: end
	!BYTE	$5A,$07			; LEAVE	7
; vmsrc/apple/cmd.pla: 1169: def catalog(path)#0
					; path -> [0]
_C018 					; catalog()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1170:     byte refnum
					; refnum -> [2]
; vmsrc/apple/cmd.pla: 1171:     byte firstblk
					; firstblk -> [3]
; vmsrc/apple/cmd.pla: 1172:     byte entrylen, entriesblk
					; entrylen -> [4]
					; entriesblk -> [5]
; vmsrc/apple/cmd.pla: 1173:     byte i, type, len
					; i -> [6]
					; type -> [7]
					; len -> [8]
; vmsrc/apple/cmd.pla: 1174:     word entry
					; entry -> [9]
; vmsrc/apple/cmd.pla: 1175: 
; vmsrc/apple/cmd.pla: 1176:     refnum = open(path)
	!BYTE	$58,$0B,$01		; ENTER	11,1
; vmsrc/apple/cmd.pla: 1177:     if perr
; vmsrc/apple/cmd.pla: 1178:         return
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C002
_F164 	!WORD	_C002		
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$68			; LAB	_D034+0
_F165 	!WORD	_D034+0		
	!BYTE	$4C			; BRFLS	_B084
	!WORD	_B084-*
	!BYTE	$5A,$0B			; LEAVE	11
; vmsrc/apple/cmd.pla: 1179:     fin
_B084 
_B085 
; vmsrc/apple/cmd.pla: 1180:     firstblk = 1
; vmsrc/apple/cmd.pla: 1181:     while read(refnum, heap, 512) == 512
	!BYTE	$02			; CN	1
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$50			; BRNCH	_B088
	!WORD	_B088-*
_B086 
; vmsrc/apple/cmd.pla: 1182:         entry = heap + 4
; vmsrc/apple/cmd.pla: 1183:         if firstblk
; vmsrc/apple/cmd.pla: 1184:             entrylen   = heap->$23
; vmsrc/apple/cmd.pla: 1185:             entriesblk = heap->$24 - 1
; vmsrc/apple/cmd.pla: 1186:             entry      = entry + entrylen
; vmsrc/apple/cmd.pla: 1187:         fin
	!BYTE	$6A			; LAW	_D071+0
_F166 	!WORD	_D071+0		
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$4C			; BRFLS	_B089
	!WORD	_B089-*
	!BYTE	$6A			; LAW	_D071+0
_F167 	!WORD	_D071+0		
	!BYTE	$38,$23			; ADDI	35
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$6A			; LAW	_D071+0
_F168 	!WORD	_D071+0		
	!BYTE	$38,$24			; ADDI	36
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$76,$09			; SLW	[9]
_B089 
_B090 
; vmsrc/apple/cmd.pla: 1188:         for i = firstblk to entriesblk
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$A0			; BRGT	_B091
	!WORD	_B091-*
_B092 
	!BYTE	$6C,$06			; DLB	[6]
; vmsrc/apple/cmd.pla: 1189:             if ^entry
; vmsrc/apple/cmd.pla: 1190:                 ^entry = ^entry & $0F
; vmsrc/apple/cmd.pla: 1191:                 prstr(entry)
; vmsrc/apple/cmd.pla: 1192:                 type = ' '
; vmsrc/apple/cmd.pla: 1193:                 when entry->$10
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B094
	!WORD	_B094-*
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$60			; LB
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$70			; SB
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$54			; CALL	_A008
_F169 	!WORD	_A008		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$52			; SEL
	!WORD	_B097-*
; vmsrc/apple/cmd.pla: 1194:                     is $0F // Is it a directory?
_B098 
; vmsrc/apple/cmd.pla: 1195:                         type = '/'
; vmsrc/apple/cmd.pla: 1196:                         break
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$50			; BRNCH	_B096
	!WORD	_B096-*
; vmsrc/apple/cmd.pla: 1197:                     is $FF // SYSTEM file
_B099 
; vmsrc/apple/cmd.pla: 1198:                         type = '-'
; vmsrc/apple/cmd.pla: 1199:                         break
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$50			; BRNCH	_B096
	!WORD	_B096-*
; vmsrc/apple/cmd.pla: 1200:                     is $FE // REL file
_B100 
; vmsrc/apple/cmd.pla: 1201:                         type = '+'
; vmsrc/apple/cmd.pla: 1202:                 wend
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$50			; BRNCH	_B096
	!WORD	_B096-*
_B097 
	!BYTE	$03			; CASEBLOCK
	!WORD	$000F
	!WORD	_B098-*
	!WORD	$00FE
	!WORD	_B100-*
	!WORD	$00FF
	!WORD	_B099-*
_B096 
; vmsrc/apple/cmd.pla: 1203:                 cout(type)
; vmsrc/apple/cmd.pla: 1204:                 for len = ^entry to 18
	!BYTE	$64,$07			; LLB	[7]
	!BYTE	$54			; CALL	_A006
_F170 	!WORD	_A006		
	!BYTE	$2A,$12			; CB	18
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$60			; LB
	!BYTE	$A0			; BRGT	_B101
	!WORD	_B101-*
_B102 
	!BYTE	$6C,$08			; DLB	[8]
; vmsrc/apple/cmd.pla: 1205:                     cout(' ')
; vmsrc/apple/cmd.pla: 1206:                 next
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_A006
_F171 	!WORD	_A006		
_B103 
	!BYTE	$A4			; INCBRLE	_B102
	!WORD	_B102-*
_B101 
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$30			; DROP 
; vmsrc/apple/cmd.pla: 1207:             fin
_B094 
_B095 
; vmsrc/apple/cmd.pla: 1208:             entry = entry + entrylen
; vmsrc/apple/cmd.pla: 1209:         next
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$76,$09			; SLW	[9]
_B093 
	!BYTE	$A4			; INCBRLE	_B092
	!WORD	_B092-*
_B091 
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$30			; DROP 
; vmsrc/apple/cmd.pla: 1210:         firstblk = 0
; vmsrc/apple/cmd.pla: 1211:     loop
	!BYTE	$00			; CN	0
	!BYTE	$74,$03			; SLB	[3]
_B088 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$6A			; LAW	_D071+0
_F172 	!WORD	_D071+0		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$54			; CALL	_C004
_F173 	!WORD	_C004		
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$22			; BREQ	_B086
	!WORD	_B086-*
_B087 
; vmsrc/apple/cmd.pla: 1212:     close(refnum)
; vmsrc/apple/cmd.pla: 1213:     crout()
; vmsrc/apple/cmd.pla: 1214: end
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$54			; CALL	_C003
_F174 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_A005
_F175 	!WORD	_A005		
	!BYTE	$5A,$0B			; LEAVE	11
; vmsrc/apple/cmd.pla: 1215: def stripchars(strptr)#1
					; strptr -> [0]
_C019 					; stripchars()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1216:     while ^strptr and ^(strptr + 1) > ' '
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$50			; BRNCH	_B106
	!WORD	_B106-*
_B104 
; vmsrc/apple/cmd.pla: 1217:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/cmd.pla: 1218:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A004
_F176 	!WORD	_A004		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/cmd.pla: 1219:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B106 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B107
	!WORD	_B107-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$44			; ISGT
_B107 
	!BYTE	$4E			; BRTRU	_B104
	!WORD	_B104-*
_B105 
; vmsrc/apple/cmd.pla: 1220:     return ^strptr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/cmd.pla: 1221: end
; vmsrc/apple/cmd.pla: 1222: def stripspaces(strptr)#0
					; strptr -> [0]
_C020 					; stripspaces()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1223:     while ^strptr and ^(strptr + ^strptr) <= ' '
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$50			; BRNCH	_B110
	!WORD	_B110-*
_B108 
; vmsrc/apple/cmd.pla: 1224:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/cmd.pla: 1225:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B110 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B111
	!WORD	_B111-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B111 
	!BYTE	$4E			; BRTRU	_B108
	!WORD	_B108-*
_B109 
; vmsrc/apple/cmd.pla: 1226:     while ^strptr and ^(strptr + 1) <= ' '
	!BYTE	$50			; BRNCH	_B114
	!WORD	_B114-*
_B112 
; vmsrc/apple/cmd.pla: 1227:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/cmd.pla: 1228:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A004
_F177 	!WORD	_A004		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/cmd.pla: 1229:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B114 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B115
	!WORD	_B115-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B115 
	!BYTE	$4E			; BRTRU	_B112
	!WORD	_B112-*
_B113 
; vmsrc/apple/cmd.pla: 1230: end
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/cmd.pla: 1231: def striptrail(strptr)#1
					; strptr -> [0]
_C021 					; striptrail()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1232:     byte i
					; i -> [2]
; vmsrc/apple/cmd.pla: 1233: 
; vmsrc/apple/cmd.pla: 1234:     for i = 1 to ^strptr
	!BYTE	$58,$03,$01		; ENTER	3,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B116
	!WORD	_B116-*
_B117 
	!BYTE	$6C,$02			; DLB	[2]
; vmsrc/apple/cmd.pla: 1235:         if ^(strptr + i) <= ' '
; vmsrc/apple/cmd.pla: 1236:             ^strptr = i - 1
; vmsrc/apple/cmd.pla: 1237:             break
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B119
	!WORD	_B119-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$8E			; DECR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B116
	!WORD	_B116-*
; vmsrc/apple/cmd.pla: 1238:         fin
_B119 
_B120 
; vmsrc/apple/cmd.pla: 1239:     next
_B118 
	!BYTE	$A4			; INCBRLE	_B117
	!WORD	_B117-*
_B116 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; vmsrc/apple/cmd.pla: 1240:     return strptr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/cmd.pla: 1241: end
; vmsrc/apple/cmd.pla: 1242: def parsecmd(strptr)#1
					; strptr -> [0]
_C022 					; parsecmd()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1243:     byte cmd
					; cmd -> [2]
; vmsrc/apple/cmd.pla: 1244: 
; vmsrc/apple/cmd.pla: 1245:     cmd = 0
	!BYTE	$58,$03,$01		; ENTER	3,1
; vmsrc/apple/cmd.pla: 1246:     stripspaces(strptr)
; vmsrc/apple/cmd.pla: 1247:     if ^strptr
; vmsrc/apple/cmd.pla: 1248:         cmd = ^(strptr + 1)
; vmsrc/apple/cmd.pla: 1249:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/cmd.pla: 1250:         ^strptr--
	!BYTE	$00			; CN	0
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C020
_F178 	!WORD	_C020		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B121
	!WORD	_B121-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_A004
_F179 	!WORD	_A004		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/cmd.pla: 1251:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B121 
_B122 
; vmsrc/apple/cmd.pla: 1252:     stripspaces(strptr)
; vmsrc/apple/cmd.pla: 1253:     return cmd
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C020
_F180 	!WORD	_C020		
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/cmd.pla: 1254: end
; vmsrc/apple/cmd.pla: 1255: def resetmemfiles()#0
_C023 					; resetmemfiles()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1256:     byte terr
					; terr -> [0]
; vmsrc/apple/cmd.pla: 1257: 
; vmsrc/apple/cmd.pla: 1258:     terr = perr // Save perr
	!BYTE	$58,$01,$00		; ENTER	1,0
; vmsrc/apple/cmd.pla: 1259:     //
; vmsrc/apple/cmd.pla: 1260:     // Close all files
; vmsrc/apple/cmd.pla: 1261:     //
; vmsrc/apple/cmd.pla: 1262:     ^$BF94 = 0
; vmsrc/apple/cmd.pla: 1263:     close(0)
; vmsrc/apple/cmd.pla: 1264:     //
; vmsrc/apple/cmd.pla: 1265:     // Set memory bitmap
; vmsrc/apple/cmd.pla: 1266:     //
; vmsrc/apple/cmd.pla: 1267:     memset($BF58, 0, 24)
; vmsrc/apple/cmd.pla: 1268:     ^$BF58 = $CF
; vmsrc/apple/cmd.pla: 1269:     ^$BF6F = $01
; vmsrc/apple/cmd.pla: 1270:     perr = terr // Restore perr
; vmsrc/apple/cmd.pla: 1271: end
	!BYTE	$68			; LAB	_D034+0
_F181 	!WORD	_D034+0		
	!BYTE	$74,$00			; SLB	[0]
	!BYTE	$00			; CN	0
	!BYTE	$78,$94,$BF		; SAB	49044
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C003
_F182 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$2C,$58,$BF		; CW	48984
	!BYTE	$00			; CN	0
	!BYTE	$2A,$18			; CB	24
	!BYTE	$54			; CALL	_A003
_F183 	!WORD	_A003		
	!BYTE	$2A,$CF			; CB	207
	!BYTE	$78,$58,$BF		; SAB	48984
	!BYTE	$02			; CN	1
	!BYTE	$78,$6F,$BF		; SAB	49007
	!BYTE	$64,$00			; LLB	[0]
	!BYTE	$78			; SAB	_D034+0
_F184 	!WORD	_D034+0		
	!BYTE	$5A,$01			; LEAVE	1
; vmsrc/apple/cmd.pla: 1272: def execsys(sysfile)#0
					; sysfile -> [0]
_C024 					; execsys()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1273:     byte refnum
					; refnum -> [2]
; vmsrc/apple/cmd.pla: 1274:     word len
					; len -> [3]
; vmsrc/apple/cmd.pla: 1275: 
; vmsrc/apple/cmd.pla: 1276:     if ^sysfile
	!BYTE	$58,$05,$01		; ENTER	5,1
; vmsrc/apple/cmd.pla: 1277:         strcpy($280, sysfile)
; vmsrc/apple/cmd.pla: 1278:         striptrail(sysfile)
; vmsrc/apple/cmd.pla: 1279:         refnum = open(sysfile)
; vmsrc/apple/cmd.pla: 1280:         if refnum
; vmsrc/apple/cmd.pla: 1281:             len = read(refnum, $2000, $FFFF)
; vmsrc/apple/cmd.pla: 1282:             resetmemfiles()
; vmsrc/apple/cmd.pla: 1283:             if len
; vmsrc/apple/cmd.pla: 1284:                 strcpy(sysfile, $280)
; vmsrc/apple/cmd.pla: 1285:                 if stripchars(sysfile) and ^$2000 == $4C and *$2003 == $EEEE
; vmsrc/apple/cmd.pla: 1286:                     stripspaces(sysfile)
; vmsrc/apple/cmd.pla: 1287:                     if ^$2005 >= ^sysfile + 1
; vmsrc/apple/cmd.pla: 1288:                         strcpy($2006, sysfile)
; vmsrc/apple/cmd.pla: 1289:                     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B123
	!WORD	_B123-*
	!BYTE	$2C,$80,$02		; CW	640
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C012
_F185 	!WORD	_C012		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C021
_F186 	!WORD	_C021		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C002
_F187 	!WORD	_C002		
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$4C			; BRFLS	_B125
	!WORD	_B125-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$20			; MINUS ONE
	!BYTE	$54			; CALL	_C004
_F188 	!WORD	_C004		
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$54			; CALL	_C023
_F189 	!WORD	_C023		
	!BYTE	$66,$03			; LLW	[3]
	!BYTE	$4C			; BRFLS	_B127
	!WORD	_B127-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2C,$80,$02		; CW	640
	!BYTE	$54			; CALL	_C012
_F190 	!WORD	_C012		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C019
_F191 	!WORD	_C019		
	!BYTE	$AC			; BRAND	_B129
	!WORD	_B129-*
	!BYTE	$68,$00,$20		; LAB	8192
	!BYTE	$2A,$4C			; CB	76
	!BYTE	$40			; ISEQ
	!BYTE	$AC			; BRAND	_B130
	!WORD	_B130-*
	!BYTE	$6A,$03,$20		; LAW	8195
	!BYTE	$2C,$EE,$EE		; CW	61166
	!BYTE	$40			; ISEQ
_B130 
_B129 
	!BYTE	$4C			; BRFLS	_B131
	!WORD	_B131-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C020
_F192 	!WORD	_C020		
	!BYTE	$68,$05,$20		; LAB	8197
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8C			; INCR
	!BYTE	$48			; ISGE
	!BYTE	$4C			; BRFLS	_B133
	!WORD	_B133-*
	!BYTE	$2C,$06,$20		; CW	8198
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C012
_F193 	!WORD	_C012		
	!BYTE	$30			; DROP 
_B133 
_B134 
; vmsrc/apple/cmd.pla: 1290:                 fin
_B131 
_B132 
; vmsrc/apple/cmd.pla: 1291:                 striptrail($280)
; vmsrc/apple/cmd.pla: 1292:                 exec()
; vmsrc/apple/cmd.pla: 1293:             fin
	!BYTE	$2C,$80,$02		; CW	640
	!BYTE	$54			; CALL	_C021
_F194 	!WORD	_C021		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_A002
_F195 	!WORD	_A002		
_B127 
_B128 
; vmsrc/apple/cmd.pla: 1294:         fin
_B125 
_B126 
; vmsrc/apple/cmd.pla: 1295:     fin
_B123 
_B124 
; vmsrc/apple/cmd.pla: 1296: end
	!BYTE	$5A,$05			; LEAVE	5
; vmsrc/apple/cmd.pla: 1297: def execmod(modfile)#1
					; modfile -> [0]
_P026 					; execmod(modfile)#1()
_C025 					; execmod()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1298:     byte moddci[17]
					; moddci -> [2]
; vmsrc/apple/cmd.pla: 1299:     word saveheap, savesym, saveflags
					; saveheap -> [19]
					; savesym -> [21]
					; saveflags -> [23]
; vmsrc/apple/cmd.pla: 1300: 
; vmsrc/apple/cmd.pla: 1301:     perr = 1
	!BYTE	$58,$19,$01		; ENTER	25,1
; vmsrc/apple/cmd.pla: 1302:     if stodci(modfile, @moddci)
; vmsrc/apple/cmd.pla: 1303:         saveheap  = heap
; vmsrc/apple/cmd.pla: 1304:         savesym   = lastsym
; vmsrc/apple/cmd.pla: 1305:         saveflags = systemflags
; vmsrc/apple/cmd.pla: 1306:         if loadmod(@moddci) < modkeep
; vmsrc/apple/cmd.pla: 1307:             lastsym = savesym
; vmsrc/apple/cmd.pla: 1308:             heap    = saveheap
; vmsrc/apple/cmd.pla: 1309:         fin
	!BYTE	$02			; CN	1
	!BYTE	$78			; SAB	_D034+0
_F196 	!WORD	_D034+0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_A019
_F197 	!WORD	_A019		
	!BYTE	$4C			; BRFLS	_B135
	!WORD	_B135-*
	!BYTE	$6A			; LAW	_D071+0
_F198 	!WORD	_D071+0		
	!BYTE	$76,$13			; SLW	[19]
	!BYTE	$6A			; LAW	_D072+0
_F199 	!WORD	_D072+0		
	!BYTE	$76,$15			; SLW	[21]
	!BYTE	$6A			; LAW	_D070+0
_F200 	!WORD	_D070+0		
	!BYTE	$76,$17			; SLW	[23]
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_C016
_F201 	!WORD	_C016		
	!BYTE	$2C,$00,$20		; CW	8192
	!BYTE	$46			; ISLT
	!BYTE	$4C			; BRFLS	_B137
	!WORD	_B137-*
	!BYTE	$66,$15			; LLW	[21]
	!BYTE	$7A			; SAW	_D072+0
_F202 	!WORD	_D072+0		
	!BYTE	$66,$13			; LLW	[19]
	!BYTE	$7A			; SAW	_D071+0
_F203 	!WORD	_D071+0		
_B137 
_B138 
; vmsrc/apple/cmd.pla: 1310:         ^lastsym    = 0
; vmsrc/apple/cmd.pla: 1311:         systemflags = saveflags
; vmsrc/apple/cmd.pla: 1312:     fin
	!BYTE	$00			; CN	0
	!BYTE	$6A			; LAW	_D072+0
_F204 	!WORD	_D072+0		
	!BYTE	$70			; SB
	!BYTE	$66,$17			; LLW	[23]
	!BYTE	$7A			; SAW	_D070+0
_F205 	!WORD	_D070+0		
_B135 
_B136 
; vmsrc/apple/cmd.pla: 1313:     return -perr
	!BYTE	$68			; LAB	_D034+0
_F206 	!WORD	_D034+0		
	!BYTE	$90			; NEG
	!BYTE	$5A,$19			; LEAVE	25
; vmsrc/apple/cmd.pla: 1314: end
; vmsrc/apple/cmd.pla: 1315: //
; vmsrc/apple/cmd.pla: 1316: // Command line processor
; vmsrc/apple/cmd.pla: 1317: //
; vmsrc/apple/cmd.pla: 1318: def docmds#0
_C026 					; docmds()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1319:     word prefix
					; prefix -> [0]
; vmsrc/apple/cmd.pla: 1320: 
; vmsrc/apple/cmd.pla: 1321:     prefix = pfxop(heap, GET_PFX)
	!BYTE	$58,$02,$00		; ENTER	2,0
; vmsrc/apple/cmd.pla: 1322:     repeat
	!BYTE	$6A			; LAW	_D071+0
_F207 	!WORD	_D071+0		
	!BYTE	$2A,$C7			; CB	199
	!BYTE	$54			; CALL	_C001
_F208 	!WORD	_C001		
	!BYTE	$76,$00			; SLW	[0]
_B140 
; vmsrc/apple/cmd.pla: 1323:         if ^getlnbuf
; vmsrc/apple/cmd.pla: 1324:             strcpy(@cmdln, getlnbuf)
; vmsrc/apple/cmd.pla: 1325:             when toupper(parsecmd(getlnbuf))
	!BYTE	$68,$FF,$01		; LAB	511
	!BYTE	$4C			; BRFLS	_B142
	!WORD	_B142-*
	!BYTE	$26			; LA	_D037+0
_F209 	!WORD	_D037+0		
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$54			; CALL	_C012
_F210 	!WORD	_C012		
	!BYTE	$30			; DROP 
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$54			; CALL	_C022
_F211 	!WORD	_C022		
	!BYTE	$54			; CALL	_A020
_F212 	!WORD	_A020		
	!BYTE	$52			; SEL
	!WORD	_B145-*
; vmsrc/apple/cmd.pla: 1326:                 is 'C'
_B146 
; vmsrc/apple/cmd.pla: 1327:                     catalog(^getlnbuf ?? getlnbuf :: prefix)
; vmsrc/apple/cmd.pla: 1328:                     break
	!BYTE	$68,$FF,$01		; LAB	511
	!BYTE	$4C			; BRFLS	_B149
	!WORD	_B149-*
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$50			; BRNCH	_B150
	!WORD	_B150-*
_B149 
	!BYTE	$66,$00			; LLW	[0]
_B150 
	!BYTE	$54			; CALL	_C018
_F213 	!WORD	_C018		
	!BYTE	$50			; BRNCH	_B144
	!WORD	_B144-*
; vmsrc/apple/cmd.pla: 1329:                 is 'P'
_B151 
; vmsrc/apple/cmd.pla: 1330:                     pfxop(getlnbuf, SET_PFX)
; vmsrc/apple/cmd.pla: 1331:                     break
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$2A,$C6			; CB	198
	!BYTE	$54			; CALL	_C001
_F214 	!WORD	_C001		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B144
	!WORD	_B144-*
; vmsrc/apple/cmd.pla: 1332:                 is '/'
_B152 
; vmsrc/apple/cmd.pla: 1333:                     repeat
_B154 
; vmsrc/apple/cmd.pla: 1334:                         ^prefix--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/cmd.pla: 1335:                     until ^(prefix + ^prefix) == '/'
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B155 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$24			; BRNE	_B154
	!WORD	_B154-*
_B153 
; vmsrc/apple/cmd.pla: 1336:                     if ^prefix > 1
; vmsrc/apple/cmd.pla: 1337:                         pfxop(prefix, SET_PFX)
; vmsrc/apple/cmd.pla: 1338:                     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B156
	!WORD	_B156-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2A,$C6			; CB	198
	!BYTE	$54			; CALL	_C001
_F215 	!WORD	_C001		
	!BYTE	$30			; DROP 
_B156 
_B157 
; vmsrc/apple/cmd.pla: 1339:                     break
	!BYTE	$50			; BRNCH	_B144
	!WORD	_B144-*
; vmsrc/apple/cmd.pla: 1340:                 is 'V'
_B158 
; vmsrc/apple/cmd.pla: 1341:                     volumes()
; vmsrc/apple/cmd.pla: 1342:                     break
	!BYTE	$54			; CALL	_C017
_F216 	!WORD	_C017		
	!BYTE	$50			; BRNCH	_B144
	!WORD	_B144-*
; vmsrc/apple/cmd.pla: 1343:                 is '-'
_B159 
; vmsrc/apple/cmd.pla: 1344:                     execsys(getlnbuf)
; vmsrc/apple/cmd.pla: 1345:                     break
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$54			; CALL	_C024
_F217 	!WORD	_C024		
	!BYTE	$50			; BRNCH	_B144
	!WORD	_B144-*
; vmsrc/apple/cmd.pla: 1346:                 is '+'
_B160 
; vmsrc/apple/cmd.pla: 1347:                     //
; vmsrc/apple/cmd.pla: 1348: 					// Exec module
; vmsrc/apple/cmd.pla: 1349: 					//
; vmsrc/apple/cmd.pla: 1350:                     execmod(striptrail(getlnbuf))
; vmsrc/apple/cmd.pla: 1351:                     //
; vmsrc/apple/cmd.pla: 1352:                     // Clean up
; vmsrc/apple/cmd.pla: 1353:                     //
; vmsrc/apple/cmd.pla: 1354:                     resetmemfiles
; vmsrc/apple/cmd.pla: 1355:                     break
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$54			; CALL	_C021
_F218 	!WORD	_C021		
	!BYTE	$54			; CALL	_C025
_F219 	!WORD	_C025		
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_C023
_F220 	!WORD	_C023		
	!BYTE	$50			; BRNCH	_B144
	!WORD	_B144-*
; vmsrc/apple/cmd.pla: 1356:                 otherwise
_B145 
	!BYTE	$06			; CASEBLOCK
	!WORD	$002B
	!WORD	_B160-*
	!WORD	$002D
	!WORD	_B159-*
	!WORD	$002F
	!WORD	_B152-*
	!WORD	$0043
	!WORD	_B146-*
	!WORD	$0050
	!WORD	_B151-*
	!WORD	$0056
	!WORD	_B158-*
; vmsrc/apple/cmd.pla: 1357:                     cout('?')
; vmsrc/apple/cmd.pla: 1358:             wend
	!BYTE	$2A,$3F			; CB	63
	!BYTE	$54			; CALL	_A006
_F221 	!WORD	_A006		
_B144 
; vmsrc/apple/cmd.pla: 1359:             if perr
; vmsrc/apple/cmd.pla: 1360:                 prstr("ERR:$")
	!BYTE	$68			; LAB	_D034+0
_F222 	!WORD	_D034+0		
	!BYTE	$4C			; BRFLS	_B161
	!WORD	_B161-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$45,$52,$52,$3A,$24
	!BYTE	$54			; CALL	_A008
_F223 	!WORD	_A008		
; vmsrc/apple/cmd.pla: 1361:                 prbyte(perr)
; vmsrc/apple/cmd.pla: 1362: 		crout()
; vmsrc/apple/cmd.pla: 1363:             fin
	!BYTE	$68			; LAB	_D034+0
_F224 	!WORD	_D034+0		
	!BYTE	$54			; CALL	_A010
_F225 	!WORD	_A010		
	!BYTE	$54			; CALL	_A005
_F226 	!WORD	_A005		
_B161 
_B162 
; vmsrc/apple/cmd.pla: 1364:         fin
_B142 
_B143 
; vmsrc/apple/cmd.pla: 1365:         prstr(pfxop(prefix, GET_PFX))
; vmsrc/apple/cmd.pla: 1366:         rdstr($BA)
; vmsrc/apple/cmd.pla: 1367:     until 0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$2A,$C7			; CB	199
	!BYTE	$54			; CALL	_C001
_F227 	!WORD	_C001		
	!BYTE	$54			; CALL	_A008
_F228 	!WORD	_A008		
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$54			; CALL	_A011
_F229 	!WORD	_A011		
	!BYTE	$30			; DROP 
_B141 
	!BYTE	$50			; BRNCH	_B140
	!WORD	_B140-*
_B139 
; vmsrc/apple/cmd.pla: 1368: end
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/cmd.pla: 1369: //
; vmsrc/apple/cmd.pla: 1370: // Dummy definition to get free heap
; vmsrc/apple/cmd.pla: 1371: //
; vmsrc/apple/cmd.pla: 1372: def lastdef#0
_C027 					; lastdef()
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1373: end
	!BYTE	$5C			; RET
; vmsrc/apple/cmd.pla: 1374: //
; vmsrc/apple/cmd.pla: 1375: // Get heap start.
; vmsrc/apple/cmd.pla: 1376: //
; vmsrc/apple/cmd.pla: 1377: heap = @lastdef
_INIT 
	JSR	INTERP
; vmsrc/apple/cmd.pla: 1378: //
; vmsrc/apple/cmd.pla: 1379: // Print PLASMA version
; vmsrc/apple/cmd.pla: 1380: //
; vmsrc/apple/cmd.pla: 1381: prstr("PLASMA 2.0 64K\n")//; prbyte(version.1); cout('.'); prbyte(version.0); crout
	!BYTE	$26			; LA	_C027+0
_F230 	!WORD	_C027+0		
	!BYTE	$7A			; SAW	_D071+0
_F231 	!WORD	_D071+0		
	!BYTE	$2E			; CS
	!BYTE	$0F
	!BYTE	$50,$4C,$41,$53,$4D,$41,$20,$32
	!BYTE	$2E,$30,$20,$36,$34,$4B,$0D
	!BYTE	$54			; CALL	_A008
_F232 	!WORD	_A008		
; vmsrc/apple/cmd.pla: 1382: //
; vmsrc/apple/cmd.pla: 1383: // Init symbol table.
; vmsrc/apple/cmd.pla: 1384: //
; vmsrc/apple/cmd.pla: 1385: while *sysmodsym
	!BYTE	$50			; BRNCH	_B165
	!WORD	_B165-*
_B163 
; vmsrc/apple/cmd.pla: 1386:     stodci(sysmodsym=>0, heap)
; vmsrc/apple/cmd.pla: 1387:     addsym(heap, sysmodsym=>2)
; vmsrc/apple/cmd.pla: 1388:     sysmodsym = sysmodsym + 4
; vmsrc/apple/cmd.pla: 1389: loop
	!BYTE	$6A			; LAW	_D069+0
_F233 	!WORD	_D069+0		
	!BYTE	$62			; LW
	!BYTE	$6A			; LAW	_D071+0
_F234 	!WORD	_D071+0		
	!BYTE	$54			; CALL	_A019
_F235 	!WORD	_A019		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_D071+0
_F236 	!WORD	_D071+0		
	!BYTE	$6A			; LAW	_D069+0
_F237 	!WORD	_D069+0		
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$62			; LW
	!BYTE	$54			; CALL	_C011
_F238 	!WORD	_C011		
	!BYTE	$6A			; LAW	_D069+0
_F239 	!WORD	_D069+0		
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$7A			; SAW	_D069+0
_F240 	!WORD	_D069+0		
_B165 
	!BYTE	$6A			; LAW	_D069+0
_F241 	!WORD	_D069+0		
	!BYTE	$62			; LW
	!BYTE	$4E			; BRTRU	_B163
	!WORD	_B163-*
_B164 
; vmsrc/apple/cmd.pla: 1390: //
; vmsrc/apple/cmd.pla: 1391: // Set system path
; vmsrc/apple/cmd.pla: 1392: //
; vmsrc/apple/cmd.pla: 1393: strcat(strcpy(@sysmods, $300), "SYS/")) // This is the path to CMD
	!BYTE	$26			; LA	_D068+0
_F242 	!WORD	_D068+0		
	!BYTE	$2C,$00,$03		; CW	768
	!BYTE	$54			; CALL	_C012
_F243 	!WORD	_C012		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$53,$59,$53,$2F
	!BYTE	$54			; CALL	_C013
_F244 	!WORD	_C013		
	!BYTE	$30			; DROP 
; vmsrc/apple/cmd.pla: 1394: syspath  = @sysmods // Update external interface table
; vmsrc/apple/cmd.pla: 1395: syscmdln = @cmdln
; vmsrc/apple/cmd.pla: 1396: //
; vmsrc/apple/cmd.pla: 1397: // Try to load autorun.
; vmsrc/apple/cmd.pla: 1398: //
; vmsrc/apple/cmd.pla: 1399: autorun = open(@autorun)
; vmsrc/apple/cmd.pla: 1400: if autorun
; vmsrc/apple/cmd.pla: 1401:     cmdln = read(autorun, @cmdln+1, 81)
; vmsrc/apple/cmd.pla: 1402:     strcpy(getlnbuf, @cmdln)
; vmsrc/apple/cmd.pla: 1403:     close(0)
; vmsrc/apple/cmd.pla: 1404: else
	!BYTE	$26			; LA	_D068+0
_F245 	!WORD	_D068+0		
	!BYTE	$7A			; SAW	_D032+0
_F246 	!WORD	_D032+0		
	!BYTE	$26			; LA	_D037+0
_F247 	!WORD	_D037+0		
	!BYTE	$7A			; SAW	_D033+0
_F248 	!WORD	_D033+0		
	!BYTE	$26			; LA	_D038+0
_F249 	!WORD	_D038+0		
	!BYTE	$54			; CALL	_C002
_F250 	!WORD	_C002		
	!BYTE	$7C			; DAB	_D038+0
_F251 	!WORD	_D038+0		
	!BYTE	$4C			; BRFLS	_B166
	!WORD	_B166-*
	!BYTE	$68			; LAB	_D038+0
_F252 	!WORD	_D038+0		
	!BYTE	$26			; LA	_D037+1
_F253 	!WORD	_D037+1		
	!BYTE	$2A,$51			; CB	81
	!BYTE	$54			; CALL	_C004
_F254 	!WORD	_C004		
	!BYTE	$78			; SAB	_D037+0
_F255 	!WORD	_D037+0		
	!BYTE	$2C,$FF,$01		; CW	511
	!BYTE	$26			; LA	_D037+0
_F256 	!WORD	_D037+0		
	!BYTE	$54			; CALL	_C012
_F257 	!WORD	_C012		
	!BYTE	$30			; DROP 
	!BYTE	$00			; CN	0
	!BYTE	$54			; CALL	_C003
_F258 	!WORD	_C003		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B167
	!WORD	_B167-*
_B166 
; vmsrc/apple/cmd.pla: 1405:     ^getlnbuf = 0
; vmsrc/apple/cmd.pla: 1406:     //
; vmsrc/apple/cmd.pla: 1407:     // Print some startup info.
; vmsrc/apple/cmd.pla: 1408:     //
; vmsrc/apple/cmd.pla: 1409:     prstr("MEM FREE:$"); prword(availheap); crout
	!BYTE	$00			; CN	0
	!BYTE	$78,$FF,$01		; SAB	511
	!BYTE	$2E			; CS
	!BYTE	$0A
	!BYTE	$4D,$45,$4D,$20,$46,$52,$45,$45
	!BYTE	$3A,$24
	!BYTE	$54			; CALL	_A008
_F259 	!WORD	_A008		
; vmsrc/apple/cmd.pla: 1410: fin
	!BYTE	$54			; CALL	_C006
_F260 	!WORD	_C006		
	!BYTE	$54			; CALL	_A009
_F261 	!WORD	_A009		
	!BYTE	$54			; CALL	_A005
_F262 	!WORD	_A005		
_B167 
; vmsrc/apple/cmd.pla: 1411: docmds
; vmsrc/apple/cmd.pla: 1412: done
	!BYTE	$54			; CALL	_C026
_F263 	!WORD	_C026		
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
