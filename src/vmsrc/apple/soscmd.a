; ACME COMPATIBLE OUTPUT
	!WORD	_SEGEND-_SEGBEGIN	; LENGTH OF HEADER + CODE/DATA + BYTECODE SEGMENT
_SEGBEGIN 
	!WORD	$6502			; MAGIC #
	!WORD	_SYSFLAGS			; SYSTEM FLAGS
	!WORD	_SUBSEG			; BYTECODE SUB-SEGMENT
	!WORD	_DEFCNT			; BYTECODE DEF COUNT
	!WORD	_INIT			; MODULE INITIALIZATION ROUTINE
; vmsrc/apple/soscmd.pla: 0001: include "inc/cmdsys.plh"
; inc/cmdsys.plh: 0001: import cmdsys
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
					; CMDSYS -> X000
; inc/cmdsys.plh: 0002:     //
; inc/cmdsys.plh: 0003:     // Useful values for everyone
; inc/cmdsys.plh: 0004:     //
; inc/cmdsys.plh: 0005:     const _SYSVER_ = $0200 // Version built against
					; _SYSVER_ = 512
; inc/cmdsys.plh: 0006:     const FALSE    = 0
					; FALSE = 0
; inc/cmdsys.plh: 0007:     const TRUE     = not FALSE
					; TRUE = -1
; inc/cmdsys.plh: 0008:     const NULL     = 0
					; NULL = 0
; inc/cmdsys.plh: 0009:     //
; inc/cmdsys.plh: 0010:     // Machine ID values
; inc/cmdsys.plh: 0011:     //
; inc/cmdsys.plh: 0012:     const MACHID_CLOCK = $01
					; MACHID_CLOCK = 1
; inc/cmdsys.plh: 0013:     const MACHID_80COL = $02
					; MACHID_80COL = 2
; inc/cmdsys.plh: 0014:     const MACHID_MEM   = $03
					; MACHID_MEM = 3
; inc/cmdsys.plh: 0015:     const MACHID_64K   = $20
					; MACHID_64K = 32
; inc/cmdsys.plh: 0016:     const MACHID_128K  = $30
					; MACHID_128K = 48
; inc/cmdsys.plh: 0017:     const MACHID_MODEL = $C8
					; MACHID_MODEL = 200
; inc/cmdsys.plh: 0018:     const MACHID_II    = $00
					; MACHID_II = 0
; inc/cmdsys.plh: 0019:     const MACHID_IIPLUS= $40
					; MACHID_IIPLUS = 64
; inc/cmdsys.plh: 0020:     const MACHID_IIE   = $80
					; MACHID_IIE = 128
; inc/cmdsys.plh: 0021:     const MACHID_III   = $C0
					; MACHID_III = 192
; inc/cmdsys.plh: 0022:     const MACHID_IIC   = $88
					; MACHID_IIC = 136
; inc/cmdsys.plh: 0023:     const MACHID_I     = $08
					; MACHID_I = 8
; inc/cmdsys.plh: 0024:     byte MACHID
					; MACHID -> X001
; inc/cmdsys.plh: 0025:     //
; inc/cmdsys.plh: 0026:     // System flags: memory allocator screen holes.
; inc/cmdsys.plh: 0027:     //
; inc/cmdsys.plh: 0028:     const restxt1     = $0001
					; restxt1 = 1
; inc/cmdsys.plh: 0029:     const restxt2     = $0002
					; restxt2 = 2
; inc/cmdsys.plh: 0030:     const resxtxt1    = $0004
					; resxtxt1 = 4
; inc/cmdsys.plh: 0031:     const resxtxt2    = $0008
					; resxtxt2 = 8
; inc/cmdsys.plh: 0032:     const reshgr1     = $0010
					; reshgr1 = 16
; inc/cmdsys.plh: 0033:     const reshgr2     = $0020
					; reshgr2 = 32
; inc/cmdsys.plh: 0034:     const resxhgr1    = $0040
					; resxhgr1 = 64
; inc/cmdsys.plh: 0035:     const resxhgr2    = $0080
					; resxhgr2 = 128
; inc/cmdsys.plh: 0036:     const nojitc      = $0100
					; nojitc = 256
; inc/cmdsys.plh: 0037:     //
; inc/cmdsys.plh: 0038:     // Module don't free memory
; inc/cmdsys.plh: 0039:     //
; inc/cmdsys.plh: 0040:     const modkeep     = $2000
					; modkeep = 8192
; inc/cmdsys.plh: 0041:     const modinitkeep = $4000
					; modinitkeep = 16384
; inc/cmdsys.plh: 0042:     //
; inc/cmdsys.plh: 0043:     // CMD exported interface table
; inc/cmdsys.plh: 0044:     //
; inc/cmdsys.plh: 0045:     struc t_cmdsys
; inc/cmdsys.plh: 0046:         word sysver
					; sysver = 0
; inc/cmdsys.plh: 0047:         word syspath
					; syspath = 2
; inc/cmdsys.plh: 0048:         word cmdline
					; cmdline = 4
; inc/cmdsys.plh: 0049:         word modexec
					; modexec = 6
; inc/cmdsys.plh: 0050:         word sysopen
					; sysopen = 8
; inc/cmdsys.plh: 0051:         word sysclose
					; sysclose = 10
; inc/cmdsys.plh: 0052:         word sysread
					; sysread = 12
; inc/cmdsys.plh: 0053:         word syswrite
					; syswrite = 14
; inc/cmdsys.plh: 0054:         byte syserr
					; syserr = 16
; inc/cmdsys.plh: 0055:         byte jitcount
					; jitcount = 17
; inc/cmdsys.plh: 0056:         byte jitsize
					; jitsize = 18
; inc/cmdsys.plh: 0057:         byte refcons    // Apple /// specific
					; refcons = 19
; inc/cmdsys.plh: 0058:         byte devcons    // Apple /// specific
					; devcons = 20
; inc/cmdsys.plh: 0059:     end
					; t_cmdsys = 21
; inc/cmdsys.plh: 0060:     //
; inc/cmdsys.plh: 0061:     // CMD exported functions
; inc/cmdsys.plh: 0062:     //
; inc/cmdsys.plh: 0063:     predef putc(c)#0, putln()#0, puts(s)#0, puti(i)#0, getc()#1, gets(p)#1, putb(b)#0, puth(h)#0
					; PUTC -> X002
					; PUTLN -> X003
					; PUTS -> X004
					; PUTI -> X005
					; GETC -> X006
					; GETS -> X007
					; PUTB -> X008
					; PUTH -> X009
; inc/cmdsys.plh: 0064:     predef call(addr,areg,xreg,yreg,status)#1, syscall(cmd,params)#1
					; CALL -> X010
					; SYSCALL -> X011
; inc/cmdsys.plh: 0065:     predef heapmark()#1, heapallocalign(size, pow2, freeaddr)#1
					; HEAPMARK -> X012
					; HEAPALLOCALIGN -> X013
; inc/cmdsys.plh: 0066:     predef heapalloc(size)#1, heaprelease(newheap)#1, heapavail()#1
					; HEAPALLOC -> X014
					; HEAPRELEASE -> X015
					; HEAPAVAIL -> X016
; inc/cmdsys.plh: 0067:     predef memset(addr,value,size)#0, memcpy(dst,src,size)#0, strcpy(dst,src)#1, strcat(dst,src)#1
					; MEMSET -> X017
					; MEMCPY -> X018
					; STRCPY -> X019
					; STRCAT -> X020
; inc/cmdsys.plh: 0068:     predef toupper(c)#1, sext(a)#1, divmod(a,b)#2, isugt(a,b)#1, isuge(a,b)#1, isult(a,b)#1, isule(a,b)#1
					; TOUPPER -> X021
					; SEXT -> X022
					; DIVMOD -> X023
					; ISUGT -> X024
					; ISUGE -> X025
					; ISULT -> X026
					; ISULE -> X027
; inc/cmdsys.plh: 0069: end
; vmsrc/apple/soscmd.pla: 0001: 
; vmsrc/apple/soscmd.pla: 0002: //
; vmsrc/apple/soscmd.pla: 0003: // Private addresses
; vmsrc/apple/soscmd.pla: 0004: //
; vmsrc/apple/soscmd.pla: 0005: const cmdparser   = $A0F0
	!BYTE	$00			; END OF MODULE DEPENDENCIES
					; cmdparser = 41200
; vmsrc/apple/soscmd.pla: 0006: //
; vmsrc/apple/soscmd.pla: 0007: // SOS routines
; vmsrc/apple/soscmd.pla: 0008: // FILE I/O
; vmsrc/apple/soscmd.pla: 0009: //
; vmsrc/apple/soscmd.pla: 0010: def getpfx(path)#1
	!BYTE	$00			; PAD BYTE
_SUBSEG 				; BYTECODE STARTS
					; path -> [0]
_C000 					; getpfx()
; vmsrc/apple/soscmd.pla: 0011:     byte params[4]
					; params -> [2]
; vmsrc/apple/soscmd.pla: 0012: 
; vmsrc/apple/soscmd.pla: 0013:     ^path    = 0
	!BYTE	$58,$06,$01		; ENTER	6,1
; vmsrc/apple/soscmd.pla: 0014:     params.0 = 2
; vmsrc/apple/soscmd.pla: 0015:     params:1 = path
; vmsrc/apple/soscmd.pla: 0016:     params.3 = 128
; vmsrc/apple/soscmd.pla: 0017:     syscall($C7, @params)
; vmsrc/apple/soscmd.pla: 0018:     return path
	!BYTE	$00			; CN	0
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$04			; CN	2
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2A,$80			; CB	128
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$2A,$C7			; CB	199
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F000 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$06			; LEAVE	6
; vmsrc/apple/soscmd.pla: 0019: end
; vmsrc/apple/soscmd.pla: 0020: def setpfx(path)#1
					; path -> [0]
_C001 					; setpfx()
; vmsrc/apple/soscmd.pla: 0021:     byte params[6]
					; params -> [2]
; vmsrc/apple/soscmd.pla: 0022:     byte fileinfo[2]
					; fileinfo -> [8]
; vmsrc/apple/soscmd.pla: 0023: 
; vmsrc/apple/soscmd.pla: 0024:     params.0 = 3
	!BYTE	$58,$0A,$01		; ENTER	10,1
; vmsrc/apple/soscmd.pla: 0025:     params:1 = path
; vmsrc/apple/soscmd.pla: 0026:     params:3 = @fileinfo
; vmsrc/apple/soscmd.pla: 0027:     params.5 = 2
; vmsrc/apple/soscmd.pla: 0028:     if not syscall($C4, @params) and (fileinfo.1 == $00 or fileinfo.1 == $0F) // Make sure it's a directory
; vmsrc/apple/soscmd.pla: 0029:         params.0 = 1
; vmsrc/apple/soscmd.pla: 0030:         params:1 = path
; vmsrc/apple/soscmd.pla: 0031:         syscall($C6, @params)
; vmsrc/apple/soscmd.pla: 0032:     else
	!BYTE	$06			; CN	3
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$04			; CN	2
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$2A,$C4			; CB	196
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F001 	!WORD	0		
	!BYTE	$80			; NOT
	!BYTE	$AC			; BRAND	_B001
	!WORD	_B001-*
	!BYTE	$64,$09			; LLB	[9]
	!BYTE	$80			; NOT
	!BYTE	$AE			; BROR	_B002
	!WORD	_B002-*
	!BYTE	$64,$09			; LLB	[9]
	!BYTE	$1E			; CN	15
	!BYTE	$40			; ISEQ
_B002 
_B001 
	!BYTE	$4C			; BRFLS	_B003
	!WORD	_B003-*
	!BYTE	$02			; CN	1
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$03			; SLW	[3]
	!BYTE	$2A,$C6			; CB	198
	!BYTE	$28,$02			; LLA	[2]
	!BYTE	$54			; CALL	_X011
_F002 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B004
	!WORD	_B004-*
_B003 
; vmsrc/apple/soscmd.pla: 0033:         getpfx(path) // Get current path
; vmsrc/apple/soscmd.pla: 0034:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C000
_F003 	!WORD	_C000		
	!BYTE	$30			; DROP 
_B004 
; vmsrc/apple/soscmd.pla: 0035:     return path
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$0A			; LEAVE	10
; vmsrc/apple/soscmd.pla: 0036: end
; vmsrc/apple/soscmd.pla: 0037: def dev_info(devnum, name, list, listlen)#1
					; devnum -> [0]
					; name -> [2]
					; list -> [4]
					; listlen -> [6]
_C002 					; dev_info()
; vmsrc/apple/soscmd.pla: 0038:     byte params[7]
					; params -> [8]
; vmsrc/apple/soscmd.pla: 0039: 
; vmsrc/apple/soscmd.pla: 0040:     params.0 = 4
	!BYTE	$58,$0F,$04		; ENTER	15,4
; vmsrc/apple/soscmd.pla: 0041:     params.1 = devnum
; vmsrc/apple/soscmd.pla: 0042:     params:2 = name
; vmsrc/apple/soscmd.pla: 0043:     params:4 = list
; vmsrc/apple/soscmd.pla: 0044:     params.6 = listlen
; vmsrc/apple/soscmd.pla: 0045:     return syscall($85, @params)
	!BYTE	$08			; CN	4
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$74,$09			; SLB	[9]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$0A			; SLW	[10]
	!BYTE	$66,$04			; LLW	[4]
	!BYTE	$76,$0C			; SLW	[12]
	!BYTE	$66,$06			; LLW	[6]
	!BYTE	$74,$0E			; SLB	[14]
	!BYTE	$2A,$85			; CB	133
	!BYTE	$28,$08			; LLA	[8]
	!BYTE	$54			; CALL	_X011
_F004 	!WORD	0		
	!BYTE	$5A,$0F			; LEAVE	15
; vmsrc/apple/soscmd.pla: 0046: end
; vmsrc/apple/soscmd.pla: 0047: def volume(devname, volname)#1
					; devname -> [0]
					; volname -> [2]
_C003 					; volume()
; vmsrc/apple/soscmd.pla: 0048:     byte params[9]
					; params -> [4]
; vmsrc/apple/soscmd.pla: 0049: 
; vmsrc/apple/soscmd.pla: 0050:     params.0 = 4
	!BYTE	$58,$0D,$02		; ENTER	13,2
; vmsrc/apple/soscmd.pla: 0051:     params:1 = devname
; vmsrc/apple/soscmd.pla: 0052:     params:3 = volname
; vmsrc/apple/soscmd.pla: 0053:     params:5 = 0
; vmsrc/apple/soscmd.pla: 0054:     params:7 = 0
; vmsrc/apple/soscmd.pla: 0055:     return syscall($C5, @params)
	!BYTE	$08			; CN	4
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$76,$05			; SLW	[5]
	!BYTE	$66,$02			; LLW	[2]
	!BYTE	$76,$07			; SLW	[7]
	!BYTE	$00			; CN	0
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$00			; CN	0
	!BYTE	$76,$0B			; SLW	[11]
	!BYTE	$2A,$C5			; CB	197
	!BYTE	$28,$04			; LLA	[4]
	!BYTE	$54			; CALL	_X011
_F005 	!WORD	0		
	!BYTE	$5A,$0D			; LEAVE	13
; vmsrc/apple/soscmd.pla: 0056: end
; vmsrc/apple/soscmd.pla: 0057: //
; vmsrc/apple/soscmd.pla: 0058: // Command mode
; vmsrc/apple/soscmd.pla: 0059: //
; vmsrc/apple/soscmd.pla: 0060: def volumes()#0
_C004 					; volumes()
; vmsrc/apple/soscmd.pla: 0061:     byte info[11]
					; info -> [0]
; vmsrc/apple/soscmd.pla: 0062:     byte devname[17]
					; devname -> [11]
; vmsrc/apple/soscmd.pla: 0063:     byte volname[17]
					; volname -> [28]
; vmsrc/apple/soscmd.pla: 0064:     byte i
					; i -> [45]
; vmsrc/apple/soscmd.pla: 0065: 
; vmsrc/apple/soscmd.pla: 0066:     for i = $01 to $18
	!BYTE	$58,$2E,$00		; ENTER	46,0
	!BYTE	$2A,$18			; CB	24
	!BYTE	$02			; CN	1
_B006 
	!BYTE	$6C,$2D			; DLB	[45]
; vmsrc/apple/soscmd.pla: 0067:         if dev_info(i, @devname, @info, 11) == 0
; vmsrc/apple/soscmd.pla: 0068:             puts(@devname)
; vmsrc/apple/soscmd.pla: 0069:             if volume(@devname, @volname) == 0
; vmsrc/apple/soscmd.pla: 0070:                 puts(" => /")
	!BYTE	$64,$2D			; LLB	[45]
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$28,$00			; LLA	[0]
	!BYTE	$16			; CN	11
	!BYTE	$54			; CALL	_C002
_F006 	!WORD	_C002		
	!BYTE	$4E			; BRTRU	_B008
	!WORD	_B008-*
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$54			; CALL	_X004
_F007 	!WORD	0		
	!BYTE	$28,$0B			; LLA	[11]
	!BYTE	$28,$1C			; LLA	[28]
	!BYTE	$54			; CALL	_C003
_F008 	!WORD	_C003		
	!BYTE	$4E			; BRTRU	_B010
	!WORD	_B010-*
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$20,$3D,$3E,$20,$2F
	!BYTE	$54			; CALL	_X004
_F009 	!WORD	0		
; vmsrc/apple/soscmd.pla: 0071:                 puts(@volname)
; vmsrc/apple/soscmd.pla: 0072:                 putc('/')
; vmsrc/apple/soscmd.pla: 0073:             fin
	!BYTE	$28,$1C			; LLA	[28]
	!BYTE	$54			; CALL	_X004
_F010 	!WORD	0		
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$54			; CALL	_X002
_F011 	!WORD	0		
_B010 
_B011 
; vmsrc/apple/soscmd.pla: 0074:             putln
; vmsrc/apple/soscmd.pla: 0075:         fin
	!BYTE	$54			; CALL	_X003
_F012 	!WORD	0		
_B008 
_B009 
; vmsrc/apple/soscmd.pla: 0076:     next
_B007 
	!BYTE	$A4			; INCBRLE	_B006
	!WORD	_B006-*
_B005 
	!BYTE	$74,$2D			; SLB	[45]
	!BYTE	$30			; DROP 
; vmsrc/apple/soscmd.pla: 0077: end
	!BYTE	$5A,$2E			; LEAVE	46
; vmsrc/apple/soscmd.pla: 0078: def catalog(path)#0
					; path -> [0]
_C005 					; catalog()
; vmsrc/apple/soscmd.pla: 0079:     byte refnum
					; refnum -> [2]
; vmsrc/apple/soscmd.pla: 0080:     byte firstblk
					; firstblk -> [3]
; vmsrc/apple/soscmd.pla: 0081:     byte entrylen, entriesblk
					; entrylen -> [4]
					; entriesblk -> [5]
; vmsrc/apple/soscmd.pla: 0082:     byte i, type, len
					; i -> [6]
					; type -> [7]
					; len -> [8]
; vmsrc/apple/soscmd.pla: 0083:     word entry, catptr
					; entry -> [9]
					; catptr -> [11]
; vmsrc/apple/soscmd.pla: 0084: 
; vmsrc/apple/soscmd.pla: 0085:     if !^path
	!BYTE	$58,$0D,$01		; ENTER	13,1
; vmsrc/apple/soscmd.pla: 0086:         getpfx(path)
; vmsrc/apple/soscmd.pla: 0087:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4E			; BRTRU	_B012
	!WORD	_B012-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C000
_F013 	!WORD	_C000		
	!BYTE	$30			; DROP 
_B012 
_B013 
; vmsrc/apple/soscmd.pla: 0088:     refnum = cmdsys:sysopen(path)
; vmsrc/apple/soscmd.pla: 0089:     if not refnum
; vmsrc/apple/soscmd.pla: 0090:         return
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$6A			; LAW	_X000+8
_F014 	!WORD	0+8		
	!BYTE	$56			; ICAL
	!BYTE	$6C,$02			; DLB	[2]
	!BYTE	$4E			; BRTRU	_B014
	!WORD	_B014-*
	!BYTE	$5A,$0D			; LEAVE	13
; vmsrc/apple/soscmd.pla: 0091:     fin
_B014 
_B015 
; vmsrc/apple/soscmd.pla: 0092:     catptr = heapmark
; vmsrc/apple/soscmd.pla: 0093:     firstblk = 1
; vmsrc/apple/soscmd.pla: 0094:     while cmdsys:sysread(refnum, catptr, 512) == 512
	!BYTE	$54			; CALL	_X012
_F015 	!WORD	0		
	!BYTE	$76,$0B			; SLW	[11]
	!BYTE	$02			; CN	1
	!BYTE	$74,$03			; SLB	[3]
	!BYTE	$50			; BRNCH	_B018
	!WORD	_B018-*
_B016 
; vmsrc/apple/soscmd.pla: 0095:         entry = catptr + 4
; vmsrc/apple/soscmd.pla: 0096:         if firstblk
; vmsrc/apple/soscmd.pla: 0097:             entrylen   = catptr->$23
; vmsrc/apple/soscmd.pla: 0098:             entriesblk = catptr->$24 - 1
; vmsrc/apple/soscmd.pla: 0099:             entry      = entry + entrylen
; vmsrc/apple/soscmd.pla: 0100:         fin
	!BYTE	$66,$0B			; LLW	[11]
	!BYTE	$38,$04			; ADDI	4
	!BYTE	$76,$09			; SLW	[9]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$4C			; BRFLS	_B019
	!WORD	_B019-*
	!BYTE	$66,$0B			; LLW	[11]
	!BYTE	$38,$23			; ADDI	35
	!BYTE	$60			; LB
	!BYTE	$74,$04			; SLB	[4]
	!BYTE	$66,$0B			; LLW	[11]
	!BYTE	$38,$24			; ADDI	36
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
	!BYTE	$74,$05			; SLB	[5]
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$76,$09			; SLW	[9]
_B019 
_B020 
; vmsrc/apple/soscmd.pla: 0101:         for i = firstblk to entriesblk
	!BYTE	$64,$05			; LLB	[5]
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$A0			; BRGT	_B021
	!WORD	_B021-*
_B022 
	!BYTE	$6C,$06			; DLB	[6]
; vmsrc/apple/soscmd.pla: 0102:             if ^entry
; vmsrc/apple/soscmd.pla: 0103:                 ^entry = ^entry & $0F
; vmsrc/apple/soscmd.pla: 0104:                 puts(entry)
; vmsrc/apple/soscmd.pla: 0105:                 type = ' '
; vmsrc/apple/soscmd.pla: 0106:                 when entry->$10
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B024
	!WORD	_B024-*
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$60			; LB
	!BYTE	$3C,$0F			; ANDI	15
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$70			; SB
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$54			; CALL	_X004
_F016 	!WORD	0		
	!BYTE	$2A,$20			; CB	32
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$38,$10			; ADDI	16
	!BYTE	$60			; LB
	!BYTE	$52			; SEL
	!WORD	_B027-*
; vmsrc/apple/soscmd.pla: 0107:                     is $0F // Is it a directory?
_B028 
; vmsrc/apple/soscmd.pla: 0108:                         type = '/'
; vmsrc/apple/soscmd.pla: 0109:                         break
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$50			; BRNCH	_B026
	!WORD	_B026-*
; vmsrc/apple/soscmd.pla: 0110:                     is $FF // SYSTEM file
_B029 
; vmsrc/apple/soscmd.pla: 0111:                         type = '-'
; vmsrc/apple/soscmd.pla: 0112:                         break
	!BYTE	$2A,$2D			; CB	45
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$50			; BRNCH	_B026
	!WORD	_B026-*
; vmsrc/apple/soscmd.pla: 0113:                     is $FE // REL file
_B030 
; vmsrc/apple/soscmd.pla: 0114:                         type = '+'
; vmsrc/apple/soscmd.pla: 0115:                 wend
	!BYTE	$2A,$2B			; CB	43
	!BYTE	$74,$07			; SLB	[7]
	!BYTE	$50			; BRNCH	_B026
	!WORD	_B026-*
_B027 
	!BYTE	$03			; CASEBLOCK
	!WORD	$000F
	!WORD	_B028-*
	!WORD	$00FE
	!WORD	_B030-*
	!WORD	$00FF
	!WORD	_B029-*
_B026 
; vmsrc/apple/soscmd.pla: 0116:                 putc(type)
; vmsrc/apple/soscmd.pla: 0117:                 for len = ^entry to 18
	!BYTE	$64,$07			; LLB	[7]
	!BYTE	$54			; CALL	_X002
_F017 	!WORD	0		
	!BYTE	$2A,$12			; CB	18
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$60			; LB
	!BYTE	$A0			; BRGT	_B031
	!WORD	_B031-*
_B032 
	!BYTE	$6C,$08			; DLB	[8]
; vmsrc/apple/soscmd.pla: 0118:                     putc(' ')
; vmsrc/apple/soscmd.pla: 0119:                 next
	!BYTE	$2A,$20			; CB	32
	!BYTE	$54			; CALL	_X002
_F018 	!WORD	0		
_B033 
	!BYTE	$A4			; INCBRLE	_B032
	!WORD	_B032-*
_B031 
	!BYTE	$74,$08			; SLB	[8]
	!BYTE	$30			; DROP 
; vmsrc/apple/soscmd.pla: 0120:             fin
_B024 
_B025 
; vmsrc/apple/soscmd.pla: 0121:             entry = entry + entrylen
; vmsrc/apple/soscmd.pla: 0122:         next
	!BYTE	$66,$09			; LLW	[9]
	!BYTE	$B0,$04			; ADDLB	[4]
	!BYTE	$76,$09			; SLW	[9]
_B023 
	!BYTE	$A4			; INCBRLE	_B022
	!WORD	_B022-*
_B021 
	!BYTE	$74,$06			; SLB	[6]
	!BYTE	$30			; DROP 
; vmsrc/apple/soscmd.pla: 0123:         firstblk = 0
; vmsrc/apple/soscmd.pla: 0124:     loop
	!BYTE	$00			; CN	0
	!BYTE	$74,$03			; SLB	[3]
_B018 
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$66,$0B			; LLW	[11]
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$6A			; LAW	_X000+12
_F019 	!WORD	0+12		
	!BYTE	$56			; ICAL
	!BYTE	$2C,$00,$02		; CW	512
	!BYTE	$22			; BREQ	_B016
	!WORD	_B016-*
_B017 
; vmsrc/apple/soscmd.pla: 0125:     cmdsys:sysclose(refnum)
; vmsrc/apple/soscmd.pla: 0126:     putln()
; vmsrc/apple/soscmd.pla: 0127: end
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$6A			; LAW	_X000+10
_F020 	!WORD	0+10		
	!BYTE	$56			; ICAL
	!BYTE	$30			; DROP 
	!BYTE	$54			; CALL	_X003
_F021 	!WORD	0		
	!BYTE	$5A,$0D			; LEAVE	13
; vmsrc/apple/soscmd.pla: 0128: def stripchars(strptr)#1
					; strptr -> [0]
_C006 					; stripchars()
; vmsrc/apple/soscmd.pla: 0129:     while ^strptr and ^(strptr + 1) > ' '
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$50			; BRNCH	_B036
	!WORD	_B036-*
_B034 
; vmsrc/apple/soscmd.pla: 0130:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/soscmd.pla: 0131:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F022 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/soscmd.pla: 0132:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B036 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B037
	!WORD	_B037-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$44			; ISGT
_B037 
	!BYTE	$4E			; BRTRU	_B034
	!WORD	_B034-*
_B035 
; vmsrc/apple/soscmd.pla: 0133:     return ^strptr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/soscmd.pla: 0134: end
; vmsrc/apple/soscmd.pla: 0135: def stripspaces(strptr)#0
					; strptr -> [0]
_C007 					; stripspaces()
; vmsrc/apple/soscmd.pla: 0136:     while ^strptr and ^(strptr + ^strptr) <= ' '
	!BYTE	$58,$02,$01		; ENTER	2,1
	!BYTE	$50			; BRNCH	_B040
	!WORD	_B040-*
_B038 
; vmsrc/apple/soscmd.pla: 0137:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/soscmd.pla: 0138:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B040 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B041
	!WORD	_B041-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$34			; DUP
	!BYTE	$60			; LB
	!BYTE	$82			; ADD 
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B041 
	!BYTE	$4E			; BRTRU	_B038
	!WORD	_B038-*
_B039 
; vmsrc/apple/soscmd.pla: 0139:     while ^strptr and ^(strptr + 1) <= ' '
	!BYTE	$50			; BRNCH	_B044
	!WORD	_B044-*
_B042 
; vmsrc/apple/soscmd.pla: 0140:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/soscmd.pla: 0141:         ^strptr--
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F023 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/soscmd.pla: 0142:     loop
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B044 
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B045
	!WORD	_B045-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
_B045 
	!BYTE	$4E			; BRTRU	_B042
	!WORD	_B042-*
_B043 
; vmsrc/apple/soscmd.pla: 0143: end
	!BYTE	$5A,$02			; LEAVE	2
; vmsrc/apple/soscmd.pla: 0144: def striptrail(strptr)#1
					; strptr -> [0]
_C008 					; striptrail()
; vmsrc/apple/soscmd.pla: 0145:     byte i
					; i -> [2]
; vmsrc/apple/soscmd.pla: 0146: 
; vmsrc/apple/soscmd.pla: 0147:     for i = 1 to ^strptr
	!BYTE	$58,$03,$01		; ENTER	3,1
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$02			; CN	1
	!BYTE	$A0			; BRGT	_B046
	!WORD	_B046-*
_B047 
	!BYTE	$6C,$02			; DLB	[2]
; vmsrc/apple/soscmd.pla: 0148:         if ^(strptr + i) <= ' '
; vmsrc/apple/soscmd.pla: 0149:             ^strptr = i - 1
; vmsrc/apple/soscmd.pla: 0150:             break
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$B0,$02			; ADDLB	[2]
	!BYTE	$60			; LB
	!BYTE	$2A,$20			; CB	32
	!BYTE	$4A			; ISLE
	!BYTE	$4C			; BRFLS	_B049
	!WORD	_B049-*
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$8E			; DECR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
	!BYTE	$50			; BRNCH	_B046
	!WORD	_B046-*
; vmsrc/apple/soscmd.pla: 0151:         fin
_B049 
_B050 
; vmsrc/apple/soscmd.pla: 0152:     next
_B048 
	!BYTE	$A4			; INCBRLE	_B047
	!WORD	_B047-*
_B046 
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$30			; DROP 
; vmsrc/apple/soscmd.pla: 0153:     return strptr
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/soscmd.pla: 0154: end
; vmsrc/apple/soscmd.pla: 0155: def parsecmd(strptr)#1
					; strptr -> [0]
_C009 					; parsecmd()
; vmsrc/apple/soscmd.pla: 0156:     byte cmd
					; cmd -> [2]
; vmsrc/apple/soscmd.pla: 0157: 
; vmsrc/apple/soscmd.pla: 0158:     cmd = 0
	!BYTE	$58,$03,$01		; ENTER	3,1
; vmsrc/apple/soscmd.pla: 0159:     stripspaces(strptr)
; vmsrc/apple/soscmd.pla: 0160:     if ^strptr
; vmsrc/apple/soscmd.pla: 0161:         cmd = ^(strptr + 1)
; vmsrc/apple/soscmd.pla: 0162:         memcpy(strptr + 1, strptr + 2, ^strptr)
; vmsrc/apple/soscmd.pla: 0163:         ^strptr--
	!BYTE	$00			; CN	0
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C007
_F024 	!WORD	_C007		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B051
	!WORD	_B051-*
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$74,$02			; SLB	[2]
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$8C			; INCR
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$38,$02			; ADDI	2
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$54			; CALL	_X018
_F025 	!WORD	0		
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$60			; LB
	!BYTE	$8E			; DECR
; vmsrc/apple/soscmd.pla: 0164:     fin
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$70			; SB
_B051 
_B052 
; vmsrc/apple/soscmd.pla: 0165:     stripspaces(strptr)
; vmsrc/apple/soscmd.pla: 0166:     return cmd
	!BYTE	$66,$00			; LLW	[0]
	!BYTE	$54			; CALL	_C007
_F026 	!WORD	_C007		
	!BYTE	$64,$02			; LLB	[2]
	!BYTE	$5A,$03			; LEAVE	3
; vmsrc/apple/soscmd.pla: 0167: end
; vmsrc/apple/soscmd.pla: 0168: //
; vmsrc/apple/soscmd.pla: 0169: // Command line handler
; vmsrc/apple/soscmd.pla: 0170: //
; vmsrc/apple/soscmd.pla: 0171: def shell#1
_C010 					; shell()
; vmsrc/apple/soscmd.pla: 0172:     byte textmode[3]
					; textmode -> [0]
; vmsrc/apple/soscmd.pla: 0173:     byte prefix[64]
					; prefix -> [3]
; vmsrc/apple/soscmd.pla: 0174:     byte err[]
					; err -> [67]
; vmsrc/apple/soscmd.pla: 0175:     word cmdptr
					; cmdptr -> [67]
; vmsrc/apple/soscmd.pla: 0176: 
; vmsrc/apple/soscmd.pla: 0177:     //
; vmsrc/apple/soscmd.pla: 0178:     // Copy AUTORUN commmand line
; vmsrc/apple/soscmd.pla: 0179:     //
; vmsrc/apple/soscmd.pla: 0180:     cmdptr = strcpy(heapmark, cmdsys:cmdline)
	!BYTE	$58,$45,$00		; ENTER	69,0
; vmsrc/apple/soscmd.pla: 0181:     //
; vmsrc/apple/soscmd.pla: 0182:     // Handle commands.
; vmsrc/apple/soscmd.pla: 0183:     //
; vmsrc/apple/soscmd.pla: 0184:     getpfx(@prefix))
; vmsrc/apple/soscmd.pla: 0185:     repeat
	!BYTE	$54			; CALL	_X012
_F027 	!WORD	0		
	!BYTE	$6A			; LAW	_X000+4
_F028 	!WORD	0+4		
	!BYTE	$54			; CALL	_X019
_F029 	!WORD	0		
	!BYTE	$76,$43			; SLW	[67]
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_C000
_F030 	!WORD	_C000		
	!BYTE	$30			; DROP 
_B054 
; vmsrc/apple/soscmd.pla: 0186:         if ^cmdptr
; vmsrc/apple/soscmd.pla: 0187:             when toupper(parsecmd(cmdptr))
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$60			; LB
	!BYTE	$4C			; BRFLS	_B056
	!WORD	_B056-*
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_C009
_F031 	!WORD	_C009		
	!BYTE	$54			; CALL	_X021
_F032 	!WORD	0		
	!BYTE	$52			; SEL
	!WORD	_B059-*
; vmsrc/apple/soscmd.pla: 0188:                 is 'C'
_B060 
; vmsrc/apple/soscmd.pla: 0189:                     catalog(cmdptr)
; vmsrc/apple/soscmd.pla: 0190:                     break
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_C005
_F033 	!WORD	_C005		
	!BYTE	$50			; BRNCH	_B058
	!WORD	_B058-*
; vmsrc/apple/soscmd.pla: 0191:                 is 'P'
_B061 
; vmsrc/apple/soscmd.pla: 0192:                     if ^cmdptr and ^(cmdptr + 1) <> '/'
; vmsrc/apple/soscmd.pla: 0193:                         strcat(@prefix, cmdptr)
; vmsrc/apple/soscmd.pla: 0194:                     else
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$60			; LB
	!BYTE	$AC			; BRAND	_B062
	!WORD	_B062-*
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$8C			; INCR
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$42			; ISNE
_B062 
	!BYTE	$4C			; BRFLS	_B063
	!WORD	_B063-*
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_X020
_F034 	!WORD	0		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B064
	!WORD	_B064-*
_B063 
; vmsrc/apple/soscmd.pla: 0195:                         strcpy(@prefix, cmdptr)
; vmsrc/apple/soscmd.pla: 0196:                     fin
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_X019
_F035 	!WORD	0		
	!BYTE	$30			; DROP 
_B064 
; vmsrc/apple/soscmd.pla: 0197:                     setpfx(@prefix)
; vmsrc/apple/soscmd.pla: 0198:                     break
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_C001
_F036 	!WORD	_C001		
	!BYTE	$30			; DROP 
	!BYTE	$50			; BRNCH	_B058
	!WORD	_B058-*
; vmsrc/apple/soscmd.pla: 0199:                 is '/'
_B065 
; vmsrc/apple/soscmd.pla: 0200:                     repeat
_B067 
; vmsrc/apple/soscmd.pla: 0201:                         prefix--
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$8E			; DECR
; vmsrc/apple/soscmd.pla: 0202:                     until prefix[prefix] == '/'
	!BYTE	$74,$03			; SLB	[3]
_B068 
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$B0,$03			; ADDLB	[3]
	!BYTE	$60			; LB
	!BYTE	$2A,$2F			; CB	47
	!BYTE	$24			; BRNE	_B067
	!WORD	_B067-*
_B066 
; vmsrc/apple/soscmd.pla: 0203:                     if prefix > 1
; vmsrc/apple/soscmd.pla: 0204:                         setpfx(@prefix)
; vmsrc/apple/soscmd.pla: 0205:                     fin
	!BYTE	$64,$03			; LLB	[3]
	!BYTE	$02			; CN	1
	!BYTE	$44			; ISGT
	!BYTE	$4C			; BRFLS	_B069
	!WORD	_B069-*
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_C001
_F037 	!WORD	_C001		
	!BYTE	$30			; DROP 
_B069 
_B070 
; vmsrc/apple/soscmd.pla: 0206:                     break
	!BYTE	$50			; BRNCH	_B058
	!WORD	_B058-*
; vmsrc/apple/soscmd.pla: 0207:                 is 'S'
_B071 
; vmsrc/apple/soscmd.pla: 0208:                     setpfx(cmdptr)
; vmsrc/apple/soscmd.pla: 0209:                     strcat(getpfx(cmdsys:syspath), "SYS/"))
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_C001
_F038 	!WORD	_C001		
	!BYTE	$30			; DROP 
	!BYTE	$6A			; LAW	_X000+2
_F039 	!WORD	0+2		
	!BYTE	$54			; CALL	_C000
_F040 	!WORD	_C000		
	!BYTE	$2E			; CS
	!BYTE	$04
	!BYTE	$53,$59,$53,$2F
	!BYTE	$54			; CALL	_X020
_F041 	!WORD	0		
	!BYTE	$30			; DROP 
; vmsrc/apple/soscmd.pla: 0210:                     break
	!BYTE	$50			; BRNCH	_B058
	!WORD	_B058-*
; vmsrc/apple/soscmd.pla: 0211:                 is 'V'
_B072 
; vmsrc/apple/soscmd.pla: 0212:                     volumes
; vmsrc/apple/soscmd.pla: 0213:                     break
	!BYTE	$54			; CALL	_C004
_F042 	!WORD	_C004		
	!BYTE	$50			; BRNCH	_B058
	!WORD	_B058-*
; vmsrc/apple/soscmd.pla: 0214:                 is '+'
_B073 
; vmsrc/apple/soscmd.pla: 0215:                     return striptrail(cmdptr)
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_C008
_F043 	!WORD	_C008		
	!BYTE	$5A,$45			; LEAVE	69
; vmsrc/apple/soscmd.pla: 0216:                     break
	!BYTE	$50			; BRNCH	_B058
	!WORD	_B058-*
; vmsrc/apple/soscmd.pla: 0217:                 otherwise
_B059 
	!BYTE	$06			; CASEBLOCK
	!WORD	$002B
	!WORD	_B073-*
	!WORD	$002F
	!WORD	_B065-*
	!WORD	$0043
	!WORD	_B060-*
	!WORD	$0050
	!WORD	_B061-*
	!WORD	$0053
	!WORD	_B071-*
	!WORD	$0056
	!WORD	_B072-*
; vmsrc/apple/soscmd.pla: 0218:                     puts("?\n")
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$3F,$0D
	!BYTE	$54			; CALL	_X004
_F044 	!WORD	0		
; vmsrc/apple/soscmd.pla: 0219:             wend
_B058 
; vmsrc/apple/soscmd.pla: 0220:             if cmdsys.syserr
; vmsrc/apple/soscmd.pla: 0221:                 err = cmdsys.syserr
; vmsrc/apple/soscmd.pla: 0222:                 puts("ERR:$")
	!BYTE	$68			; LAB	_X000+16
_F045 	!WORD	0+16		
	!BYTE	$4C			; BRFLS	_B074
	!WORD	_B074-*
	!BYTE	$68			; LAB	_X000+16
_F046 	!WORD	0+16		
	!BYTE	$74,$43			; SLB	[67]
	!BYTE	$2E			; CS
	!BYTE	$05
	!BYTE	$45,$52,$52,$3A,$24
	!BYTE	$54			; CALL	_X004
_F047 	!WORD	0		
; vmsrc/apple/soscmd.pla: 0223:                 putb(err)
; vmsrc/apple/soscmd.pla: 0224:             else
	!BYTE	$64,$43			; LLB	[67]
	!BYTE	$54			; CALL	_X008
_F048 	!WORD	0		
	!BYTE	$50			; BRNCH	_B075
	!WORD	_B075-*
_B074 
; vmsrc/apple/soscmd.pla: 0225:                 puts("OK")
	!BYTE	$2E			; CS
	!BYTE	$02
	!BYTE	$4F,$4B
	!BYTE	$54			; CALL	_X004
_F049 	!WORD	0		
; vmsrc/apple/soscmd.pla: 0226:             fin
_B075 
; vmsrc/apple/soscmd.pla: 0227:             putln
; vmsrc/apple/soscmd.pla: 0228:         fin
	!BYTE	$54			; CALL	_X003
_F050 	!WORD	0		
_B056 
_B057 
; vmsrc/apple/soscmd.pla: 0229:         puts(getpfx(@prefix))
; vmsrc/apple/soscmd.pla: 0230:         cmdptr = gets($BA)
; vmsrc/apple/soscmd.pla: 0231:         strcpy(cmdsys:cmdline, cmdptr)
; vmsrc/apple/soscmd.pla: 0232:     until 0
	!BYTE	$28,$03			; LLA	[3]
	!BYTE	$54			; CALL	_C000
_F051 	!WORD	_C000		
	!BYTE	$54			; CALL	_X004
_F052 	!WORD	0		
	!BYTE	$2A,$BA			; CB	186
	!BYTE	$54			; CALL	_X007
_F053 	!WORD	0		
	!BYTE	$76,$43			; SLW	[67]
	!BYTE	$6A			; LAW	_X000+4
_F054 	!WORD	0+4		
	!BYTE	$66,$43			; LLW	[67]
	!BYTE	$54			; CALL	_X019
_F055 	!WORD	0		
	!BYTE	$30			; DROP 
_B055 
	!BYTE	$50			; BRNCH	_B054
	!WORD	_B054-*
_B053 
; vmsrc/apple/soscmd.pla: 0233:     return 0
	!BYTE	$00			; CN	0
	!BYTE	$5A,$45			; LEAVE	69
; vmsrc/apple/soscmd.pla: 0234: end
; vmsrc/apple/soscmd.pla: 0235: //
; vmsrc/apple/soscmd.pla: 0236: // Save pointer to command line handler
; vmsrc/apple/soscmd.pla: 0237: //
; vmsrc/apple/soscmd.pla: 0238: *cmdparser = @shell
_INIT 
; vmsrc/apple/soscmd.pla: 0239: done
	!BYTE	$26			; LA	_C010+0
_F056 	!WORD	_C010+0		
	!BYTE	$7A,$F0,$A0		; SAW	41200
	!BYTE	$00			; CN	0
	!BYTE	$5C			; RET
_SYSFLAGS	=	0
_DEFCNT	=	12
_SEGEND 
;
; RE-LOCATEABLE DICTIONARY
;
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C000		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C001		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C002		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C003		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C004		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C005		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C006		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C007		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C008		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C009		
	!BYTE	$00
	!BYTE	$02			; CODE TABLE FIXUP
	!WORD	_C010		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F000-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F001-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F002-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F003-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F004-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F005-_SEGBEGIN		
	!BYTE	11			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F006-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F007-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F008-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F009-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F010-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F011-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F012-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F013-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F014-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F015-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F016-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F017-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F018-_SEGBEGIN		
	!BYTE	2			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F019-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F020-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F021-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F022-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F023-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F024-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F025-_SEGBEGIN		
	!BYTE	18			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F026-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F027-_SEGBEGIN		
	!BYTE	12			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F028-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F029-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F030-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F031-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F032-_SEGBEGIN		
	!BYTE	21			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F033-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F034-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F035-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F036-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F037-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F038-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F039-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F040-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F041-_SEGBEGIN		
	!BYTE	20			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F042-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F043-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F044-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F045-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F046-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F047-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F048-_SEGBEGIN		
	!BYTE	8			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F049-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F050-_SEGBEGIN		
	!BYTE	3			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F051-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F052-_SEGBEGIN		
	!BYTE	4			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F053-_SEGBEGIN		
	!BYTE	7			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F054-_SEGBEGIN		
	!BYTE	0			; ESD INDEX
	!BYTE	$91			; EXTERNAL FIXUP
	!WORD	_F055-_SEGBEGIN		
	!BYTE	19			; ESD INDEX
	!BYTE	$81			; INTERNAL FIXUP
	!WORD	_F056-_SEGBEGIN		
	!BYTE	$00
	!BYTE	$00			; END OF RLD
;
; EXTERNAL/ENTRY SYMBOL DICTIONARY
;
	; DCI STRING: CMDSYS
	!BYTE	$C3,$CD,$C4,$D3,$D9,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	0			; ESD INDEX
	; DCI STRING: PUTC
	!BYTE	$D0,$D5,$D4,$43
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	2			; ESD INDEX
	; DCI STRING: PUTLN
	!BYTE	$D0,$D5,$D4,$CC,$4E
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	3			; ESD INDEX
	; DCI STRING: PUTS
	!BYTE	$D0,$D5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	4			; ESD INDEX
	; DCI STRING: GETS
	!BYTE	$C7,$C5,$D4,$53
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	7			; ESD INDEX
	; DCI STRING: PUTB
	!BYTE	$D0,$D5,$D4,$42
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	8			; ESD INDEX
	; DCI STRING: SYSCALL
	!BYTE	$D3,$D9,$D3,$C3,$C1,$CC,$4C
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	11			; ESD INDEX
	; DCI STRING: HEAPMARK
	!BYTE	$C8,$C5,$C1,$D0,$CD,$C1,$D2,$4B
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	12			; ESD INDEX
	; DCI STRING: MEMCPY
	!BYTE	$CD,$C5,$CD,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	18			; ESD INDEX
	; DCI STRING: STRCPY
	!BYTE	$D3,$D4,$D2,$C3,$D0,$59
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	19			; ESD INDEX
	; DCI STRING: STRCAT
	!BYTE	$D3,$D4,$D2,$C3,$C1,$54
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	20			; ESD INDEX
	; DCI STRING: TOUPPER
	!BYTE	$D4,$CF,$D5,$D0,$D0,$C5,$52
	!BYTE	$10			; EXTERNAL SYMBOL FLAG
	!WORD	21			; ESD INDEX
	!BYTE	$00			; END OF ESD
